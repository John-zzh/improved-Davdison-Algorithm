curpath /scratch/pbsjobs/job.16219613.hpc
lib.num_threads() =  20
at beginning memory used: 0.05 GB
mol.max_memory 60000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul9.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

'''wb97x  methanol, 1e-5
  sTDDFT no truncate [6.46636611 8.18031534 8.38140651 9.45011415 9.5061059 ]
            40 eV    [6.46746642 8.18218267 8.38314651 9.45214869 9.5126739 ]
    sTDA no truncate [6.46739711 8.18182208 8.38358473 9.45195554 9.52133129]
            40 eV    [6.46827111 8.18334703 8.38483801 9.45361525 9.52562255]
'''
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

def gen_args():
    parser = argparse.ArgumentParser(description='Davidson')
    parser.add_argument('-x', '--xyzfile',          type=str,   default='NA',  help='xyz filename (molecule.xyz)')
    parser.add_argument('-chk', '--checkfile',      type=bool,  default=False, help='checkpoint filename (.chk)')
    parser.add_argument('-m', '--method',           type=str,   default='RKS', help='RHF RKS UHF UKS')
    parser.add_argument('-f', '--functional',       type=str,   default='NA',  help='xc functional')
    parser.add_argument('-b', '--basis_set',        type=str,   default='NA',  help='basis set')
    parser.add_argument('-df', '--density_fit',     type=bool,  default=True,  help='density fitting turn on')
    parser.add_argument('-g', '--grid_level',       type=int,   default='3',   help='0-9, 9 is best')

    parser.add_argument('-n','--nstates',           type=int,   default = 4,      help='number of excited states')
    parser.add_argument('-pytd','--pytd',           type=bool,  default = False , help='whether to compare with PySCF TDDFT')

    parser.add_argument('-TDA','--TDA',             type=bool,  default = False, help='perform TDA')
    parser.add_argument('-TDDFT','--TDDFT',         type=bool,  default = False, help='perform TDDFT')
    parser.add_argument('-dynpol','--dynpol',       type=bool,  default = False, help='perform dynamic polarizability')
    parser.add_argument('-omega','--dynpol_omega',  type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
    parser.add_argument('-stapol','--stapol',       type=bool,  default = False, help='perform static polarizability')
    parser.add_argument('-sTDA','--sTDA',           type=bool,  default = False, help='perform sTDA calculation')
    parser.add_argument('-sTDDFT','--sTDDFT',       type=bool,  default = False, help='perform sTDDFT calculation')
    parser.add_argument('-TT','--Truncate_test',    type=bool,  default = False, help='test the wall time for different virtual truncation')

    parser.add_argument('-TV','--truncate_virtual', type=float, default = 40,    help='the threshold to truncate virtual orbitals, in eV')

    parser.add_argument('-o','--ip_options',        type=int,   default = [0], nargs='+', help='0-7')
    parser.add_argument('-t','--conv_tolerance',    type=float, default= 1e-5, help='residual norm Convergence threhsold')

    parser.add_argument('-it','--initial_TOL',      type=float, default= 1e-3, help='conv for the inital guess')
    parser.add_argument('-pt','--precond_TOL',      type=float, default= 1e-2, help='conv for TDA preconditioner')

    parser.add_argument('-ei','--extrainitial',     type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
    parser.add_argument('-max','--max',             type=int,   default= 30,   help='max iterations')

    parser.add_argument('-et','--eigensolver_tol',  type=float, default= 1e-5, help='conv for new guess generator in new_ES')
    parser.add_argument('-M','--memory',            type=int,   default= 4000, help='max_memory')
    parser.add_argument('-v','--verbose',           type=int,   default= 5,    help='mol.verbose = 3,4,5')

    parser.add_argument('-be','--beta',             type=float, default= [],    nargs='+', help='beta = 0.83')
    parser.add_argument('-al','--alpha',            type=float, default= [],    nargs='+', help='alpha = 0.83')

    args = parser.parse_args()
    if args.dynpol == True and args.dynpol_omega == []:
        raise ValueError('External Perturbation ω cannot be None')
    return args
args = gen_args()

def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024**3
    print('{} memory used: {:<.2f} GB'.format(hint, memory))

show_memory_info('at beginning')

'''read xyz file and delete its first two lines'''
basename = args.xyzfile.split('.',1)[0]

def SCF_kernel():
    kernel_0 = time.time()
    f = open(args.xyzfile)
    atom_coordinates = f.readlines()
    del atom_coordinates[:2]
    '''build geometry in PySCF'''
    mol = gto.Mole()
    mol.atom = atom_coordinates
    mol.basis = args.basis_set
    mol.verbose = args.verbose
    mol.max_memory = args.memory
    print('mol.max_memory', mol.max_memory)
    mol.build(parse_arg = False)
    '''DFT or HF'''
    if args.method == 'RKS':
        mf = dft.RKS(mol)
    elif args.method == 'UKS':
        mf = dft.UKS(mol)
    elif args.method == 'RHF':
        mf = scf.RHF(mol)
    elif args.method == 'UHF':
        mf = scf.UHF(mol)
    if 'KS' in args.method:
        print('RKS')
        mf.xc = args.functional
        mf.grids.level = args.grid_level
    else:
        print('HF')
    if args.density_fit:
        mf = mf.density_fit()
        print('Density fitting turned on')
    if args.checkfile == True:
        '''use the *.chk file as scf input'''
        mf.chkfile = basename + '_' + args.functional + '.chk'
        mf.init_guess = 'chkfile'
    mf.conv_tol = 1e-10
    print ('Molecule built')
    print ('Calculating SCF Energy...')
    mf.kernel()

    kernel_1 = time.time()
    kernel_t = kernel_1 - kernel_0

    return mol, mf, kernel_t

mol, mf, kernel_t = SCF_kernel()

print ('SCF Done after %.2f'%kernel_t, 'seconds')

show_memory_info('after SCF')

'''Collect everything needed from PySCF'''

Hartree_to_eV = 27.211386245988

def gen_global_var():
    '''TDA_vind & TDDFT_vind are ab-initio matrix vector multiplication function
    '''
    td = tddft.TDA(mf)
    TD = tddft.TDDFT(mf)
    TDA_vind, hdiag = td.gen_vind(mf)
    TDDFT_vind, Hdiag = TD.gen_vind(mf)

    Natm = mol.natm
    '''mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
       N_bf is the total amount of MOs
       coefficient_matrix_C is the unorthonormalized coefficient matrix
       if no truncation, then max_vir = n_vir and n_occ + max_vir = N_bf
    '''
    mo_occ = mf.mo_occ
    coefficient_matrix_C = mf.mo_coeff
    N_bf = len(mo_occ)
    n_occ = len(np.where(mo_occ > 0)[0])
    n_vir = len(np.where(mo_occ == 0)[0])
    delta_hdiag = hdiag.reshape(n_occ, n_vir)
    A_size = n_occ * n_vir

    tol_eV = args.truncate_virtual/Hartree_to_eV
    homo_vir = delta_hdiag[-1,:]
    max_vir = len(np.where(homo_vir <= tol_eV)[0])

    max_vir_hdiag = delta_hdiag[:,:max_vir]

    A_reduced_size = n_occ * max_vir

    '''R_array is inter-particle distance array
       unit == ’Bohr’, 5.29177210903(80)×10^(−11) m
    '''
    R_array = pyscf.gto.mole.inter_distance(mol, coords=None)

    print('hdiag shape', hdiag.shape)
    print('n_occ = ', n_occ)
    print('n_vir = ', n_vir)
    print('max_vir = ', max_vir)
    print('A_size = ', A_size)
    print('A_reduced_size =', A_reduced_size)

    return TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
                    max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
                        n_vir, max_vir, A_size, A_reduced_size, R_array

TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
        max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
             n_vir, max_vir, A_size, A_reduced_size, R_array = gen_global_var()

def TDA_matrix_vector(V):
    '''return AX'''
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X
       this is not the optimum way, but the only way in PySCF
    '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1

def gen_HARDNESS():
    '''a dictionary of chemical hardness, by mappig two lists:
       list of elements 1-94
       list of hardness for elements 1-94, floats,in Hartree
    '''
    elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', \
    'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', \
    'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', \
    'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', \
    'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', \
    'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\
    'Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', \
    'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
    hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,\
    0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,\
    0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,\
    0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,\
    0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,\
    0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,\
    0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,\
    0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,\
    0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,\
    0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,\
    0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,\
    0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,\
    0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,\
    0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,\
    0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,\
    0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
    HARDNESS = dict(zip(elements,hardness))
    return HARDNESS

def matrix_power(S,a):
    '''X == S^a'''
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    return X

def orthonormalize(C):
    ''' produce orthonormalized coefficient matrix C, N_bf * N_bf
        S = mf.get_ovlp()  is basis overlap matrix
        S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
        np.dot(C.T,C) is a an identity matrix
    '''
    S = mf.get_ovlp()
    X = matrix_power(S, 0.5)
    C = np.dot(X,C)
    return C

def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    '''NA is for Hartree-Fork'''
    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    Func_ax = dict(zip(hybride_F, hybride_paramt))

    beta1 = 0.2
    beta2 = 1.83
    alpha1 = 1.42
    alpha2 = 0.48
    '''RSH functionals have specific a_x, beta, alpha values;
       hybride fucntionals have fixed alpha12 and beta12 values,
       with different a_x values, by which create beta, alpha
    '''
    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]
    elif args.functional in hybride_F:
        a_x = Func_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)

    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

def gen_gammaJK():
    '''creat GammaK and GammaK matrix
       mol.atom_pure_symbol(atom_id) returns the element symbol
    '''
    HARDNESS = gen_HARDNESS()
    a = [HARDNESS[mol.atom_pure_symbol(atom_id)] for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2
    GammaJ = (R_array**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R_array**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

def generateQ():
    '''build q_iajb tensor'''
    C = orthonormalize(coefficient_matrix_C)
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

def gen_QJK(max_vir=max_vir):

    '''pre-calculate and store the Q-Gamma rank 3 tensor
       qia * gamma * qjb -> qia GK_q_jb
    '''
    Qstart = time.time()
    q_tensors = generateQ()
    GammaJ, GammaK = gen_gammaJK()

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)
    Qend = time.time()
    Q_time = Qend - Qstart
    print('Q-Gamma tensors building time = %.2f'%Q_time)
    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()

show_memory_info('after Q matrix')

def gen_iajb_ijab_ibja_delta_fly(max_vir = max_vir, \
                                    q_ij = q_ij, \
                                    q_ab = q_ab, \
                                    q_ia = q_ia , \
                                 GK_q_jb = GK_q_jb, \
                                 GJ_q_ab = GJ_q_ab):
    '''define sTDA on-the-fly two electron intergeral (pq|rs)
       A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v
       iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
       ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)
    '''
    def iajb_fly(V):
        '''(ia|jb) '''
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        return iajb_V

    def ijab_fly(V):
        '''(ij|ab) '''
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        return ijab_V

    def ibja_fly(V):
        '''the Forck exchange energy in B matrix
           (ib|ja)
        '''
        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        return ibja_V

    def delta_fly(V):
        '''delta_hdiag.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_hdiag, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''max_vir_hdiag.shape = (n_occ, max_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir = max_vir, \
                              iajb_fly = iajb_fly, \
                              ijab_fly = ijab_fly, \
                              ibja_fly = ibja_fly, \
                     delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        '''return AX'''
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''return AX+BY and AY+BX
           sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
           sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        '''return (A+B)X = delta_fly(V) + 4*iajb_fly(V)
           - ijab_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir, -1)
        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)
        U = U.reshape(n_occ*max_vir, -1)

        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

def Gram_Schmidt_bvec(A, bvec):
    '''orthonormalize vector b against all vectors in A
       b = b - A*(A.T*b)
       suppose A is orthonormalized
    '''
    if A.shape[1] != 0:
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    '''orthonormalize vector |x,y> against all vectors in |V,W>'''
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)
    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    '''V is a vectors holder
       count is the amount of vectors that already sit in the holder
       nvec is amount of new vectors intended to fill in the V
       count will be final amount of vectors in V
    '''
    nvec = np.shape(vecs)[1]
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize
        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count
    return V, new_count

def S_symmetry_orthogonal(x,y):
    '''symmetrically orthogonalize the vectors |x,y> and |y,x>
       as close to original vectors as possible
    '''
    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A

def check_orthonormal(A):
    '''define the orthonormality of a matrix A as the norm of (A.T*A - I)'''
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c

def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    '''put X_new into V, and Y_new into W
       m: the amount of vectors that already on V or W
       nvec: amount of new vectors intended to put in the V and W
    '''
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]

    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):
        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart

        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m

def solve_AX_Xla_B(A, omega, Q):
    '''AX - XΩ  = Q
       A, Ω, Q are known, solve X
    '''
    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)
    X *= Qnorm

    return X

def TDA_A_diag_initial_guess(m, hdiag = hdiag):
    '''m is the amount of initial guesses'''
    hdiag = hdiag.reshape(-1,)
    V_size = hdiag.shape[0]
    Dsort = hdiag.argsort()
    energies = hdiag[Dsort][:m]*Hartree_to_eV
    V = np.zeros((V_size, m))
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V, energies

def TDA_A_diag_preconditioner(residual, sub_eigenvalue, current_dic = None,\
                            hdiag = hdiag, tol = None, full_guess=None, \
                        return_index=None, W_H=None, V_H=None, sub_A_H=None):
    '''DX = XΩ'''
    k = np.shape(residual)[1]
    t = 1e-14
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    '''force all small values not in [-t,t]'''
    D = np.where( abs(D) < t, np.sign(D)*t, D)
    new_guess = residual/D

    if current_dic != None:
        return new_guess, current_dic
    else:
        return new_guess

def sTDA_eigen_solver(k, tol=args.initial_TOL):
    '''A'X = XΩ'''
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    max = 30

    '''m is size of subspace'''
    m = 0
    new_m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)

    '''V is subsapce basis
       W is transformed guess vectors'''
    V[:, :new_m],initial_energies = TDA_A_diag_initial_guess(\
                                            new_m, hdiag = max_vir_hdiag)
    for i in range(max):
        '''create subspace'''
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)

        '''Diagonalize the subspace Hamiltonian, and sorted.
        sub_eigenvalue[:k] are smallest k eigenvalues'''
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])

        '''residual = AX - XΩ = AVx - XΩ = Wx - XΩ'''
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess*sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        '''precondition the unconverged residuals'''
        new_guess = TDA_A_diag_preconditioner(\
                        residual = residual[:,index],\
                  sub_eigenvalue = sub_eigenvalue[:k][index],\
                           hdiag = max_vir_hdiag)

        '''orthonormalize the new guess against basis and put into V holder'''
        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalized in', i, 'steps; ', '%.4f'%sTDA_D, 'seconds' )
    print('threshold =', tol)
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*Hartree_to_eV)

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    omega = sub_eigenvalue[:k]*Hartree_to_eV
    return U, omega

def sTDA_preconditioner(residual, sub_eigenvalue, tol=args.precond_TOL,\
                        current_dic=None, full_guess=None, return_index=None,\
                        W_H=None, V_H=None, sub_A_H=None):
    '''sTDA preconditioner
       (A - Ω*I)^-1 P = X
       AX - XΩ = P
       P is residuals (in big Davidson's loop) to be preconditioned
    '''
    p_start = time.time()

    '''number of vectors to be preconditioned'''
    N_vectors = residual.shape[1]
    Residuals = residual.reshape(n_occ,n_vir,-1)
    omega = sub_eigenvalue
    P = Residuals[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P = P/pnorm

    start = time.time()
    tol = args.precond_TOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    '''now V and W are empty holders, 0 vectors
       W = sTDA_mv(V)
       count is the amount of vectors that already sit in the holder
       in each iteration, V and W will be filled/updated with new guess basis
       which is the preconditioned residuals
    '''

    '''initial guess: DX - XΩ = P
       Dp is the preconditioner
       <t: returns np.sign(D)*t; else: D
    '''
    t = 1e-10
    Dp = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - omega
    Dp = np.where(abs(Dp)<t, \
                                        np.sign(Dp)*t, Dp)
    Dp = Dp.reshape(n_occ, n_vir, -1)
    D = Dp[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    '''generate initial guess'''
    Xig = P*inv_D
    count = 0
    V, new_count = Gram_Schmidt_fill_holder(V, count, Xig)

    origin_dic = current_dic.copy()
    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0

    for i in range(max):

        '''project sTDA_A matrix and vector P into subspace'''
        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        substart = time.time()
        sub_P= np.dot(V[:,:new_count].T, P)
        sub_A = np.dot(V[:,:new_count].T, W[:,:new_count])
        subend = time.time()
        subgencost += subend - substart

        sub_A = symmetrize(sub_A)
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, omega, sub_P)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:new_count], sub_guess)
        residual = np.dot(W[:,:new_count], sub_guess) - full_guess*omega - P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append(\
                                    {'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index of unconverged states'''
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''precondition the unconverged residuals'''
        new_guess = residual[:,index]*inv_D[:,index]


        GSstart = time.time()
        count = new_count
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart

    p_end = time.time()
    p_cost = p_end - p_start

    if i == (max -1):
        print('_____sTDA Preconditioner Failed Due to Iteration Limit _______')
        print('failed after ', i, 'steps,', '%.4f'%p_cost,'s')
        print('orthonormality of V', check_orthonormal(V[:,:count]))
        print('current residual norms', r_norms)
    else:
        print('sTDA precond Done after', i, 'steps;', '%.4f'%p_cost,'seconds')

    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['subgencost', 'mvcost', 'GScost', 'subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/p_cost))
    full_guess *= pnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = P2'''
        P2 = Residuals[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = Dp[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)

    '''if we want to know more about the preconditioning process,
        return the current_dic, rather than origin_dic'''
    if current_dic != None:
        return U, origin_dic
    else:
        return U

def Jacobi_preconditioner(residual, sub_eigenvalue, current_dic, full_guess,\
                return_index = None, W_H = None, V_H = None, sub_A_H = None):
    '''(1-uu*)(A-Ω*I)(1-uu*)t = -B
       B is residual, we want to solve t
       z approximates t
       z = (A-Ω*I)^(-1)*(-B) - α(A-Ω*I)^(-1)*u
            let K_inv_y = (A-Ω*I)^(-1)*(-B)
            and K_inv_u = (A-Ω*I)^(-1)*u
       z = K_inv_y - α*K_inv_u
       where α = [u*(A-Ω*I)^(-1)y]/[u*(A-Ω*I)^(-1)u]
       first, solve (A-Ω*I)^(-1)y and (A-Ω*I)^(-1)u
    '''
    B = residual
    omega = sub_eigenvalue
    u = current_guess

    K_inv_y = sTDA_preconditioner(-B, omega)
    K_inv_u = sTDA_preconditioner(u, omega)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d
    z = K_inv_y -  Alpha*K_inv_u

    return z, current_dic

def on_the_fly_Hx(W, V, sub_A, x):
    def Qx(V, x):
        '''Qx = (1 - V*V.T)*x = x - V*V.T*x'''
        VX = np.dot(V.T,x)
        x -= np.dot(V,VX)
        return x
    '''on-the-fly compute H'x
       H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q
       K approximates H, here K = sTDA_A
       H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)
       H′x ≡ a + b − c + d
    '''
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx

def new_ES(full_guess, return_index, W_H, V_H, sub_A_H, \
                        residual=None, sub_eigenvalue=None, current_dic=None):
    '''new eigenvalue solver, to diagonalize the H'
       the traditional Davidson to diagonalize the H' matrix
       W_H, V_H, sub_A_H are from the exact H
    '''
    new_ES_start = time.time()
    tol = args.eigensolver_tol
    max = 30

    k = args.nstates
    m = min([k+8, 2*k, A_size])

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    '''sTDA as initial guess'''
    V = sTDA_eigen_solver(m, V)
    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])

    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        residual = np.dot(W[:,:m], sub_eigenket[:,:k])
        residual -= np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        new_guess = TDA_A_diag_preconditioner(residual[:,index], \
                                                    sub_eigenvalue[:k][index])
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m

    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    new_ES_end = time.time()
    new_ES_cost = new_ES_end - new_ES_start
    print('H_app diagonalization done in',i,'steps; ','%.2f'%new_ES_cost, 's')
    print('threshold =', tol)
    return full_guess[:,return_index], current_dic

def gen_TDA_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDA']   = sTDA_eigen_solver
    i_lib['Adiag']  = TDA_A_diag_initial_guess
    p_lib['sTDA']   = sTDA_preconditioner
    p_lib['Adiag']  = TDA_A_diag_preconditioner
    p_lib['Jacobi'] = Jacobi_preconditioner
    p_lib['new_ES'] = new_ES
    return i_lib, p_lib

def fill_dictionary(dic,init,prec,k,icost,pcost,wall_time,N_itr,N_mv,\
            initial_energies=None,energies=None,difference=None,overlap=None,\
            tensor_alpha=None, initial_tensor_alpha=None):
    dic['initial guess'] = init
    dic['preconditioner'] = prec
    dic['nstate'] = k
    dic['molecule'] = basename
    dic['method'] = args.method
    dic['functional'] = args.functional
    dic['threshold'] = args.conv_tolerance
    dic['SCF time'] = kernel_t
    dic['Initial guess time'] = icost
    dic['initial guess threshold'] = args.initial_TOL
    dic['New guess generating time'] = pcost
    dic['preconditioner threshold'] = args.precond_TOL
    dic['total time'] = wall_time
    dic['excitation energy(eV)'] = energies
    dic['iterations'] = N_itr
    dic['A matrix size'] = A_size
    dic['final subspace size'] = N_mv
    dic['ax'] = a_x
    dic['alpha'] = alpha
    dic['beta'] = beta
    dic['virtual truncation tol'] = args.truncate_virtual
    dic['n_occ'] = n_occ
    dic['n_vir'] = n_vir
    dic['max_vir'] = max_vir
    dic['semiempirical_difference'] = difference
    dic['overlap'] = overlap
    dic['initial_energies'] = initial_energies
    dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    dic['Dynamic polarizability tensor alpha'] = tensor_alpha
    dic['Dynamic polarizability initial tensor alpha'] = initial_tensor_alpha
    return dic

def Davidson(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''Davidson frame, we can use different initial guess and preconditioner'''
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    TDA_i_lib, TDA_p_lib = gen_TDA_lib()
    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)

    init_start = time.time()
    max = args.max
    m = 0
    new_m = min([k + args.extrainitial, 2*k, A_size])
    V = np.zeros((A_size, max*k + new_m))
    W = np.zeros_like(V)
    V[:, :new_m], initial_energies = initial_guess(new_m)
    init_end = time.time()

    init_time = init_end - init_start
    print('initial guess time %.4f seconds'%init_time)

    Pcost = 0
    MVcost = 0
    for ii in range(max):
        print('\nIteration ', ii)
        istart = time.time()

        MV_start = time.time()
        W[:, m:new_m] = TDA_matrix_vector(V[:,m:new_m])
        MV_end = time.time()
        iMVcost = MV_end - MV_start
        MVcost += iMVcost
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm %.2e'%max_norm)
        if max_norm < tol or ii == (max-1):
            iend = time.time()
            icost = iend - istart
            current_dic['iteration total cost'] = icost
            current_dic['iteration MV cost'] = iMVcost
            iteration_list[ii] = current_dic
            print('iMVcost %.4f'%iMVcost)
            print('icost %.4f'%icost)
            print('Davidson procedure Done \n')
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                residual = residual[:,index],
                          sub_eigenvalue = sub_eigenvalue[:k][index],
                             current_dic = current_dic,
                              full_guess = full_guess[:,index],
                            return_index = index,
                                     W_H = W[:,:m],
                                     V_H = V[:,:m],
                                 sub_A_H = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('new generated guesses:', new_m - m)

        iend = time.time()
        icost = iend - istart
        current_dic['iteration cost'] = icost
        current_dic['iteration MV cost'] = iMVcost
        iteration_list[ii] = current_dic
        print('iMVcost %.4f'%iMVcost)
        print('icost %.4f'%icost)

    energies = sub_eigenvalue[:k]*Hartree_to_eV

    D_end = time.time()
    Dcost = D_end - D_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
                                icost=init_time, pcost=Pcost, wall_time=Dcost,\
            energies = energies.tolist(), N_itr=ii+1, N_mv=np.shape(sub_A)[0],\
            initial_energies=initial_energies.tolist())
    if ii == max-1:
        print('========== Davidson Failed Due to Iteration Limit ============')
        print('current residual norms', r_norms)
    else:
        print('------- Davidson done -------')
    print('max_norm = ', max_norm)
    print('Total steps =', ii+1)
    print('Total time: %.4f seconds'%Dcost)
    print('MVcost %.4f'%MVcost)
    print('Final subspace shape = %s'%np.shape(sub_A)[0])
    print('Precond time: %.4f seconds'%Pcost, '{:.2%}'.format(Pcost/Dcost))
    return energies, full_guess, Davidson_dic

def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag=hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder[:,:new_m], energies = TDA_A_diag_initial_guess(new_m, hdiag=hdiag)
    return V_holder, W_holder, new_m, energies,\
                V_holder[:,:new_m], W_holder[:,:new_m]

def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag=hdiag, tol=None):
    '''preconditioners for each corresponding residual (state)'''
    hdiag = hdiag.reshape(-1,1)
    k = R_x.shape[1]
    t = 1e-14
    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    D_y_inv = D_y**-1

    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new

def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  Ω = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    dambd =  d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    dapbd = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    M = np.linalg.multi_dot([G.T, L_inv, dapbd, L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([L_inv.T, G, Z])\
            *(np.array(omega)**-0.5).reshape(1,-1)

    x_m_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([U_inv, G_inv.T, Z])\
            *(np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    return omega, x, y

def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    '''[ a b ] x - [ σ   π] x  Ω = p
       [ b a ] y   [-π  -σ] y    = q
       normalize the right hand side first
    '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)

    p /= pqnorm
    q /= pqnorm

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    '''LU = d^−1/2 (σ − π) d^−1/2
       A = PLU
       P is identity matrix only when A is diagonally dominant
    '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T'''
    dambd = d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    '''G is lower triangle matrix'''
    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    '''a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T
       M = G^T (a ̃+ b ̃) G
    '''
    dapba = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    a_p_b_tilde = np.linalg.multi_dot([L_inv, dapba, L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde)
    T += np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    '''(x ̃+ y ̃) = GZ
       x + y = d^-1/2 L^-T (x ̃+ y ̃)
       x - y = d^-1/2 U^-1 (x ̃- y ̃)
    '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)

    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x
    x *= pqnorm
    y *= pqnorm
    return x, y

def sTDDFT_eigen_solver(k, tol=args.initial_TOL):
    '''[ A' B' ] X - [1   0] Y Ω = 0
       [ B' A' ] Y   [0  -1] X   = 0
    '''
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    print('sTDDFT Convergence tol = %.2e'%tol)
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''set up initial guess V W, transformed vectors U1 U2'''
    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)


        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the eigenvalue omega in the subspace'''
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)

        '''GS and symmetric orthonormalization'''
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTDDFT Failed Due to Iteration Limit=================')
        print('sTDDFT diagonalization failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT diagonalization Converged' )

    print('after ', ii+1, 'iterations; %.4f'%sTDDFT_cost, 'seconds')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s {:<5.2%}".format(enrty, cost, cost/sTDDFT_cost))
    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*Hartree_to_eV
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y

def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup

def sTDDFT_preconditioner(Rx, Ry, omega, tol=args.precond_TOL):
    ''' [ A' B' ] - [1  0]X  Ω = P'''
    ''' [ B' A' ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''

    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    P /= pqnorm
    Q /= pqnorm

    X_new, Y_new  = TDDFT_A_diag_preconditioner(\
                        P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                    V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        '''solve the x & y in the subspace'''
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                    a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega - P
           R_y = U2x + U1y + Y_full*omega - Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index],\
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    P_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit========')
        print('sTDDFT preconditioning failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT preconditioning Done')
    print('after',ii+1,'steps; %.4f'%P_cost,'s')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/P_cost))

    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_hdiag[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)

    return X, Y

def gen_TDDFT_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_initial_guess
    i_lib['Adiag']  = TDDFT_A_diag_initial_guess
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''[ A B ] X - [1   0] Y Ω = 0
       [ B A ] Y   [0  -1] X   = 0
    '''
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    new_m = min([k + args.extrainitial, 2*k, A_size])

    TDDFT_i_lib, TDDFT_p_lib = gen_TDDFT_lib()

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig =\
                                    initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')

    Pcost = 0
    for ii in range(max):
        print('\niteration', ii)
        show_memory_info('beginning of step '+ str(ii))

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] =\
                            TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('subspace size: %s' %sigma.shape[0])

        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        max_norm = np.max(r_norms)
        print('Maximum residual norm: ', '%.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('TDDFT precedure Done\n')
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)

        P_start = time.time()
        X_new, Y_new = new_guess_generator(\
                            R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start

        m = new_m
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    omega *= Hartree_to_eV

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) \
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
            icost=init_time, pcost=Pcost, wall_time=TDDFT_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            initial_energies=initial_energies, difference=difference,\
            overlap=overlap)
    if ii == (max -1):
        print('===== TDDFT Failed Due to Iteration Limit============')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('============= TDDFT Calculation Done ==============')

    print('after', ii+1,'iterations','%.2f'%TDDFT_cost,'s')
    print('Final subspace ', sigma.shape[0])
    print('preconditioning cost', '%.4f'%Pcost, '%.2f'%(Pcost/TDDFT_cost),"%")
    print('max_norm = ', '%.2e'%max_norm)

    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic

def gen_dynpol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_preconditioner
    i_lib['Adiag']  = TDDFT_A_diag_preconditioner
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P

def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()

    dynpol_i_lib, dynpol_p_lib = gen_dynpol_lib()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        '''if have 3 ω, [ω1 ω1 ω1, ω2 ω2 ω2, ω3 ω3 ω3]
           convert nm to Hartree'''
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P

    max = args.max
    tol = args.conv_tolerance
    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega, tol=args.initial_TOL)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        '''*-1 from the definition of dipole moment. *2 for double occupancy'''
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
    initial_cost = init_end - init_start
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('Iteration', ii)

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(\
                                                V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        print('sigma.shape', sigma.shape)

        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                    a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega + P
           R_y = U2x + U1y + Y_full*omega + Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''
        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x += P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y += Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('maximum residual norm: ', '%.3e'%np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], \
                            R_y[:,index], omega[index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('======= Dynamic polarizability Failed Due to Iteration Limit=====')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full))\
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)

    show_memory_info('Total Dynamic polarizability')
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3*k,\
            icost=initial_cost, pcost=Pcost, wall_time=dp_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            difference=difference, overlap=overlap,\
            tensor_alpha=[i.tolist() for i in alpha_omega],\
            initial_tensor_alpha=[i.tolist() for i in alpha_omega_ig])
    return alpha_omega, Davidson_dic

def stapol_A_diag_initprec(P, hdiag=hdiag, tol=None):
    d = hdiag.reshape(-1,1)
    P = -P/d
    # P /= -d
    return P

def stapol_sTDDFT_initprec(Pr, tol=args.initial_TOL):
    '''(A* + B*)X = -P
       residual = (A* + B*)X + P
       X_ig = -P/d
       X_new = residual/D
    '''
    ssp_start = time.time()
    max = 30
    m = 0
    npvec = Pr.shape[1]

    P = Pr.reshape(n_occ,n_vir,-1)[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)
    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    V_holder = np.zeros((A_reduced_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    '''setting up initial guess'''
    init_start = time.time()
    X_ig = stapol_A_diag_initprec(P, hdiag=max_vir_hdiag)
    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    init_end = time.time()
    initial_cost = init_end - init_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        '''creating the subspace'''
        MV_start = time.time()
        '''U = AX + BX = (A+B)X'''
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the x in the subspace'''
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        index = [r_norms.index(i) for i in r_norms if i > tol]
        if np.max(r_norms) < tol or ii == (max -1):
            print('Static polarizability procedure aborted')
            break

        Pstart = time.time()
        X_new = stapol_A_diag_initprec(-residual[:,index], hdiag=max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
    X_full = np.dot(V,x)
    '''alpha = np.dot(X_full.T, P)*-4'''

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('== sTDDFT Stapol precond Failed Due to Iteration Limit======')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT Stapol precond Converged' )
    print('after', ii+1, 'steps', '%.4f'%ssp_cost,'s')
    print('conv threhsold = %.2e'%tol)
    print('final subspace:', a_p_b.shape[0])
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/ssp_cost))

    X_full *= pnorm

    U = np.zeros((n_occ,n_vir,npvec))
    U[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)[:,:,:]

    if max_vir < n_vir:
        ''' DX2 = -P2'''
        P2 = Pr.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)
        D2 = hdiag.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (-P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2
    U = U.reshape(A_size, npvec)
    return U

def gen_stapol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = stapol_sTDDFT_initprec
    i_lib['Adiag']  = stapol_A_diag_initprec
    p_lib['sTDDFT'] = stapol_sTDDFT_initprec
    p_lib['Adiag']  = stapol_A_diag_initprec
    return i_lib, p_lib

def static_polarizability(init, prec):
    '''(A+B)X = -P
       residual = (A+B)X + P
       X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    stapol_i_lib, stapol_p_lib = gen_stapol_lib()
    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.conv_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig = initial_guess(P, tol=args.initial_TOL)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
    initial_cost = init_end - init_start

    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('\nIteration', ii)
        MV_start = time.time()
        U_holder[:, m:new_m] = \
                    static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()

        '''solve the x in the subspace'''
        x = np.linalg.solve(a_p_b, -p)

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        max_norm = np.max(r_norms)
        print('max_norm = %.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('static polarizability precodure aborted\n')
            break

        '''preconditioning step'''
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    X_full = np.dot(V,x)
    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start

    if ii == (max -1):
        print('==== Static polarizability Failed Due to Iteration Limit ======')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Static polarizability Converged')

    print('after', ii+1, 'steps; %.4f'%sp_cost,'s')
    print('final subspace', a_p_b.shape)
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','Pcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/sp_cost))

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3,\
            icost=initial_cost, pcost=Pcost, wall_time=sp_cost, \
            N_itr=ii+1, N_mv=np.shape(a_p_b)[0], difference=difference,\
            overlap=overlap, tensor_alpha=[i.tolist() for i in tensor_alpha],\
            initial_tensor_alpha=[i.tolist() for i in alpha_init])
    return tensor_alpha, Davidson_dic

def gen_calc():
    name_dic={}
    name_dic['TDA'] = args.TDA
    name_dic['TDDFT'] = args.TDDFT
    name_dic['dynpol'] = args.dynpol
    name_dic['stapol'] = args.stapol
    name_dic['sTDA'] = args.sTDA
    name_dic['sTDDFT'] = args.sTDDFT
    name_dic['Truncate_test'] = args.Truncate_test
    name_dic['PySCF_TDDFT'] = args.pytd
    for calc in ['TDA','TDDFT','dynpol','stapol',\
                        'sTDA','sTDDFT','Truncate_test','PySCF_TDDFT']:
        if name_dic[calc] == True:
            print(calc)
            return calc

def dump_yaml(Davidson_dic, calc, init, prec):
    curpath = os.getcwd()
    yamlpath = os.path.join(\
                   curpath,basename+'_'+calc+'_i_'+init+'_p_'+prec+'.yaml')
    with open(yamlpath, "w", encoding="utf-8") as f:
        yaml.dump(Davidson_dic, f)

if __name__ == "__main__":
    calc = gen_calc()
    TDA_combo = [            # option
    ['sTDA','sTDA'],         # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDA'],        # 2
    ['sTDA','Adiag'],        # 3
    ['sTDA','Jacobi'],       # 4
    ['Adiag','Jacobi'],      # 5
    ['Adiag','new_ES'],      # 6
    ['sTDA','new_ES']]       # 7
    TDDFT_combo = [          # option
    ['sTDDFT','sTDDFT'],     # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDDFT'],      # 2
    ['sTDDFT','Adiag']]      # 3
    print('|-------- In-house Developed {0} Starts ---------|'.format(calc))
    print('Residual conv =', args.conv_tolerance)
    if args.TDA == True:
        for option in args.ip_options:
            init, prec = TDA_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies, eigenkets, Davidson_dic = Davidson(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.TDDFT == True:
        for option in args.ip_options:
            init, prec = TDDFT_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies,X,Y,Davidson_dic = TDDFT_eigen_solver(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.dynpol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\nPerturbation wavelength omega (nm) =', args.dynpol_omega)
            alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
            print('Dynamic polarizability tensor alpha')
            dump_yaml(Davidson_dic, calc, init, prec)
            for i in range(len(args.dynpol_omega)):
                print(args.dynpol_omega[i],'nm')
                print(alpha_omega[i])
    if args.stapol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\n')
            tensor_alpha, Davidson_dic = static_polarizability(init,prec)
            print('Static polarizability tensor alpha')
            print(tensor_alpha)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.sTDA == True:
        X, energies = sTDA_eigen_solver(k=args.nstates, tol=args.conv_tolerance)
    if args.sTDDFT == True:
        energies,X,Y = sTDDFT_eigen_solver(k=args.nstates,tol=args.conv_tolerance)
    if args.Truncate_test == True:
        n_states= args.nstates
        X = np.random.rand(A_size,n_state)
        Y = np.random.rand(A_size,n_state)
        print('n_vir = ', n_vir)
        print('A_size =', A_size)
        print('n_states =', n_states)
        print("{:<8} {:<8} {:<8} {:<8}".format(\
                'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
        for vir_trunc in [40, 50, 60, 70, 10000000]:
            del max_vir, sTDA_mv, sTDDFT_mv
            max_vir = gen_maxvir(tol_eV = vir_trunc)
            q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
            # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
            iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                            max_vir=max_vir, \
                                            q_ij = q_ij, \
                                            q_ab = q_ab, \
                                            q_ia = q_ia , \
                                            GK_q_jb = GK_q_jb, \
                                            GJ_q_ab = GJ_q_ab)

            sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                            max_vir=max_vir, \
                                            iajb_fly = iajb_fly, \
                                            ijab_fly = ijab_fly, \
                                            ibja_fly = ibja_fly, \
                                            delta_fly = delta_fly)

            sTDA_start = time.time()
            sTDA_X = sTDA_mv(X)
            sTDA_end = time.time()
            sTDA_mv_time = sTDA_end - sTDA_start

            sTDDFT_start = time.time()
            sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
            sTDDFT_end = time.time()
            sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

            print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                    vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))
    if args.pytd == True:
        TD.nstates = args.nstates
        TD.conv_tol = args.conv_tolerance
        TD.kernel()
        end = time.time()
    if args.verbose > 3:
        for key in vars(args):
            print(key,'=', vars(args)[key])
    print('|-------- In-house Developed {0} Ends ----------|'.format(calc))
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt241', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 20
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Mon Aug 30 23:11:38 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 60000 
[INPUT] num. atoms = 72
[INPUT] num. electrons = 214
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O     -6.405705841301  -0.863899275857  -1.990378724916 AA  -12.105029674586  -1.632533030579  -3.761270674251 Bohr
[INPUT]  2 C      1.184975544103   1.334287529103   0.171449795865 AA    2.239279242663   2.521438001428   0.323993158297 Bohr
[INPUT]  3 C      2.457577772460   0.455340119230   0.388469907936 AA    4.644148919767   0.860468118871   0.734101733634 Bohr
[INPUT]  4 C      0.189602260253   0.248397108052  -0.355147403893 AA    0.358296344477   0.469402504353  -0.671131327208 Bohr
[INPUT]  5 C      1.902750296618  -0.883745274074   0.960009900604 AA    3.595676944042  -1.670036531879   1.814155789013 Bohr
[INPUT]  6 C      0.401564370446  -0.958494334552   0.567278978069 AA    0.758846681526  -1.811291784251   1.072001904774 Bohr
[INPUT]  7 C      1.319237104378   2.460461171916  -0.897919275962 AA    2.492996820638   4.649597755048  -1.696821513535 Bohr
[INPUT]  8 C      3.606352735963   1.038409162329   1.240980614756 AA    6.815018979547   1.962308922040   2.345113487783 Bohr
[INPUT]  9 C     -1.193270310654   0.807329702743  -0.556089055453 AA   -2.254954079711   1.525632030411  -1.050856015673 Bohr
[INPUT] 10 C      0.679514112153   1.921377115569   1.505163242270 AA    1.284095569746   3.630876530432   2.844346300653 Bohr
[INPUT] 11 C      0.159766746857   2.463100861102  -1.921063870026 AA    0.301915395373   4.654586044664  -3.630284582146 Bohr
[INPUT] 12 C     -1.203681874532   2.145234441427  -1.286138977312 AA   -2.274629083969   4.053905567282  -2.430450425248 Bohr
[INPUT] 13 C      4.753095670752   0.014620331066   1.438857072484 AA    8.982049061576   0.027628421566   2.719045799387 Bohr
[INPUT] 14 C      4.148423210974   2.373747217553   0.703491988900 AA    7.839383717530   4.485732130124   1.329407189847 Bohr
[INPUT] 15 C     -2.315441540742   0.190831136456  -0.093992686368 AA   -4.375550369443   0.360618583941  -0.177620434947 Bohr
[INPUT] 16 C      5.435825194806  -0.480130511916   0.154746597263 AA   10.272220879195  -0.907315171569   0.292428687536 Bohr
[INPUT] 17 C      6.584071318451  -1.458356499830   0.446649257712 AA   12.442091576476  -2.755894376659   0.844044770816 Bohr
[INPUT] 18 C     -3.667421847553   0.682882347986  -0.267178247321 AA   -6.930422875121   1.290460612993  -0.504893713877 Bohr
[INPUT] 19 C      7.316359486155  -2.031441651457  -0.789606823494 AA   13.825915657697  -3.838868359288  -1.492140642491 Bohr
[INPUT] 20 C     -4.809131627418   0.137757043693   0.252862241732 AA   -9.087941672804   0.260323084309   0.477840384117 Bohr
[INPUT] 21 C     -6.177457799919   0.678101503745  -0.116077710834 AA  -11.673703387904   1.281426126733  -0.219355082642 Bohr
[INPUT] 22 C      8.025643195069  -0.940355165624  -1.609783453975 AA   15.166267612160  -1.777013722849  -3.042049847870 Bohr
[INPUT] 23 C      6.390562109591  -2.879781454260  -1.678304031199 AA   12.076412169151  -5.441998247154  -3.171534972719 Bohr
[INPUT] 24 C     -4.845587899896  -1.066007727133   1.125226113636 AA   -9.156834043310  -2.014462650952   2.126369182981 Bohr
[INPUT] 25 C     -7.010106357997  -0.447648458629  -0.764716122989 AA  -13.247181120687  -0.845932986893  -1.445104035489 Bohr
[INPUT] 26 C     -5.773867200845  -2.166630050921   0.635731975118 AA  -10.911027689206  -4.094337409493   1.201359321601 Bohr
[INPUT] 27 C     -7.153955398000  -1.623755269641   0.219426611832 AA  -13.519016409574  -3.068452752941   0.414656200804 Bohr
[INPUT] 28 C     -4.138998010490  -1.164996314238   2.270339377741 AA   -7.821572669947  -2.201523970037   4.290319633747 Bohr
[INPUT] 29 H      2.854521739587   0.256091800892  -0.626994634525 AA    5.394264304437   0.483943366433  -1.184848140825 Bohr
[INPUT] 30 H      0.579545492762  -0.033542108574  -1.356922428257 AA    1.095182258047  -0.063385398845  -2.564211761686 Bohr
[INPUT] 31 H      2.474148346821  -1.744332553711   0.572880577627 AA    4.675462767037  -3.296310796677   1.082587393797 Bohr
[INPUT] 32 H      2.016205368804  -0.903653561091   2.058889023624 AA    3.810075957917  -1.707657741951   3.890736375523 Bohr
[INPUT] 33 H      0.136154039120  -1.907897800060   0.073121481761 AA    0.257293844689  -3.605404315774   0.138179574350 Bohr
[INPUT] 34 H     -0.239487956901  -0.873652470114   1.461844321596 AA   -0.452566648675  -1.650963896566   2.762485404568 Bohr
[INPUT] 35 H      2.271261753523   2.353907724524  -1.446326964717 AA    4.292062671359   4.448240921849  -2.733161849888 Bohr
[INPUT] 36 H      1.361200875199   3.442576257715  -0.393045536374 AA    2.572296854644   6.505526290011  -0.742748418229 Bohr
[INPUT] 37 H      3.194235702786   1.230925070341   2.251549965424 AA    6.036230655574   2.326111262805   4.254812790425 Bohr
[INPUT] 38 H     -0.312899260848   2.387802504060   1.382427787261 AA   -0.591293907581   4.512292772225   2.612409904911 Bohr
[INPUT] 39 H      0.588429917387   1.150303958684   2.289696538558 AA    1.111971387362   2.173759441916   4.326899366239 Bohr
[INPUT] 40 H      1.371781860604   2.697397352976   1.875149923566 AA    2.592292019187   5.097342246251   3.543519798038 Bohr
[INPUT] 41 H      0.362289322987   1.716075789245  -2.710664320207 AA    0.684627598299   3.242913250669  -5.122413180822 Bohr
[INPUT] 42 H      0.117115719422   3.441685966803  -2.431073481958 AA    0.221316634588   6.503843884017  -4.594063069594 Bohr
[INPUT] 43 H     -1.473878352936   2.951170475977  -0.573457898202 AA   -2.785226427975   5.576903946499  -1.083678371570 Bohr
[INPUT] 44 H     -1.990602507752   2.156237233608  -2.062723270073 AA   -3.761693562523   4.074697831109  -3.897982051204 Bohr
[INPUT] 45 H      4.370107415303  -0.860210138063   1.996967678515 AA    8.258306149853  -1.625561570514   3.773721992002 Bohr
[INPUT] 46 H      5.517264123042   0.477793197053   2.093729064840 AA   10.426118149437   0.902898286611   3.956574511589 Bohr
[INPUT] 47 H      3.385379823746   3.168325978777   0.736799117990 AA    6.397440694508   5.987268373234   1.392348541821 Bohr
[INPUT] 48 H      5.009900017535   2.711291636414   1.307631290331 AA    9.467338944595   5.123598636646   2.471065010637 Bohr
[INPUT] 49 H      4.487735495522   2.284347995930  -0.343893709309 AA    8.480591006026   4.316792085508  -0.649864926556 Bohr
[INPUT] 50 H     -2.207482834688  -0.756427597167   0.445963784775 AA   -4.171537982239  -1.429440991708   0.842749414699 Bohr
[INPUT] 51 H      5.819716569576   0.383535088062  -0.419054938728 AA   10.997670439092   0.724776275598  -0.791899065342 Bohr
[INPUT] 52 H      4.687975982463  -0.973731829524  -0.493175373355 AA    8.858990685393  -1.840086476572  -0.931966387021 Bohr
[INPUT] 53 H      6.186655263950  -2.303744800412   1.042776832437 AA   11.691084075964  -4.353446733670   1.970562622348 Bohr
[INPUT] 54 H      7.327402476378  -0.952295761836   1.093964903853 AA   13.846783884814  -1.799578179454   2.067294058169 Bohr
[INPUT] 55 H     -3.795884987274   1.573781489595  -0.897117755986 AA   -7.173183026295   2.974015995245  -1.695306860299 Bohr
[INPUT] 56 H      8.101114593705  -2.707233159857  -0.395169332634 AA   15.308887885819  -5.115929227471  -0.746761811506 Bohr
[INPUT] 57 H     -6.086008046351   1.528783644318  -0.813415786613 AA  -11.500888399502   2.888982391475  -1.537133062095 Bohr
[INPUT] 58 H     -6.703779190983   1.032700284407   0.791834771869 AA  -12.668306670517   1.951520706290   1.496350854740 Bohr
[INPUT] 59 H      7.299415920089  -0.254145050585  -2.082488697027 AA   13.793896958258  -0.480264541520  -3.935333294884 Bohr
[INPUT] 60 H      8.632330096788  -1.386349399910  -2.418053944231 AA   16.312739699769  -2.619820678784  -4.569459709021 Bohr
[INPUT] 61 H      8.697906737262  -0.335129346458  -0.975138116164 AA   16.436661590434  -0.633302681110  -1.842743973175 Bohr
[INPUT] 62 H      5.610326740775  -2.260075367563  -2.156742087305 AA   10.601981009389  -4.270923465569  -4.075651866329 Bohr
[INPUT] 63 H      6.961497403706  -3.372092720593  -2.485715900452 AA   13.155323509875  -6.372331708561  -4.697322275330 Bohr
[INPUT] 64 H      5.883572330505  -3.667539992497  -1.092158837306 AA   11.118340338724  -6.930646136708  -2.063881087031 Bohr
[INPUT] 65 H     -8.012197442570  -0.066706570842  -1.032738738513 AA  -15.140858822398  -0.126057149600  -1.951593374018 Bohr
[INPUT] 66 H     -5.313996382126  -2.632490443489  -0.258698858696 AA  -10.041997789148  -4.974685963729  -0.488869991673 Bohr
[INPUT] 67 H     -5.872208053605  -2.956496165737   1.399722132207 AA  -11.096864967779  -5.586968041570   2.645091480364 Bohr
[INPUT] 68 H     -7.745732745746  -2.424815268084  -0.257051061600 AA  -14.637313523536  -4.582236759343  -0.485756106452 Bohr
[INPUT] 69 H     -7.711170184277  -1.280614857975   1.111938741708 AA  -14.571999748196  -2.420011352622   2.101259689121 Bohr
[INPUT] 70 H     -4.202444293628  -2.060683224496   2.900261291546 AA   -7.941468768698  -3.894126923783   5.480699530699 Bohr
[INPUT] 71 H     -3.490610313680  -0.351075552864   2.613079341087 AA   -6.596297500437  -0.663436643944   4.938004296413 Bohr
[INPUT] 72 H     -5.439403995661  -0.790632511717  -1.857794190521 AA  -10.278983832665  -1.494078912322  -3.510722215893 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1

nuclear repulsion = 2664.97345107819
number of shells = 484
number of NR pGTOs = 1640
number of NR cGTOs = 1132
basis = def2-tzvp
ecp = {}
CPU time:         2.91
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 72_Vitamin_D3_wb97x.chk
max_memory 60000 MB (current use 55 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f9886effe18>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f9886effd90>
Set gradient conv threshold to 1e-05
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
tot grids = 830672
Drop grids 171027
    CPU time for setting up grids    158.32 sec, wall time      9.21 sec
nelec by numeric integration = 213.99969478613951
    CPU time for vxc    250.14 sec, wall time     14.47 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 60000
_cderi_to_save = /tmp/job.16219613.hpc/tmpdj1xd1s2
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
num shells = 964, num cGTOs = 2894
size of aux basis 2894
int3c2e [1/2], AO [0:475], nrow = 624403
int3c2e [2/2], AO [475:484], nrow = 16875
    CPU time for cholesky_eri    311.79 sec, wall time     49.39 sec
    CPU time for df vj and vk    926.59 sec, wall time     90.96 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7f98a79829b0> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 60000
_cderi_to_save = /tmp/job.16219613.hpc/tmp2t0r4ie6
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
num shells = 964, num cGTOs = 2894
size of aux basis 2334
int3c2e [1/2], AO [0:357], nrow = 443211
int3c2e [2/2], AO [357:484], nrow = 198067
    CPU time for cholesky_eri    427.32 sec, wall time     30.14 sec
    CPU time for df vj and vk    924.50 sec, wall time     57.36 sec
E1 = -6827.075000593867  Ecoul = 3202.9064084220013  Exc = -171.4974543515085
init E= -1130.69259544518
cond(S) = 941736.5113095288
    CPU time for initialize scf   2272.44 sec, wall time    173.61 sec
  HOMO = -0.292634013906136  LUMO = 0.0370469194476875
  mo_energy =
[-1.91860992e+01 -1.03072552e+01 -1.02736691e+01 -1.02728600e+01
 -1.02679507e+01 -1.02678743e+01 -1.02643414e+01 -1.02618876e+01
 -1.02609422e+01 -1.02607680e+01 -1.02602474e+01 -1.02591467e+01
 -1.02586797e+01 -1.02567767e+01 -1.02559065e+01 -1.02545755e+01
 -1.02526297e+01 -1.02514077e+01 -1.02509709e+01 -1.02504472e+01
 -1.02495418e+01 -1.02494113e+01 -1.02488594e+01 -1.02482440e+01
 -1.02443389e+01 -1.02442851e+01 -1.02442106e+01 -1.02440385e+01
 -1.14189636e+00 -1.00104888e+00 -9.78424260e-01 -9.54422989e-01
 -9.40626728e-01 -9.19841450e-01 -9.14898235e-01 -8.92921264e-01
 -8.90026061e-01 -8.67977880e-01 -8.60194794e-01 -8.37300008e-01
 -8.17720993e-01 -8.06501766e-01 -8.01627636e-01 -7.96528608e-01
 -7.91871800e-01 -7.63703765e-01 -7.43717000e-01 -7.17942007e-01
 -7.15667631e-01 -7.04621848e-01 -6.99901394e-01 -6.79342912e-01
 -6.63930091e-01 -6.41902068e-01 -6.25881150e-01 -6.15214126e-01
 -6.07369023e-01 -5.97008366e-01 -5.93832808e-01 -5.85573451e-01
 -5.78458947e-01 -5.72394025e-01 -5.70493364e-01 -5.58989495e-01
 -5.55723294e-01 -5.54972772e-01 -5.51010834e-01 -5.44549980e-01
 -5.39043016e-01 -5.28946596e-01 -5.24715426e-01 -5.19679172e-01
 -5.18044741e-01 -5.12725691e-01 -5.05123327e-01 -5.03392907e-01
 -5.00082846e-01 -4.94528268e-01 -4.86877838e-01 -4.82838923e-01
 -4.79089228e-01 -4.76411552e-01 -4.71867154e-01 -4.64885243e-01
 -4.62302487e-01 -4.56345443e-01 -4.53730123e-01 -4.50528477e-01
 -4.47578757e-01 -4.45682073e-01 -4.37047546e-01 -4.31869949e-01
 -4.29277088e-01 -4.23190951e-01 -4.20105944e-01 -4.18618119e-01
 -4.15627698e-01 -4.15219102e-01 -4.05303541e-01 -4.04391300e-01
 -4.00079914e-01 -3.97359805e-01 -3.93023059e-01 -3.80536827e-01
 -3.72316436e-01 -3.54091865e-01 -2.92634014e-01  3.70469194e-02
  8.56238130e-02  9.37133773e-02  1.08281569e-01  1.10260836e-01
  1.16242526e-01  1.19584464e-01  1.25610409e-01  1.31487856e-01
  1.36861216e-01  1.39308775e-01  1.44710465e-01  1.49256305e-01
  1.52910463e-01  1.55857755e-01  1.58285374e-01  1.65077072e-01
  1.67273321e-01  1.69458422e-01  1.69815124e-01  1.76235351e-01
  1.78216429e-01  1.81888625e-01  1.83020009e-01  1.86036184e-01
  1.86870826e-01  1.91790402e-01  1.93344020e-01  1.97209819e-01
  1.97916374e-01  2.04456003e-01  2.09334047e-01  2.10685902e-01
  2.11272274e-01  2.15021408e-01  2.17947305e-01  2.18769708e-01
  2.22011262e-01  2.25757224e-01  2.31987689e-01  2.33728783e-01
  2.36128487e-01  2.39557362e-01  2.42151863e-01  2.43814083e-01
  2.45052397e-01  2.48933292e-01  2.52558810e-01  2.56282651e-01
  2.59121034e-01  2.63921910e-01  2.67746132e-01  2.68670753e-01
  2.72414821e-01  2.76386209e-01  2.80413442e-01  2.82083214e-01
  2.85805675e-01  2.88832509e-01  2.89642469e-01  2.95164179e-01
  2.97188580e-01  3.00839327e-01  3.03281893e-01  3.05844477e-01
  3.08034321e-01  3.09155702e-01  3.13714342e-01  3.15691438e-01
  3.20403894e-01  3.24229382e-01  3.29877717e-01  3.33249838e-01
  3.36102567e-01  3.37834503e-01  3.41188047e-01  3.46648932e-01
  3.47974689e-01  3.50337751e-01  3.57846702e-01  3.60522585e-01
  3.65136702e-01  3.68483335e-01  3.70768491e-01  3.76555299e-01
  3.79849163e-01  3.82363412e-01  3.84540562e-01  3.86440793e-01
  3.92576655e-01  3.96735778e-01  3.99078175e-01  4.00964004e-01
  4.05952378e-01  4.09614790e-01  4.14025447e-01  4.17181588e-01
  4.19686430e-01  4.23736628e-01  4.25851165e-01  4.33495355e-01
  4.35967087e-01  4.41270186e-01  4.45531860e-01  4.48995349e-01
  4.51825876e-01  4.55180176e-01  4.61778484e-01  4.66169181e-01
  4.68367930e-01  4.70169148e-01  4.74027045e-01  4.77578586e-01
  4.81816797e-01  4.84605996e-01  4.86708608e-01  4.89124066e-01
  4.92385706e-01  4.93695821e-01  4.97648486e-01  5.01230896e-01
  5.02418308e-01  5.05939533e-01  5.07749994e-01  5.10213974e-01
  5.11994445e-01  5.14040182e-01  5.16714590e-01  5.17509690e-01
  5.19482562e-01  5.22077827e-01  5.22843404e-01  5.25510943e-01
  5.29596546e-01  5.30780238e-01  5.33759732e-01  5.34469721e-01
  5.38910647e-01  5.39643903e-01  5.41536367e-01  5.42067241e-01
  5.44893271e-01  5.45863552e-01  5.49277848e-01  5.51875390e-01
  5.53452496e-01  5.57851391e-01  5.59990823e-01  5.61634250e-01
  5.63840942e-01  5.64721222e-01  5.67195259e-01  5.69875774e-01
  5.72186469e-01  5.73235753e-01  5.75976474e-01  5.77797289e-01
  5.80571120e-01  5.82207613e-01  5.87540870e-01  5.89327212e-01
  5.90011149e-01  5.91436698e-01  5.96260777e-01  5.97974566e-01
  5.99760176e-01  6.04056720e-01  6.06759203e-01  6.10171751e-01
  6.13607635e-01  6.14892795e-01  6.19697817e-01  6.19732350e-01
  6.22325908e-01  6.27956329e-01  6.30770636e-01  6.36479252e-01
  6.38031884e-01  6.43731803e-01  6.47274635e-01  6.52097611e-01
  6.56535341e-01  6.58417220e-01  6.68333546e-01  6.71107687e-01
  6.73343735e-01  6.74134743e-01  6.79526048e-01  6.82752442e-01
  6.88191942e-01  6.91030840e-01  6.93892115e-01  7.01642426e-01
  7.02974869e-01  7.08244407e-01  7.11959583e-01  7.19515964e-01
  7.25681763e-01  7.30526706e-01  7.35129791e-01  7.45206217e-01
  7.46588025e-01  7.51442508e-01  7.52926661e-01  7.60701887e-01
  7.66277527e-01  7.70211242e-01  7.80370518e-01  7.82744624e-01
  7.83921428e-01  7.89719605e-01  7.93247898e-01  7.98492843e-01
  8.08299523e-01  8.11154320e-01  8.13301834e-01  8.23424491e-01
  8.27206327e-01  8.31765723e-01  8.39663058e-01  8.43173033e-01
  8.48707887e-01  8.51860627e-01  8.59100757e-01  8.67106847e-01
  8.73960477e-01  8.80510530e-01  8.81952951e-01  8.87555054e-01
  8.94504900e-01  8.97138784e-01  9.07303927e-01  9.12314797e-01
  9.17086253e-01  9.21366608e-01  9.26830492e-01  9.30785858e-01
  9.38201476e-01  9.41804620e-01  9.44079103e-01  9.46407016e-01
  9.58066199e-01  9.63651677e-01  9.68260655e-01  9.71166282e-01
  9.73013487e-01  9.78001316e-01  9.84551369e-01  9.89007815e-01
  9.90712021e-01  9.95244287e-01  1.00043784e+00  1.00605222e+00
  1.00977648e+00  1.01409937e+00  1.01968542e+00  1.02466795e+00
  1.03091719e+00  1.04118747e+00  1.04993990e+00  1.05922307e+00
  1.06047824e+00  1.06515445e+00  1.06837338e+00  1.07446442e+00
  1.07585526e+00  1.08179228e+00  1.08661939e+00  1.08851233e+00
  1.09530093e+00  1.09950724e+00  1.10550929e+00  1.10637287e+00
  1.11080217e+00  1.11906755e+00  1.12920808e+00  1.13296280e+00
  1.13620717e+00  1.14469092e+00  1.14481852e+00  1.15270435e+00
  1.15622738e+00  1.16331938e+00  1.17165162e+00  1.17462788e+00
  1.18064953e+00  1.18640563e+00  1.19091873e+00  1.19597089e+00
  1.20101593e+00  1.20374730e+00  1.20879511e+00  1.21287140e+00
  1.22286186e+00  1.22645349e+00  1.23298018e+00  1.23492621e+00
  1.24189025e+00  1.24668459e+00  1.25162637e+00  1.25389716e+00
  1.25846456e+00  1.26513709e+00  1.26793438e+00  1.27570726e+00
  1.27756809e+00  1.28466910e+00  1.29108052e+00  1.29466621e+00
  1.29792633e+00  1.30278275e+00  1.30957998e+00  1.31340689e+00
  1.32187513e+00  1.32473318e+00  1.32909096e+00  1.33037312e+00
  1.33501780e+00  1.34009578e+00  1.34621956e+00  1.34851264e+00
  1.35365296e+00  1.35733689e+00  1.36067499e+00  1.36592339e+00
  1.37528091e+00  1.37717290e+00  1.38249180e+00  1.38948038e+00
  1.39254942e+00  1.39808133e+00  1.40635885e+00  1.40857067e+00
  1.41617097e+00  1.42076402e+00  1.42674332e+00  1.43144374e+00
  1.43517415e+00  1.44063119e+00  1.44609127e+00  1.45220623e+00
  1.45825385e+00  1.45997714e+00  1.46412720e+00  1.47114055e+00
  1.48654620e+00  1.49492097e+00  1.50164878e+00  1.50309311e+00
  1.50772914e+00  1.51265073e+00  1.51963170e+00  1.52556742e+00
  1.52776534e+00  1.53317469e+00  1.54941194e+00  1.55446753e+00
  1.56881763e+00  1.57270186e+00  1.57341543e+00  1.58392983e+00
  1.59388567e+00  1.59849727e+00  1.60953748e+00  1.61014766e+00
  1.62283644e+00  1.63299179e+00  1.64294449e+00  1.64436006e+00
  1.64705505e+00  1.65386721e+00  1.65635689e+00  1.65839096e+00
  1.66461516e+00  1.67047581e+00  1.67422297e+00  1.67895997e+00
  1.68089409e+00  1.68958221e+00  1.69399632e+00  1.69683127e+00
  1.70141512e+00  1.70356002e+00  1.70550044e+00  1.70817342e+00
  1.71415489e+00  1.71826960e+00  1.72312722e+00  1.72785444e+00
  1.72836871e+00  1.73261073e+00  1.73602293e+00  1.73979067e+00
  1.74059680e+00  1.74609339e+00  1.75072183e+00  1.75725827e+00
  1.76156495e+00  1.76260768e+00  1.76582424e+00  1.77373247e+00
  1.77567681e+00  1.77851669e+00  1.77904690e+00  1.78632544e+00
  1.79028110e+00  1.79528342e+00  1.80166106e+00  1.80577477e+00
  1.81292461e+00  1.81577901e+00  1.81752875e+00  1.82465930e+00
  1.82974233e+00  1.84156046e+00  1.84758096e+00  1.84922847e+00
  1.85529769e+00  1.85920229e+00  1.86130565e+00  1.86960030e+00
  1.87478397e+00  1.88004311e+00  1.88294530e+00  1.89043997e+00
  1.89387701e+00  1.90247066e+00  1.90991288e+00  1.91471066e+00
  1.92267103e+00  1.92711008e+00  1.93232022e+00  1.93532995e+00
  1.94071146e+00  1.94198735e+00  1.94661781e+00  1.95621325e+00
  1.96157831e+00  1.97036175e+00  1.97173229e+00  1.98276032e+00
  1.98981685e+00  1.99400732e+00  1.99461118e+00  2.00415120e+00
  2.00722616e+00  2.00803355e+00  2.01520125e+00  2.01864497e+00
  2.02468177e+00  2.02766380e+00  2.04056594e+00  2.04549788e+00
  2.05256099e+00  2.05950252e+00  2.06399605e+00  2.06591832e+00
  2.06772466e+00  2.07542412e+00  2.08711937e+00  2.09040882e+00
  2.09271873e+00  2.09771735e+00  2.10435420e+00  2.11259770e+00
  2.12056445e+00  2.12726995e+00  2.12873558e+00  2.13386535e+00
  2.13910406e+00  2.14873843e+00  2.15151142e+00  2.15692668e+00
  2.16117620e+00  2.16757800e+00  2.17423003e+00  2.17716345e+00
  2.18593372e+00  2.19245202e+00  2.19509628e+00  2.19946204e+00
  2.20632083e+00  2.21164288e+00  2.21603557e+00  2.22497659e+00
  2.23158267e+00  2.23924510e+00  2.24582758e+00  2.24985101e+00
  2.25295136e+00  2.25818626e+00  2.26055059e+00  2.26603803e+00
  2.28171516e+00  2.29046787e+00  2.29496943e+00  2.29963469e+00
  2.30231619e+00  2.30746185e+00  2.31254819e+00  2.32073165e+00
  2.32202153e+00  2.32637538e+00  2.33678172e+00  2.34524280e+00
  2.35100135e+00  2.35748489e+00  2.36344466e+00  2.37060673e+00
  2.38215321e+00  2.38584690e+00  2.39342442e+00  2.39626945e+00
  2.40119112e+00  2.40504600e+00  2.40694819e+00  2.41642031e+00
  2.42648525e+00  2.43104917e+00  2.43926896e+00  2.44410417e+00
  2.44762147e+00  2.45441206e+00  2.45611024e+00  2.46710334e+00
  2.47008424e+00  2.47797341e+00  2.48309721e+00  2.48580364e+00
  2.48871366e+00  2.49622637e+00  2.50305063e+00  2.51443005e+00
  2.51686715e+00  2.51971617e+00  2.52508193e+00  2.52613249e+00
  2.53155328e+00  2.53778761e+00  2.54349562e+00  2.54846931e+00
  2.55239206e+00  2.55845176e+00  2.56405697e+00  2.56968917e+00
  2.57171893e+00  2.57868320e+00  2.58679225e+00  2.58785296e+00
  2.59386350e+00  2.60180045e+00  2.60709158e+00  2.61170442e+00
  2.61635797e+00  2.61956972e+00  2.62272575e+00  2.62605301e+00
  2.63040931e+00  2.63277283e+00  2.64053850e+00  2.64663753e+00
  2.64991355e+00  2.65672047e+00  2.65870687e+00  2.66154747e+00
  2.66505864e+00  2.66594068e+00  2.66842097e+00  2.67148585e+00
  2.67841467e+00  2.68011980e+00  2.68321769e+00  2.68896460e+00
  2.69009099e+00  2.69456547e+00  2.70330558e+00  2.70721552e+00
  2.71009829e+00  2.71520958e+00  2.71803720e+00  2.72122149e+00
  2.72698194e+00  2.73538083e+00  2.73591519e+00  2.73834226e+00
  2.74285102e+00  2.74513596e+00  2.75033834e+00  2.75477551e+00
  2.75840287e+00  2.75920770e+00  2.76423646e+00  2.76799816e+00
  2.77223723e+00  2.77535210e+00  2.77698667e+00  2.78764069e+00
  2.79062624e+00  2.79255196e+00  2.79692347e+00  2.80075372e+00
  2.80891905e+00  2.81028994e+00  2.81199496e+00  2.81887701e+00
  2.82053178e+00  2.83009769e+00  2.83154806e+00  2.83953472e+00
  2.84263879e+00  2.84630605e+00  2.84683475e+00  2.85128672e+00
  2.85356957e+00  2.85718712e+00  2.86044064e+00  2.87248206e+00
  2.87482663e+00  2.88182884e+00  2.88511239e+00  2.88877382e+00
  2.89081094e+00  2.89184610e+00  2.89889710e+00  2.90144843e+00
  2.90909796e+00  2.91107030e+00  2.91540383e+00  2.92345530e+00
  2.92529890e+00  2.93458831e+00  2.94381293e+00  2.94724637e+00
  2.95014120e+00  2.95354184e+00  2.96660215e+00  2.97009395e+00
  2.97463344e+00  2.98188229e+00  2.98646579e+00  2.99147333e+00
  2.99467326e+00  3.00224317e+00  3.00831175e+00  3.01216019e+00
  3.01621528e+00  3.02470702e+00  3.02824474e+00  3.03480389e+00
  3.03939417e+00  3.04168649e+00  3.04481339e+00  3.05526020e+00
  3.06271025e+00  3.07232981e+00  3.07998153e+00  3.08310580e+00
  3.08450634e+00  3.08770817e+00  3.09383327e+00  3.10722648e+00
  3.11487348e+00  3.11578023e+00  3.12303866e+00  3.12888546e+00
  3.13279977e+00  3.14365807e+00  3.14581456e+00  3.15055216e+00
  3.15214439e+00  3.16044649e+00  3.16778233e+00  3.17228165e+00
  3.18451426e+00  3.19311501e+00  3.19457622e+00  3.20030181e+00
  3.20727684e+00  3.21197166e+00  3.21610283e+00  3.21894461e+00
  3.22548859e+00  3.23202878e+00  3.23529050e+00  3.24104808e+00
  3.24579291e+00  3.24849066e+00  3.25796286e+00  3.26360943e+00
  3.26416790e+00  3.26748071e+00  3.27012829e+00  3.27507109e+00
  3.27678816e+00  3.28756845e+00  3.29347783e+00  3.29711685e+00
  3.30469728e+00  3.30656158e+00  3.30782530e+00  3.31688348e+00
  3.31791189e+00  3.32490366e+00  3.32672822e+00  3.33240605e+00
  3.33942590e+00  3.34304109e+00  3.34570147e+00  3.35522180e+00
  3.35922238e+00  3.36008117e+00  3.36898007e+00  3.37305679e+00
  3.37631283e+00  3.37921805e+00  3.38314212e+00  3.38607283e+00
  3.38761508e+00  3.39072686e+00  3.39356580e+00  3.39868726e+00
  3.40369271e+00  3.40648196e+00  3.40944280e+00  3.41699101e+00
  3.41962552e+00  3.42368982e+00  3.42960916e+00  3.43370698e+00
  3.43488855e+00  3.44716433e+00  3.44878654e+00  3.45443128e+00
  3.45579352e+00  3.46263745e+00  3.46730224e+00  3.46838420e+00
  3.47630098e+00  3.47853400e+00  3.48495677e+00  3.48742932e+00
  3.48846404e+00  3.49284373e+00  3.50020020e+00  3.50367855e+00
  3.51016552e+00  3.51208993e+00  3.51463876e+00  3.51569405e+00
  3.52296858e+00  3.53187807e+00  3.53536720e+00  3.53851582e+00
  3.54230158e+00  3.54505624e+00  3.54694082e+00  3.55429482e+00
  3.55740715e+00  3.56374722e+00  3.56748364e+00  3.57004898e+00
  3.57211407e+00  3.58119321e+00  3.58563566e+00  3.59017418e+00
  3.59437569e+00  3.59598426e+00  3.60853935e+00  3.61121914e+00
  3.61146090e+00  3.61769272e+00  3.62042401e+00  3.62884489e+00
  3.63285458e+00  3.63646035e+00  3.64097382e+00  3.64403682e+00
  3.65154636e+00  3.65767886e+00  3.66067414e+00  3.66372555e+00
  3.66843694e+00  3.67028344e+00  3.67794280e+00  3.68019125e+00
  3.69091159e+00  3.69602571e+00  3.70192906e+00  3.70949385e+00
  3.71186279e+00  3.71287319e+00  3.71896156e+00  3.72029480e+00
  3.72922339e+00  3.73912701e+00  3.74292007e+00  3.74672618e+00
  3.75306886e+00  3.75628048e+00  3.76195455e+00  3.76637568e+00
  3.76896547e+00  3.77845805e+00  3.78380488e+00  3.79089826e+00
  3.79309938e+00  3.80038947e+00  3.80517183e+00  3.80671891e+00
  3.81976710e+00  3.82482910e+00  3.82982841e+00  3.83355432e+00
  3.84830036e+00  3.85109697e+00  3.85612209e+00  3.86548804e+00
  3.86628761e+00  3.87345979e+00  3.88118602e+00  3.88586268e+00
  3.89648594e+00  3.89755614e+00  3.90030656e+00  3.90927620e+00
  3.91935786e+00  3.92266281e+00  3.93102405e+00  3.94541458e+00
  3.95886431e+00  3.96163410e+00  3.97661669e+00  3.98121783e+00
  3.99525038e+00  3.99784056e+00  4.00991671e+00  4.01323750e+00
  4.02714378e+00  4.03418399e+00  4.04021985e+00  4.04440388e+00
  4.05778024e+00  4.06277779e+00  4.06802851e+00  4.07156448e+00
  4.07293684e+00  4.07366613e+00  4.09252374e+00  4.09690230e+00
  4.10065021e+00  4.11017323e+00  4.11798176e+00  4.12112016e+00
  4.12291638e+00  4.12541467e+00  4.13414703e+00  4.14308897e+00
  4.14890848e+00  4.15229589e+00  4.15565171e+00  4.16440431e+00
  4.16895328e+00  4.16996140e+00  4.18164881e+00  4.18677243e+00
  4.19216962e+00  4.19751838e+00  4.20166550e+00  4.20715448e+00
  4.21769377e+00  4.22813520e+00  4.22969847e+00  4.23439570e+00
  4.24839827e+00  4.25307476e+00  4.26049692e+00  4.26982307e+00
  4.27312496e+00  4.28074919e+00  4.29165513e+00  4.30368170e+00
  4.30552303e+00  4.31553646e+00  4.31706398e+00  4.32403161e+00
  4.32628233e+00  4.33847577e+00  4.35155452e+00  4.36102580e+00
  4.36403795e+00  4.37514884e+00  4.37658681e+00  4.39776872e+00
  4.40911105e+00  4.41948097e+00  4.42896485e+00  4.43556556e+00
  4.43735915e+00  4.45747795e+00  4.46399142e+00  4.47485366e+00
  4.47932344e+00  4.48327306e+00  4.48562754e+00  4.49472384e+00
  4.50286177e+00  4.50691576e+00  4.51914395e+00  4.53494884e+00
  4.54033384e+00  4.54346376e+00  4.55150397e+00  4.56886418e+00
  4.57441835e+00  4.58002602e+00  4.59152146e+00  4.59249710e+00
  4.60057767e+00  4.60833446e+00  4.61486378e+00  4.62035591e+00
  4.62761100e+00  4.62960607e+00  4.63584016e+00  4.64262346e+00
  4.65104158e+00  4.66600850e+00  4.67246052e+00  4.68872985e+00
  4.69260298e+00  4.69882739e+00  4.70579269e+00  4.71610050e+00
  4.73811748e+00  4.74409550e+00  4.75396035e+00  4.76706471e+00
  4.77360440e+00  4.78884464e+00  4.80452484e+00  4.81083435e+00
  4.82148144e+00  4.83241098e+00  4.84596654e+00  4.85608178e+00
  4.87605302e+00  4.88838289e+00  4.89352165e+00  4.90848843e+00
  4.91349063e+00  4.92383371e+00  4.93481999e+00  4.94677432e+00
  4.96112839e+00  4.97088456e+00  4.97354852e+00  4.99556117e+00
  5.00979687e+00  5.01436154e+00  5.03627873e+00  5.04437658e+00
  5.06578576e+00  5.07454494e+00  5.10175576e+00  5.11304502e+00
  5.12329318e+00  5.12992236e+00  5.14376824e+00  5.17414552e+00
  5.19099801e+00  5.22066531e+00  5.24189472e+00  5.24988024e+00
  5.28568667e+00  5.30363009e+00  5.32048227e+00  5.34999737e+00
  5.38009093e+00  5.39226632e+00  5.40834817e+00  5.44183998e+00
  5.47404011e+00  5.49701885e+00  5.51646129e+00  5.60884067e+00
  5.62113210e+00  5.68288282e+00  5.71513479e+00  5.84154744e+00
  5.90894476e+00  6.04980846e+00  6.36318678e+00  6.61937722e+00
  6.87992569e+00  6.95654661e+00  7.10784635e+00  7.27823075e+00
  2.23566763e+01  2.23797339e+01  2.24060083e+01  2.24675493e+01
  2.25135680e+01  2.25223214e+01  2.25283481e+01  2.25643127e+01
  2.25766724e+01  2.25819755e+01  2.25891031e+01  2.25943387e+01
  2.25997384e+01  2.26212660e+01  2.26266230e+01  2.26499263e+01
  2.26605902e+01  2.26655454e+01  2.26727860e+01  2.27586736e+01
  2.27875056e+01  2.28347894e+01  2.29121904e+01  2.29823426e+01
  2.30564847e+01  2.31568824e+01  2.32702165e+01  4.41109819e+01]
nelec by numeric integration = 213.9996947862956
    CPU time for vxc    178.34 sec, wall time      9.93 sec
    CPU time for df vj and vk    628.82 sec, wall time     46.35 sec
    CPU time for df vj and vk    509.35 sec, wall time     27.02 sec
E1 = -6827.074990439906  Ecoul = 3202.9063969854788  Exc = -171.49745306895247
cycle= 1 E= -1130.69259544519  delta_E= -5.46e-12  |g|= 3.35e-06  |ddm|= 6.95e-06
    CPU time for cycle= 1   1326.17 sec, wall time     84.51 sec
  HOMO = -0.292634002380691  LUMO = 0.0370468623074299
  mo_energy =
[-1.91861003e+01 -1.03072549e+01 -1.02736695e+01 -1.02728619e+01
 -1.02679481e+01 -1.02678749e+01 -1.02643414e+01 -1.02618880e+01
 -1.02609423e+01 -1.02607667e+01 -1.02602477e+01 -1.02591464e+01
 -1.02586791e+01 -1.02567761e+01 -1.02559070e+01 -1.02545755e+01
 -1.02526294e+01 -1.02514091e+01 -1.02509713e+01 -1.02504478e+01
 -1.02495421e+01 -1.02494110e+01 -1.02488595e+01 -1.02482447e+01
 -1.02443389e+01 -1.02442852e+01 -1.02442106e+01 -1.02440385e+01
 -1.14189674e+00 -1.00104871e+00 -9.78424752e-01 -9.54422800e-01
 -9.40626657e-01 -9.19841460e-01 -9.14898101e-01 -8.92921294e-01
 -8.90026427e-01 -8.67977902e-01 -8.60194734e-01 -8.37300043e-01
 -8.17720838e-01 -8.06501782e-01 -8.01627749e-01 -7.96528613e-01
 -7.91871876e-01 -7.63703801e-01 -7.43716973e-01 -7.17941838e-01
 -7.15667863e-01 -7.04621977e-01 -6.99901390e-01 -6.79342893e-01
 -6.63930134e-01 -6.41902085e-01 -6.25881269e-01 -6.15214100e-01
 -6.07369311e-01 -5.97008255e-01 -5.93832664e-01 -5.85573388e-01
 -5.78459028e-01 -5.72394060e-01 -5.70493415e-01 -5.58989573e-01
 -5.55723355e-01 -5.54972905e-01 -5.51010819e-01 -5.44550221e-01
 -5.39042988e-01 -5.28946496e-01 -5.24715480e-01 -5.19679031e-01
 -5.18044989e-01 -5.12725645e-01 -5.05123362e-01 -5.03392905e-01
 -5.00082907e-01 -4.94528284e-01 -4.86877837e-01 -4.82838819e-01
 -4.79089158e-01 -4.76411537e-01 -4.71867142e-01 -4.64885279e-01
 -4.62302599e-01 -4.56345529e-01 -4.53729967e-01 -4.50528527e-01
 -4.47578767e-01 -4.45682032e-01 -4.37047521e-01 -4.31869958e-01
 -4.29277223e-01 -4.23191135e-01 -4.20106092e-01 -4.18618140e-01
 -4.15627683e-01 -4.15219157e-01 -4.05303531e-01 -4.04391256e-01
 -4.00079842e-01 -3.97359806e-01 -3.93023078e-01 -3.80536773e-01
 -3.72316711e-01 -3.54092267e-01 -2.92634002e-01  3.70468623e-02
  8.56235758e-02  9.37134324e-02  1.08281600e-01  1.10260810e-01
  1.16242481e-01  1.19584478e-01  1.25610469e-01  1.31487817e-01
  1.36861213e-01  1.39308783e-01  1.44710524e-01  1.49256300e-01
  1.52910414e-01  1.55857772e-01  1.58285368e-01  1.65077070e-01
  1.67273322e-01  1.69458440e-01  1.69815139e-01  1.76235342e-01
  1.78216386e-01  1.81888601e-01  1.83019979e-01  1.86036117e-01
  1.86870841e-01  1.91790432e-01  1.93344049e-01  1.97209819e-01
  1.97916400e-01  2.04456007e-01  2.09334035e-01  2.10685833e-01
  2.11272263e-01  2.15021415e-01  2.17947309e-01  2.18769626e-01
  2.22011285e-01  2.25757219e-01  2.31987722e-01  2.33728764e-01
  2.36128376e-01  2.39557399e-01  2.42151869e-01  2.43814087e-01
  2.45052404e-01  2.48933301e-01  2.52558805e-01  2.56282641e-01
  2.59121091e-01  2.63921932e-01  2.67746105e-01  2.68670754e-01
  2.72414829e-01  2.76386230e-01  2.80413498e-01  2.82083241e-01
  2.85805591e-01  2.88832544e-01  2.89642527e-01  2.95164166e-01
  2.97188623e-01  3.00839319e-01  3.03281799e-01  3.05844429e-01
  3.08034372e-01  3.09155758e-01  3.13714373e-01  3.15691432e-01
  3.20403909e-01  3.24229396e-01  3.29877667e-01  3.33249824e-01
  3.36102584e-01  3.37834516e-01  3.41188087e-01  3.46648974e-01
  3.47974696e-01  3.50337640e-01  3.57846696e-01  3.60522509e-01
  3.65136631e-01  3.68483366e-01  3.70768443e-01  3.76555311e-01
  3.79849207e-01  3.82363422e-01  3.84540605e-01  3.86440775e-01
  3.92576627e-01  3.96735685e-01  3.99078199e-01  4.00964020e-01
  4.05952389e-01  4.09614664e-01  4.14025416e-01  4.17181541e-01
  4.19686499e-01  4.23736605e-01  4.25851025e-01  4.33495247e-01
  4.35967014e-01  4.41270140e-01  4.45531899e-01  4.48995367e-01
  4.51825854e-01  4.55180171e-01  4.61778494e-01  4.66169136e-01
  4.68367978e-01  4.70169115e-01  4.74027012e-01  4.77578594e-01
  4.81816797e-01  4.84606012e-01  4.86708531e-01  4.89124019e-01
  4.92385722e-01  4.93695775e-01  4.97648509e-01  5.01230902e-01
  5.02418332e-01  5.05939550e-01  5.07749982e-01  5.10213991e-01
  5.11994478e-01  5.14040176e-01  5.16714524e-01  5.17509724e-01
  5.19482577e-01  5.22077825e-01  5.22843398e-01  5.25510950e-01
  5.29596555e-01  5.30780230e-01  5.33759690e-01  5.34469748e-01
  5.38910712e-01  5.39643886e-01  5.41536373e-01  5.42067248e-01
  5.44893355e-01  5.45863553e-01  5.49277846e-01  5.51875429e-01
  5.53452472e-01  5.57851360e-01  5.59990813e-01  5.61634300e-01
  5.63840927e-01  5.64721224e-01  5.67195204e-01  5.69875798e-01
  5.72186440e-01  5.73235794e-01  5.75976482e-01  5.77797272e-01
  5.80571031e-01  5.82207619e-01  5.87540774e-01  5.89327247e-01
  5.90011200e-01  5.91436780e-01  5.96260816e-01  5.97974582e-01
  5.99760240e-01  6.04056731e-01  6.06759274e-01  6.10171797e-01
  6.13607583e-01  6.14892724e-01  6.19697800e-01  6.19732336e-01
  6.22325921e-01  6.27956338e-01  6.30770582e-01  6.36479302e-01
  6.38031870e-01  6.43731786e-01  6.47274611e-01  6.52097564e-01
  6.56535338e-01  6.58417202e-01  6.68333354e-01  6.71107579e-01
  6.73343681e-01  6.74134736e-01  6.79526070e-01  6.82752362e-01
  6.88191897e-01  6.91030862e-01  6.93892019e-01  7.01642380e-01
  7.02974748e-01  7.08244410e-01  7.11959554e-01  7.19516017e-01
  7.25681763e-01  7.30526804e-01  7.35129686e-01  7.45206206e-01
  7.46587991e-01  7.51442485e-01  7.52926587e-01  7.60701755e-01
  7.66277568e-01  7.70211249e-01  7.80370467e-01  7.82744612e-01
  7.83921333e-01  7.89719587e-01  7.93247882e-01  7.98492839e-01
  8.08299519e-01  8.11154356e-01  8.13301843e-01  8.23424557e-01
  8.27206386e-01  8.31765672e-01  8.39663111e-01  8.43173066e-01
  8.48707906e-01  8.51860517e-01  8.59100760e-01  8.67106947e-01
  8.73960412e-01  8.80510546e-01  8.81952933e-01  8.87555100e-01
  8.94504963e-01  8.97138769e-01  9.07303852e-01  9.12314716e-01
  9.17086306e-01  9.21366688e-01  9.26830511e-01  9.30785906e-01
  9.38201477e-01  9.41804591e-01  9.44079142e-01  9.46407057e-01
  9.58066154e-01  9.63651665e-01  9.68260559e-01  9.71166374e-01
  9.73013426e-01  9.78001363e-01  9.84551372e-01  9.89007732e-01
  9.90712026e-01  9.95244292e-01  1.00043784e+00  1.00605223e+00
  1.00977657e+00  1.01409934e+00  1.01968534e+00  1.02466781e+00
  1.03091723e+00  1.04118742e+00  1.04993988e+00  1.05922307e+00
  1.06047823e+00  1.06515446e+00  1.06837337e+00  1.07446441e+00
  1.07585527e+00  1.08179224e+00  1.08661933e+00  1.08851228e+00
  1.09530091e+00  1.09950715e+00  1.10550935e+00  1.10637282e+00
  1.11080212e+00  1.11906756e+00  1.12920810e+00  1.13296284e+00
  1.13620703e+00  1.14469085e+00  1.14481854e+00  1.15270434e+00
  1.15622734e+00  1.16331933e+00  1.17165172e+00  1.17462794e+00
  1.18064944e+00  1.18640562e+00  1.19091872e+00  1.19597090e+00
  1.20101595e+00  1.20374731e+00  1.20879513e+00  1.21287141e+00
  1.22286181e+00  1.22645345e+00  1.23298008e+00  1.23492617e+00
  1.24189029e+00  1.24668465e+00  1.25162639e+00  1.25389717e+00
  1.25846452e+00  1.26513714e+00  1.26793429e+00  1.27570726e+00
  1.27756807e+00  1.28466915e+00  1.29108054e+00  1.29466619e+00
  1.29792632e+00  1.30278267e+00  1.30957992e+00  1.31340680e+00
  1.32187520e+00  1.32473319e+00  1.32909103e+00  1.33037317e+00
  1.33501779e+00  1.34009572e+00  1.34621954e+00  1.34851258e+00
  1.35365291e+00  1.35733688e+00  1.36067492e+00  1.36592341e+00
  1.37528090e+00  1.37717290e+00  1.38249186e+00  1.38948035e+00
  1.39254947e+00  1.39808127e+00  1.40635880e+00  1.40857065e+00
  1.41617096e+00  1.42076401e+00  1.42674329e+00  1.43144365e+00
  1.43517411e+00  1.44063119e+00  1.44609119e+00  1.45220619e+00
  1.45825382e+00  1.45997715e+00  1.46412723e+00  1.47114056e+00
  1.48654627e+00  1.49492095e+00  1.50164878e+00  1.50309308e+00
  1.50772905e+00  1.51265063e+00  1.51963170e+00  1.52556744e+00
  1.52776533e+00  1.53317473e+00  1.54941190e+00  1.55446752e+00
  1.56881767e+00  1.57270185e+00  1.57341531e+00  1.58392984e+00
  1.59388574e+00  1.59849730e+00  1.60953750e+00  1.61014766e+00
  1.62283631e+00  1.63299168e+00  1.64294451e+00  1.64435998e+00
  1.64705508e+00  1.65386724e+00  1.65635687e+00  1.65839097e+00
  1.66461515e+00  1.67047584e+00  1.67422298e+00  1.67896014e+00
  1.68089411e+00  1.68958225e+00  1.69399627e+00  1.69683132e+00
  1.70141510e+00  1.70356001e+00  1.70550041e+00  1.70817346e+00
  1.71415483e+00  1.71826962e+00  1.72312717e+00  1.72785427e+00
  1.72836858e+00  1.73261069e+00  1.73602285e+00  1.73979066e+00
  1.74059666e+00  1.74609337e+00  1.75072178e+00  1.75725821e+00
  1.76156493e+00  1.76260766e+00  1.76582434e+00  1.77373254e+00
  1.77567671e+00  1.77851674e+00  1.77904683e+00  1.78632521e+00
  1.79028116e+00  1.79528341e+00  1.80166102e+00  1.80577484e+00
  1.81292457e+00  1.81577902e+00  1.81752886e+00  1.82465932e+00
  1.82974234e+00  1.84156052e+00  1.84758098e+00  1.84922841e+00
  1.85529769e+00  1.85920226e+00  1.86130572e+00  1.86960024e+00
  1.87478399e+00  1.88004304e+00  1.88294530e+00  1.89043997e+00
  1.89387696e+00  1.90247057e+00  1.90991278e+00  1.91471063e+00
  1.92267099e+00  1.92711004e+00  1.93232014e+00  1.93533002e+00
  1.94071140e+00  1.94198734e+00  1.94661763e+00  1.95621315e+00
  1.96157826e+00  1.97036170e+00  1.97173223e+00  1.98276030e+00
  1.98981690e+00  1.99400734e+00  1.99461128e+00  2.00415109e+00
  2.00722609e+00  2.00803345e+00  2.01520126e+00  2.01864501e+00
  2.02468176e+00  2.02766380e+00  2.04056595e+00  2.04549793e+00
  2.05256100e+00  2.05950247e+00  2.06399588e+00  2.06591827e+00
  2.06772465e+00  2.07542421e+00  2.08711933e+00  2.09040877e+00
  2.09271878e+00  2.09771722e+00  2.10435416e+00  2.11259783e+00
  2.12056438e+00  2.12726992e+00  2.12873552e+00  2.13386535e+00
  2.13910405e+00  2.14873834e+00  2.15151155e+00  2.15692664e+00
  2.16117616e+00  2.16757800e+00  2.17422988e+00  2.17716352e+00
  2.18593377e+00  2.19245207e+00  2.19509613e+00  2.19946200e+00
  2.20632074e+00  2.21164297e+00  2.21603557e+00  2.22497660e+00
  2.23158274e+00  2.23924482e+00  2.24582764e+00  2.24985106e+00
  2.25295132e+00  2.25818627e+00  2.26055057e+00  2.26603814e+00
  2.28171521e+00  2.29046769e+00  2.29496925e+00  2.29963473e+00
  2.30231618e+00  2.30746192e+00  2.31254825e+00  2.32073169e+00
  2.32202156e+00  2.32637541e+00  2.33678177e+00  2.34524283e+00
  2.35100120e+00  2.35748486e+00  2.36344461e+00  2.37060682e+00
  2.38215325e+00  2.38584694e+00  2.39342455e+00  2.39626933e+00
  2.40119117e+00  2.40504606e+00  2.40694811e+00  2.41642031e+00
  2.42648505e+00  2.43104921e+00  2.43926904e+00  2.44410412e+00
  2.44762143e+00  2.45441207e+00  2.45611026e+00  2.46710311e+00
  2.47008428e+00  2.47797339e+00  2.48309721e+00  2.48580350e+00
  2.48871362e+00  2.49622636e+00  2.50305055e+00  2.51443006e+00
  2.51686715e+00  2.51971612e+00  2.52508186e+00  2.52613237e+00
  2.53155327e+00  2.53778760e+00  2.54349552e+00  2.54846940e+00
  2.55239212e+00  2.55845179e+00  2.56405688e+00  2.56968921e+00
  2.57171893e+00  2.57868322e+00  2.58679227e+00  2.58785291e+00
  2.59386343e+00  2.60180042e+00  2.60709148e+00  2.61170428e+00
  2.61635799e+00  2.61956972e+00  2.62272580e+00  2.62605295e+00
  2.63040933e+00  2.63277283e+00  2.64053837e+00  2.64663758e+00
  2.64991352e+00  2.65672048e+00  2.65870685e+00  2.66154751e+00
  2.66505855e+00  2.66594070e+00  2.66842105e+00  2.67148583e+00
  2.67841466e+00  2.68011974e+00  2.68321765e+00  2.68896458e+00
  2.69009095e+00  2.69456553e+00  2.70330550e+00  2.70721554e+00
  2.71009834e+00  2.71520975e+00  2.71803722e+00  2.72122145e+00
  2.72698193e+00  2.73538085e+00  2.73591518e+00  2.73834226e+00
  2.74285089e+00  2.74513599e+00  2.75033831e+00  2.75477548e+00
  2.75840286e+00  2.75920764e+00  2.76423643e+00  2.76799819e+00
  2.77223717e+00  2.77535211e+00  2.77698685e+00  2.78764079e+00
  2.79062622e+00  2.79255181e+00  2.79692331e+00  2.80075371e+00
  2.80891904e+00  2.81028994e+00  2.81199504e+00  2.81887691e+00
  2.82053178e+00  2.83009768e+00  2.83154798e+00  2.83953471e+00
  2.84263869e+00  2.84630611e+00  2.84683481e+00  2.85128663e+00
  2.85356955e+00  2.85718699e+00  2.86044057e+00  2.87248207e+00
  2.87482662e+00  2.88182881e+00  2.88511227e+00  2.88877388e+00
  2.89081096e+00  2.89184608e+00  2.89889704e+00  2.90144849e+00
  2.90909800e+00  2.91107030e+00  2.91540365e+00  2.92345528e+00
  2.92529892e+00  2.93458843e+00  2.94381278e+00  2.94724640e+00
  2.95014124e+00  2.95354186e+00  2.96660232e+00  2.97009382e+00
  2.97463341e+00  2.98188239e+00  2.98646579e+00  2.99147337e+00
  2.99467316e+00  3.00224295e+00  3.00831174e+00  3.01216025e+00
  3.01621527e+00  3.02470708e+00  3.02824472e+00  3.03480373e+00
  3.03939430e+00  3.04168656e+00  3.04481330e+00  3.05526023e+00
  3.06271027e+00  3.07232979e+00  3.07998154e+00  3.08310563e+00
  3.08450627e+00  3.08770813e+00  3.09383317e+00  3.10722652e+00
  3.11487345e+00  3.11578036e+00  3.12303849e+00  3.12888542e+00
  3.13279980e+00  3.14365794e+00  3.14581432e+00  3.15055226e+00
  3.15214431e+00  3.16044647e+00  3.16778233e+00  3.17228153e+00
  3.18451419e+00  3.19311497e+00  3.19457623e+00  3.20030179e+00
  3.20727678e+00  3.21197158e+00  3.21610284e+00  3.21894439e+00
  3.22548859e+00  3.23202878e+00  3.23529045e+00  3.24104807e+00
  3.24579295e+00  3.24849045e+00  3.25796291e+00  3.26360934e+00
  3.26416777e+00  3.26748066e+00  3.27012831e+00  3.27507115e+00
  3.27678812e+00  3.28756846e+00  3.29347778e+00  3.29711687e+00
  3.30469721e+00  3.30656159e+00  3.30782537e+00  3.31688344e+00
  3.31791186e+00  3.32490363e+00  3.32672813e+00  3.33240605e+00
  3.33942587e+00  3.34304109e+00  3.34570126e+00  3.35522178e+00
  3.35922235e+00  3.36008105e+00  3.36898007e+00  3.37305677e+00
  3.37631288e+00  3.37921808e+00  3.38314212e+00  3.38607272e+00
  3.38761502e+00  3.39072683e+00  3.39356577e+00  3.39868728e+00
  3.40369257e+00  3.40648197e+00  3.40944281e+00  3.41699085e+00
  3.41962555e+00  3.42368983e+00  3.42960900e+00  3.43370697e+00
  3.43488850e+00  3.44716430e+00  3.44878646e+00  3.45443145e+00
  3.45579344e+00  3.46263749e+00  3.46730228e+00  3.46838422e+00
  3.47630099e+00  3.47853399e+00  3.48495674e+00  3.48742935e+00
  3.48846394e+00  3.49284370e+00  3.50020012e+00  3.50367859e+00
  3.51016560e+00  3.51208994e+00  3.51463860e+00  3.51569420e+00
  3.52296862e+00  3.53187792e+00  3.53536719e+00  3.53851581e+00
  3.54230156e+00  3.54505619e+00  3.54694068e+00  3.55429487e+00
  3.55740717e+00  3.56374718e+00  3.56748364e+00  3.57004897e+00
  3.57211405e+00  3.58119317e+00  3.58563570e+00  3.59017416e+00
  3.59437564e+00  3.59598409e+00  3.60853934e+00  3.61121915e+00
  3.61146086e+00  3.61769271e+00  3.62042401e+00  3.62884485e+00
  3.63285461e+00  3.63646035e+00  3.64097388e+00  3.64403693e+00
  3.65154635e+00  3.65767869e+00  3.66067417e+00  3.66372552e+00
  3.66843702e+00  3.67028339e+00  3.67794277e+00  3.68019124e+00
  3.69091165e+00  3.69602564e+00  3.70192909e+00  3.70949384e+00
  3.71186278e+00  3.71287326e+00  3.71896147e+00  3.72029475e+00
  3.72922339e+00  3.73912704e+00  3.74292000e+00  3.74672613e+00
  3.75306896e+00  3.75628039e+00  3.76195457e+00  3.76637564e+00
  3.76896548e+00  3.77845809e+00  3.78380486e+00  3.79089831e+00
  3.79309934e+00  3.80038935e+00  3.80517179e+00  3.80671896e+00
  3.81976710e+00  3.82482900e+00  3.82982842e+00  3.83355422e+00
  3.84830032e+00  3.85109697e+00  3.85612209e+00  3.86548804e+00
  3.86628757e+00  3.87345978e+00  3.88118593e+00  3.88586257e+00
  3.89648595e+00  3.89755613e+00  3.90030655e+00  3.90927618e+00
  3.91935770e+00  3.92266299e+00  3.93102411e+00  3.94541461e+00
  3.95886417e+00  3.96163414e+00  3.97661668e+00  3.98121793e+00
  3.99525054e+00  3.99784061e+00  4.00991677e+00  4.01323742e+00
  4.02714379e+00  4.03418409e+00  4.04021986e+00  4.04440395e+00
  4.05778027e+00  4.06277782e+00  4.06802853e+00  4.07156435e+00
  4.07293689e+00  4.07366609e+00  4.09252378e+00  4.09690218e+00
  4.10065027e+00  4.11017318e+00  4.11798177e+00  4.12112016e+00
  4.12291638e+00  4.12541459e+00  4.13414692e+00  4.14308899e+00
  4.14890843e+00  4.15229593e+00  4.15565161e+00  4.16440432e+00
  4.16895315e+00  4.16996138e+00  4.18164884e+00  4.18677250e+00
  4.19216964e+00  4.19751833e+00  4.20166551e+00  4.20715429e+00
  4.21769378e+00  4.22813514e+00  4.22969836e+00  4.23439572e+00
  4.24839826e+00  4.25307469e+00  4.26049689e+00  4.26982316e+00
  4.27312484e+00  4.28074916e+00  4.29165507e+00  4.30368167e+00
  4.30552295e+00  4.31553646e+00  4.31706395e+00  4.32403149e+00
  4.32628225e+00  4.33847579e+00  4.35155439e+00  4.36102588e+00
  4.36403794e+00  4.37514886e+00  4.37658661e+00  4.39776874e+00
  4.40911108e+00  4.41948092e+00  4.42896488e+00  4.43556558e+00
  4.43735903e+00  4.45747793e+00  4.46399147e+00  4.47485377e+00
  4.47932346e+00  4.48327308e+00  4.48562752e+00  4.49472378e+00
  4.50286183e+00  4.50691577e+00  4.51914397e+00  4.53494885e+00
  4.54033388e+00  4.54346375e+00  4.55150369e+00  4.56886422e+00
  4.57441829e+00  4.58002592e+00  4.59152145e+00  4.59249713e+00
  4.60057772e+00  4.60833445e+00  4.61486377e+00  4.62035589e+00
  4.62761101e+00  4.62960618e+00  4.63584016e+00  4.64262331e+00
  4.65104174e+00  4.66600854e+00  4.67246057e+00  4.68872990e+00
  4.69260311e+00  4.69882729e+00  4.70579265e+00  4.71610040e+00
  4.73811751e+00  4.74409542e+00  4.75396023e+00  4.76706467e+00
  4.77360420e+00  4.78884465e+00  4.80452494e+00  4.81083445e+00
  4.82148150e+00  4.83241089e+00  4.84596673e+00  4.85608170e+00
  4.87605288e+00  4.88838281e+00  4.89352149e+00  4.90848836e+00
  4.91349046e+00  4.92383367e+00  4.93481994e+00  4.94677436e+00
  4.96112824e+00  4.97088449e+00  4.97354840e+00  4.99556113e+00
  5.00979690e+00  5.01436152e+00  5.03627848e+00  5.04437673e+00
  5.06578572e+00  5.07454494e+00  5.10175589e+00  5.11304491e+00
  5.12329317e+00  5.12992233e+00  5.14376832e+00  5.17414547e+00
  5.19099805e+00  5.22066529e+00  5.24189461e+00  5.24988024e+00
  5.28568664e+00  5.30362998e+00  5.32048199e+00  5.34999741e+00
  5.38009106e+00  5.39226619e+00  5.40834790e+00  5.44183993e+00
  5.47404017e+00  5.49701851e+00  5.51646126e+00  5.60884027e+00
  5.62113197e+00  5.68288275e+00  5.71513520e+00  5.84154708e+00
  5.90894440e+00  6.04980807e+00  6.36318631e+00  6.61937666e+00
  6.87992515e+00  6.95654608e+00  7.10784584e+00  7.27823026e+00
  2.23566753e+01  2.23797338e+01  2.24060083e+01  2.24675493e+01
  2.25135680e+01  2.25223213e+01  2.25283479e+01  2.25643127e+01
  2.25766723e+01  2.25819757e+01  2.25891035e+01  2.25943388e+01
  2.25997383e+01  2.26212664e+01  2.26266228e+01  2.26499262e+01
  2.26605901e+01  2.26655452e+01  2.26727858e+01  2.27586737e+01
  2.27875056e+01  2.28347896e+01  2.29121900e+01  2.29823422e+01
  2.30564851e+01  2.31568822e+01  2.32702169e+01  4.41109809e+01]
nelec by numeric integration = 213.99969478616606
    CPU time for vxc    189.68 sec, wall time     10.54 sec
    CPU time for df vj and vk    614.70 sec, wall time     39.68 sec
    CPU time for df vj and vk    506.57 sec, wall time     27.08 sec
E1 = -6827.074998151477  Ecoul = 3202.906405733644  Exc = -171.49745410554448
Extra cycle  E= -1130.69259544519  delta_E= 2.27e-12  |g|= 3.5e-06  |ddm|= 7.71e-06
    CPU time for scf_cycle   4917.65 sec, wall time    336.55 sec
    CPU time for SCF   4917.66 sec, wall time    336.55 sec
converged SCF energy = -1130.69259544519
SCF Done after 336.66 seconds
after SCF memory used: 26.38 GB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
hdiag shape (109675,)
n_occ =  107
n_vir =  1025
max_vir =  285
A_size =  109675
A_reduced_size = 30495
a_x = 0.56
beta = 8.0
alpha = 4.58
Q-Gamma tensors building time = 1.22
after Q matrix memory used: 26.67 GB
stapol
|-------- In-house Developed stapol Starts ---------|
Residual conv = 1e-05


initial guess sTDDFT
preconditioner sTDDFT
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.8754 s
conv threhsold = 1.00e-02
final subspace: 11
max_norm =  8.78e-03
initial_cost 0.0044s  0.50%
MVcost     0.7885s  90.08%
GScost     0.0267s  3.05%
subgencost 0.0216s  2.47%
subcost    0.0041s  0.47%
alpha tensor of initial guess:
[[475.92271819  23.83075667 -17.07469842]
 [ 23.83075667 372.20961083  -4.00381384]
 [-17.07469842  -4.00381384 381.21766915]]
new_m = 3

Iteration 0
    CPU time for df vj and vk   1843.28 sec, wall time    113.44 sec
    CPU time for df vj and vk   1478.12 sec, wall time     79.37 sec
max_norm = 4.76e-01
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.8124 s
conv threhsold = 1.00e-02
final subspace: 12
max_norm =  3.78e-03
initial_cost 0.0043s  0.53%
MVcost     0.7398s  91.06%
GScost     0.0271s  3.34%
subgencost 0.0164s  2.01%
subcost    0.0003s  0.04%

Iteration 1
    CPU time for df vj and vk   1832.89 sec, wall time    111.99 sec
    CPU time for df vj and vk   1458.19 sec, wall time     77.95 sec
max_norm = 1.62e-01
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.8866 s
conv threhsold = 1.00e-02
final subspace: 12
max_norm =  4.99e-03
initial_cost 0.0049s  0.55%
MVcost     0.8099s  91.35%
GScost     0.0277s  3.12%
subgencost 0.0178s  2.00%
subcost    0.0004s  0.04%

Iteration 2
    CPU time for df vj and vk   1823.37 sec, wall time    111.05 sec
    CPU time for df vj and vk   1475.33 sec, wall time     79.35 sec
max_norm = 5.43e-02
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.7691 s
conv threhsold = 1.00e-02
final subspace: 10
max_norm =  8.97e-03
initial_cost 0.0057s  0.75%
MVcost     0.6957s  90.46%
GScost     0.0227s  2.95%
subgencost 0.0172s  2.23%
subcost    0.0004s  0.05%

Iteration 3
    CPU time for df vj and vk   1834.45 sec, wall time    112.18 sec
    CPU time for df vj and vk   1473.68 sec, wall time     78.94 sec
max_norm = 1.51e-02
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.8710 s
conv threhsold = 1.00e-02
final subspace: 11
max_norm =  6.96e-03
initial_cost 0.0061s  0.70%
MVcost     0.8039s  92.30%
GScost     0.0232s  2.66%
subgencost 0.0196s  2.25%
subcost    0.0004s  0.05%

Iteration 4
    CPU time for df vj and vk   1839.92 sec, wall time    111.12 sec
    CPU time for df vj and vk   1473.38 sec, wall time     78.63 sec
max_norm = 4.70e-03
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.7862 s
conv threhsold = 1.00e-02
final subspace: 11
max_norm =  6.72e-03
initial_cost 0.0049s  0.62%
MVcost     0.7179s  91.32%
GScost     0.0245s  3.12%
subgencost 0.0179s  2.28%
subcost    0.0004s  0.05%

Iteration 5
    CPU time for df vj and vk   1848.01 sec, wall time    112.30 sec
    CPU time for df vj and vk   1464.29 sec, wall time     78.12 sec
max_norm = 1.58e-03
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.6988 s
conv threhsold = 1.00e-02
final subspace: 10
max_norm =  9.05e-03
initial_cost 0.0043s  0.62%
MVcost     0.6419s  91.86%
GScost     0.0187s  2.67%
subgencost 0.0154s  2.21%
subcost    0.0003s  0.05%

Iteration 6
    CPU time for df vj and vk   1875.18 sec, wall time    112.82 sec
    CPU time for df vj and vk   1462.41 sec, wall time     79.19 sec
max_norm = 4.86e-04
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.7916 s
conv threhsold = 1.00e-02
final subspace: 11
max_norm =  8.49e-03
initial_cost 0.0055s  0.70%
MVcost     0.7267s  91.80%
GScost     0.0228s  2.88%
subgencost 0.0178s  2.24%
subcost    0.0004s  0.05%

Iteration 7
    CPU time for df vj and vk   1847.52 sec, wall time    113.41 sec
    CPU time for df vj and vk   1478.22 sec, wall time     79.82 sec
max_norm = 1.40e-04
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.7889 s
conv threhsold = 1.00e-02
final subspace: 11
max_norm =  6.92e-03
initial_cost 0.0043s  0.54%
MVcost     0.7275s  92.22%
GScost     0.0224s  2.84%
subgencost 0.0175s  2.22%
subcost    0.0004s  0.05%

Iteration 8
    CPU time for df vj and vk   1830.20 sec, wall time    111.56 sec
    CPU time for df vj and vk   1462.53 sec, wall time     78.19 sec
max_norm = 3.95e-05
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.8662 s
conv threhsold = 1.00e-02
final subspace: 12
max_norm =  2.38e-03
initial_cost 0.0043s  0.50%
MVcost     0.7939s  91.64%
GScost     0.0262s  3.02%
subgencost 0.0245s  2.83%
subcost    0.0004s  0.05%

Iteration 9
    CPU time for df vj and vk   1823.12 sec, wall time    110.82 sec
    CPU time for df vj and vk   1463.31 sec, wall time     78.40 sec
max_norm = 1.09e-05
Static polarizability procedure aborted
sTDDFT Stapol precond Converged
after 4 steps 0.2419 s
conv threhsold = 1.00e-02
final subspace: 4
max_norm =  2.62e-03
initial_cost 0.0006s  0.26%
MVcost     0.2255s  93.25%
GScost     0.0039s  1.62%
subgencost 0.0056s  2.30%
subcost    0.0004s  0.15%

Iteration 10
    CPU time for df vj and vk    616.28 sec, wall time     40.78 sec
    CPU time for df vj and vk    491.87 sec, wall time     26.67 sec
max_norm = 8.83e-06
static polarizability precodure aborted

Static polarizability Converged
after 11 steps; 2352.3231 s
final subspace (31, 31)
max_norm =  8.83e-06
initial_cost 0.9527s  0.04%
MVcost     2341.7046s  99.55%
Pcost      7.6263s  0.32%
Static polarizability tensor alpha
[[432.51770102  24.34559167  -6.68067084]
 [ 24.34559167 288.45428509 -16.69801352]
 [ -6.68067084 -16.69801352 275.55008317]]


initial guess Adiag
preconditioner Adiag
alpha tensor of initial guess:
[[357.92929411  14.88056159  -6.30387391]
 [ 14.88056159 313.13033669 -11.37864685]
 [ -6.30387391 -11.37864685 320.70414513]]
new_m = 3

Iteration 0
    CPU time for df vj and vk   1830.27 sec, wall time    114.13 sec
    CPU time for df vj and vk   1463.41 sec, wall time     78.64 sec
max_norm = 4.67e-01

Iteration 1
    CPU time for df vj and vk   1819.56 sec, wall time    110.42 sec
    CPU time for df vj and vk   1452.67 sec, wall time     78.41 sec
max_norm = 1.79e-01

Iteration 2
    CPU time for df vj and vk   1820.87 sec, wall time    111.04 sec
    CPU time for df vj and vk   1468.51 sec, wall time     78.44 sec
max_norm = 7.89e-02

Iteration 3
    CPU time for df vj and vk   1829.72 sec, wall time    111.45 sec
    CPU time for df vj and vk   1462.15 sec, wall time     79.27 sec
max_norm = 3.17e-02

Iteration 4
    CPU time for df vj and vk   1828.62 sec, wall time    111.63 sec
    CPU time for df vj and vk   1481.28 sec, wall time     79.93 sec
max_norm = 1.15e-02

Iteration 5
    CPU time for df vj and vk   1864.72 sec, wall time    113.31 sec
    CPU time for df vj and vk   1474.14 sec, wall time     78.83 sec
max_norm = 3.54e-03

Iteration 6
    CPU time for df vj and vk   1844.04 sec, wall time    112.05 sec
    CPU time for df vj and vk   1464.75 sec, wall time     78.28 sec
max_norm = 9.89e-04

Iteration 7
    CPU time for df vj and vk   1829.15 sec, wall time    111.49 sec
    CPU time for df vj and vk   1462.20 sec, wall time     78.64 sec
max_norm = 3.21e-04

Iteration 8
    CPU time for df vj and vk   1850.17 sec, wall time    112.85 sec
    CPU time for df vj and vk   1468.59 sec, wall time     79.23 sec
max_norm = 8.82e-05

Iteration 9
    CPU time for df vj and vk   1839.06 sec, wall time    112.96 sec
    CPU time for df vj and vk   1457.67 sec, wall time     78.24 sec
max_norm = 2.91e-05

Iteration 10
    CPU time for df vj and vk   1856.15 sec, wall time    113.31 sec
    CPU time for df vj and vk   1462.46 sec, wall time     78.35 sec
max_norm = 1.01e-05

Iteration 11
    CPU time for df vj and vk    619.54 sec, wall time     39.46 sec
    CPU time for df vj and vk    492.79 sec, wall time     26.62 sec
max_norm = 6.05e-06
static polarizability precodure aborted

Static polarizability Converged
after 12 steps; 2565.2025 s
final subspace (34, 34)
max_norm =  6.05e-06
initial_cost 0.0563s  0.00%
MVcost     2562.9732s  99.91%
Pcost      0.0249s  0.00%
Static polarizability tensor alpha
[[432.51770103  24.34559167  -6.68067084]
 [ 24.34559167 288.45428509 -16.69801352]
 [ -6.68067084 -16.69801352 275.55008317]]
xyzfile = 72_Vitamin_D3.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 4
pytd = False
TDA = False
TDDFT = False
dynpol = False
dynpol_omega = []
stapol = True
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
ip_options = [0, 1]
conv_tolerance = 1e-05
initial_TOL = 0.01
precond_TOL = 0.01
extrainitial = 8
max = 30
eigensolver_tol = 1e-05
memory = 60000
verbose = 5
beta = []
alpha = []
|-------- In-house Developed stapol Ends ----------|
