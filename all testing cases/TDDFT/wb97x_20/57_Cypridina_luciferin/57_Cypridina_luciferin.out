curpath /scratch/pbsjobs/job.15978429.hpc
lib.num_threads() =  16
at beginning memory used: 0.05 GB
mol.max_memory 80000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul9.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

'''wb97x  methanol, 1e-5
  sTDDFT no truncate [6.46636611 8.18031534 8.38140651 9.45011415 9.5061059 ]
            40 eV    [6.46746642 8.18218267 8.38314651 9.45214869 9.5126739 ]
    sTDA no truncate [6.46739711 8.18182208 8.38358473 9.45195554 9.52133129]
            40 eV    [6.46827111 8.18334703 8.38483801 9.45361525 9.52562255]
'''
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

def gen_args():
    parser = argparse.ArgumentParser(description='Davidson')
    parser.add_argument('-x', '--xyzfile',          type=str,   default='NA',  help='xyz filename (molecule.xyz)')
    parser.add_argument('-chk', '--checkfile',      type=bool,  default=False, help='checkpoint filename (.chk)')
    parser.add_argument('-m', '--method',           type=str,   default='RKS', help='RHF RKS UHF UKS')
    parser.add_argument('-f', '--functional',       type=str,   default='NA',  help='xc functional')
    parser.add_argument('-b', '--basis_set',        type=str,   default='NA',  help='basis set')
    parser.add_argument('-df', '--density_fit',     type=bool,  default=True,  help='density fitting turn on')
    parser.add_argument('-g', '--grid_level',       type=int,   default='3',   help='0-9, 9 is best')

    parser.add_argument('-n','--nstates',           type=int,   default = 4,      help='number of excited states')
    parser.add_argument('-pytd','--pytd',           type=bool,  default = False , help='whether to compare with PySCF TDDFT')

    parser.add_argument('-TDA','--TDA',             type=bool,  default = False, help='perform TDA')
    parser.add_argument('-TDDFT','--TDDFT',         type=bool,  default = False, help='perform TDDFT')
    parser.add_argument('-dynpol','--dynpol',       type=bool,  default = False, help='perform dynamic polarizability')
    parser.add_argument('-omega','--dynpol_omega',  type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
    parser.add_argument('-stapol','--stapol',       type=bool,  default = False, help='perform static polarizability')
    parser.add_argument('-sTDA','--sTDA',           type=bool,  default = False, help='perform sTDA calculation')
    parser.add_argument('-sTDDFT','--sTDDFT',       type=bool,  default = False, help='perform sTDDFT calculation')
    parser.add_argument('-TT','--Truncate_test',    type=bool,  default = False, help='test the wall time for different virtual truncation')

    parser.add_argument('-TV','--truncate_virtual', type=float, default = 40,    help='the threshold to truncate virtual orbitals, in eV')

    parser.add_argument('-o','--ip_options',        type=int,   default = [0], nargs='+', help='0-7')
    parser.add_argument('-t','--conv_tolerance',    type=float, default= 1e-5, help='residual norm Convergence threhsold')

    parser.add_argument('-it','--initial_TOL',      type=float, default= 1e-3, help='conv for the inital guess')
    parser.add_argument('-pt','--precond_TOL',      type=float, default= 1e-2, help='conv for TDA preconditioner')

    parser.add_argument('-ei','--extrainitial',     type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
    parser.add_argument('-max','--max',             type=int,   default= 30,   help='max iterations')

    parser.add_argument('-et','--eigensolver_tol',  type=float, default= 1e-5, help='conv for new guess generator in new_ES')
    parser.add_argument('-M','--memory',            type=int,   default= 4000, help='max_memory')
    parser.add_argument('-v','--verbose',           type=int,   default= 5,    help='mol.verbose = 3,4,5')

    parser.add_argument('-be','--beta',             type=float, default= [],    nargs='+', help='beta = 0.83')
    parser.add_argument('-al','--alpha',            type=float, default= [],    nargs='+', help='alpha = 0.83')

    args = parser.parse_args()
    if args.dynpol == True and args.dynpol_omega == []:
        raise ValueError('External Perturbation ω cannot be None')
    return args
args = gen_args()

def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024**3
    print('{} memory used: {:<.2f} GB'.format(hint, memory))

show_memory_info('at beginning')

'''read xyz file and delete its first two lines'''
basename = args.xyzfile.split('.',1)[0]

def SCF_kernel():
    kernel_0 = time.time()
    f = open(args.xyzfile)
    atom_coordinates = f.readlines()
    del atom_coordinates[:2]
    '''build geometry in PySCF'''
    mol = gto.Mole()
    mol.atom = atom_coordinates
    mol.basis = args.basis_set
    mol.verbose = args.verbose
    mol.max_memory = args.memory
    print('mol.max_memory', mol.max_memory)
    mol.build(parse_arg = False)
    '''DFT or HF'''
    if args.method == 'RKS':
        mf = dft.RKS(mol)
    elif args.method == 'UKS':
        mf = dft.UKS(mol)
    elif args.method == 'RHF':
        mf = scf.RHF(mol)
    elif args.method == 'UHF':
        mf = scf.UHF(mol)
    if 'KS' in args.method:
        print('RKS')
        mf.xc = args.functional
        mf.grids.level = args.grid_level
    else:
        print('HF')
    if args.density_fit:
        mf = mf.density_fit()
        print('Density fitting turned on')
    if args.checkfile == True:
        '''use the *.chk file as scf input'''
        mf.chkfile = basename + '_' + args.functional + '.chk'
        mf.init_guess = 'chkfile'
    mf.conv_tol = 1e-10
    print ('Molecule built')
    print ('Calculating SCF Energy...')
    mf.kernel()

    kernel_1 = time.time()
    kernel_t = kernel_1 - kernel_0

    return mol, mf, kernel_t

mol, mf, kernel_t = SCF_kernel()

print ('SCF Done after %.2f'%kernel_t, 'seconds')

show_memory_info('after SCF')

'''Collect everything needed from PySCF'''

Hartree_to_eV = 27.211386245988

def gen_global_var():
    '''TDA_vind & TDDFT_vind are ab-initio matrix vector multiplication function
    '''
    td = tddft.TDA(mf)
    TD = tddft.TDDFT(mf)
    TDA_vind, hdiag = td.gen_vind(mf)
    TDDFT_vind, Hdiag = TD.gen_vind(mf)

    Natm = mol.natm
    '''mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
       N_bf is the total amount of MOs
       coefficient_matrix_C is the unorthonormalized coefficient matrix
       if no truncation, then max_vir = n_vir and n_occ + max_vir = N_bf
    '''
    mo_occ = mf.mo_occ
    coefficient_matrix_C = mf.mo_coeff
    N_bf = len(mo_occ)
    n_occ = len(np.where(mo_occ > 0)[0])
    n_vir = len(np.where(mo_occ == 0)[0])
    delta_hdiag = hdiag.reshape(n_occ, n_vir)
    A_size = n_occ * n_vir

    tol_eV = args.truncate_virtual/Hartree_to_eV
    homo_vir = delta_hdiag[-1,:]
    max_vir = len(np.where(homo_vir <= tol_eV)[0])

    max_vir_hdiag = delta_hdiag[:,:max_vir]

    A_reduced_size = n_occ * max_vir

    '''R_array is inter-particle distance array
       unit == ’Bohr’, 5.29177210903(80)×10^(−11) m
    '''
    R_array = pyscf.gto.mole.inter_distance(mol, coords=None)

    print('hdiag shape', hdiag.shape)
    print('n_occ = ', n_occ)
    print('n_vir = ', n_vir)
    print('max_vir = ', max_vir)
    print('A_size = ', A_size)
    print('A_reduced_size =', A_reduced_size)

    return TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
                    max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
                        n_vir, max_vir, A_size, A_reduced_size, R_array

TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
        max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
             n_vir, max_vir, A_size, A_reduced_size, R_array = gen_global_var()

def TDA_matrix_vector(V):
    '''return AX'''
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X
       this is not the optimum way, but the only way in PySCF
    '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1

def gen_HARDNESS():
    '''a dictionary of chemical hardness, by mappig two lists:
       list of elements 1-94
       list of hardness for elements 1-94, floats,in Hartree
    '''
    elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', \
    'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', \
    'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', \
    'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', \
    'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', \
    'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\
    'Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', \
    'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
    hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,\
    0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,\
    0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,\
    0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,\
    0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,\
    0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,\
    0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,\
    0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,\
    0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,\
    0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,\
    0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,\
    0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,\
    0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,\
    0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,\
    0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,\
    0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
    HARDNESS = dict(zip(elements,hardness))
    return HARDNESS

def matrix_power(S,a):
    '''X == S^a'''
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    return X

def orthonormalize(C):
    ''' produce orthonormalized coefficient matrix C, N_bf * N_bf
        S = mf.get_ovlp()  is basis overlap matrix
        S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
        np.dot(C.T,C) is a an identity matrix
    '''
    S = mf.get_ovlp()
    X = matrix_power(S, 0.5)
    C = np.dot(X,C)
    return C

def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    '''NA is for Hartree-Fork'''
    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    Func_ax = dict(zip(hybride_F, hybride_paramt))

    beta1 = 0.2
    beta2 = 1.83
    alpha1 = 1.42
    alpha2 = 0.48
    '''RSH functionals have specific a_x, beta, alpha values;
       hybride fucntionals have fixed alpha12 and beta12 values,
       with different a_x values, by which create beta, alpha
    '''
    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]
    elif args.functional in hybride_F:
        a_x = Func_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)

    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

def gen_gammaJK():
    '''creat GammaK and GammaK matrix
       mol.atom_pure_symbol(atom_id) returns the element symbol
    '''
    HARDNESS = gen_HARDNESS()
    a = [HARDNESS[mol.atom_pure_symbol(atom_id)] for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2
    GammaJ = (R_array**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R_array**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

def generateQ():
    '''build q_iajb tensor'''
    C = orthonormalize(coefficient_matrix_C)
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

def gen_QJK(max_vir=max_vir):

    '''pre-calculate and store the Q-Gamma rank 3 tensor
       qia * gamma * qjb -> qia GK_q_jb
    '''
    Qstart = time.time()
    q_tensors = generateQ()
    GammaJ, GammaK = gen_gammaJK()

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)
    Qend = time.time()
    Q_time = Qend - Qstart
    print('Q-Gamma tensors building time = %.2f'%Q_time)
    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()

show_memory_info('after Q matrix')

def gen_iajb_ijab_ibja_delta_fly(max_vir = max_vir, \
                                    q_ij = q_ij, \
                                    q_ab = q_ab, \
                                    q_ia = q_ia , \
                                 GK_q_jb = GK_q_jb, \
                                 GJ_q_ab = GJ_q_ab):
    '''define sTDA on-the-fly two electron intergeral (pq|rs)
       A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v
       iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
       ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)
    '''
    def iajb_fly(V):
        '''(ia|jb) '''
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        return iajb_V

    def ijab_fly(V):
        '''(ij|ab) '''
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        return ijab_V

    def ibja_fly(V):
        '''the Forck exchange energy in B matrix
           (ib|ja)
        '''
        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        return ibja_V

    def delta_fly(V):
        '''delta_hdiag.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_hdiag, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''max_vir_hdiag.shape = (n_occ, max_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir = max_vir, \
                              iajb_fly = iajb_fly, \
                              ijab_fly = ijab_fly, \
                              ibja_fly = ibja_fly, \
                     delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        '''return AX'''
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''return AX+BY and AY+BX
           sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
           sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        '''return (A+B)X = delta_fly(V) + 4*iajb_fly(V)
           - ijab_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir, -1)
        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)
        U = U.reshape(n_occ*max_vir, -1)

        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

def Gram_Schmidt_bvec(A, bvec):
    '''orthonormalize vector b against all vectors in A
       b = b - A*(A.T*b)
       suppose A is orthonormalized
    '''
    if A.shape[1] != 0:
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    '''orthonormalize vector |x,y> against all vectors in |V,W>'''
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)
    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    '''V is a vectors holder
       count is the amount of vectors that already sit in the holder
       nvec is amount of new vectors intended to fill in the V
       count will be final amount of vectors in V
    '''
    nvec = np.shape(vecs)[1]
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize
        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count
    return V, new_count

def S_symmetry_orthogonal(x,y):
    '''symmetrically orthogonalize the vectors |x,y> and |y,x>
       as close to original vectors as possible
    '''
    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A

def check_orthonormal(A):
    '''define the orthonormality of a matrix A as the norm of (A.T*A - I)'''
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c

def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    '''put X_new into V, and Y_new into W
       m: the amount of vectors that already on V or W
       nvec: amount of new vectors intended to put in the V and W
    '''
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]

    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):
        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart

        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m

def solve_AX_Xla_B(A, omega, Q):
    '''AX - XΩ  = Q
       A, Ω, Q are known, solve X
    '''
    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)
    X *= Qnorm

    return X

def TDA_A_diag_initial_guess(m, hdiag = hdiag):
    '''m is the amount of initial guesses'''
    hdiag = hdiag.reshape(-1,)
    V_size = hdiag.shape[0]
    Dsort = hdiag.argsort()
    energies = hdiag[Dsort][:m]*Hartree_to_eV
    V = np.zeros((V_size, m))
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V, energies

def TDA_A_diag_preconditioner(residual, sub_eigenvalue, current_dic = None,\
                            hdiag = hdiag, tol = None, full_guess=None, \
                        return_index=None, W_H=None, V_H=None, sub_A_H=None):
    '''DX = XΩ'''
    k = np.shape(residual)[1]
    t = 1e-14
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    '''force all small values not in [-t,t]'''
    D = np.where( abs(D) < t, np.sign(D)*t, D)
    new_guess = residual/D

    if current_dic != None:
        return new_guess, current_dic
    else:
        return new_guess

def sTDA_eigen_solver(k, tol=args.initial_TOL):
    '''A'X = XΩ'''
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    max = 30

    '''m is size of subspace'''
    m = 0
    new_m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)

    '''V is subsapce basis
       W is transformed guess vectors'''
    V[:, :new_m],initial_energies = TDA_A_diag_initial_guess(\
                                            new_m, hdiag = max_vir_hdiag)
    for i in range(max):
        '''create subspace'''
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)

        '''Diagonalize the subspace Hamiltonian, and sorted.
        sub_eigenvalue[:k] are smallest k eigenvalues'''
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])

        '''residual = AX - XΩ = AVx - XΩ = Wx - XΩ'''
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess*sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        '''precondition the unconverged residuals'''
        new_guess = TDA_A_diag_preconditioner(\
                        residual = residual[:,index],\
                  sub_eigenvalue = sub_eigenvalue[:k][index],\
                           hdiag = max_vir_hdiag)

        '''orthonormalize the new guess against basis and put into V holder'''
        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalized in', i, 'steps; ', '%.4f'%sTDA_D, 'seconds' )
    print('threshold =', tol)
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*Hartree_to_eV)

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    omega = sub_eigenvalue[:k]*Hartree_to_eV
    return U, omega

def sTDA_preconditioner(residual, sub_eigenvalue, tol=args.precond_TOL,\
                        current_dic=None, full_guess=None, return_index=None,\
                        W_H=None, V_H=None, sub_A_H=None):
    '''sTDA preconditioner
       (A - Ω*I)^-1 P = X
       AX - XΩ = P
       P is residuals (in big Davidson's loop) to be preconditioned
    '''
    p_start = time.time()

    '''number of vectors to be preconditioned'''
    N_vectors = residual.shape[1]
    Residuals = residual.reshape(n_occ,n_vir,-1)
    omega = sub_eigenvalue
    P = Residuals[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P = P/pnorm

    start = time.time()
    tol = args.precond_TOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    '''now V and W are empty holders, 0 vectors
       W = sTDA_mv(V)
       count is the amount of vectors that already sit in the holder
       in each iteration, V and W will be filled/updated with new guess basis
       which is the preconditioned residuals
    '''

    '''initial guess: DX - XΩ = P
       Dp is the preconditioner
       <t: returns np.sign(D)*t; else: D
    '''
    t = 1e-10
    Dp = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - omega
    Dp = np.where(abs(Dp)<t, \
                                        np.sign(Dp)*t, Dp)
    Dp = Dp.reshape(n_occ, n_vir, -1)
    D = Dp[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    '''generate initial guess'''
    Xig = P*inv_D
    count = 0
    V, new_count = Gram_Schmidt_fill_holder(V, count, Xig)

    origin_dic = current_dic.copy()
    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0

    for i in range(max):
        substart = time.time()
        '''project sTDA_A matrix and vector P into subspace'''
        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        sub_P= np.dot(V[:,:new_count].T, P)
        sub_A = np.dot(V[:,:new_count].T, W[:,:new_count])
        subend = time.time()
        subgencost += subend - substart

        sub_A = symmetrize(sub_A)
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, omega, sub_P)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:new_count], sub_guess)
        residual = np.dot(W[:,:new_count], sub_guess) - full_guess*omega - P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append(\
                                    {'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index of unconverged states'''
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''precondition the unconverged residuals'''
        new_guess = residual[:,index]*inv_D[:,index]


        GSstart = time.time()
        count = new_count
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart

    p_end = time.time()
    p_cost = p_end - p_start

    if i == (max -1):
        print('_____sTDA Preconditioner Failed Due to Iteration Limit _______')
        print('failed after ', i, 'steps,', '%.4f'%p_cost,'s')
        print('orthonormality of V', check_orthonormal(V[:,:count]))
        print('current residual norms', r_norms)
    else:
        print('sTDA precond Done after', i, 'steps;', '%.4f'%p_cost,'seconds')

    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['subgencost', 'mvcost', 'GScost', 'subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/p_cost))
    full_guess *= pnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = P2'''
        P2 = Residuals[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = Dp[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)

    '''if we want to know more about the preconditioning process,
        return the current_dic, rather than origin_dic'''
    if current_dic != None:
        return U, origin_dic
    else:
        return U

def Jacobi_preconditioner(residual, sub_eigenvalue, current_dic, full_guess,\
                return_index = None, W_H = None, V_H = None, sub_A_H = None):
    '''(1-uu*)(A-Ω*I)(1-uu*)t = -B
       B is residual, we want to solve t
       z approximates t
       z = (A-Ω*I)^(-1)*(-B) - α(A-Ω*I)^(-1)*u
            let K_inv_y = (A-Ω*I)^(-1)*(-B)
            and K_inv_u = (A-Ω*I)^(-1)*u
       z = K_inv_y - α*K_inv_u
       where α = [u*(A-Ω*I)^(-1)y]/[u*(A-Ω*I)^(-1)u]
       first, solve (A-Ω*I)^(-1)y and (A-Ω*I)^(-1)u
    '''
    B = residual
    omega = sub_eigenvalue
    u = current_guess

    K_inv_y = sTDA_preconditioner(-B, omega)
    K_inv_u = sTDA_preconditioner(u, omega)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d
    z = K_inv_y -  Alpha*K_inv_u

    return z, current_dic

def on_the_fly_Hx(W, V, sub_A, x):
    def Qx(V, x):
        '''Qx = (1 - V*V.T)*x = x - V*V.T*x'''
        VX = np.dot(V.T,x)
        x -= np.dot(V,VX)
        return x
    '''on-the-fly compute H'x
       H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q
       K approximates H, here K = sTDA_A
       H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)
       H′x ≡ a + b − c + d
    '''
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx

def new_ES(full_guess, return_index, W_H, V_H, sub_A_H, \
                        residual=None, sub_eigenvalue=None, current_dic=None):
    '''new eigenvalue solver, to diagonalize the H'
       the traditional Davidson to diagonalize the H' matrix
       W_H, V_H, sub_A_H are from the exact H
    '''
    new_ES_start = time.time()
    tol = args.eigensolver_tol
    max = 30

    k = args.nstates
    m = min([k+8, 2*k, A_size])

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    '''sTDA as initial guess'''
    V = sTDA_eigen_solver(m, V)
    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])

    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        residual = np.dot(W[:,:m], sub_eigenket[:,:k])
        residual -= np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        new_guess = TDA_A_diag_preconditioner(residual[:,index], \
                                                    sub_eigenvalue[:k][index])
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m

    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    new_ES_end = time.time()
    new_ES_cost = new_ES_end - new_ES_start
    print('H_app diagonalization done in',i,'steps; ','%.2f'%new_ES_cost, 's')
    print('threshold =', tol)
    return full_guess[:,return_index], current_dic

def gen_TDA_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDA']   = sTDA_eigen_solver
    i_lib['Adiag']  = TDA_A_diag_initial_guess
    p_lib['sTDA']   = sTDA_preconditioner
    p_lib['Adiag']  = TDA_A_diag_preconditioner
    p_lib['Jacobi'] = Jacobi_preconditioner
    p_lib['new_ES'] = new_ES
    return i_lib, p_lib

def fill_dictionary(dic,init,prec,k,icost,pcost,wall_time,N_itr,N_mv,\
            initial_energies=None,energies=None,difference=None,overlap=None,\
            tensor_alpha=None, initial_tensor_alpha=None):
    dic['initial guess'] = init
    dic['preconditioner'] = prec
    dic['nstate'] = k
    dic['molecule'] = basename
    dic['method'] = args.method
    dic['functional'] = args.functional
    dic['threshold'] = args.conv_tolerance
    dic['SCF time'] = kernel_t
    dic['Initial guess time'] = icost
    dic['initial guess threshold'] = args.initial_TOL
    dic['New guess generating time'] = pcost
    dic['preconditioner threshold'] = args.precond_TOL
    dic['total time'] = wall_time
    dic['excitation energy(eV)'] = energies
    dic['iterations'] = N_itr
    dic['A matrix size'] = A_size
    dic['final subspace size'] = N_mv
    dic['ax'] = a_x
    dic['alpha'] = alpha
    dic['beta'] = beta
    dic['virtual truncation tol'] = args.truncate_virtual
    dic['n_occ'] = n_occ
    dic['n_vir'] = n_vir
    dic['max_vir'] = max_vir
    dic['semiempirical_difference'] = difference
    dic['overlap'] = overlap
    dic['initial_energies'] = initial_energies
    dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    dic['Dynamic polarizability tensor alpha'] = tensor_alpha
    dic['Dynamic polarizability initial tensor alpha'] = initial_tensor_alpha
    return dic

def Davidson(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''Davidson frame, we can use different initial guess and preconditioner'''
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    TDA_i_lib, TDA_p_lib = gen_TDA_lib()
    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)

    init_start = time.time()
    max = args.max
    m = 0
    new_m = min([k + args.extrainitial, 2*k, A_size])
    V = np.zeros((A_size, max*k + new_m))
    W = np.zeros_like(V)
    V[:, :new_m], initial_energies = initial_guess(new_m)
    init_end = time.time()

    init_time = init_end - init_start
    print('initial guess time %.4f seconds'%init_time)

    Pcost = 0
    MVcost = 0
    for ii in range(max):
        print('\nIteration ', ii)
        istart = time.time()

        MV_start = time.time()
        W[:, m:new_m] = TDA_matrix_vector(V[:,m:new_m])
        MV_end = time.time()
        iMVcost = MV_end - MV_start
        MVcost += iMVcost
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm %.2e'%max_norm)
        if max_norm < tol or ii == (max-1):
            iend = time.time()
            icost = iend - istart
            current_dic['iteration total cost'] = icost
            current_dic['iteration MV cost'] = iMVcost
            iteration_list[ii] = current_dic
            print('iMVcost %.4f'%iMVcost)
            print('icost %.4f'%icost)
            print('Davidson procedure Done \n')
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                residual = residual[:,index],
                          sub_eigenvalue = sub_eigenvalue[:k][index],
                             current_dic = current_dic,
                              full_guess = full_guess[:,index],
                            return_index = index,
                                     W_H = W[:,:m],
                                     V_H = V[:,:m],
                                 sub_A_H = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('new generated guesses:', new_m - m)

        iend = time.time()
        icost = iend - istart
        current_dic['iteration cost'] = icost
        current_dic['iteration MV cost'] = iMVcost
        iteration_list[ii] = current_dic
        print('iMVcost %.4f'%iMVcost)
        print('icost %.4f'%icost)

    energies = sub_eigenvalue[:k]*Hartree_to_eV

    D_end = time.time()
    Dcost = D_end - D_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
                                icost=init_time, pcost=Pcost, wall_time=Dcost,\
            energies = energies.tolist(), N_itr=ii+1, N_mv=np.shape(sub_A)[0],\
            initial_energies=initial_energies.tolist())
    if ii == max-1:
        print('========== Davidson Failed Due to Iteration Limit ============')
        print('current residual norms', r_norms)
    else:
        print('------- Davidson done -------')
    print('max_norm = ', max_norm)
    print('Total steps =', ii+1)
    print('Total time: %.4f seconds'%Dcost)
    print('MVcost %.4f'%MVcost)
    print('Final subspace shape = %s'%np.shape(sub_A)[0])
    print('Precond time: %.4f seconds'%Pcost, '{:.2%}'.format(Pcost/Dcost))
    return energies, full_guess, Davidson_dic

def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag=hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder[:,:new_m], energies = TDA_A_diag_initial_guess(new_m, hdiag=hdiag)
    return V_holder, W_holder, new_m, energies,\
                V_holder[:,:new_m], W_holder[:,:new_m]

def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag=hdiag, tol=None):
    '''preconditioners for each corresponding residual (state)'''
    hdiag = hdiag.reshape(-1,1)
    k = R_x.shape[1]
    t = 1e-14
    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    D_y_inv = D_y**-1

    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new

def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  Ω = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    dambd =  d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    dapbd = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    M = np.linalg.multi_dot([G.T, L_inv, dapbd, L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([L_inv.T, G, Z])\
            *(np.array(omega)**-0.5).reshape(1,-1)

    x_m_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([U_inv, G_inv.T, Z])\
            *(np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    return omega, x, y

def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    '''[ a b ] x - [ σ   π] x  Ω = p
       [ b a ] y   [-π  -σ] y    = q
       normalize the right hand side first
    '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)

    p /= pqnorm
    q /= pqnorm

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    '''LU = d^−1/2 (σ − π) d^−1/2
       A = PLU
       P is identity matrix only when A is diagonally dominant
    '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T'''
    dambd = d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    '''G is lower triangle matrix'''
    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    '''a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T
       M = G^T (a ̃+ b ̃) G
    '''
    dapba = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    a_p_b_tilde = np.linalg.multi_dot([L_inv, dapba, L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde)
    T += np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    '''(x ̃+ y ̃) = GZ
       x + y = d^-1/2 L^-T (x ̃+ y ̃)
       x - y = d^-1/2 U^-1 (x ̃- y ̃)
    '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)

    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x
    x *= pqnorm
    y *= pqnorm
    return x, y

def sTDDFT_eigen_solver(k, tol=args.initial_TOL):
    '''[ A' B' ] X - [1   0] Y Ω = 0
       [ B' A' ] Y   [0  -1] X   = 0
    '''
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    print('sTDDFT Convergence tol = %.2e'%tol)
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''set up initial guess V W, transformed vectors U1 U2'''
    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)


        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the eigenvalue omega in the subspace'''
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)

        '''GS and symmetric orthonormalization'''
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTDDFT Failed Due to Iteration Limit=================')
        print('sTDDFT diagonalization failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT diagonalization Converged' )

    print('after ', ii+1, 'iterations; %.4f'%sTDDFT_cost, 'seconds')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s {:<5.2%}".format(enrty, cost, cost/sTDDFT_cost))
    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*Hartree_to_eV
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y

def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup

def sTDDFT_preconditioner(Rx, Ry, omega, tol=args.precond_TOL):
    ''' [ A' B' ] - [1  0]X  Ω = P'''
    ''' [ B' A' ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''

    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    P /= pqnorm
    Q /= pqnorm

    X_new, Y_new  = TDDFT_A_diag_preconditioner(\
                        P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                    V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        '''solve the x & y in the subspace'''
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                    a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega - P
           R_y = U2x + U1y + Y_full*omega - Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index],\
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    P_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit========')
        print('sTDDFT preconditioning failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT preconditioning Done')
    print('after',ii+1,'steps; %.4f'%P_cost,'s')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/P_cost))

    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_hdiag[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)

    return X, Y

def gen_TDDFT_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_initial_guess
    i_lib['Adiag']  = TDDFT_A_diag_initial_guess
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''[ A B ] X - [1   0] Y Ω = 0
       [ B A ] Y   [0  -1] X   = 0
    '''
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    new_m = min([k + args.extrainitial, 2*k, A_size])

    TDDFT_i_lib, TDDFT_p_lib = gen_TDDFT_lib()

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig =\
                                    initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')

    Pcost = 0
    for ii in range(max):
        print('\niteration', ii)
        show_memory_info('beginning of step '+ str(ii))

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] =\
                            TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('subspace size: %s' %sigma.shape[0])

        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        max_norm = np.max(r_norms)
        print('Maximum residual norm: ', '%.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('TDDFT precedure Done\n')
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)

        P_start = time.time()
        X_new, Y_new = new_guess_generator(\
                            R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start

        m = new_m
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    omega *= Hartree_to_eV

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) \
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
            icost=init_time, pcost=Pcost, wall_time=TDDFT_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            initial_energies=initial_energies, difference=difference,\
            overlap=overlap)
    if ii == (max -1):
        print('===== TDDFT Failed Due to Iteration Limit============')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('============= TDDFT Calculation Done ==============')

    print('after', ii+1,'iterations','%.2f'%TDDFT_cost,'s')
    print('Final subspace ', sigma.shape[0])
    print('preconditioning cost', '%.4f'%Pcost, '%.2f'%(Pcost/TDDFT_cost),"%")
    print('max_norm = ', '%.2e'%max_norm)

    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic

def gen_dynpol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_preconditioner
    i_lib['Adiag']  = TDDFT_A_diag_preconditioner
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P

def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()

    dynpol_i_lib, dynpol_p_lib = gen_dynpol_lib()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        '''if have 3 ω, [ω1 ω1 ω1, ω2 ω2 ω2, ω3 ω3 ω3]
           convert nm to Hartree'''
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P

    max = args.max
    tol = args.conv_tolerance
    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega, tol=args.initial_TOL)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        '''*-1 from the definition of dipole moment. *2 for double occupancy'''
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
    initial_cost = init_end - init_start
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('Iteration', ii)

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(\
                                                V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        print('sigma.shape', sigma.shape)

        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                    a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega + P
           R_y = U2x + U1y + Y_full*omega + Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''
        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x += P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y += Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('maximum residual norm: ', '%.3e'%np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], \
                            R_y[:,index], omega[index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('======= Dynamic polarizability Failed Due to Iteration Limit=====')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full))\
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)

    show_memory_info('Total Dynamic polarizability')
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3*k,\
            icost=initial_cost, pcost=Pcost, wall_time=dp_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            difference=difference, overlap=overlap,\
            tensor_alpha=[i.tolist() for i in alpha_omega],\
            initial_tensor_alpha=[i.tolist() for i in alpha_omega_ig])
    return alpha_omega, Davidson_dic

def stapol_A_diag_initprec(P, hdiag=hdiag, tol=None):
    d = hdiag.reshape(-1,1)
    P = -P/d
    # P /= -d
    return P

def stapol_sTDDFT_initprec(Pr, tol=args.initial_TOL):
    '''(A* + B*)X = -P
       residual = (A* + B*)X + P
       X_ig = -P/d
       X_new = residual/D
    '''
    ssp_start = time.time()
    max = 30
    m = 0
    npvec = Pr.shape[1]

    P = Pr.reshape(n_occ,n_vir,-1)[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)
    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    V_holder = np.zeros((A_reduced_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    '''setting up initial guess'''
    init_start = time.time()
    X_ig = stapol_A_diag_initprec(P, hdiag=max_vir_hdiag)
    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    init_end = time.time()
    initial_cost = init_end - init_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        '''creating the subspace'''
        MV_start = time.time()
        '''U = AX + BX = (A+B)X'''
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the x in the subspace'''
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        index = [r_norms.index(i) for i in r_norms if i > tol]
        if np.max(r_norms) < tol or ii == (max -1):
            print('Static polarizability procedure aborted')
            break

        Pstart = time.time()
        X_new = stapol_A_diag_initprec(-residual[:,index], hdiag=max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
    X_full = np.dot(V,x)
    '''alpha = np.dot(X_full.T, P)*-4'''

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('== sTDDFT Stapol precond Failed Due to Iteration Limit======')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT Stapol precond Converged' )
    print('after', ii+1, 'steps', '%.4f'%ssp_cost,'s')
    print('conv threhsold = %.2e'%tol)
    print('final subspace:', a_p_b.shape[0])
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/ssp_cost))

    X_full *= pnorm

    U = np.zeros((n_occ,n_vir,npvec))
    U[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)[:,:,:]

    if max_vir < n_vir:
        ''' DX2 = -P2'''
        P2 = Pr.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)
        D2 = hdiag.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (-P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2
    U = U.reshape(A_size, npvec)
    return U

def gen_stapol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = stapol_sTDDFT_initprec
    i_lib['Adiag']  = stapol_A_diag_initprec
    p_lib['sTDDFT'] = stapol_sTDDFT_initprec
    p_lib['Adiag']  = stapol_A_diag_initprec
    return i_lib, p_lib

def static_polarizability(init, prec):
    '''(A+B)X = -P
       residual = (A+B)X + P
       X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    stapol_i_lib, stapol_p_lib = gen_stapol_lib()
    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.conv_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig = initial_guess(P, tol=args.initial_TOL)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
    initial_cost = init_end - init_start

    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('\nIteration', ii)
        MV_start = time.time()
        U_holder[:, m:new_m] = \
                    static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()

        '''solve the x in the subspace'''
        x = np.linalg.solve(a_p_b, -p)

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        max_norm = np.max(r_norms)
        print('max_norm = %.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('static polarizability precodure aborted\n')
            break

        '''preconditioning step'''
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    X_full = np.dot(V,x)
    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start

    if ii == (max -1):
        print('==== Static polarizability Failed Due to Iteration Limit ======')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Static polarizability Converged')

    print('after', ii+1, 'steps; %.4f'%sp_cost,'s')
    print('final subspace', a_p_b.shape)
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','Pcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/sp_cost))

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3,\
            icost=initial_cost, pcost=Pcost, wall_time=sp_cost, \
            N_itr=ii+1, N_mv=np.shape(a_p_b)[0], difference=difference,\
            overlap=overlap, tensor_alpha=[i.tolist() for i in tensor_alpha],\
            initial_tensor_alpha=[i.tolist() for i in alpha_init])
    return tensor_alpha, Davidson_dic

def gen_calc():
    name_dic={}
    name_dic['TDA'] = args.TDA
    name_dic['TDDFT'] = args.TDDFT
    name_dic['dynpol'] = args.dynpol
    name_dic['stapol'] = args.stapol
    name_dic['sTDA'] = args.sTDA
    name_dic['sTDDFT'] = args.sTDDFT
    name_dic['Truncate_test'] = args.Truncate_test
    name_dic['PySCF_TDDFT'] = args.pytd
    for calc in ['TDA','TDDFT','dynpol','stapol',\
                        'sTDA','sTDDFT','Truncate_test','PySCF_TDDFT']:
        if name_dic[calc] == True:
            print(calc)
            return calc

def dump_yaml(Davidson_dic, calc, init, prec):
    curpath = os.getcwd()
    yamlpath = os.path.join(\
                   curpath,basename+'_'+calc+'_i_'+init+'_p_'+prec+'.yaml')
    with open(yamlpath, "w", encoding="utf-8") as f:
        yaml.dump(Davidson_dic, f)

if __name__ == "__main__":
    calc = gen_calc()
    TDA_combo = [            # option
    ['sTDA','sTDA'],         # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDA'],        # 2
    ['sTDA','Adiag'],        # 3
    ['sTDA','Jacobi'],       # 4
    ['Adiag','Jacobi'],      # 5
    ['Adiag','new_ES'],      # 6
    ['sTDA','new_ES']]       # 7
    TDDFT_combo = [          # option
    ['sTDDFT','sTDDFT'],     # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDDFT'],      # 2
    ['sTDDFT','Adiag']]      # 3
    print('|-------- In-house Developed {0} Starts ---------|'.format(calc))
    print('Residual conv =', args.conv_tolerance)
    if args.TDA == True:
        for option in args.ip_options:
            init, prec = TDA_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies, eigenkets, Davidson_dic = Davidson(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.TDDFT == True:
        for option in args.ip_options:
            init, prec = TDDFT_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies,X,Y,Davidson_dic = TDDFT_eigen_solver(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.dynpol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\nPerturbation wavelength omega (nm) =', args.dynpol_omega)
            alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
            print('Dynamic polarizability tensor alpha')
            dump_yaml(Davidson_dic, calc, init, prec)
            for i in range(len(args.dynpol_omega)):
                print(args.dynpol_omega[i],'nm')
                print(alpha_omega[i])
    if args.stapol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\n')
            tensor_alpha, Davidson_dic = static_polarizability(init,prec)
            print('Static polarizability tensor alpha')
            print(tensor_alpha)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.sTDA == True:
        X, energies = sTDA_eigen_solver(k=args.nstates, tol=args.conv_tolerance)
    if args.sTDDFT == True:
        energies,X,Y = sTDDFT_eigen_solver(k=args.nstates,tol=args.conv_tolerance)
    if args.Truncate_test == True:
        n_states= args.nstates
        X = np.random.rand(A_size,n_state)
        Y = np.random.rand(A_size,n_state)
        print('n_vir = ', n_vir)
        print('A_size =', A_size)
        print('n_states =', n_states)
        print("{:<8} {:<8} {:<8} {:<8}".format(\
                'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
        for vir_trunc in [40, 50, 60, 70, 10000000]:
            del max_vir, sTDA_mv, sTDDFT_mv
            max_vir = gen_maxvir(tol_eV = vir_trunc)
            q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
            # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
            iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                            max_vir=max_vir, \
                                            q_ij = q_ij, \
                                            q_ab = q_ab, \
                                            q_ia = q_ia , \
                                            GK_q_jb = GK_q_jb, \
                                            GJ_q_ab = GJ_q_ab)

            sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                            max_vir=max_vir, \
                                            iajb_fly = iajb_fly, \
                                            ijab_fly = ijab_fly, \
                                            ibja_fly = ibja_fly, \
                                            delta_fly = delta_fly)

            sTDA_start = time.time()
            sTDA_X = sTDA_mv(X)
            sTDA_end = time.time()
            sTDA_mv_time = sTDA_end - sTDA_start

            sTDDFT_start = time.time()
            sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
            sTDDFT_end = time.time()
            sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

            print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                    vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))
    if args.pytd == True:
        TD.nstates = args.nstates
        TD.conv_tol = args.conv_tolerance
        TD.kernel()
        end = time.time()
    if args.verbose > 3:
        for key in vars(args):
            print(key,'=', vars(args)[key])
    print('|-------- In-house Developed {0} Ends ----------|'.format(calc))
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt227', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Fri Jul  9 22:58:30 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 80000 
[INPUT] num. atoms = 57
[INPUT] num. electrons = 216
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O     -2.179188955825  -2.941769011295  -1.278730844551 AA   -4.118070300187  -5.559137753081  -2.416451083234 Bohr
[INPUT]  2 N     -1.064351126260  -1.229639959168  -0.122800225589 AA   -2.011332129004  -2.323682754648  -0.232058794399 Bohr
[INPUT]  3 N     -2.754235230032  -0.071226713937   0.847581952977 AA   -5.204750267390  -0.134598982093   1.601697759250 Bohr
[INPUT]  4 N      0.889648575415   0.500898607937   0.742946778759 AA    1.681192154643   0.946561185178   1.403965936982 Bohr
[INPUT]  5 N      4.569461395501  -1.756771810009  -1.021423280601 AA    8.635030574271  -3.319817584274  -1.930210257590 Bohr
[INPUT]  6 N     -1.847556968179   3.405717792202  -0.371023783380 AA   -3.491376669390   6.435873884820  -0.701133336288 Bohr
[INPUT]  7 N     -3.774110920564   2.368835605142  -1.183652149686 AA   -7.132036003596   4.476450527836  -2.236778389660 Bohr
[INPUT]  8 N     -1.704822828953   1.548221397269  -1.891351531673 AA   -3.221648237628   2.925714421030  -3.574136400138 Bohr
[INPUT]  9 C     -4.751908269950  -1.399167639404   0.036460923237 AA   -8.979805199261  -2.644043640828   0.068901159166 Bohr
[INPUT] 10 C     -3.272119665404  -1.119812803816   0.133541552029 AA   -6.183410014417  -2.116139509994   0.252356959583 Bohr
[INPUT] 11 C     -1.424194587035  -0.124692882721   0.686513021557 AA   -2.691337717585  -0.235635398024   1.297321591690 Bohr
[INPUT] 12 C     -2.234917044235  -1.847890818800  -0.472592957727 AA   -4.223381124726  -3.492007555630  -0.893071258502 Bohr
[INPUT] 13 C     -0.369529055005   0.744229570291   1.085744024627 AA   -0.698308709029   1.406390061652   2.051758847928 Bohr
[INPUT] 14 C     -5.112168505777  -2.801123327945   0.586114936849 AA   -9.660598378546  -5.293355930947   1.107596708162 Bohr
[INPUT] 15 C     -0.686208243709   1.994300826611   1.871170237551 AA   -1.296745645030   3.768682372289   3.535999281409 Bohr
[INPUT] 16 C      1.215525253655  -0.607295738512  -0.010290712150 AA    2.297009826901  -1.147622622403  -0.019446627590 Bohr
[INPUT] 17 C      0.244292505361  -1.480280257873  -0.478796048918 AA    0.461645929415  -2.797324274981  -0.904793401980 Bohr
[INPUT] 18 C     -5.264378306249  -1.214711349427  -1.408235861504 AA   -9.948233214913  -2.295471770817  -2.661180097033 Bohr
[INPUT] 19 C      2.636811351863  -0.807280516610  -0.314046146447 AA    4.982851297165  -1.525539082091  -0.593461207259 Bohr
[INPUT] 20 C     -0.049535345926   3.269481292023   1.280832236309 AA   -0.093608237286   6.178424211314   2.420422138139 Bohr
[INPUT] 21 C      3.717267294176   0.146392261409  -0.130687467364 AA    7.024617117795   0.276641280819  -0.246963521231 Bohr
[INPUT] 22 C     -4.695461692319  -3.022878363374   2.042480177910 AA   -8.873136626870  -5.712412214650   3.859728151103 Bohr
[INPUT] 23 C      4.914503740160  -0.485781273528  -0.591311148402 AA    9.287066107053  -0.917993563411  -1.117416124882 Bohr
[INPUT] 24 C      3.215752299357  -1.952239435237  -0.853459227613 AA    6.076891130226  -3.689197862174  -1.612804198671 Bohr
[INPUT] 25 C     -0.413124429578   3.498750063268  -0.202260499664 AA   -0.780692027269   6.611679397881  -0.382216950183 Bohr
[INPUT] 26 C      3.797541466403   1.466900504480   0.365724681600 AA    7.176313318182   2.772040205453   0.691119485217 Bohr
[INPUT] 27 C      6.165696991928   0.151989214391  -0.571822473937 AA   11.651478681799   0.287217989087  -1.080587867613 Bohr
[INPUT] 28 C      5.039424612170   2.104535772480   0.385207373864 AA    9.523132342395   3.976996229338   0.727936437765 Bohr
[INPUT] 29 C      6.210820467675   1.457483236908  -0.077007278262 AA   11.736749692750   2.754244148901  -0.145522665513 Bohr
[INPUT] 30 C     -2.367271816418   2.470663446856  -1.089070099331 AA   -4.473495395431   4.668877260531  -2.058044218189 Bohr
[INPUT] 31 H     -5.240127551101  -0.648349853880   0.683617001394 AA   -9.902405929368  -1.225203656736   1.291848906731 Bohr
[INPUT] 32 H     -4.646539501173  -3.581022257263  -0.056800145530 AA   -8.780687084190  -6.767151312198  -0.107336718887 Bohr
[INPUT] 33 H     -6.202455999323  -2.950949206217   0.474237580850 AA  -11.720943138386  -5.576485807253   0.896179145782 Bohr
[INPUT] 34 H     -0.317518950401   1.853774141955   2.905218485164 AA   -0.600023855618   3.503125425096   5.490067268984 Bohr
[INPUT] 35 H     -1.780280723268   2.108015382584   1.916088267062 AA   -3.364242991819   3.983571739454   3.620882055239 Bohr
[INPUT] 36 H      0.417421974303  -2.341043567221  -1.126165446170 AA    0.788813209807  -4.423931187722  -2.128144264210 Bohr
[INPUT] 37 H     -4.764083506507  -1.918702512840  -2.099204851951 AA   -9.002813061855  -3.625822263782  -3.966922249545 Bohr
[INPUT] 38 H     -6.351408308280  -1.399039030969  -1.467799777411 AA  -12.002422207936  -2.643800606109  -2.773739585004 Bohr
[INPUT] 39 H     -5.067842345097  -0.193099174830  -1.775768741502 AA   -9.576834074707  -0.364904555307  -3.355716582003 Bohr
[INPUT] 40 H     -0.405309511699   4.127864640999   1.878062912898 AA   -0.765923972792   7.800533650764   3.549024550080 Bohr
[INPUT] 41 H      1.049795064022   3.226723189236   1.380707862874 AA    1.983825157921   6.097623107439   2.609159718866 Bohr
[INPUT] 42 H     -5.186229906050  -2.288302095114   2.704962469518 AA   -9.800554141463  -4.324264250034   5.111638244616 Bohr
[INPUT] 43 H     -4.973317850569  -4.033766344294   2.387442244705 AA   -9.398208667986  -7.622713641205   4.511611980709 Bohr
[INPUT] 44 H     -3.605003926057  -2.903636943432   2.167573846940 AA   -6.812470098229  -5.487078588256   4.096120925486 Bohr
[INPUT] 45 H      2.763100320317  -2.907804968554  -1.118858521750 AA    5.221502860097  -5.494955014217  -2.114336178243 Bohr
[INPUT] 46 H      0.176455262966   2.785359124703  -0.821953834709 AA    0.333452120244   5.263565904248  -1.553267634636 Bohr
[INPUT] 47 H     -0.066968656553   4.509274249580  -0.495261220332 AA   -0.126552419815   8.521293352260  -0.935908066546 Bohr
[INPUT] 48 H      5.218084548990  -2.450451661075  -1.380326494230 AA    9.860750692417  -4.630682520917  -2.608439036575 Bohr
[INPUT] 49 H     -3.035351162890  -3.403435700640  -1.224330562938 AA   -5.735982389743  -6.431561356777  -2.313649449888 Bohr
[INPUT] 50 H      2.891823421539   1.953268347481   0.731793613226 AA    5.464754267311   3.691142224520   1.382889508704 Bohr
[INPUT] 51 H      7.068813889139  -0.353157824225  -0.930171143497 AA   13.358122275993  -0.667371566532  -1.757768710183 Bohr
[INPUT] 52 H      5.112695315934   3.127517787194   0.769249070881 AA    9.661593905463   5.910152067503   1.453670065542 Bohr
[INPUT] 53 H      7.168723407752   1.987339389682  -0.045577179300 AA   13.546923903411   3.755527163059  -0.086128386406 Bohr
[INPUT] 54 H     -4.165587979547   3.110920799507  -0.596173909352 AA   -7.871820429125   5.878788306282  -1.126605411287 Bohr
[INPUT] 55 H     -4.066298358694   1.472749078223  -0.774612113509 AA   -7.684190238700   2.783092408047  -1.463804747303 Bohr
[INPUT] 56 H     -0.740397062233   1.332910033765  -1.647436089079 AA   -1.399147671054   2.518834912501  -3.113203016085 Bohr
[INPUT] 57 H     -2.245254867767   0.747707286033  -2.210869484720 AA   -4.242916779926   1.412961991944  -4.177937823279 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1

nuclear repulsion = 2962.40338727846
number of shells = 438
number of NR pGTOs = 1596
number of NR cGTOs = 1092
basis = def2-tzvp
ecp = {}
CPU time:         1.61
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 57_Cypridina_luciferin_wb97x.chk
max_memory 80000 MB (current use 55 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f4545eace18>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f4545eacd90>
Set gradient conv threshold to 1e-05
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
tot grids = 689076
Drop grids 133078
    CPU time for setting up grids    123.98 sec, wall time      9.59 sec
nelec by numeric integration = 215.99996096282
    CPU time for vxc    169.69 sec, wall time     12.29 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 80000
_cderi_to_save = /tmp/job.15978429.hpc/tmpfhs4tbd7
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
num shells = 912, num cGTOs = 2752
size of aux basis 2752
int3c2e [1/1], AO [0:438], nrow = 596778
    CPU time for cholesky_eri    256.89 sec, wall time     43.61 sec
    CPU time for df vj and vk    766.43 sec, wall time     85.43 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7f456418f4e0> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 80000
_cderi_to_save = /tmp/job.15978429.hpc/tmp1b7mhzkn
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
num shells = 912, num cGTOs = 2752
size of aux basis 2129
int3c2e [1/1], AO [0:438], nrow = 596778
    CPU time for cholesky_eri    342.45 sec, wall time     27.95 sec
    CPU time for df vj and vk    729.82 sec, wall time     55.50 sec
E1 = -7673.040832656365  Ecoul = 3583.7191270257294  Exc = -186.31849486688483
init E= -1313.23681321906
cond(S) = 1525712.414653274
    CPU time for initialize scf   1799.07 sec, wall time    163.65 sec
  HOMO = -0.279512480226017  LUMO = 0.0174194272814748
  mo_energy =
[-1.92614680e+01 -1.44919896e+01 -1.44488550e+01 -1.43969294e+01
 -1.43964036e+01 -1.43927532e+01 -1.43814760e+01 -1.43395403e+01
 -1.03615555e+01 -1.03414736e+01 -1.03280659e+01 -1.03205447e+01
 -1.03171233e+01 -1.03134903e+01 -1.03058453e+01 -1.02993930e+01
 -1.02969708e+01 -1.02854089e+01 -1.02782727e+01 -1.02675856e+01
 -1.02669500e+01 -1.02645533e+01 -1.02644302e+01 -1.02630058e+01
 -1.02595375e+01 -1.02573868e+01 -1.02543972e+01 -1.02519352e+01
 -1.02513716e+01 -1.02451047e+01 -1.23067705e+00 -1.16834238e+00
 -1.11751000e+00 -1.09100652e+00 -1.07543236e+00 -1.04020390e+00
 -9.84475896e-01 -9.81422778e-01 -9.70321995e-01 -9.61314767e-01
 -9.42226788e-01 -9.04686963e-01 -8.95298377e-01 -8.80610143e-01
 -8.68888899e-01 -8.63537027e-01 -8.46089181e-01 -8.17342609e-01
 -7.90997846e-01 -7.77365060e-01 -7.57997280e-01 -7.54831841e-01
 -7.45663122e-01 -7.25691179e-01 -7.14163391e-01 -7.06493199e-01
 -6.92923264e-01 -6.75546854e-01 -6.65594714e-01 -6.50038604e-01
 -6.42185997e-01 -6.38198574e-01 -6.19575096e-01 -6.13091813e-01
 -6.11221778e-01 -5.98406615e-01 -5.90727271e-01 -5.85813826e-01
 -5.76877681e-01 -5.72833349e-01 -5.64853888e-01 -5.58663163e-01
 -5.54564501e-01 -5.51748026e-01 -5.45807517e-01 -5.44039313e-01
 -5.39081323e-01 -5.35624858e-01 -5.32365399e-01 -5.27995110e-01
 -5.17583954e-01 -5.08589886e-01 -5.00628360e-01 -4.97976381e-01
 -4.93945341e-01 -4.88499332e-01 -4.74457087e-01 -4.72135085e-01
 -4.58108538e-01 -4.57751273e-01 -4.55153850e-01 -4.50303058e-01
 -4.48292125e-01 -4.42961328e-01 -4.42510408e-01 -4.39069354e-01
 -4.31770832e-01 -4.21746133e-01 -3.96614065e-01 -3.90180122e-01
 -3.75516264e-01 -3.67114524e-01 -3.39277528e-01 -3.36131994e-01
 -3.16519787e-01 -3.12493206e-01 -3.05658983e-01 -2.79512480e-01
  1.74194273e-02  3.78699155e-02  6.59293454e-02  7.40549853e-02
  9.44866155e-02  1.05916974e-01  1.10367180e-01  1.19694939e-01
  1.22546124e-01  1.28651280e-01  1.33203219e-01  1.37208258e-01
  1.42576087e-01  1.47311927e-01  1.48994496e-01  1.53231285e-01
  1.61511947e-01  1.63149761e-01  1.67632966e-01  1.75919484e-01
  1.80974651e-01  1.83747346e-01  1.87454165e-01  1.89496720e-01
  1.93143140e-01  1.99543436e-01  2.01612683e-01  2.07865064e-01
  2.09798381e-01  2.15612686e-01  2.16313271e-01  2.19548018e-01
  2.23618286e-01  2.29085309e-01  2.32583319e-01  2.37102763e-01
  2.39662033e-01  2.45048604e-01  2.49327571e-01  2.52160030e-01
  2.53149702e-01  2.60875951e-01  2.62890069e-01  2.63971670e-01
  2.68878417e-01  2.69943944e-01  2.72281869e-01  2.76559274e-01
  2.81400626e-01  2.82255431e-01  2.86399740e-01  2.92118454e-01
  2.93214423e-01  3.02952996e-01  3.04995343e-01  3.06514778e-01
  3.08779974e-01  3.11136619e-01  3.14876241e-01  3.19043374e-01
  3.21682634e-01  3.27080139e-01  3.28672881e-01  3.32971600e-01
  3.37678496e-01  3.38714865e-01  3.42480472e-01  3.45614219e-01
  3.50058113e-01  3.52524057e-01  3.59983091e-01  3.61028546e-01
  3.65175813e-01  3.69818782e-01  3.72025336e-01  3.77431940e-01
  3.80313288e-01  3.84933315e-01  3.91647329e-01  3.92144337e-01
  3.94253887e-01  4.02422030e-01  4.03244287e-01  4.07966906e-01
  4.11632341e-01  4.13419870e-01  4.20699670e-01  4.25516659e-01
  4.27897131e-01  4.30485557e-01  4.39810534e-01  4.42482817e-01
  4.44009049e-01  4.47966568e-01  4.49075335e-01  4.54621344e-01
  4.57063628e-01  4.58013064e-01  4.63503034e-01  4.65801656e-01
  4.70028408e-01  4.74822141e-01  4.77304724e-01  4.81440316e-01
  4.82472131e-01  4.91246700e-01  4.92872090e-01  4.93669936e-01
  4.95360092e-01  4.97636590e-01  5.04431626e-01  5.06700629e-01
  5.10750239e-01  5.13270953e-01  5.14417777e-01  5.17840953e-01
  5.20613276e-01  5.22590481e-01  5.24581254e-01  5.27561503e-01
  5.31123427e-01  5.33753973e-01  5.36823960e-01  5.38680581e-01
  5.41165527e-01  5.43239295e-01  5.45450772e-01  5.48875602e-01
  5.50902183e-01  5.52362675e-01  5.53844861e-01  5.56778081e-01
  5.59138662e-01  5.62215642e-01  5.64965168e-01  5.68218008e-01
  5.74868588e-01  5.78806724e-01  5.84811410e-01  5.89063113e-01
  5.91627385e-01  5.96657923e-01  6.03182857e-01  6.06599669e-01
  6.08894057e-01  6.15129558e-01  6.16647158e-01  6.19776865e-01
  6.21327565e-01  6.24686149e-01  6.33183411e-01  6.34237547e-01
  6.38753219e-01  6.46654852e-01  6.48021306e-01  6.49388724e-01
  6.55129877e-01  6.61080397e-01  6.67449500e-01  6.69640190e-01
  6.74397532e-01  6.82441697e-01  6.85859002e-01  6.88864554e-01
  6.95735191e-01  6.96027075e-01  7.04067521e-01  7.07203201e-01
  7.09538347e-01  7.10926084e-01  7.15714891e-01  7.21481184e-01
  7.25723149e-01  7.28056747e-01  7.28555205e-01  7.31695196e-01
  7.39868575e-01  7.44704347e-01  7.49987389e-01  7.56919302e-01
  7.63052693e-01  7.64086747e-01  7.68277284e-01  7.72736973e-01
  7.73797067e-01  7.83340445e-01  7.85094299e-01  7.91138787e-01
  7.93426573e-01  8.03785906e-01  8.04926213e-01  8.09332848e-01
  8.17128996e-01  8.17975114e-01  8.26696393e-01  8.27663811e-01
  8.33813872e-01  8.37600124e-01  8.39998921e-01  8.46296070e-01
  8.46932960e-01  8.54238149e-01  8.56634593e-01  8.61249243e-01
  8.68718209e-01  8.72459211e-01  8.74074018e-01  8.81177639e-01
  8.87036055e-01  8.91102202e-01  8.97059866e-01  9.00613822e-01
  9.02437131e-01  9.09459568e-01  9.13889892e-01  9.15229987e-01
  9.28110152e-01  9.31235287e-01  9.37102560e-01  9.40738952e-01
  9.46038117e-01  9.49889193e-01  9.55436536e-01  9.57997704e-01
  9.61617875e-01  9.66451168e-01  9.73677297e-01  9.79870719e-01
  9.82347724e-01  9.88352731e-01  9.92682393e-01  9.93501717e-01
  1.00367648e+00  1.00898182e+00  1.01529550e+00  1.02803644e+00
  1.03359693e+00  1.03806137e+00  1.04423610e+00  1.04766387e+00
  1.05676081e+00  1.05820005e+00  1.06024091e+00  1.06557816e+00
  1.06818050e+00  1.08030426e+00  1.08880542e+00  1.09605822e+00
  1.10417645e+00  1.10755136e+00  1.11145381e+00  1.12295626e+00
  1.12431618e+00  1.13379726e+00  1.14320984e+00  1.14782352e+00
  1.15124923e+00  1.15731459e+00  1.16359941e+00  1.16679536e+00
  1.17350101e+00  1.18041704e+00  1.19334102e+00  1.19736984e+00
  1.20387209e+00  1.20622798e+00  1.20927323e+00  1.21244251e+00
  1.22162075e+00  1.22887203e+00  1.23873619e+00  1.24423556e+00
  1.24872716e+00  1.25484807e+00  1.26135109e+00  1.26714510e+00
  1.27568653e+00  1.28238659e+00  1.28599150e+00  1.29053059e+00
  1.29662194e+00  1.30381284e+00  1.31231325e+00  1.31598608e+00
  1.31958251e+00  1.32538441e+00  1.32768283e+00  1.33794353e+00
  1.34103406e+00  1.34632841e+00  1.35341323e+00  1.35579229e+00
  1.36376795e+00  1.37054783e+00  1.37181922e+00  1.37974485e+00
  1.38843817e+00  1.39679906e+00  1.40352626e+00  1.40990129e+00
  1.41799918e+00  1.42203319e+00  1.42775044e+00  1.43653838e+00
  1.44324959e+00  1.44575959e+00  1.46098323e+00  1.46537271e+00
  1.46904120e+00  1.47543399e+00  1.47856523e+00  1.48793095e+00
  1.49066592e+00  1.50365834e+00  1.50448939e+00  1.50844897e+00
  1.51574514e+00  1.51919001e+00  1.52088013e+00  1.52702420e+00
  1.53906672e+00  1.54117455e+00  1.54713105e+00  1.55723559e+00
  1.55852013e+00  1.56359870e+00  1.57280615e+00  1.57422654e+00
  1.58123526e+00  1.59052091e+00  1.59573813e+00  1.60509160e+00
  1.60818197e+00  1.61351496e+00  1.61584693e+00  1.62027797e+00
  1.62149951e+00  1.62879393e+00  1.63455093e+00  1.63608341e+00
  1.64042517e+00  1.65645403e+00  1.66250730e+00  1.66498560e+00
  1.67803667e+00  1.68114668e+00  1.68452001e+00  1.68594661e+00
  1.68768758e+00  1.68870583e+00  1.69374318e+00  1.69636939e+00
  1.70340267e+00  1.70515137e+00  1.71218108e+00  1.71366998e+00
  1.71581728e+00  1.72506109e+00  1.72720157e+00  1.73673726e+00
  1.73965754e+00  1.74541035e+00  1.75101362e+00  1.75532185e+00
  1.75918959e+00  1.76351297e+00  1.76663936e+00  1.77604203e+00
  1.77980094e+00  1.78454165e+00  1.78669387e+00  1.79099453e+00
  1.79646744e+00  1.80413735e+00  1.80741048e+00  1.81066533e+00
  1.81879494e+00  1.82122307e+00  1.82873715e+00  1.83173677e+00
  1.84039631e+00  1.84727436e+00  1.85327752e+00  1.85787769e+00
  1.85996737e+00  1.86508637e+00  1.87711544e+00  1.88368576e+00
  1.88776643e+00  1.89048714e+00  1.89638133e+00  1.90340061e+00
  1.90960637e+00  1.91230709e+00  1.91760582e+00  1.92764342e+00
  1.93003443e+00  1.93199827e+00  1.93846457e+00  1.94860329e+00
  1.95288045e+00  1.96297945e+00  1.96696424e+00  1.97181345e+00
  1.98026961e+00  1.98402683e+00  1.98799563e+00  2.00021801e+00
  2.00452238e+00  2.01234301e+00  2.02063258e+00  2.02738041e+00
  2.03277320e+00  2.04281704e+00  2.05343394e+00  2.05925386e+00
  2.06416627e+00  2.06657174e+00  2.06879748e+00  2.07400748e+00
  2.07892633e+00  2.09041929e+00  2.09760502e+00  2.10147143e+00
  2.10350305e+00  2.10980765e+00  2.11187244e+00  2.11814121e+00
  2.12452138e+00  2.12970438e+00  2.13861353e+00  2.14053550e+00
  2.14657107e+00  2.14993706e+00  2.15469829e+00  2.15689822e+00
  2.16637536e+00  2.17558718e+00  2.17842860e+00  2.17985496e+00
  2.18814953e+00  2.19598385e+00  2.20700619e+00  2.21138852e+00
  2.22294105e+00  2.23371244e+00  2.23746181e+00  2.24479242e+00
  2.25241457e+00  2.26357128e+00  2.26955687e+00  2.27325215e+00
  2.27795284e+00  2.28839852e+00  2.29384673e+00  2.29849696e+00
  2.30037418e+00  2.30690449e+00  2.31883086e+00  2.32002044e+00
  2.32228308e+00  2.33868369e+00  2.33887557e+00  2.34376177e+00
  2.34642757e+00  2.36959921e+00  2.37140767e+00  2.37908637e+00
  2.38581760e+00  2.39631078e+00  2.40121633e+00  2.40793681e+00
  2.41093230e+00  2.41866946e+00  2.42026321e+00  2.42306352e+00
  2.43371479e+00  2.43447220e+00  2.44060152e+00  2.44670843e+00
  2.45150346e+00  2.45660041e+00  2.46524577e+00  2.46944297e+00
  2.47560223e+00  2.48964514e+00  2.49752270e+00  2.50138697e+00
  2.50803059e+00  2.51363103e+00  2.51563270e+00  2.52351814e+00
  2.53543983e+00  2.53761607e+00  2.54255774e+00  2.54737395e+00
  2.55055011e+00  2.56569097e+00  2.57085160e+00  2.57504122e+00
  2.58522826e+00  2.58571114e+00  2.59036816e+00  2.59988577e+00
  2.60554600e+00  2.61503474e+00  2.61881244e+00  2.62177270e+00
  2.62973496e+00  2.63630907e+00  2.64047852e+00  2.64652584e+00
  2.65880245e+00  2.66634773e+00  2.67000323e+00  2.68072505e+00
  2.68321620e+00  2.68399237e+00  2.68524196e+00  2.69143845e+00
  2.69820653e+00  2.70310999e+00  2.71069078e+00  2.71260229e+00
  2.72054461e+00  2.72371698e+00  2.72906634e+00  2.73055443e+00
  2.73910873e+00  2.74414047e+00  2.74906005e+00  2.75779682e+00
  2.76112177e+00  2.76437678e+00  2.76870871e+00  2.77190248e+00
  2.77692407e+00  2.77958975e+00  2.78557386e+00  2.78964920e+00
  2.79569863e+00  2.79848628e+00  2.80523288e+00  2.80611379e+00
  2.80864719e+00  2.81401317e+00  2.82024958e+00  2.82082995e+00
  2.83065127e+00  2.83336005e+00  2.84174649e+00  2.84625708e+00
  2.84956372e+00  2.85569285e+00  2.86276133e+00  2.86440803e+00
  2.86607455e+00  2.87500975e+00  2.87820919e+00  2.88687864e+00
  2.89174413e+00  2.89414758e+00  2.90542823e+00  2.91183961e+00
  2.91361613e+00  2.91710598e+00  2.92530308e+00  2.92858714e+00
  2.93993930e+00  2.94121713e+00  2.94889856e+00  2.95470261e+00
  2.96673059e+00  2.97540370e+00  2.98234001e+00  2.99229307e+00
  2.99385851e+00  3.00015842e+00  3.00943189e+00  3.01303068e+00
  3.02184086e+00  3.03083449e+00  3.03282474e+00  3.04027777e+00
  3.04461974e+00  3.04894294e+00  3.05458790e+00  3.05878121e+00
  3.06492508e+00  3.07574852e+00  3.07739275e+00  3.08022628e+00
  3.08601590e+00  3.10173308e+00  3.10356129e+00  3.10959991e+00
  3.11518822e+00  3.11627598e+00  3.12295175e+00  3.13501646e+00
  3.13845071e+00  3.13946446e+00  3.14143695e+00  3.15977837e+00
  3.16075085e+00  3.16298943e+00  3.16662498e+00  3.17520563e+00
  3.18515028e+00  3.18929420e+00  3.19524883e+00  3.20056265e+00
  3.20328671e+00  3.20842770e+00  3.21050191e+00  3.21357604e+00
  3.21803559e+00  3.22175579e+00  3.22715271e+00  3.23004327e+00
  3.23828518e+00  3.24548569e+00  3.25068652e+00  3.25262994e+00
  3.25989127e+00  3.26634564e+00  3.26812950e+00  3.27226130e+00
  3.27467530e+00  3.28300109e+00  3.28699822e+00  3.28857719e+00
  3.29104446e+00  3.29412248e+00  3.29783157e+00  3.30294690e+00
  3.30563508e+00  3.30849234e+00  3.32236814e+00  3.32673765e+00
  3.33130520e+00  3.33342380e+00  3.33840463e+00  3.33878565e+00
  3.34479769e+00  3.35443259e+00  3.35928916e+00  3.36130893e+00
  3.36863359e+00  3.37057771e+00  3.37999706e+00  3.38224059e+00
  3.38566510e+00  3.39368512e+00  3.39412803e+00  3.39888741e+00
  3.40403103e+00  3.40624944e+00  3.40806434e+00  3.41641599e+00
  3.41970720e+00  3.42323127e+00  3.42888954e+00  3.43487642e+00
  3.44128380e+00  3.44200158e+00  3.44611622e+00  3.45235915e+00
  3.45770464e+00  3.46792676e+00  3.46885374e+00  3.47061650e+00
  3.48041221e+00  3.48461484e+00  3.48628243e+00  3.48962940e+00
  3.50161459e+00  3.50522880e+00  3.51206835e+00  3.51645685e+00
  3.52239379e+00  3.52712809e+00  3.53124295e+00  3.53407767e+00
  3.53995391e+00  3.54349481e+00  3.54815494e+00  3.55334576e+00
  3.55989579e+00  3.56408035e+00  3.56877032e+00  3.57043697e+00
  3.58028583e+00  3.58418404e+00  3.59046621e+00  3.60165177e+00
  3.60430956e+00  3.60703537e+00  3.61256157e+00  3.62089732e+00
  3.62370118e+00  3.62999008e+00  3.63322247e+00  3.63500895e+00
  3.64226919e+00  3.64926721e+00  3.65443676e+00  3.65785931e+00
  3.66154514e+00  3.66610743e+00  3.67243317e+00  3.68561271e+00
  3.68840407e+00  3.69280362e+00  3.69695278e+00  3.70332227e+00
  3.71475958e+00  3.71781673e+00  3.72563773e+00  3.72813433e+00
  3.74431430e+00  3.75602225e+00  3.76770268e+00  3.77533059e+00
  3.78039390e+00  3.78120846e+00  3.78466739e+00  3.79205437e+00
  3.80524670e+00  3.81122994e+00  3.82320363e+00  3.83464120e+00
  3.84023848e+00  3.85042843e+00  3.86184907e+00  3.86646471e+00
  3.87242315e+00  3.87956387e+00  3.89351547e+00  3.90891509e+00
  3.91475046e+00  3.92778029e+00  3.93157389e+00  3.93816688e+00
  3.94580124e+00  3.95706739e+00  3.96079061e+00  3.97499288e+00
  3.98186337e+00  3.99223430e+00  3.99772419e+00  4.00219183e+00
  4.00925767e+00  4.01620821e+00  4.02732579e+00  4.02989175e+00
  4.03750426e+00  4.05065546e+00  4.06347866e+00  4.06512045e+00
  4.07375280e+00  4.08391591e+00  4.08633267e+00  4.09122188e+00
  4.10060501e+00  4.11392716e+00  4.11892445e+00  4.12943003e+00
  4.13104250e+00  4.13755098e+00  4.14542635e+00  4.15900910e+00
  4.16798014e+00  4.17903229e+00  4.18079206e+00  4.19122738e+00
  4.20311717e+00  4.20503961e+00  4.21015831e+00  4.21788899e+00
  4.22501077e+00  4.23646817e+00  4.24419235e+00  4.25613164e+00
  4.25942908e+00  4.26035419e+00  4.26869300e+00  4.27545834e+00
  4.29403597e+00  4.29810388e+00  4.30699137e+00  4.31153057e+00
  4.32103245e+00  4.33204098e+00  4.35406954e+00  4.35637126e+00
  4.37088481e+00  4.37531430e+00  4.38429538e+00  4.39385800e+00
  4.39848506e+00  4.40551793e+00  4.42034098e+00  4.42874105e+00
  4.44012568e+00  4.44265056e+00  4.45118517e+00  4.45473667e+00
  4.46352134e+00  4.47013630e+00  4.49037758e+00  4.50137630e+00
  4.51152578e+00  4.51451089e+00  4.52295776e+00  4.52857038e+00
  4.54210535e+00  4.55575673e+00  4.56252685e+00  4.56549845e+00
  4.57184398e+00  4.58719222e+00  4.61123725e+00  4.63217610e+00
  4.65827540e+00  4.66637007e+00  4.67990329e+00  4.68554212e+00
  4.69094261e+00  4.69692624e+00  4.71351590e+00  4.72462206e+00
  4.73159453e+00  4.74458849e+00  4.76541781e+00  4.77263553e+00
  4.77857397e+00  4.78508597e+00  4.80644244e+00  4.81068479e+00
  4.81664113e+00  4.83460973e+00  4.84364941e+00  4.84784953e+00
  4.85783479e+00  4.86339885e+00  4.87034709e+00  4.87966681e+00
  4.88419375e+00  4.89035538e+00  4.90218434e+00  4.90347750e+00
  4.91311505e+00  4.92766198e+00  4.94225435e+00  4.94616982e+00
  4.95782587e+00  4.97333890e+00  4.97370947e+00  4.98179631e+00
  4.99320105e+00  4.99761935e+00  5.02440553e+00  5.03804080e+00
  5.05470610e+00  5.06737953e+00  5.07278810e+00  5.07447970e+00
  5.08411518e+00  5.09064241e+00  5.10489891e+00  5.11224709e+00
  5.11558880e+00  5.12629811e+00  5.12821210e+00  5.14392086e+00
  5.15526220e+00  5.16020712e+00  5.17000700e+00  5.17375497e+00
  5.18170912e+00  5.18942237e+00  5.20008778e+00  5.20276420e+00
  5.21670960e+00  5.22702620e+00  5.23399309e+00  5.25490940e+00
  5.26457049e+00  5.27887402e+00  5.30098386e+00  5.31655366e+00
  5.32182713e+00  5.32669218e+00  5.33832256e+00  5.35043589e+00
  5.35952886e+00  5.36737559e+00  5.38029745e+00  5.39557033e+00
  5.41421675e+00  5.42733651e+00  5.43474570e+00  5.44846752e+00
  5.46013555e+00  5.47204031e+00  5.49170016e+00  5.50320839e+00
  5.52482641e+00  5.53088427e+00  5.53201844e+00  5.54669100e+00
  5.56608583e+00  5.57501263e+00  5.59810277e+00  5.60988070e+00
  5.62698686e+00  5.63698629e+00  5.64595415e+00  5.66405819e+00
  5.67785288e+00  5.71371138e+00  5.73091289e+00  5.73129859e+00
  5.78038974e+00  5.79651473e+00  5.80256653e+00  5.82569071e+00
  5.87210818e+00  5.87625841e+00  5.91660307e+00  5.93689627e+00
  5.93986230e+00  5.96980659e+00  5.97463803e+00  5.99216022e+00
  6.02113286e+00  6.08286380e+00  6.10494885e+00  6.14152945e+00
  6.16433180e+00  6.18419033e+00  6.21027096e+00  6.27200120e+00
  6.37708739e+00  6.37935655e+00  6.41056136e+00  6.48650702e+00
  6.56027570e+00  6.75933613e+00  6.80200091e+00  6.89234465e+00
  7.09607752e+00  7.35161833e+00  2.23638664e+01  2.23765920e+01
  2.23994170e+01  2.25289211e+01  2.25622880e+01  2.26405523e+01
  2.26515340e+01  2.26569417e+01  2.26599787e+01  2.26750073e+01
  2.26945750e+01  2.28356948e+01  2.29566845e+01  2.29665023e+01
  2.30342845e+01  2.31182691e+01  2.31874537e+01  2.32118723e+01
  2.33451819e+01  2.34085208e+01  2.35552693e+01  2.36530928e+01
  3.21215230e+01  3.22263947e+01  3.24420065e+01  3.26187340e+01
  3.27201776e+01  3.28372785e+01  3.31837683e+01  4.40618950e+01]
nelec by numeric integration = 215.99996096286193
    CPU time for vxc    137.78 sec, wall time      9.75 sec
    CPU time for df vj and vk    513.46 sec, wall time     46.65 sec
    CPU time for df vj and vk    391.57 sec, wall time     25.97 sec
E1 = -7673.040872308107  Ecoul = 3583.7191668267546  Exc = -186.3184950161704
cycle= 1 E= -1313.23681321907  delta_E= -1.82e-12  |g|= 7.03e-06  |ddm|= 1.47e-05
    CPU time for cycle= 1   1050.47 sec, wall time     86.06 sec
  HOMO = -0.279512414554174  LUMO = 0.0174198297458729
  mo_energy =
[-1.92614720e+01 -1.44919893e+01 -1.44488556e+01 -1.43969319e+01
 -1.43963999e+01 -1.43927530e+01 -1.43814781e+01 -1.43395357e+01
 -1.03615566e+01 -1.03414745e+01 -1.03280651e+01 -1.03205434e+01
 -1.03171226e+01 -1.03134918e+01 -1.03058464e+01 -1.02993932e+01
 -1.02969700e+01 -1.02854091e+01 -1.02782728e+01 -1.02675845e+01
 -1.02669498e+01 -1.02645515e+01 -1.02644304e+01 -1.02630038e+01
 -1.02595378e+01 -1.02573865e+01 -1.02543948e+01 -1.02519345e+01
 -1.02513713e+01 -1.02451037e+01 -1.23067858e+00 -1.16834262e+00
 -1.11751010e+00 -1.09100678e+00 -1.07543121e+00 -1.04020365e+00
 -9.84476727e-01 -9.81421832e-01 -9.70321426e-01 -9.61314756e-01
 -9.42226364e-01 -9.04686284e-01 -8.95298446e-01 -8.80609815e-01
 -8.68888682e-01 -8.63536677e-01 -8.46088896e-01 -8.17342085e-01
 -7.90997640e-01 -7.77364958e-01 -7.57997108e-01 -7.54832093e-01
 -7.45662939e-01 -7.25691144e-01 -7.14163460e-01 -7.06493041e-01
 -6.92923215e-01 -6.75546675e-01 -6.65594602e-01 -6.50038607e-01
 -6.42186066e-01 -6.38198831e-01 -6.19575187e-01 -6.13091816e-01
 -6.11221814e-01 -5.98406607e-01 -5.90727244e-01 -5.85814198e-01
 -5.76877597e-01 -5.72833218e-01 -5.64853577e-01 -5.58663079e-01
 -5.54564570e-01 -5.51747971e-01 -5.45807755e-01 -5.44039437e-01
 -5.39081290e-01 -5.35624479e-01 -5.32365368e-01 -5.27994935e-01
 -5.17584264e-01 -5.08589621e-01 -5.00628034e-01 -4.97975806e-01
 -4.93945354e-01 -4.88499164e-01 -4.74457138e-01 -4.72134898e-01
 -4.58108295e-01 -4.57750991e-01 -4.55153601e-01 -4.50302937e-01
 -4.48291887e-01 -4.42960878e-01 -4.42510331e-01 -4.39068643e-01
 -4.31770145e-01 -4.21745758e-01 -3.96613933e-01 -3.90179611e-01
 -3.75516827e-01 -3.67113115e-01 -3.39276737e-01 -3.36131042e-01
 -3.16519448e-01 -3.12492475e-01 -3.05658985e-01 -2.79512415e-01
  1.74198297e-02  3.78702037e-02  6.59297277e-02  7.40545770e-02
  9.44870020e-02  1.05916879e-01  1.10366964e-01  1.19694898e-01
  1.22546044e-01  1.28651409e-01  1.33203002e-01  1.37208013e-01
  1.42576165e-01  1.47312133e-01  1.48994692e-01  1.53231291e-01
  1.61512125e-01  1.63149777e-01  1.67633068e-01  1.75919692e-01
  1.80974651e-01  1.83747361e-01  1.87454228e-01  1.89496830e-01
  1.93143222e-01  1.99543366e-01  2.01612877e-01  2.07865275e-01
  2.09798601e-01  2.15612784e-01  2.16313029e-01  2.19548065e-01
  2.23618293e-01  2.29085477e-01  2.32583417e-01  2.37102824e-01
  2.39662076e-01  2.45048795e-01  2.49327483e-01  2.52160070e-01
  2.53149649e-01  2.60876187e-01  2.62890289e-01  2.63971799e-01
  2.68878552e-01  2.69943910e-01  2.72282094e-01  2.76559425e-01
  2.81400891e-01  2.82255563e-01  2.86399905e-01  2.92118722e-01
  2.93214649e-01  3.02953078e-01  3.04995354e-01  3.06515056e-01
  3.08779970e-01  3.11136682e-01  3.14876327e-01  3.19043422e-01
  3.21682758e-01  3.27080372e-01  3.28673045e-01  3.32971427e-01
  3.37678621e-01  3.38715157e-01  3.42480621e-01  3.45614333e-01
  3.50058083e-01  3.52524204e-01  3.59983007e-01  3.61028697e-01
  3.65175779e-01  3.69818970e-01  3.72025426e-01  3.77432209e-01
  3.80313317e-01  3.84933535e-01  3.91647557e-01  3.92144375e-01
  3.94253893e-01  4.02422290e-01  4.03244304e-01  4.07967074e-01
  4.11632480e-01  4.13420044e-01  4.20699781e-01  4.25516739e-01
  4.27897217e-01  4.30485735e-01  4.39810576e-01  4.42483071e-01
  4.44009134e-01  4.47966707e-01  4.49075504e-01  4.54621303e-01
  4.57063799e-01  4.58012992e-01  4.63503034e-01  4.65801820e-01
  4.70028553e-01  4.74822287e-01  4.77304829e-01  4.81440355e-01
  4.82472297e-01  4.91246870e-01  4.92872166e-01  4.93670053e-01
  4.95360139e-01  4.97636562e-01  5.04431794e-01  5.06700749e-01
  5.10750278e-01  5.13271019e-01  5.14417822e-01  5.17840997e-01
  5.20613407e-01  5.22590585e-01  5.24581341e-01  5.27561696e-01
  5.31123680e-01  5.33754373e-01  5.36824072e-01  5.38680740e-01
  5.41165661e-01  5.43239417e-01  5.45450905e-01  5.48875565e-01
  5.50902232e-01  5.52362867e-01  5.53845125e-01  5.56778371e-01
  5.59138957e-01  5.62215751e-01  5.64965359e-01  5.68218204e-01
  5.74868771e-01  5.78806862e-01  5.84811501e-01  5.89063302e-01
  5.91627643e-01  5.96658089e-01  6.03183096e-01  6.06599728e-01
  6.08894225e-01  6.15129576e-01  6.16647347e-01  6.19777054e-01
  6.21327769e-01  6.24686306e-01  6.33183589e-01  6.34237641e-01
  6.38753489e-01  6.46654922e-01  6.48021276e-01  6.49388893e-01
  6.55130061e-01  6.61080524e-01  6.67449726e-01  6.69640356e-01
  6.74397567e-01  6.82441801e-01  6.85858983e-01  6.88864730e-01
  6.95735198e-01  6.96027195e-01  7.04067578e-01  7.07203343e-01
  7.09538405e-01  7.10926342e-01  7.15714951e-01  7.21481258e-01
  7.25723355e-01  7.28056752e-01  7.28555436e-01  7.31695214e-01
  7.39868792e-01  7.44704579e-01  7.49987533e-01  7.56919522e-01
  7.63052789e-01  7.64086878e-01  7.68277408e-01  7.72737117e-01
  7.73797227e-01  7.83340724e-01  7.85094422e-01  7.91138963e-01
  7.93426717e-01  8.03786124e-01  8.04926355e-01  8.09333035e-01
  8.17129104e-01  8.17975250e-01  8.26696702e-01  8.27663965e-01
  8.33813967e-01  8.37600392e-01  8.39999053e-01  8.46296344e-01
  8.46933214e-01  8.54238515e-01  8.56634797e-01  8.61249503e-01
  8.68718542e-01  8.72459510e-01  8.74074110e-01  8.81177935e-01
  8.87036340e-01  8.91102296e-01  8.97060083e-01  9.00613944e-01
  9.02437438e-01  9.09459597e-01  9.13890073e-01  9.15230224e-01
  9.28110331e-01  9.31235578e-01  9.37102857e-01  9.40739176e-01
  9.46038372e-01  9.49889435e-01  9.55436584e-01  9.57997772e-01
  9.61618008e-01  9.66451235e-01  9.73677468e-01  9.79870958e-01
  9.82347908e-01  9.88352807e-01  9.92682523e-01  9.93501897e-01
  1.00367670e+00  1.00898201e+00  1.01529580e+00  1.02803663e+00
  1.03359703e+00  1.03806131e+00  1.04423620e+00  1.04766404e+00
  1.05676098e+00  1.05820026e+00  1.06024112e+00  1.06557838e+00
  1.06818072e+00  1.08030469e+00  1.08880563e+00  1.09605825e+00
  1.10417658e+00  1.10755148e+00  1.11145400e+00  1.12295639e+00
  1.12431618e+00  1.13379736e+00  1.14320988e+00  1.14782384e+00
  1.15124946e+00  1.15731487e+00  1.16359973e+00  1.16679540e+00
  1.17350127e+00  1.18041716e+00  1.19334114e+00  1.19737009e+00
  1.20387228e+00  1.20622811e+00  1.20927336e+00  1.21244243e+00
  1.22162088e+00  1.22887220e+00  1.23873629e+00  1.24423580e+00
  1.24872718e+00  1.25484830e+00  1.26135117e+00  1.26714515e+00
  1.27568638e+00  1.28238671e+00  1.28599161e+00  1.29053068e+00
  1.29662192e+00  1.30381309e+00  1.31231338e+00  1.31598618e+00
  1.31958264e+00  1.32538472e+00  1.32768307e+00  1.33794366e+00
  1.34103437e+00  1.34632871e+00  1.35341348e+00  1.35579259e+00
  1.36376804e+00  1.37054823e+00  1.37181960e+00  1.37974501e+00
  1.38843841e+00  1.39679936e+00  1.40352627e+00  1.40990147e+00
  1.41799924e+00  1.42203349e+00  1.42775069e+00  1.43653858e+00
  1.44324991e+00  1.44575974e+00  1.46098335e+00  1.46537285e+00
  1.46904131e+00  1.47543400e+00  1.47856533e+00  1.48793110e+00
  1.49066604e+00  1.50365834e+00  1.50448944e+00  1.50844907e+00
  1.51574537e+00  1.51919017e+00  1.52088019e+00  1.52702413e+00
  1.53906683e+00  1.54117475e+00  1.54713100e+00  1.55723573e+00
  1.55852029e+00  1.56359887e+00  1.57280625e+00  1.57422671e+00
  1.58123552e+00  1.59052086e+00  1.59573823e+00  1.60509164e+00
  1.60818219e+00  1.61351525e+00  1.61584721e+00  1.62027823e+00
  1.62149956e+00  1.62879386e+00  1.63455107e+00  1.63608343e+00
  1.64042531e+00  1.65645421e+00  1.66250737e+00  1.66498568e+00
  1.67803709e+00  1.68114692e+00  1.68452016e+00  1.68594671e+00
  1.68768770e+00  1.68870611e+00  1.69374342e+00  1.69636944e+00
  1.70340289e+00  1.70515144e+00  1.71218128e+00  1.71367014e+00
  1.71581752e+00  1.72506118e+00  1.72720185e+00  1.73673744e+00
  1.73965764e+00  1.74541041e+00  1.75101395e+00  1.75532196e+00
  1.75918981e+00  1.76351325e+00  1.76663952e+00  1.77604240e+00
  1.77980105e+00  1.78454166e+00  1.78669393e+00  1.79099487e+00
  1.79646770e+00  1.80413745e+00  1.80741049e+00  1.81066564e+00
  1.81879510e+00  1.82122331e+00  1.82873727e+00  1.83173688e+00
  1.84039650e+00  1.84727447e+00  1.85327748e+00  1.85787785e+00
  1.85996733e+00  1.86508679e+00  1.87711549e+00  1.88368576e+00
  1.88776663e+00  1.89048728e+00  1.89638136e+00  1.90340078e+00
  1.90960647e+00  1.91230721e+00  1.91760588e+00  1.92764375e+00
  1.93003444e+00  1.93199828e+00  1.93846489e+00  1.94860367e+00
  1.95288056e+00  1.96297976e+00  1.96696418e+00  1.97181370e+00
  1.98026988e+00  1.98402711e+00  1.98799571e+00  2.00021823e+00
  2.00452263e+00  2.01234318e+00  2.02063270e+00  2.02738083e+00
  2.03277363e+00  2.04281711e+00  2.05343405e+00  2.05925402e+00
  2.06416652e+00  2.06657186e+00  2.06879742e+00  2.07400764e+00
  2.07892635e+00  2.09041946e+00  2.09760518e+00  2.10147152e+00
  2.10350288e+00  2.10980793e+00  2.11187254e+00  2.11814135e+00
  2.12452168e+00  2.12970445e+00  2.13861358e+00  2.14053574e+00
  2.14657124e+00  2.14993721e+00  2.15469831e+00  2.15689866e+00
  2.16637537e+00  2.17558717e+00  2.17842891e+00  2.17985517e+00
  2.18814975e+00  2.19598392e+00  2.20700629e+00  2.21138892e+00
  2.22294119e+00  2.23371274e+00  2.23746176e+00  2.24479246e+00
  2.25241452e+00  2.26357149e+00  2.26955718e+00  2.27325213e+00
  2.27795316e+00  2.28839889e+00  2.29384675e+00  2.29849719e+00
  2.30037427e+00  2.30690450e+00  2.31883111e+00  2.32002076e+00
  2.32228325e+00  2.33868380e+00  2.33887573e+00  2.34376204e+00
  2.34642747e+00  2.36959897e+00  2.37140737e+00  2.37908658e+00
  2.38581763e+00  2.39631079e+00  2.40121628e+00  2.40793688e+00
  2.41093243e+00  2.41866972e+00  2.42026351e+00  2.42306373e+00
  2.43371513e+00  2.43447268e+00  2.44060157e+00  2.44670859e+00
  2.45150346e+00  2.45660040e+00  2.46524595e+00  2.46944306e+00
  2.47560269e+00  2.48964541e+00  2.49752281e+00  2.50138712e+00
  2.50803062e+00  2.51363108e+00  2.51563283e+00  2.52351817e+00
  2.53544013e+00  2.53761637e+00  2.54255784e+00  2.54737413e+00
  2.55055043e+00  2.56569112e+00  2.57085187e+00  2.57504165e+00
  2.58522844e+00  2.58571121e+00  2.59036835e+00  2.59988580e+00
  2.60554616e+00  2.61503503e+00  2.61881251e+00  2.62177295e+00
  2.62973513e+00  2.63630911e+00  2.64047887e+00  2.64652588e+00
  2.65880238e+00  2.66634778e+00  2.67000364e+00  2.68072515e+00
  2.68321623e+00  2.68399250e+00  2.68524223e+00  2.69143859e+00
  2.69820673e+00  2.70311019e+00  2.71069106e+00  2.71260250e+00
  2.72054474e+00  2.72371724e+00  2.72906654e+00  2.73055455e+00
  2.73910896e+00  2.74414083e+00  2.74906027e+00  2.75779696e+00
  2.76112192e+00  2.76437705e+00  2.76870891e+00  2.77190252e+00
  2.77692457e+00  2.77958987e+00  2.78557418e+00  2.78964923e+00
  2.79569893e+00  2.79848644e+00  2.80523320e+00  2.80611420e+00
  2.80864746e+00  2.81401354e+00  2.82024967e+00  2.82083002e+00
  2.83065162e+00  2.83336016e+00  2.84174673e+00  2.84625720e+00
  2.84956397e+00  2.85569311e+00  2.86276156e+00  2.86440841e+00
  2.86607472e+00  2.87500982e+00  2.87820942e+00  2.88687891e+00
  2.89174439e+00  2.89414819e+00  2.90542831e+00  2.91183960e+00
  2.91361644e+00  2.91710612e+00  2.92530330e+00  2.92858742e+00
  2.93993950e+00  2.94121744e+00  2.94889872e+00  2.95470290e+00
  2.96673072e+00  2.97540408e+00  2.98234012e+00  2.99229342e+00
  2.99385872e+00  3.00015838e+00  3.00943192e+00  3.01303082e+00
  3.02184072e+00  3.03083445e+00  3.03282499e+00  3.04027789e+00
  3.04461999e+00  3.04894313e+00  3.05458824e+00  3.05878136e+00
  3.06492518e+00  3.07574851e+00  3.07739310e+00  3.08022654e+00
  3.08601597e+00  3.10173324e+00  3.10356150e+00  3.10960025e+00
  3.11518835e+00  3.11627623e+00  3.12295189e+00  3.13501676e+00
  3.13845081e+00  3.13946450e+00  3.14143713e+00  3.15977845e+00
  3.16075069e+00  3.16298976e+00  3.16662527e+00  3.17520562e+00
  3.18515060e+00  3.18929463e+00  3.19524896e+00  3.20056275e+00
  3.20328670e+00  3.20842784e+00  3.21050200e+00  3.21357640e+00
  3.21803571e+00  3.22175588e+00  3.22715298e+00  3.23004343e+00
  3.23828535e+00  3.24548584e+00  3.25068667e+00  3.25263007e+00
  3.25989150e+00  3.26634579e+00  3.26812960e+00  3.27226152e+00
  3.27467553e+00  3.28300102e+00  3.28699867e+00  3.28857733e+00
  3.29104456e+00  3.29412278e+00  3.29783188e+00  3.30294711e+00
  3.30563534e+00  3.30849264e+00  3.32236826e+00  3.32673793e+00
  3.33130551e+00  3.33342394e+00  3.33840473e+00  3.33878588e+00
  3.34479769e+00  3.35443282e+00  3.35928939e+00  3.36130920e+00
  3.36863379e+00  3.37057781e+00  3.37999728e+00  3.38224074e+00
  3.38566524e+00  3.39368539e+00  3.39412824e+00  3.39888760e+00
  3.40403120e+00  3.40624955e+00  3.40806465e+00  3.41641617e+00
  3.41970744e+00  3.42323144e+00  3.42888985e+00  3.43487665e+00
  3.44128400e+00  3.44200174e+00  3.44611645e+00  3.45235931e+00
  3.45770486e+00  3.46792686e+00  3.46885393e+00  3.47061692e+00
  3.48041225e+00  3.48461506e+00  3.48628263e+00  3.48962954e+00
  3.50161489e+00  3.50522913e+00  3.51206876e+00  3.51645730e+00
  3.52239419e+00  3.52712831e+00  3.53124323e+00  3.53407790e+00
  3.53995403e+00  3.54349518e+00  3.54815520e+00  3.55334605e+00
  3.55989605e+00  3.56408062e+00  3.56877065e+00  3.57043711e+00
  3.58028601e+00  3.58418422e+00  3.59046643e+00  3.60165202e+00
  3.60430972e+00  3.60703576e+00  3.61256176e+00  3.62089767e+00
  3.62370142e+00  3.62999043e+00  3.63322279e+00  3.63500925e+00
  3.64226940e+00  3.64926764e+00  3.65443702e+00  3.65785950e+00
  3.66154543e+00  3.66610786e+00  3.67243348e+00  3.68561324e+00
  3.68840438e+00  3.69280385e+00  3.69695303e+00  3.70332251e+00
  3.71475985e+00  3.71781692e+00  3.72563793e+00  3.72813448e+00
  3.74431468e+00  3.75602269e+00  3.76770297e+00  3.77533088e+00
  3.78039398e+00  3.78120864e+00  3.78466752e+00  3.79205460e+00
  3.80524703e+00  3.81123016e+00  3.82320382e+00  3.83464143e+00
  3.84023875e+00  3.85042867e+00  3.86184942e+00  3.86646477e+00
  3.87242355e+00  3.87956419e+00  3.89351569e+00  3.90891555e+00
  3.91475079e+00  3.92778058e+00  3.93157401e+00  3.93816723e+00
  3.94580146e+00  3.95706770e+00  3.96079083e+00  3.97499293e+00
  3.98186363e+00  3.99223453e+00  3.99772450e+00  4.00219208e+00
  4.00925778e+00  4.01620841e+00  4.02732588e+00  4.02989169e+00
  4.03750470e+00  4.05065591e+00  4.06347913e+00  4.06512068e+00
  4.07375309e+00  4.08391628e+00  4.08633280e+00  4.09122228e+00
  4.10060531e+00  4.11392757e+00  4.11892489e+00  4.12943020e+00
  4.13104276e+00  4.13755126e+00  4.14542675e+00  4.15900939e+00
  4.16798068e+00  4.17903272e+00  4.18079232e+00  4.19122768e+00
  4.20311766e+00  4.20504007e+00  4.21015880e+00  4.21788935e+00
  4.22501129e+00  4.23646851e+00  4.24419294e+00  4.25613217e+00
  4.25942957e+00  4.26035434e+00  4.26869336e+00  4.27545860e+00
  4.29403604e+00  4.29810401e+00  4.30699200e+00  4.31153105e+00
  4.32103293e+00  4.33204125e+00  4.35406992e+00  4.35637163e+00
  4.37088504e+00  4.37531449e+00  4.38429543e+00  4.39385836e+00
  4.39848528e+00  4.40551825e+00  4.42034145e+00  4.42874102e+00
  4.44012611e+00  4.44265047e+00  4.45118531e+00  4.45473704e+00
  4.46352158e+00  4.47013642e+00  4.49037777e+00  4.50137680e+00
  4.51152573e+00  4.51451142e+00  4.52295810e+00  4.52857040e+00
  4.54210560e+00  4.55575668e+00  4.56252685e+00  4.56549856e+00
  4.57184405e+00  4.58719276e+00  4.61123783e+00  4.63217634e+00
  4.65827586e+00  4.66637021e+00  4.67990361e+00  4.68554232e+00
  4.69094289e+00  4.69692662e+00  4.71351619e+00  4.72462257e+00
  4.73159492e+00  4.74458869e+00  4.76541806e+00  4.77263542e+00
  4.77857364e+00  4.78508621e+00  4.80644242e+00  4.81068468e+00
  4.81664097e+00  4.83461005e+00  4.84364911e+00  4.84784961e+00
  4.85783508e+00  4.86339876e+00  4.87034713e+00  4.87966661e+00
  4.88419392e+00  4.89035543e+00  4.90218444e+00  4.90347752e+00
  4.91311523e+00  4.92766183e+00  4.94225434e+00  4.94616989e+00
  4.95782617e+00  4.97333923e+00  4.97370978e+00  4.98179710e+00
  4.99320134e+00  4.99761952e+00  5.02440599e+00  5.03804114e+00
  5.05470626e+00  5.06737955e+00  5.07278885e+00  5.07448025e+00
  5.08411575e+00  5.09064250e+00  5.10489915e+00  5.11224683e+00
  5.11558909e+00  5.12629803e+00  5.12821204e+00  5.14392086e+00
  5.15526281e+00  5.16020726e+00  5.17000691e+00  5.17375510e+00
  5.18170939e+00  5.18942290e+00  5.20008830e+00  5.20276452e+00
  5.21670981e+00  5.22702654e+00  5.23399363e+00  5.25490959e+00
  5.26457086e+00  5.27887407e+00  5.30098396e+00  5.31655364e+00
  5.32182710e+00  5.32669209e+00  5.33832273e+00  5.35043589e+00
  5.35952881e+00  5.36737527e+00  5.38029742e+00  5.39557064e+00
  5.41421707e+00  5.42733701e+00  5.43474617e+00  5.44846826e+00
  5.46013603e+00  5.47204067e+00  5.49170072e+00  5.50320849e+00
  5.52482644e+00  5.53088430e+00  5.53201856e+00  5.54669128e+00
  5.56608601e+00  5.57501289e+00  5.59810324e+00  5.60988102e+00
  5.62698697e+00  5.63698596e+00  5.64595439e+00  5.66405793e+00
  5.67785298e+00  5.71371120e+00  5.73091317e+00  5.73129878e+00
  5.78039054e+00  5.79651489e+00  5.80256679e+00  5.82569108e+00
  5.87210880e+00  5.87625890e+00  5.91660340e+00  5.93689668e+00
  5.93986254e+00  5.96980677e+00  5.97463676e+00  5.99216134e+00
  6.02113360e+00  6.08286353e+00  6.10494887e+00  6.14152957e+00
  6.16433180e+00  6.18419043e+00  6.21027138e+00  6.27200083e+00
  6.37708783e+00  6.37935657e+00  6.41055978e+00  6.48650621e+00
  6.56027439e+00  6.75933542e+00  6.80199882e+00  6.89234275e+00
  7.09607534e+00  7.35161646e+00  2.23638667e+01  2.23765922e+01
  2.23994171e+01  2.25289210e+01  2.25622890e+01  2.26405522e+01
  2.26515343e+01  2.26569429e+01  2.26599797e+01  2.26750081e+01
  2.26945748e+01  2.28356943e+01  2.29566850e+01  2.29665023e+01
  2.30342849e+01  2.31182696e+01  2.31874530e+01  2.32118733e+01
  2.33451812e+01  2.34085216e+01  2.35552698e+01  2.36530941e+01
  3.21215210e+01  3.22263930e+01  3.24420059e+01  3.26187349e+01
  3.27201809e+01  3.28372814e+01  3.31837689e+01  4.40618912e+01]
nelec by numeric integration = 215.99996096291733
    CPU time for vxc    150.06 sec, wall time     10.61 sec
    CPU time for df vj and vk    511.21 sec, wall time     39.80 sec
    CPU time for df vj and vk    391.39 sec, wall time     26.30 sec
E1 = -7673.0408281330665  Ecoul = 3583.719122718165  Exc = -186.31849508261672
Extra cycle  E= -1313.23681321906  delta_E= 4.55e-12  |g|= 9e-06  |ddm|= 1.82e-05
    CPU time for scf_cycle   3908.69 sec, wall time    327.43 sec
    CPU time for SCF   3908.69 sec, wall time    327.43 sec
converged SCF energy = -1313.23681321906
SCF Done after 327.46 seconds
after SCF memory used: 22.83 GB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
hdiag shape (106272,)
n_occ =  108
n_vir =  984
max_vir =  262
A_size =  106272
A_reduced_size = 28296
a_x = 0.56
beta = 8.0
alpha = 4.58
Q-Gamma tensors building time = 0.94
after Q matrix memory used: 23.04 GB
TDDFT
|-------- In-house Developed TDDFT Starts ---------|
Residual conv = 1e-05

Number of excited states = 20
Initial guess:   sTDDFT
Preconditioner:  sTDDFT
A matrix size =  106272
setting initial guess
sTDDFT Convergence tol = 1.00e-03
sTDDFT diagonalization Converged
after  11 iterations; 102.6002 seconds
final subspace 209
max_norm =  8.46e-04
MVcost     13.6601s 13.31%
GScost     78.7431s 76.75%
subgencost 7.5133s 7.32%
subcost    0.4331s 0.42%
sTDDFT excitation energy:
[3.84889436 4.27166614 4.3813993  4.74882143 4.80647268 4.986701
 5.28894017 5.33677982 5.40999595 5.75451097 5.7707887  5.8843929
 5.95561977 6.0064592  6.05008941 6.11079633 6.1600119  6.26791183
 6.30010794 6.41333175 6.45617437 6.48001582 6.53703523 6.5449164
 6.61527236 6.73266933 6.76425766 6.78871618]
new_m = 28
initial guess done

iteration 0
beginning of step 0 memory used: 25.20 GB
    CPU time for df vj and vk  14727.15 sec, wall time   1079.41 sec
    CPU time for df vj and vk  11268.18 sec, wall time    752.63 sec
subspace size: 28
Maximum residual norm:  1.50e-01
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 62.5159 s
final subspace 200
max_norm =  6.01e-03
initial_cost 0.5115s  0.82%
MVcost     11.0468s  17.67%
GScost     38.6661s  61.85%
subgencost 8.9337s  14.29%
subcost    0.9567s  1.53%
m & new_m 28 48

iteration 1
beginning of step 1 memory used: 25.36 GB
    CPU time for df vj and vk  10460.49 sec, wall time    779.15 sec
    CPU time for df vj and vk   8057.36 sec, wall time    532.06 sec
subspace size: 48
Maximum residual norm:  4.25e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 54.9082 s
final subspace 187
max_norm =  7.54e-03
initial_cost 0.5021s  0.91%
MVcost     10.8221s  19.71%
GScost     31.3504s  57.10%
subgencost 8.8167s  16.06%
subcost    1.0653s  1.94%
m & new_m 48 68

iteration 2
beginning of step 2 memory used: 25.40 GB
    CPU time for df vj and vk  10342.04 sec, wall time    773.30 sec
    CPU time for df vj and vk   8022.63 sec, wall time    538.82 sec
subspace size: 68
Maximum residual norm:  2.90e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 16 steps; 44.6694 s
final subspace 176
max_norm =  9.96e-03
initial_cost 0.4999s  1.12%
MVcost     10.5048s  23.52%
GScost     24.5529s  54.97%
subgencost 6.4675s  14.48%
subcost    1.0518s  2.35%
m & new_m 68 88

iteration 3
beginning of step 3 memory used: 25.41 GB
    CPU time for df vj and vk  10469.30 sec, wall time    778.12 sec
    CPU time for df vj and vk   8071.41 sec, wall time    539.83 sec
subspace size: 88
Maximum residual norm:  1.61e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 14 steps; 75.0788 s
final subspace 169
max_norm =  5.38e-03
initial_cost 1.0234s  1.36%
MVcost     16.3910s  21.83%
GScost     46.7037s  62.21%
subgencost 9.0885s  12.11%
subcost    0.4927s  0.66%
m & new_m 88 108

iteration 4
beginning of step 4 memory used: 25.41 GB
    CPU time for df vj and vk  10453.26 sec, wall time    776.00 sec
    CPU time for df vj and vk   8078.40 sec, wall time    540.20 sec
subspace size: 108
Maximum residual norm:  4.52e-03
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 19 steps; 48.1393 s
final subspace 180
max_norm =  7.29e-03
initial_cost 0.5205s  1.08%
MVcost     9.6611s  20.07%
GScost     26.9119s  55.90%
subgencost 8.1073s  16.84%
subcost    0.9156s  1.90%
m & new_m 108 128

iteration 5
beginning of step 5 memory used: 25.41 GB
    CPU time for df vj and vk  10427.35 sec, wall time    780.80 sec
    CPU time for df vj and vk   8034.44 sec, wall time    542.72 sec
subspace size: 128
Maximum residual norm:  1.20e-03
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 18 steps; 55.7739 s
final subspace 183
max_norm =  9.91e-03
initial_cost 0.4633s  0.83%
MVcost     13.9003s  24.92%
GScost     30.5420s  54.76%
subgencost 8.0817s  14.49%
subcost    0.8078s  1.45%
m & new_m 128 148

iteration 6
beginning of step 6 memory used: 25.41 GB
    CPU time for df vj and vk  10419.79 sec, wall time    776.94 sec
    CPU time for df vj and vk   8016.34 sec, wall time    557.29 sec
subspace size: 148
Maximum residual norm:  2.67e-04
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 17 steps; 81.8910 s
final subspace 176
max_norm =  9.50e-03
initial_cost 1.0273s  1.25%
MVcost     16.7951s  20.51%
GScost     49.8932s  60.93%
subgencost 11.5760s  14.14%
subcost    0.6819s  0.83%
m & new_m 148 168

iteration 7
beginning of step 7 memory used: 25.41 GB
    CPU time for df vj and vk  10396.98 sec, wall time    773.34 sec
    CPU time for df vj and vk   8059.42 sec, wall time    536.25 sec
subspace size: 168
Maximum residual norm:  5.07e-05
unconverged states [14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 18.9436 s
final subspace 105
max_norm =  6.46e-03
initial_cost 0.0968s  0.51%
MVcost     5.7458s  30.33%
GScost     8.3090s  43.86%
subgencost 3.6505s  19.27%
subcost    0.2718s  1.43%
m & new_m 168 174

iteration 8
beginning of step 8 memory used: 25.31 GB
    CPU time for df vj and vk   3096.83 sec, wall time    231.02 sec
    CPU time for df vj and vk   2389.45 sec, wall time    164.58 sec
subspace size: 174
Maximum residual norm:  9.74e-06
TDDFT precedure Done

============= TDDFT Calculation Done ==============
after 9 iterations 13746.64 s
Final subspace  174
preconditioning cost 442.8454 0.03 %
max_norm =  9.74e-06
Total TDDFT memory used: 25.37 GB
Excited State energies (eV) =
 [4.04404998 4.42260944 4.61237972 4.79708362 4.9590152  5.28222239
 5.39268001 5.55151852 5.74890047 5.9053521  5.98726967 6.11304515
 6.12732234 6.20470594 6.34939244 6.45958019 6.49159613 6.51433076
 6.58833475 6.61269779]
xyzfile = 57_Cypridina_luciferin.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 20
pytd = False
TDA = False
TDDFT = True
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
ip_options = [0]
conv_tolerance = 1e-05
initial_TOL = 0.001
precond_TOL = 0.01
extrainitial = 8
max = 30
eigensolver_tol = 1e-05
memory = 80000
verbose = 5
beta = []
alpha = []
|-------- In-house Developed TDDFT Ends ----------|
