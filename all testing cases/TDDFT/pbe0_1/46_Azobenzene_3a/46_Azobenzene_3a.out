curpath /scratch/pbsjobs/job.15978461.hpc
lib.num_threads() =  16
at beginning memory used: 0.05 GB
mol.max_memory 50000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul9.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

'''wb97x  methanol, 1e-5
  sTDDFT no truncate [6.46636611 8.18031534 8.38140651 9.45011415 9.5061059 ]
            40 eV    [6.46746642 8.18218267 8.38314651 9.45214869 9.5126739 ]
    sTDA no truncate [6.46739711 8.18182208 8.38358473 9.45195554 9.52133129]
            40 eV    [6.46827111 8.18334703 8.38483801 9.45361525 9.52562255]
'''
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

def gen_args():
    parser = argparse.ArgumentParser(description='Davidson')
    parser.add_argument('-x', '--xyzfile',          type=str,   default='NA',  help='xyz filename (molecule.xyz)')
    parser.add_argument('-chk', '--checkfile',      type=bool,  default=False, help='checkpoint filename (.chk)')
    parser.add_argument('-m', '--method',           type=str,   default='RKS', help='RHF RKS UHF UKS')
    parser.add_argument('-f', '--functional',       type=str,   default='NA',  help='xc functional')
    parser.add_argument('-b', '--basis_set',        type=str,   default='NA',  help='basis set')
    parser.add_argument('-df', '--density_fit',     type=bool,  default=True,  help='density fitting turn on')
    parser.add_argument('-g', '--grid_level',       type=int,   default='3',   help='0-9, 9 is best')

    parser.add_argument('-n','--nstates',           type=int,   default = 4,      help='number of excited states')
    parser.add_argument('-pytd','--pytd',           type=bool,  default = False , help='whether to compare with PySCF TDDFT')

    parser.add_argument('-TDA','--TDA',             type=bool,  default = False, help='perform TDA')
    parser.add_argument('-TDDFT','--TDDFT',         type=bool,  default = False, help='perform TDDFT')
    parser.add_argument('-dynpol','--dynpol',       type=bool,  default = False, help='perform dynamic polarizability')
    parser.add_argument('-omega','--dynpol_omega',  type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
    parser.add_argument('-stapol','--stapol',       type=bool,  default = False, help='perform static polarizability')
    parser.add_argument('-sTDA','--sTDA',           type=bool,  default = False, help='perform sTDA calculation')
    parser.add_argument('-sTDDFT','--sTDDFT',       type=bool,  default = False, help='perform sTDDFT calculation')
    parser.add_argument('-TT','--Truncate_test',    type=bool,  default = False, help='test the wall time for different virtual truncation')

    parser.add_argument('-TV','--truncate_virtual', type=float, default = 40,    help='the threshold to truncate virtual orbitals, in eV')

    parser.add_argument('-o','--ip_options',        type=int,   default = [0], nargs='+', help='0-7')
    parser.add_argument('-t','--conv_tolerance',    type=float, default= 1e-5, help='residual norm Convergence threhsold')

    parser.add_argument('-it','--initial_TOL',      type=float, default= 1e-3, help='conv for the inital guess')
    parser.add_argument('-pt','--precond_TOL',      type=float, default= 1e-2, help='conv for TDA preconditioner')

    parser.add_argument('-ei','--extrainitial',     type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
    parser.add_argument('-max','--max',             type=int,   default= 30,   help='max iterations')

    parser.add_argument('-et','--eigensolver_tol',  type=float, default= 1e-5, help='conv for new guess generator in new_ES')
    parser.add_argument('-M','--memory',            type=int,   default= 4000, help='max_memory')
    parser.add_argument('-v','--verbose',           type=int,   default= 5,    help='mol.verbose = 3,4,5')

    parser.add_argument('-be','--beta',             type=float, default= [],    nargs='+', help='beta = 0.83')
    parser.add_argument('-al','--alpha',            type=float, default= [],    nargs='+', help='alpha = 0.83')

    args = parser.parse_args()
    if args.dynpol == True and args.dynpol_omega == []:
        raise ValueError('External Perturbation ω cannot be None')
    return args
args = gen_args()

def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024**3
    print('{} memory used: {:<.2f} GB'.format(hint, memory))

show_memory_info('at beginning')

'''read xyz file and delete its first two lines'''
basename = args.xyzfile.split('.',1)[0]

def SCF_kernel():
    kernel_0 = time.time()
    f = open(args.xyzfile)
    atom_coordinates = f.readlines()
    del atom_coordinates[:2]
    '''build geometry in PySCF'''
    mol = gto.Mole()
    mol.atom = atom_coordinates
    mol.basis = args.basis_set
    mol.verbose = args.verbose
    mol.max_memory = args.memory
    print('mol.max_memory', mol.max_memory)
    mol.build(parse_arg = False)
    '''DFT or HF'''
    if args.method == 'RKS':
        mf = dft.RKS(mol)
    elif args.method == 'UKS':
        mf = dft.UKS(mol)
    elif args.method == 'RHF':
        mf = scf.RHF(mol)
    elif args.method == 'UHF':
        mf = scf.UHF(mol)
    if 'KS' in args.method:
        print('RKS')
        mf.xc = args.functional
        mf.grids.level = args.grid_level
    else:
        print('HF')
    if args.density_fit:
        mf = mf.density_fit()
        print('Density fitting turned on')
    if args.checkfile == True:
        '''use the *.chk file as scf input'''
        mf.chkfile = basename + '_' + args.functional + '.chk'
        mf.init_guess = 'chkfile'
    mf.conv_tol = 1e-10
    print ('Molecule built')
    print ('Calculating SCF Energy...')
    mf.kernel()

    kernel_1 = time.time()
    kernel_t = kernel_1 - kernel_0

    return mol, mf, kernel_t

mol, mf, kernel_t = SCF_kernel()

print ('SCF Done after %.2f'%kernel_t, 'seconds')

show_memory_info('after SCF')

'''Collect everything needed from PySCF'''

Hartree_to_eV = 27.211386245988

def gen_global_var():
    '''TDA_vind & TDDFT_vind are ab-initio matrix vector multiplication function
    '''
    td = tddft.TDA(mf)
    TD = tddft.TDDFT(mf)
    TDA_vind, hdiag = td.gen_vind(mf)
    TDDFT_vind, Hdiag = TD.gen_vind(mf)

    Natm = mol.natm
    '''mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
       N_bf is the total amount of MOs
       coefficient_matrix_C is the unorthonormalized coefficient matrix
       if no truncation, then max_vir = n_vir and n_occ + max_vir = N_bf
    '''
    mo_occ = mf.mo_occ
    coefficient_matrix_C = mf.mo_coeff
    N_bf = len(mo_occ)
    n_occ = len(np.where(mo_occ > 0)[0])
    n_vir = len(np.where(mo_occ == 0)[0])
    delta_hdiag = hdiag.reshape(n_occ, n_vir)
    A_size = n_occ * n_vir

    tol_eV = args.truncate_virtual/Hartree_to_eV
    homo_vir = delta_hdiag[-1,:]
    max_vir = len(np.where(homo_vir <= tol_eV)[0])

    max_vir_hdiag = delta_hdiag[:,:max_vir]

    A_reduced_size = n_occ * max_vir

    '''R_array is inter-particle distance array
       unit == ’Bohr’, 5.29177210903(80)×10^(−11) m
    '''
    R_array = pyscf.gto.mole.inter_distance(mol, coords=None)

    print('hdiag shape', hdiag.shape)
    print('n_occ = ', n_occ)
    print('n_vir = ', n_vir)
    print('max_vir = ', max_vir)
    print('A_size = ', A_size)
    print('A_reduced_size =', A_reduced_size)

    return TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
                    max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
                        n_vir, max_vir, A_size, A_reduced_size, R_array

TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
        max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
             n_vir, max_vir, A_size, A_reduced_size, R_array = gen_global_var()

def TDA_matrix_vector(V):
    '''return AX'''
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X
       this is not the optimum way, but the only way in PySCF
    '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1

def gen_HARDNESS():
    '''a dictionary of chemical hardness, by mappig two lists:
       list of elements 1-94
       list of hardness for elements 1-94, floats,in Hartree
    '''
    elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', \
    'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', \
    'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', \
    'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', \
    'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', \
    'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\
    'Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', \
    'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
    hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,\
    0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,\
    0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,\
    0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,\
    0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,\
    0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,\
    0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,\
    0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,\
    0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,\
    0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,\
    0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,\
    0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,\
    0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,\
    0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,\
    0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,\
    0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
    HARDNESS = dict(zip(elements,hardness))
    return HARDNESS

def matrix_power(S,a):
    '''X == S^a'''
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    return X

def orthonormalize(C):
    ''' produce orthonormalized coefficient matrix C, N_bf * N_bf
        S = mf.get_ovlp()  is basis overlap matrix
        S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
        np.dot(C.T,C) is a an identity matrix
    '''
    S = mf.get_ovlp()
    X = matrix_power(S, 0.5)
    C = np.dot(X,C)
    return C

def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    '''NA is for Hartree-Fork'''
    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    Func_ax = dict(zip(hybride_F, hybride_paramt))

    beta1 = 0.2
    beta2 = 1.83
    alpha1 = 1.42
    alpha2 = 0.48
    '''RSH functionals have specific a_x, beta, alpha values;
       hybride fucntionals have fixed alpha12 and beta12 values,
       with different a_x values, by which create beta, alpha
    '''
    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]
    elif args.functional in hybride_F:
        a_x = Func_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)

    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

def gen_gammaJK():
    '''creat GammaK and GammaK matrix
       mol.atom_pure_symbol(atom_id) returns the element symbol
    '''
    HARDNESS = gen_HARDNESS()
    a = [HARDNESS[mol.atom_pure_symbol(atom_id)] for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2
    GammaJ = (R_array**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R_array**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

def generateQ():
    '''build q_iajb tensor'''
    C = orthonormalize(coefficient_matrix_C)
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

def gen_QJK(max_vir=max_vir):

    '''pre-calculate and store the Q-Gamma rank 3 tensor
       qia * gamma * qjb -> qia GK_q_jb
    '''
    Qstart = time.time()
    q_tensors = generateQ()
    GammaJ, GammaK = gen_gammaJK()

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)
    Qend = time.time()
    Q_time = Qend - Qstart
    print('Q-Gamma tensors building time = %.2f'%Q_time)
    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()

show_memory_info('after Q matrix')

def gen_iajb_ijab_ibja_delta_fly(max_vir = max_vir, \
                                    q_ij = q_ij, \
                                    q_ab = q_ab, \
                                    q_ia = q_ia , \
                                 GK_q_jb = GK_q_jb, \
                                 GJ_q_ab = GJ_q_ab):
    '''define sTDA on-the-fly two electron intergeral (pq|rs)
       A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v
       iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
       ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)
    '''
    def iajb_fly(V):
        '''(ia|jb) '''
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        return iajb_V

    def ijab_fly(V):
        '''(ij|ab) '''
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        return ijab_V

    def ibja_fly(V):
        '''the Forck exchange energy in B matrix
           (ib|ja)
        '''
        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        return ibja_V

    def delta_fly(V):
        '''delta_hdiag.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_hdiag, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''max_vir_hdiag.shape = (n_occ, max_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir = max_vir, \
                              iajb_fly = iajb_fly, \
                              ijab_fly = ijab_fly, \
                              ibja_fly = ibja_fly, \
                     delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        '''return AX'''
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''return AX+BY and AY+BX
           sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
           sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        '''return (A+B)X = delta_fly(V) + 4*iajb_fly(V)
           - ijab_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir, -1)
        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)
        U = U.reshape(n_occ*max_vir, -1)

        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

def Gram_Schmidt_bvec(A, bvec):
    '''orthonormalize vector b against all vectors in A
       b = b - A*(A.T*b)
       suppose A is orthonormalized
    '''
    if A.shape[1] != 0:
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    '''orthonormalize vector |x,y> against all vectors in |V,W>'''
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)
    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    '''V is a vectors holder
       count is the amount of vectors that already sit in the holder
       nvec is amount of new vectors intended to fill in the V
       count will be final amount of vectors in V
    '''
    nvec = np.shape(vecs)[1]
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize
        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count
    return V, new_count

def S_symmetry_orthogonal(x,y):
    '''symmetrically orthogonalize the vectors |x,y> and |y,x>
       as close to original vectors as possible
    '''
    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A

def check_orthonormal(A):
    '''define the orthonormality of a matrix A as the norm of (A.T*A - I)'''
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c

def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    '''put X_new into V, and Y_new into W
       m: the amount of vectors that already on V or W
       nvec: amount of new vectors intended to put in the V and W
    '''
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]

    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):
        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart

        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m

def solve_AX_Xla_B(A, omega, Q):
    '''AX - XΩ  = Q
       A, Ω, Q are known, solve X
    '''
    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)
    X *= Qnorm

    return X

def TDA_A_diag_initial_guess(m, hdiag = hdiag):
    '''m is the amount of initial guesses'''
    hdiag = hdiag.reshape(-1,)
    V_size = hdiag.shape[0]
    Dsort = hdiag.argsort()
    energies = hdiag[Dsort][:m]*Hartree_to_eV
    V = np.zeros((V_size, m))
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V, energies

def TDA_A_diag_preconditioner(residual, sub_eigenvalue, current_dic = None,\
                            hdiag = hdiag, tol = None, full_guess=None, \
                        return_index=None, W_H=None, V_H=None, sub_A_H=None):
    '''DX = XΩ'''
    k = np.shape(residual)[1]
    t = 1e-14
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    '''force all small values not in [-t,t]'''
    D = np.where( abs(D) < t, np.sign(D)*t, D)
    new_guess = residual/D

    if current_dic != None:
        return new_guess, current_dic
    else:
        return new_guess

def sTDA_eigen_solver(k, tol=args.initial_TOL):
    '''A'X = XΩ'''
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    max = 30

    '''m is size of subspace'''
    m = 0
    new_m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)

    '''V is subsapce basis
       W is transformed guess vectors'''
    V[:, :new_m],initial_energies = TDA_A_diag_initial_guess(\
                                            new_m, hdiag = max_vir_hdiag)
    for i in range(max):
        '''create subspace'''
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)

        '''Diagonalize the subspace Hamiltonian, and sorted.
        sub_eigenvalue[:k] are smallest k eigenvalues'''
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])

        '''residual = AX - XΩ = AVx - XΩ = Wx - XΩ'''
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess*sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        '''precondition the unconverged residuals'''
        new_guess = TDA_A_diag_preconditioner(\
                        residual = residual[:,index],\
                  sub_eigenvalue = sub_eigenvalue[:k][index],\
                           hdiag = max_vir_hdiag)

        '''orthonormalize the new guess against basis and put into V holder'''
        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalized in', i, 'steps; ', '%.4f'%sTDA_D, 'seconds' )
    print('threshold =', tol)
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*Hartree_to_eV)

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    omega = sub_eigenvalue[:k]*Hartree_to_eV
    return U, omega

def sTDA_preconditioner(residual, sub_eigenvalue, tol=args.precond_TOL,\
                        current_dic=None, full_guess=None, return_index=None,\
                        W_H=None, V_H=None, sub_A_H=None):
    '''sTDA preconditioner
       (A - Ω*I)^-1 P = X
       AX - XΩ = P
       P is residuals (in big Davidson's loop) to be preconditioned
    '''
    p_start = time.time()

    '''number of vectors to be preconditioned'''
    N_vectors = residual.shape[1]
    Residuals = residual.reshape(n_occ,n_vir,-1)
    omega = sub_eigenvalue
    P = Residuals[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P = P/pnorm

    start = time.time()
    tol = args.precond_TOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    '''now V and W are empty holders, 0 vectors
       W = sTDA_mv(V)
       count is the amount of vectors that already sit in the holder
       in each iteration, V and W will be filled/updated with new guess basis
       which is the preconditioned residuals
    '''

    '''initial guess: DX - XΩ = P
       Dp is the preconditioner
       <t: returns np.sign(D)*t; else: D
    '''
    t = 1e-10
    Dp = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - omega
    Dp = np.where(abs(Dp)<t, \
                                        np.sign(Dp)*t, Dp)
    Dp = Dp.reshape(n_occ, n_vir, -1)
    D = Dp[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    '''generate initial guess'''
    Xig = P*inv_D
    count = 0
    V, new_count = Gram_Schmidt_fill_holder(V, count, Xig)

    origin_dic = current_dic.copy()
    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0

    for i in range(max):
        substart = time.time()
        '''project sTDA_A matrix and vector P into subspace'''
        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        sub_P= np.dot(V[:,:new_count].T, P)
        sub_A = np.dot(V[:,:new_count].T, W[:,:new_count])
        subend = time.time()
        subgencost += subend - substart

        sub_A = symmetrize(sub_A)
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, omega, sub_P)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:new_count], sub_guess)
        residual = np.dot(W[:,:new_count], sub_guess) - full_guess*omega - P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append(\
                                    {'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index of unconverged states'''
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''precondition the unconverged residuals'''
        new_guess = residual[:,index]*inv_D[:,index]


        GSstart = time.time()
        count = new_count
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart

    p_end = time.time()
    p_cost = p_end - p_start

    if i == (max -1):
        print('_____sTDA Preconditioner Failed Due to Iteration Limit _______')
        print('failed after ', i, 'steps,', '%.4f'%p_cost,'s')
        print('orthonormality of V', check_orthonormal(V[:,:count]))
        print('current residual norms', r_norms)
    else:
        print('sTDA precond Done after', i, 'steps;', '%.4f'%p_cost,'seconds')

    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['subgencost', 'mvcost', 'GScost', 'subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/p_cost))
    full_guess *= pnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = P2'''
        P2 = Residuals[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = Dp[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)

    '''if we want to know more about the preconditioning process,
        return the current_dic, rather than origin_dic'''
    if current_dic != None:
        return U, origin_dic
    else:
        return U

def Jacobi_preconditioner(residual, sub_eigenvalue, current_dic, full_guess,\
                return_index = None, W_H = None, V_H = None, sub_A_H = None):
    '''(1-uu*)(A-Ω*I)(1-uu*)t = -B
       B is residual, we want to solve t
       z approximates t
       z = (A-Ω*I)^(-1)*(-B) - α(A-Ω*I)^(-1)*u
            let K_inv_y = (A-Ω*I)^(-1)*(-B)
            and K_inv_u = (A-Ω*I)^(-1)*u
       z = K_inv_y - α*K_inv_u
       where α = [u*(A-Ω*I)^(-1)y]/[u*(A-Ω*I)^(-1)u]
       first, solve (A-Ω*I)^(-1)y and (A-Ω*I)^(-1)u
    '''
    B = residual
    omega = sub_eigenvalue
    u = current_guess

    K_inv_y = sTDA_preconditioner(-B, omega)
    K_inv_u = sTDA_preconditioner(u, omega)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d
    z = K_inv_y -  Alpha*K_inv_u

    return z, current_dic

def on_the_fly_Hx(W, V, sub_A, x):
    def Qx(V, x):
        '''Qx = (1 - V*V.T)*x = x - V*V.T*x'''
        VX = np.dot(V.T,x)
        x -= np.dot(V,VX)
        return x
    '''on-the-fly compute H'x
       H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q
       K approximates H, here K = sTDA_A
       H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)
       H′x ≡ a + b − c + d
    '''
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx

def new_ES(full_guess, return_index, W_H, V_H, sub_A_H, \
                        residual=None, sub_eigenvalue=None, current_dic=None):
    '''new eigenvalue solver, to diagonalize the H'
       the traditional Davidson to diagonalize the H' matrix
       W_H, V_H, sub_A_H are from the exact H
    '''
    new_ES_start = time.time()
    tol = args.eigensolver_tol
    max = 30

    k = args.nstates
    m = min([k+8, 2*k, A_size])

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    '''sTDA as initial guess'''
    V = sTDA_eigen_solver(m, V)
    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])

    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        residual = np.dot(W[:,:m], sub_eigenket[:,:k])
        residual -= np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        new_guess = TDA_A_diag_preconditioner(residual[:,index], \
                                                    sub_eigenvalue[:k][index])
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m

    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    new_ES_end = time.time()
    new_ES_cost = new_ES_end - new_ES_start
    print('H_app diagonalization done in',i,'steps; ','%.2f'%new_ES_cost, 's')
    print('threshold =', tol)
    return full_guess[:,return_index], current_dic

def gen_TDA_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDA']   = sTDA_eigen_solver
    i_lib['Adiag']  = TDA_A_diag_initial_guess
    p_lib['sTDA']   = sTDA_preconditioner
    p_lib['Adiag']  = TDA_A_diag_preconditioner
    p_lib['Jacobi'] = Jacobi_preconditioner
    p_lib['new_ES'] = new_ES
    return i_lib, p_lib

def fill_dictionary(dic,init,prec,k,icost,pcost,wall_time,N_itr,N_mv,\
            initial_energies=None,energies=None,difference=None,overlap=None,\
            tensor_alpha=None, initial_tensor_alpha=None):
    dic['initial guess'] = init
    dic['preconditioner'] = prec
    dic['nstate'] = k
    dic['molecule'] = basename
    dic['method'] = args.method
    dic['functional'] = args.functional
    dic['threshold'] = args.conv_tolerance
    dic['SCF time'] = kernel_t
    dic['Initial guess time'] = icost
    dic['initial guess threshold'] = args.initial_TOL
    dic['New guess generating time'] = pcost
    dic['preconditioner threshold'] = args.precond_TOL
    dic['total time'] = wall_time
    dic['excitation energy(eV)'] = energies
    dic['iterations'] = N_itr
    dic['A matrix size'] = A_size
    dic['final subspace size'] = N_mv
    dic['ax'] = a_x
    dic['alpha'] = alpha
    dic['beta'] = beta
    dic['virtual truncation tol'] = args.truncate_virtual
    dic['n_occ'] = n_occ
    dic['n_vir'] = n_vir
    dic['max_vir'] = max_vir
    dic['semiempirical_difference'] = difference
    dic['overlap'] = overlap
    dic['initial_energies'] = initial_energies
    dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    dic['Dynamic polarizability tensor alpha'] = tensor_alpha
    dic['Dynamic polarizability initial tensor alpha'] = initial_tensor_alpha
    return dic

def Davidson(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''Davidson frame, we can use different initial guess and preconditioner'''
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    TDA_i_lib, TDA_p_lib = gen_TDA_lib()
    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)

    init_start = time.time()
    max = args.max
    m = 0
    new_m = min([k + args.extrainitial, 2*k, A_size])
    V = np.zeros((A_size, max*k + new_m))
    W = np.zeros_like(V)
    V[:, :new_m], initial_energies = initial_guess(new_m)
    init_end = time.time()

    init_time = init_end - init_start
    print('initial guess time %.4f seconds'%init_time)

    Pcost = 0
    MVcost = 0
    for ii in range(max):
        print('\nIteration ', ii)
        istart = time.time()

        MV_start = time.time()
        W[:, m:new_m] = TDA_matrix_vector(V[:,m:new_m])
        MV_end = time.time()
        iMVcost = MV_end - MV_start
        MVcost += iMVcost
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm %.2e'%max_norm)
        if max_norm < tol or ii == (max-1):
            iend = time.time()
            icost = iend - istart
            current_dic['iteration total cost'] = icost
            current_dic['iteration MV cost'] = iMVcost
            iteration_list[ii] = current_dic
            print('iMVcost %.4f'%iMVcost)
            print('icost %.4f'%icost)
            print('Davidson procedure Done \n')
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                residual = residual[:,index],
                          sub_eigenvalue = sub_eigenvalue[:k][index],
                             current_dic = current_dic,
                              full_guess = full_guess[:,index],
                            return_index = index,
                                     W_H = W[:,:m],
                                     V_H = V[:,:m],
                                 sub_A_H = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('new generated guesses:', new_m - m)

        iend = time.time()
        icost = iend - istart
        current_dic['iteration cost'] = icost
        current_dic['iteration MV cost'] = iMVcost
        iteration_list[ii] = current_dic
        print('iMVcost %.4f'%iMVcost)
        print('icost %.4f'%icost)

    energies = sub_eigenvalue[:k]*Hartree_to_eV

    D_end = time.time()
    Dcost = D_end - D_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
                                icost=init_time, pcost=Pcost, wall_time=Dcost,\
            energies = energies.tolist(), N_itr=ii+1, N_mv=np.shape(sub_A)[0],\
            initial_energies=initial_energies.tolist())
    if ii == max-1:
        print('========== Davidson Failed Due to Iteration Limit ============')
        print('current residual norms', r_norms)
    else:
        print('------- Davidson done -------')
    print('max_norm = ', max_norm)
    print('Total steps =', ii+1)
    print('Total time: %.4f seconds'%Dcost)
    print('MVcost %.4f'%MVcost)
    print('Final subspace shape = %s'%np.shape(sub_A)[0])
    print('Precond time: %.4f seconds'%Pcost, '{:.2%}'.format(Pcost/Dcost))
    return energies, full_guess, Davidson_dic

def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag=hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder[:,:new_m], energies = TDA_A_diag_initial_guess(new_m, hdiag=hdiag)
    return V_holder, W_holder, new_m, energies,\
                V_holder[:,:new_m], W_holder[:,:new_m]

def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag=hdiag, tol=None):
    '''preconditioners for each corresponding residual (state)'''
    hdiag = hdiag.reshape(-1,1)
    k = R_x.shape[1]
    t = 1e-14
    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    D_y_inv = D_y**-1

    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new

def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  Ω = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    dambd =  d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    dapbd = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    M = np.linalg.multi_dot([G.T, L_inv, dapbd, L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([L_inv.T, G, Z])\
            *(np.array(omega)**-0.5).reshape(1,-1)

    x_m_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([U_inv, G_inv.T, Z])\
            *(np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    return omega, x, y

def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    '''[ a b ] x - [ σ   π] x  Ω = p
       [ b a ] y   [-π  -σ] y    = q
       normalize the right hand side first
    '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)

    p /= pqnorm
    q /= pqnorm

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    '''LU = d^−1/2 (σ − π) d^−1/2
       A = PLU
       P is identity matrix only when A is diagonally dominant
    '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T'''
    dambd = d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    '''G is lower triangle matrix'''
    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    '''a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T
       M = G^T (a ̃+ b ̃) G
    '''
    dapba = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    a_p_b_tilde = np.linalg.multi_dot([L_inv, dapba, L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde)
    T += np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    '''(x ̃+ y ̃) = GZ
       x + y = d^-1/2 L^-T (x ̃+ y ̃)
       x - y = d^-1/2 U^-1 (x ̃- y ̃)
    '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)

    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x
    x *= pqnorm
    y *= pqnorm
    return x, y

def sTDDFT_eigen_solver(k, tol=args.initial_TOL):
    '''[ A' B' ] X - [1   0] Y Ω = 0
       [ B' A' ] Y   [0  -1] X   = 0
    '''
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    print('sTDDFT Convergence tol = %.2e'%tol)
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''set up initial guess V W, transformed vectors U1 U2'''
    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)


        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the eigenvalue omega in the subspace'''
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)

        '''GS and symmetric orthonormalization'''
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTDDFT Failed Due to Iteration Limit=================')
        print('sTDDFT diagonalization failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT diagonalization Converged' )

    print('after ', ii+1, 'iterations; %.4f'%sTDDFT_cost, 'seconds')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s {:<5.2%}".format(enrty, cost, cost/sTDDFT_cost))
    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*Hartree_to_eV
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y

def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup

def sTDDFT_preconditioner(Rx, Ry, omega, tol=args.precond_TOL):
    ''' [ A' B' ] - [1  0]X  Ω = P'''
    ''' [ B' A' ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''

    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    P /= pqnorm
    Q /= pqnorm

    X_new, Y_new  = TDDFT_A_diag_preconditioner(\
                        P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                    V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        '''solve the x & y in the subspace'''
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                    a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega - P
           R_y = U2x + U1y + Y_full*omega - Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index],\
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    P_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit========')
        print('sTDDFT preconditioning failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT preconditioning Done')
    print('after',ii+1,'steps; %.4f'%P_cost,'s')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/P_cost))

    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_hdiag[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)

    return X, Y

def gen_TDDFT_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_initial_guess
    i_lib['Adiag']  = TDDFT_A_diag_initial_guess
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''[ A B ] X - [1   0] Y Ω = 0
       [ B A ] Y   [0  -1] X   = 0
    '''
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    new_m = min([k + args.extrainitial, 2*k, A_size])

    TDDFT_i_lib, TDDFT_p_lib = gen_TDDFT_lib()

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig =\
                                    initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')

    Pcost = 0
    for ii in range(max):
        print('\niteration', ii)
        show_memory_info('beginning of step '+ str(ii))

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] =\
                            TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('subspace size: %s' %sigma.shape[0])

        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        max_norm = np.max(r_norms)
        print('Maximum residual norm: ', '%.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('TDDFT precedure Done\n')
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)

        P_start = time.time()
        X_new, Y_new = new_guess_generator(\
                            R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start

        m = new_m
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    omega *= Hartree_to_eV

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) \
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
            icost=init_time, pcost=Pcost, wall_time=TDDFT_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            initial_energies=initial_energies, difference=difference,\
            overlap=overlap)
    if ii == (max -1):
        print('===== TDDFT Failed Due to Iteration Limit============')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('============= TDDFT Calculation Done ==============')

    print('after', ii+1,'iterations','%.2f'%TDDFT_cost,'s')
    print('Final subspace ', sigma.shape[0])
    print('preconditioning cost', '%.4f'%Pcost, '%.2f'%(Pcost/TDDFT_cost),"%")
    print('max_norm = ', '%.2e'%max_norm)

    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic

def gen_dynpol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_preconditioner
    i_lib['Adiag']  = TDDFT_A_diag_preconditioner
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P

def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()

    dynpol_i_lib, dynpol_p_lib = gen_dynpol_lib()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        '''if have 3 ω, [ω1 ω1 ω1, ω2 ω2 ω2, ω3 ω3 ω3]
           convert nm to Hartree'''
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P

    max = args.max
    tol = args.conv_tolerance
    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega, tol=args.initial_TOL)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        '''*-1 from the definition of dipole moment. *2 for double occupancy'''
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
    initial_cost = init_end - init_start
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('Iteration', ii)

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(\
                                                V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        print('sigma.shape', sigma.shape)

        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                    a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega + P
           R_y = U2x + U1y + Y_full*omega + Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''
        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x += P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y += Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('maximum residual norm: ', '%.3e'%np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], \
                            R_y[:,index], omega[index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('======= Dynamic polarizability Failed Due to Iteration Limit=====')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full))\
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)

    show_memory_info('Total Dynamic polarizability')
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3*k,\
            icost=initial_cost, pcost=Pcost, wall_time=dp_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            difference=difference, overlap=overlap,\
            tensor_alpha=[i.tolist() for i in alpha_omega],\
            initial_tensor_alpha=[i.tolist() for i in alpha_omega_ig])
    return alpha_omega, Davidson_dic

def stapol_A_diag_initprec(P, hdiag=hdiag, tol=None):
    d = hdiag.reshape(-1,1)
    P = -P/d
    # P /= -d
    return P

def stapol_sTDDFT_initprec(Pr, tol=args.initial_TOL):
    '''(A* + B*)X = -P
       residual = (A* + B*)X + P
       X_ig = -P/d
       X_new = residual/D
    '''
    ssp_start = time.time()
    max = 30
    m = 0
    npvec = Pr.shape[1]

    P = Pr.reshape(n_occ,n_vir,-1)[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)
    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    V_holder = np.zeros((A_reduced_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    '''setting up initial guess'''
    init_start = time.time()
    X_ig = stapol_A_diag_initprec(P, hdiag=max_vir_hdiag)
    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    init_end = time.time()
    initial_cost = init_end - init_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        '''creating the subspace'''
        MV_start = time.time()
        '''U = AX + BX = (A+B)X'''
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the x in the subspace'''
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        index = [r_norms.index(i) for i in r_norms if i > tol]
        if np.max(r_norms) < tol or ii == (max -1):
            print('Static polarizability procedure aborted')
            break

        Pstart = time.time()
        X_new = stapol_A_diag_initprec(-residual[:,index], hdiag=max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
    X_full = np.dot(V,x)
    '''alpha = np.dot(X_full.T, P)*-4'''

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('== sTDDFT Stapol precond Failed Due to Iteration Limit======')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT Stapol precond Converged' )
    print('after', ii+1, 'steps', '%.4f'%ssp_cost,'s')
    print('conv threhsold = %.2e'%tol)
    print('final subspace:', a_p_b.shape[0])
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/ssp_cost))

    X_full *= pnorm

    U = np.zeros((n_occ,n_vir,npvec))
    U[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)[:,:,:]

    if max_vir < n_vir:
        ''' DX2 = -P2'''
        P2 = Pr.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)
        D2 = hdiag.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (-P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2
    U = U.reshape(A_size, npvec)
    return U

def gen_stapol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = stapol_sTDDFT_initprec
    i_lib['Adiag']  = stapol_A_diag_initprec
    p_lib['sTDDFT'] = stapol_sTDDFT_initprec
    p_lib['Adiag']  = stapol_A_diag_initprec
    return i_lib, p_lib

def static_polarizability(init, prec):
    '''(A+B)X = -P
       residual = (A+B)X + P
       X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    stapol_i_lib, stapol_p_lib = gen_stapol_lib()
    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.conv_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig = initial_guess(P, tol=args.initial_TOL)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
    initial_cost = init_end - init_start

    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('\nIteration', ii)
        MV_start = time.time()
        U_holder[:, m:new_m] = \
                    static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()

        '''solve the x in the subspace'''
        x = np.linalg.solve(a_p_b, -p)

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        max_norm = np.max(r_norms)
        print('max_norm = %.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('static polarizability precodure aborted\n')
            break

        '''preconditioning step'''
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    X_full = np.dot(V,x)
    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start

    if ii == (max -1):
        print('==== Static polarizability Failed Due to Iteration Limit ======')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Static polarizability Converged')

    print('after', ii+1, 'steps; %.4f'%sp_cost,'s')
    print('final subspace', a_p_b.shape)
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','Pcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/sp_cost))

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3,\
            icost=initial_cost, pcost=Pcost, wall_time=sp_cost, \
            N_itr=ii+1, N_mv=np.shape(a_p_b)[0], difference=difference,\
            overlap=overlap, tensor_alpha=[i.tolist() for i in tensor_alpha],\
            initial_tensor_alpha=[i.tolist() for i in alpha_init])
    return tensor_alpha, Davidson_dic

def gen_calc():
    name_dic={}
    name_dic['TDA'] = args.TDA
    name_dic['TDDFT'] = args.TDDFT
    name_dic['dynpol'] = args.dynpol
    name_dic['stapol'] = args.stapol
    name_dic['sTDA'] = args.sTDA
    name_dic['sTDDFT'] = args.sTDDFT
    name_dic['Truncate_test'] = args.Truncate_test
    name_dic['PySCF_TDDFT'] = args.pytd
    for calc in ['TDA','TDDFT','dynpol','stapol',\
                        'sTDA','sTDDFT','Truncate_test','PySCF_TDDFT']:
        if name_dic[calc] == True:
            print(calc)
            return calc

def dump_yaml(Davidson_dic, calc, init, prec):
    curpath = os.getcwd()
    yamlpath = os.path.join(\
                   curpath,basename+'_'+calc+'_i_'+init+'_p_'+prec+'.yaml')
    with open(yamlpath, "w", encoding="utf-8") as f:
        yaml.dump(Davidson_dic, f)

if __name__ == "__main__":
    calc = gen_calc()
    TDA_combo = [            # option
    ['sTDA','sTDA'],         # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDA'],        # 2
    ['sTDA','Adiag'],        # 3
    ['sTDA','Jacobi'],       # 4
    ['Adiag','Jacobi'],      # 5
    ['Adiag','new_ES'],      # 6
    ['sTDA','new_ES']]       # 7
    TDDFT_combo = [          # option
    ['sTDDFT','sTDDFT'],     # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDDFT'],      # 2
    ['sTDDFT','Adiag']]      # 3
    print('|-------- In-house Developed {0} Starts ---------|'.format(calc))
    print('Residual conv =', args.conv_tolerance)
    if args.TDA == True:
        for option in args.ip_options:
            init, prec = TDA_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies, eigenkets, Davidson_dic = Davidson(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.TDDFT == True:
        for option in args.ip_options:
            init, prec = TDDFT_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies,X,Y,Davidson_dic = TDDFT_eigen_solver(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.dynpol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\nPerturbation wavelength omega (nm) =', args.dynpol_omega)
            alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
            print('Dynamic polarizability tensor alpha')
            dump_yaml(Davidson_dic, calc, init, prec)
            for i in range(len(args.dynpol_omega)):
                print(args.dynpol_omega[i],'nm')
                print(alpha_omega[i])
    if args.stapol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\n')
            tensor_alpha, Davidson_dic = static_polarizability(init,prec)
            print('Static polarizability tensor alpha')
            print(tensor_alpha)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.sTDA == True:
        X, energies = sTDA_eigen_solver(k=args.nstates, tol=args.conv_tolerance)
    if args.sTDDFT == True:
        energies,X,Y = sTDDFT_eigen_solver(k=args.nstates,tol=args.conv_tolerance)
    if args.Truncate_test == True:
        n_states= args.nstates
        X = np.random.rand(A_size,n_state)
        Y = np.random.rand(A_size,n_state)
        print('n_vir = ', n_vir)
        print('A_size =', A_size)
        print('n_states =', n_states)
        print("{:<8} {:<8} {:<8} {:<8}".format(\
                'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
        for vir_trunc in [40, 50, 60, 70, 10000000]:
            del max_vir, sTDA_mv, sTDDFT_mv
            max_vir = gen_maxvir(tol_eV = vir_trunc)
            q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
            # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
            iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                            max_vir=max_vir, \
                                            q_ij = q_ij, \
                                            q_ab = q_ab, \
                                            q_ia = q_ia , \
                                            GK_q_jb = GK_q_jb, \
                                            GJ_q_ab = GJ_q_ab)

            sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                            max_vir=max_vir, \
                                            iajb_fly = iajb_fly, \
                                            ijab_fly = ijab_fly, \
                                            ibja_fly = ibja_fly, \
                                            delta_fly = delta_fly)

            sTDA_start = time.time()
            sTDA_X = sTDA_mv(X)
            sTDA_end = time.time()
            sTDA_mv_time = sTDA_end - sTDA_start

            sTDDFT_start = time.time()
            sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
            sTDDFT_end = time.time()
            sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

            print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                    vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))
    if args.pytd == True:
        TD.nstates = args.nstates
        TD.conv_tol = args.conv_tolerance
        TD.kernel()
        end = time.time()
    if args.verbose > 3:
        for key in vars(args):
            print(key,'=', vars(args)[key])
    print('|-------- In-house Developed {0} Ends ----------|'.format(calc))
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='classct022', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Fri Jul  9 16:14:55 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 50000 
[INPUT] num. atoms = 46
[INPUT] num. electrons = 262
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.075469006356   2.698376776999  -1.393666497568 AA   -0.142615752907   5.099193089414  -2.633647989385 Bohr
[INPUT]  2 C     -0.243298869070   1.339130002559  -1.773001231282 AA   -0.459768228958   2.530588950025  -3.350486745640 Bohr
[INPUT]  3 C     -0.581397769078   1.067556398519  -3.100771230899 AA   -1.098682552990   2.017389215728  -5.859608401330 Bohr
[INPUT]  4 C     -0.722513045051   2.134027920314  -4.008683736391 AA   -1.365351776571   4.032728311569  -7.575314381777 Bohr
[INPUT]  5 C     -0.546676365965   3.476619725330  -3.609111638462 AA   -1.033068610445   6.569859120135  -6.820232549674 Bohr
[INPUT]  6 C     -0.219696838125   3.779396497934  -2.285942218596 AA   -0.415166854489   7.142024297236  -4.319804729728 Bohr
[INPUT]  7 H     -0.727393876974   0.036476447009  -3.437743559736 AA   -1.374575212166   0.068930494844  -6.496393814389 Bohr
[INPUT]  8 H     -0.972393071025   1.919951938348  -5.053707957650 AA   -1.837556589661   3.628183335806  -9.550123953494 Bohr
[INPUT]  9 H     -0.667670889471   4.280170027435  -4.342195719787 AA   -1.261715122445   8.088349118424  -8.205560689655 Bohr
[INPUT] 10 H     -0.079154559920   4.806941716354  -1.938906169259 AA   -0.149580439760   9.083803340655  -3.664001641130 Bohr
[INPUT] 11 C     -1.501385475034  -0.193978218011  -0.083072884688 AA   -2.837207355214  -0.366565706171  -0.156985000438 Bohr
[INPUT] 12 C     -2.454832448400   0.324527631847   0.802388094915 AA   -4.638961009171   0.613268344044   1.516293745001 Bohr
[INPUT] 13 C     -1.916516186861  -1.313516530775  -0.821252237094 AA   -3.621690706462  -2.482186503253  -1.551941807293 Bohr
[INPUT] 14 C     -3.719221941997  -0.254042184561   0.992369635089 AA   -7.028310866847  -0.480070152907   1.875306824652 Bohr
[INPUT] 15 C     -3.163054747926  -1.926440837911  -0.665552129418 AA   -5.977307190585  -3.640445578830  -1.257711246221 Bohr
[INPUT] 16 C     -4.075220156154  -1.387138542175   0.252808321537 AA   -7.701049992439  -2.621311941539   0.477738489716 Bohr
[INPUT] 17 C      1.239291118887  -0.527919093658  -0.406791892771 AA    2.341920803302  -0.997622502942  -0.768725267031 Bohr
[INPUT] 18 C      1.279206104242  -1.799029833736   0.186071912272 AA    2.417349193890  -3.399673675684   0.351624953668 Bohr
[INPUT] 19 C      2.442317917060  -0.113025947348  -1.000601717395 AA    4.615311972361  -0.213588085458  -1.890863205646 Bohr
[INPUT] 20 C      2.410526415881  -2.625456464178   0.165257350044 AA    4.555234742044  -4.961393669266   0.312291131655 Bohr
[INPUT] 21 C      3.598897234193  -0.901541318298  -1.046425674679 AA    6.800930123080  -1.703666181563  -1.977457934856 Bohr
[INPUT] 22 C      3.579211485031  -2.172915403737  -0.459084327226 AA    6.763729448606  -4.106215004911  -0.867543646538 Bohr
[INPUT] 23 F      2.528699032192   1.115767834894  -1.552341557859 AA    4.778548622295   2.108495626549  -2.933500396134 Bohr
[INPUT] 24 F      4.716085796355  -0.451288614488  -1.631346116257 AA    8.912110535061  -0.852811884517  -3.082797374099 Bohr
[INPUT] 25 F      4.670139111472  -2.944507330844  -0.486005078167 AA    8.825283884301  -5.564312427069  -0.918416492884 Bohr
[INPUT] 26 F      2.386323015299  -3.833318615508   0.742853115617 AA    4.509496943661  -7.243922331507   1.403788939295 Bohr
[INPUT] 27 F      0.203182360921  -2.291179484923   0.840958506349 AA    0.383959015483  -4.329701728726   1.589181259124 Bohr
[INPUT] 28 F     -3.496469584535  -3.005205961026  -1.385270643217 AA   -6.607369917643  -5.679016214249  -2.617782124081 Bohr
[INPUT] 29 F     -5.277207132854  -1.949574791279   0.416309506639 AA   -9.972476183696  -3.684162414872   0.786710950601 Bohr
[INPUT] 30 F     -4.588265816508   0.278247511902   1.861588861171 AA   -8.670565779905   0.525811592336   3.517893104154 Bohr
[INPUT] 31 F     -2.196195287835   1.438174708322   1.522747766407 AA   -4.150207610069   2.717756318005   2.877576235302 Bohr
[INPUT] 32 N      0.297967247280   1.727086300334   0.530807698346 AA    0.563076491450   3.263720101120   1.003081174684 Bohr
[INPUT] 33 N      0.272079425819   2.868107138384  -0.061745706326 AA    0.514155598927   5.419936987455  -0.116682474323 Bohr
[INPUT] 34 B     -0.051230384812   0.467455771212  -0.433377605076 AA   -0.096811396550   0.883363382938  -0.818964982113 Bohr
[INPUT] 35 F     -1.077423037270  -1.853547320000  -1.734390775345 AA   -2.036034460737  -3.502696793721  -3.277523558374 Bohr
[INPUT] 36 C      0.711355117210   1.669559263790   1.883646814586 AA    1.344266348834   3.155009757293   3.559576594976 Bohr
[INPUT] 37 C      1.292176720873   2.792519192826   2.506894891910 AA    2.441860106989   5.277096472033   4.737344768780 Bohr
[INPUT] 38 C      0.536736230535   0.465078217253   2.592344045846 AA    1.014284476843   0.878870457109   4.898820267296 Bohr
[INPUT] 39 C      1.694514226636   2.701633534719   3.840456233204 AA    3.202167802521   5.105347469559   7.257410474135 Bohr
[INPUT] 40 H      1.419405961195   3.711032488041   1.929980774298 AA    2.682288526234   7.012835041761   3.647135089099 Bohr
[INPUT] 41 C      0.943640971462   0.390374954235   3.927539978634 AA    1.783222995981   0.737701749394   7.421974902898 Bohr
[INPUT] 42 H      0.074416146111  -0.397762513751   2.109297259604 AA    0.140626135395  -0.751662213609   3.985994135947 Bohr
[INPUT] 43 C      1.523843128887   1.502954690130   4.554994286886 AA    2.879646170396   2.840172741975   8.607691701173 Bohr
[INPUT] 44 H      2.150363934408   3.569720418816   4.327141840932 AA    4.063598904174   6.745793932829   8.177112981508 Bohr
[INPUT] 45 H      0.804208640589  -0.543903122036   4.480050750810 AA    1.519734077722  -1.027827938944   8.466068943183 Bohr
[INPUT] 46 H      1.844942148683   1.437570020738   5.599449660054 AA    3.486435376678   2.716613624080  10.581426305792 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] B
[INPUT] 0    0    [6    /1   ]  8564.8660687      0.00022837198155
                                1284.1516263      0.0017682576447
                                292.27871604      0.0091407080516
                                82.775469176      0.036342638989
                                27.017939269      0.11063458441
                                9.814961966       0.23367344321
[INPUT] 0    0    [2    /1   ]  3.9318559059      0.41818777978
                                1.6595599712      0.22325473798
[INPUT] 0    0    [1    /1   ]  0.35762965239        1
[INPUT] 0    0    [1    /1   ]  0.14246277496        1
[INPUT] 0    0    [1    /1   ]  0.060560594768       1
[INPUT] 1    0    [4    /1   ]  22.453875803      0.0050265575179
                                5.104505833       0.032801738965
                                1.4986081344      0.13151230768
                                0.50927831315     0.33197167769
[INPUT] 1    0    [1    /1   ]  0.18147077798        1
[INPUT] 1    0    [1    /1   ]  0.064621893904       1
[INPUT] 2    0    [1    /1   ]  0.661                1
[INPUT] 2    0    [1    /1   ]  0.199                1
[INPUT] 3    0    [1    /1   ]  0.49                 1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] F
[INPUT] 0    0    [6    /1   ]  35479.100441      0.00021545014888
                                5318.4728983      0.0016700686527
                                1210.4810975      0.0086733211476
                                342.8551814       0.035049933175
                                112.01943181      0.11165320133
                                40.714740248      0.25988506647
[INPUT] 0    0    [2    /1   ]  16.039678111      0.3942296688
                                6.503818674       0.24998238551
[INPUT] 0    0    [1    /1   ]  1.5440477509         1
[INPUT] 0    0    [1    /1   ]  0.61223452862        1
[INPUT] 0    0    [1    /1   ]  0.24027979698        1
[INPUT] 1    0    [4    /1   ]  80.233900483      0.0063685999134
                                18.594010743      0.04430314353
                                5.6867902653      0.16867248708
                                1.9511006294      0.36166346255
[INPUT] 1    0    [1    /1   ]  0.66970211298        1
[INPUT] 1    0    [1    /1   ]  0.2165130041         1
[INPUT] 2    0    [1    /1   ]  3.107                1
[INPUT] 2    0    [1    /1   ]  0.855                1
[INPUT] 3    0    [1    /1   ]  1.917                1

nuclear repulsion = 4280.84137352411
number of shells = 443
number of NR pGTOs = 1774
number of NR cGTOs = 1201
basis = def2-tzvp
ecp = {}
CPU time:         2.12
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 46_Azobenzene_3a_pbe0.chk
max_memory 50000 MB (current use 56 MB)
XC functionals = pbe0
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7fbf69fbde18>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7fbf69fbdd90>
Set gradient conv threshold to 1e-05
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
atom F rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266 266
 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom B rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266
 266 266 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266
 266 266 266]
tot grids = 609882
Drop grids 109236
    CPU time for setting up grids    128.76 sec, wall time      8.91 sec
nelec by numeric integration = 261.99994087331135
    CPU time for vxc    199.38 sec, wall time     13.78 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15978461.hpc/tmp1ffc2q20
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for B def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for F def2-tzvp
num shells = 979, num cGTOs = 2961
size of aux basis 2961
int3c2e [1/2], AO [0:343], nrow = 439453
int3c2e [2/2], AO [343:443], nrow = 282348
    CPU time for cholesky_eri    304.65 sec, wall time     58.31 sec
    CPU time for df vj and vk    963.48 sec, wall time    110.38 sec
E1 = -11347.492221257267  Ecoul = 5269.301433546729  Exc = -253.97622495961775
init E= -2051.32563914605
cond(S) = 1712291.2060505964
    CPU time for initialize scf   1303.07 sec, wall time    134.36 sec
  HOMO = -0.263834661798509  LUMO = -0.131609717555246
  mo_energy =
[-2.48140915e+01 -2.48119887e+01 -2.48094925e+01 -2.48094051e+01
 -2.48081738e+01 -2.48080805e+01 -2.48066460e+01 -2.48041836e+01
 -2.48038126e+01 -2.48035088e+01 -1.45105327e+01 -1.44817288e+01
 -1.03490306e+01 -1.03465731e+01 -1.03426088e+01 -1.03423202e+01
 -1.03419956e+01 -1.03412757e+01 -1.03412583e+01 -1.03409976e+01
 -1.03407193e+01 -1.03388885e+01 -1.03015289e+01 -1.02843032e+01
 -1.02653904e+01 -1.02636827e+01 -1.02622449e+01 -1.02612944e+01
 -1.02602908e+01 -1.02590181e+01 -1.02587674e+01 -1.02580211e+01
 -1.02576766e+01 -1.02573499e+01 -1.02531586e+01 -1.02478672e+01
 -6.79769327e+00 -1.29911327e+00 -1.29715731e+00 -1.29085432e+00
 -1.28903219e+00 -1.28532207e+00 -1.28307814e+00 -1.27644023e+00
 -1.27452920e+00 -1.27398473e+00 -1.27253168e+00 -1.12090032e+00
 -9.31872968e-01 -9.20843967e-01 -9.19426797e-01 -8.99831003e-01
 -8.58795787e-01 -8.16893239e-01 -8.03746107e-01 -8.00049233e-01
 -7.99156749e-01 -7.98488344e-01 -7.95864283e-01 -7.82982984e-01
 -7.43153316e-01 -6.99530685e-01 -6.87789348e-01 -6.83569871e-01
 -6.82563494e-01 -6.71814827e-01 -6.65890101e-01 -6.42340155e-01
 -6.20892729e-01 -6.17340788e-01 -6.15726915e-01 -6.08980753e-01
 -6.07032023e-01 -6.02160849e-01 -5.97312871e-01 -5.85358223e-01
 -5.70929863e-01 -5.64988011e-01 -5.63542607e-01 -5.60224624e-01
 -5.58576284e-01 -5.46255550e-01 -5.43868654e-01 -5.36778475e-01
 -5.35782416e-01 -5.31916041e-01 -5.20240179e-01 -5.19501661e-01
 -5.14993988e-01 -5.10651515e-01 -5.07459795e-01 -5.03740980e-01
 -4.99844508e-01 -4.92540161e-01 -4.87727549e-01 -4.86677660e-01
 -4.86270140e-01 -4.83622799e-01 -4.77487695e-01 -4.68427949e-01
 -4.66592096e-01 -4.63638633e-01 -4.63383095e-01 -4.61352985e-01
 -4.60773567e-01 -4.56190788e-01 -4.52675632e-01 -4.36854601e-01
 -4.33881875e-01 -4.31926371e-01 -4.18785675e-01 -4.11145616e-01
 -4.03855918e-01 -4.02080433e-01 -4.00927747e-01 -3.96540773e-01
 -3.90997425e-01 -3.85857268e-01 -3.79748513e-01 -3.73840529e-01
 -3.66819522e-01 -3.45550687e-01 -3.34610424e-01 -3.18036393e-01
 -2.95431914e-01 -2.90089149e-01 -2.76512259e-01 -2.71157495e-01
 -2.70176321e-01 -2.66463728e-01 -2.63834662e-01 -1.31609718e-01
 -4.27145295e-02 -3.77806151e-02 -3.01401507e-02 -2.57950950e-02
 -1.95727399e-02 -1.57410017e-02 -1.38789058e-02 -6.53291168e-03
  2.32019724e-03  7.79017987e-03  4.47168238e-02  4.83047780e-02
  6.11772144e-02  6.87883143e-02  7.34304770e-02  7.68656680e-02
  8.48813074e-02  9.12721699e-02  9.46754408e-02  1.01121717e-01
  1.05724008e-01  1.14004635e-01  1.15969008e-01  1.20963479e-01
  1.23300157e-01  1.25512143e-01  1.29330050e-01  1.33347866e-01
  1.38712363e-01  1.47632858e-01  1.57627796e-01  1.66367393e-01
  1.69020380e-01  1.70889303e-01  1.78779353e-01  1.79784393e-01
  1.82247540e-01  1.84678256e-01  1.87037527e-01  1.89728852e-01
  1.92239822e-01  1.93633159e-01  1.96654980e-01  2.04966628e-01
  2.06754416e-01  2.07841060e-01  2.12315219e-01  2.12739726e-01
  2.18517346e-01  2.24461523e-01  2.25316098e-01  2.26799771e-01
  2.34093692e-01  2.36526491e-01  2.42079775e-01  2.46502485e-01
  2.50446394e-01  2.52355602e-01  2.61619371e-01  2.64518031e-01
  2.65752560e-01  2.72724960e-01  2.73546463e-01  2.77109095e-01
  2.82419183e-01  2.83749995e-01  2.85198357e-01  2.87735605e-01
  2.89359131e-01  2.91953921e-01  2.96137931e-01  2.99741438e-01
  3.03363937e-01  3.12135874e-01  3.13465207e-01  3.17601195e-01
  3.20185477e-01  3.28510713e-01  3.30467524e-01  3.33825733e-01
  3.37547123e-01  3.40002144e-01  3.44488194e-01  3.45840552e-01
  3.51482001e-01  3.53680441e-01  3.55810117e-01  3.58213857e-01
  3.62761794e-01  3.65086968e-01  3.68782560e-01  3.75260403e-01
  3.77106058e-01  3.80337156e-01  3.85142238e-01  3.86353392e-01
  3.89501007e-01  3.91820115e-01  3.98492074e-01  3.99227756e-01
  4.03332382e-01  4.05877421e-01  4.07121603e-01  4.10383189e-01
  4.13146907e-01  4.15322075e-01  4.17311962e-01  4.19413042e-01
  4.23267355e-01  4.26478260e-01  4.30592632e-01  4.31007730e-01
  4.34348265e-01  4.36532264e-01  4.37814782e-01  4.40208960e-01
  4.44476735e-01  4.47145839e-01  4.49812572e-01  4.56102650e-01
  4.58190351e-01  4.63024105e-01  4.65866595e-01  4.68597112e-01
  4.70971314e-01  4.74939215e-01  4.79317284e-01  4.82015784e-01
  4.83433601e-01  4.84670743e-01  4.90015589e-01  4.92646314e-01
  4.96894280e-01  5.02219270e-01  5.06886307e-01  5.10834074e-01
  5.16000378e-01  5.22378439e-01  5.24456151e-01  5.29988611e-01
  5.37167405e-01  5.42277437e-01  5.54883973e-01  5.58669281e-01
  5.65941483e-01  5.67949997e-01  5.74361021e-01  5.80910501e-01
  5.90900547e-01  5.92514080e-01  6.00393527e-01  6.08584762e-01
  6.12633505e-01  6.16086249e-01  6.20652158e-01  6.25718905e-01
  6.28365161e-01  6.34106938e-01  6.35823019e-01  6.37986972e-01
  6.40237862e-01  6.48183447e-01  6.51449319e-01  6.56443818e-01
  6.62426893e-01  6.63469183e-01  6.64670091e-01  6.68272550e-01
  6.72300236e-01  6.75283406e-01  6.76962735e-01  6.82819035e-01
  6.86737955e-01  6.92698058e-01  6.94254497e-01  6.96797909e-01
  7.06491439e-01  7.09098173e-01  7.12240594e-01  7.17177021e-01
  7.21054053e-01  7.22204967e-01  7.29532628e-01  7.32752543e-01
  7.36291532e-01  7.43896137e-01  7.47060407e-01  7.48849805e-01
  7.50557592e-01  7.58173953e-01  7.62548170e-01  7.65373842e-01
  7.68414429e-01  7.73020838e-01  7.80340733e-01  7.81150476e-01
  7.94111990e-01  7.98016028e-01  8.01244786e-01  8.02618729e-01
  8.04167336e-01  8.07814156e-01  8.13826720e-01  8.20123299e-01
  8.20825098e-01  8.28105219e-01  8.31404328e-01  8.37470532e-01
  8.39382058e-01  8.44664837e-01  8.51698947e-01  8.52945440e-01
  8.61056732e-01  8.68132105e-01  8.70516793e-01  8.75512111e-01
  8.82375701e-01  8.84110788e-01  8.86284345e-01  8.91746449e-01
  8.93866060e-01  8.98063333e-01  9.06223137e-01  9.09628408e-01
  9.12488705e-01  9.23261338e-01  9.26692350e-01  9.29018560e-01
  9.33369540e-01  9.35586886e-01  9.41901870e-01  9.48338617e-01
  9.48644029e-01  9.56738664e-01  9.58725090e-01  9.63813670e-01
  9.70727231e-01  9.72028060e-01  9.80686000e-01  9.84413807e-01
  9.87988622e-01  9.92246449e-01  9.93424413e-01  9.95932373e-01
  1.00274264e+00  1.00841625e+00  1.01664455e+00  1.02200411e+00
  1.03197013e+00  1.03736120e+00  1.04257691e+00  1.04464981e+00
  1.05177580e+00  1.06070306e+00  1.06382368e+00  1.06932603e+00
  1.07159494e+00  1.07912847e+00  1.08364219e+00  1.08944662e+00
  1.09934822e+00  1.10383298e+00  1.10539933e+00  1.10887826e+00
  1.11231341e+00  1.11602012e+00  1.11907049e+00  1.12493833e+00
  1.13003449e+00  1.13391206e+00  1.14158581e+00  1.14673727e+00
  1.15898394e+00  1.16480617e+00  1.16759534e+00  1.17482177e+00
  1.17814717e+00  1.18570346e+00  1.19010260e+00  1.19399266e+00
  1.19750964e+00  1.20156123e+00  1.20534696e+00  1.21096722e+00
  1.22143911e+00  1.22388027e+00  1.22765168e+00  1.23031207e+00
  1.23419457e+00  1.23756318e+00  1.24767045e+00  1.25101407e+00
  1.25399577e+00  1.25910032e+00  1.26417014e+00  1.26823851e+00
  1.27542474e+00  1.28198486e+00  1.28878674e+00  1.30226521e+00
  1.31122575e+00  1.31152112e+00  1.31598321e+00  1.32478229e+00
  1.32869303e+00  1.33515333e+00  1.33578770e+00  1.34582244e+00
  1.35560919e+00  1.36600219e+00  1.36825550e+00  1.37503879e+00
  1.38273007e+00  1.39165544e+00  1.39728151e+00  1.40187554e+00
  1.40690234e+00  1.41869374e+00  1.42127740e+00  1.42910459e+00
  1.43062726e+00  1.43589970e+00  1.43696147e+00  1.44378288e+00
  1.44596875e+00  1.45237315e+00  1.45469572e+00  1.46115551e+00
  1.46503651e+00  1.47037652e+00  1.47805810e+00  1.48004989e+00
  1.48929544e+00  1.49055569e+00  1.50158895e+00  1.50530459e+00
  1.50853603e+00  1.52036222e+00  1.52204208e+00  1.52937220e+00
  1.53765567e+00  1.54176844e+00  1.54492934e+00  1.55290640e+00
  1.56497799e+00  1.57395657e+00  1.57948786e+00  1.58484684e+00
  1.58941986e+00  1.60033488e+00  1.60637659e+00  1.61101785e+00
  1.61900935e+00  1.62159236e+00  1.63025564e+00  1.63127714e+00
  1.64368043e+00  1.64932375e+00  1.65676441e+00  1.66543064e+00
  1.66782386e+00  1.67312139e+00  1.67970315e+00  1.68071490e+00
  1.68640906e+00  1.68937825e+00  1.69572938e+00  1.70570372e+00
  1.71117351e+00  1.71779380e+00  1.72100713e+00  1.72319821e+00
  1.72890757e+00  1.73949103e+00  1.74337321e+00  1.74909661e+00
  1.75123188e+00  1.75934010e+00  1.76531204e+00  1.77123976e+00
  1.77707795e+00  1.78551915e+00  1.79065109e+00  1.80289636e+00
  1.81107800e+00  1.81469314e+00  1.82773387e+00  1.82984818e+00
  1.83503546e+00  1.84432508e+00  1.84948251e+00  1.85253376e+00
  1.86787055e+00  1.88310784e+00  1.88582701e+00  1.89250152e+00
  1.90968094e+00  1.91616230e+00  1.92407033e+00  1.92659420e+00
  1.93063408e+00  1.93443412e+00  1.94206501e+00  1.95091855e+00
  1.95683493e+00  1.95981085e+00  1.96707435e+00  1.97553878e+00
  1.97947500e+00  1.98851742e+00  1.99875728e+00  2.00027771e+00
  2.00673775e+00  2.01322072e+00  2.01760042e+00  2.02371394e+00
  2.02528407e+00  2.02812692e+00  2.03028973e+00  2.03460218e+00
  2.04555792e+00  2.05129092e+00  2.05868565e+00  2.06007879e+00
  2.06174761e+00  2.07208920e+00  2.07307950e+00  2.08380083e+00
  2.08477557e+00  2.09010637e+00  2.09066183e+00  2.09712747e+00
  2.10340327e+00  2.11356956e+00  2.11792009e+00  2.12103247e+00
  2.12663083e+00  2.13819418e+00  2.14367086e+00  2.14463405e+00
  2.15331651e+00  2.16304744e+00  2.17239909e+00  2.17309377e+00
  2.17590748e+00  2.18477731e+00  2.19244559e+00  2.19874477e+00
  2.20260871e+00  2.20757247e+00  2.20869077e+00  2.21310539e+00
  2.22062267e+00  2.22803769e+00  2.23093885e+00  2.23706525e+00
  2.24337562e+00  2.25049639e+00  2.25513324e+00  2.26004282e+00
  2.26910485e+00  2.27582189e+00  2.28417059e+00  2.29188115e+00
  2.30346657e+00  2.31097270e+00  2.32086464e+00  2.32721872e+00
  2.33188222e+00  2.33836716e+00  2.34233448e+00  2.36009592e+00
  2.36094892e+00  2.37190553e+00  2.37630497e+00  2.39933210e+00
  2.40828476e+00  2.42121196e+00  2.42667193e+00  2.43613405e+00
  2.43974912e+00  2.45590071e+00  2.46246814e+00  2.46976872e+00
  2.47907553e+00  2.48823797e+00  2.49565327e+00  2.49953942e+00
  2.50217665e+00  2.51071560e+00  2.51201309e+00  2.52157960e+00
  2.52365189e+00  2.53100945e+00  2.54021820e+00  2.54361161e+00
  2.54669039e+00  2.55372214e+00  2.55777486e+00  2.56484371e+00
  2.57541390e+00  2.57766618e+00  2.58299449e+00  2.58871707e+00
  2.59329245e+00  2.60051127e+00  2.60330503e+00  2.61056767e+00
  2.61965720e+00  2.62151658e+00  2.62709171e+00  2.63241610e+00
  2.63467783e+00  2.63740056e+00  2.63943627e+00  2.64569031e+00
  2.64983028e+00  2.65087983e+00  2.65725443e+00  2.66089690e+00
  2.66265154e+00  2.66953225e+00  2.67432551e+00  2.67966855e+00
  2.68521285e+00  2.68797975e+00  2.69548451e+00  2.70111278e+00
  2.70999011e+00  2.71103848e+00  2.71668068e+00  2.72035463e+00
  2.72584594e+00  2.72803973e+00  2.73619458e+00  2.73985132e+00
  2.74652440e+00  2.74970435e+00  2.76276979e+00  2.76651192e+00
  2.77566789e+00  2.77911670e+00  2.78424317e+00  2.78692586e+00
  2.79306088e+00  2.79784507e+00  2.80686130e+00  2.80934623e+00
  2.81381246e+00  2.81769312e+00  2.82330943e+00  2.82403188e+00
  2.82763327e+00  2.83245585e+00  2.83692222e+00  2.84248485e+00
  2.84873557e+00  2.85786176e+00  2.85985961e+00  2.86425465e+00
  2.87011660e+00  2.87126742e+00  2.87290360e+00  2.87604647e+00
  2.88301312e+00  2.88770406e+00  2.89185242e+00  2.89732958e+00
  2.90384796e+00  2.91080033e+00  2.91182886e+00  2.91636985e+00
  2.92103699e+00  2.92809555e+00  2.92917702e+00  2.93417692e+00
  2.94252233e+00  2.94712964e+00  2.95408119e+00  2.95748736e+00
  2.95948095e+00  2.96688673e+00  2.97034578e+00  2.97359515e+00
  2.97675114e+00  2.97947003e+00  2.98515196e+00  2.98824260e+00
  2.99809587e+00  3.00195587e+00  3.00687177e+00  3.01125347e+00
  3.01193969e+00  3.02827468e+00  3.03385498e+00  3.03850738e+00
  3.04235131e+00  3.04582829e+00  3.04901795e+00  3.05097608e+00
  3.05742793e+00  3.06533869e+00  3.06903826e+00  3.07670466e+00
  3.07738007e+00  3.09260322e+00  3.10077827e+00  3.10565408e+00
  3.10755416e+00  3.11663742e+00  3.12004038e+00  3.12125140e+00
  3.12688986e+00  3.13295476e+00  3.13476812e+00  3.13770654e+00
  3.14296702e+00  3.14582034e+00  3.14995542e+00  3.15301394e+00
  3.15674324e+00  3.16038768e+00  3.16583118e+00  3.16823109e+00
  3.17165745e+00  3.17508180e+00  3.18307314e+00  3.18757807e+00
  3.19283418e+00  3.19712785e+00  3.20092562e+00  3.20963059e+00
  3.21431754e+00  3.21690901e+00  3.22119175e+00  3.22493953e+00
  3.22718843e+00  3.23355422e+00  3.24269968e+00  3.24564792e+00
  3.25604560e+00  3.25964144e+00  3.26339575e+00  3.26583536e+00
  3.27214523e+00  3.27741121e+00  3.28117846e+00  3.28481055e+00
  3.28698442e+00  3.30238566e+00  3.30341151e+00  3.30905126e+00
  3.31208868e+00  3.32078218e+00  3.32535841e+00  3.33092160e+00
  3.33459288e+00  3.34061317e+00  3.34828629e+00  3.34914641e+00
  3.35514675e+00  3.35754633e+00  3.36346267e+00  3.36993421e+00
  3.38073813e+00  3.38093153e+00  3.38626909e+00  3.39064343e+00
  3.39638759e+00  3.39988652e+00  3.40263044e+00  3.40477221e+00
  3.41473342e+00  3.42077090e+00  3.42585155e+00  3.42977323e+00
  3.43618121e+00  3.44263045e+00  3.44414397e+00  3.45376140e+00
  3.45524913e+00  3.45869912e+00  3.46297499e+00  3.46716176e+00
  3.46903337e+00  3.47088908e+00  3.47283250e+00  3.47778307e+00
  3.48005225e+00  3.48041425e+00  3.48849677e+00  3.49275520e+00
  3.49417806e+00  3.49725263e+00  3.49887343e+00  3.50701753e+00
  3.51174380e+00  3.51244329e+00  3.51828824e+00  3.52313763e+00
  3.52619117e+00  3.53469224e+00  3.54066359e+00  3.54427401e+00
  3.54629783e+00  3.55330151e+00  3.56640789e+00  3.57709032e+00
  3.58042327e+00  3.59210961e+00  3.59532334e+00  3.60223276e+00
  3.60749260e+00  3.61364315e+00  3.61843167e+00  3.62640936e+00
  3.63463980e+00  3.63765634e+00  3.64493954e+00  3.64795698e+00
  3.66776084e+00  3.67003857e+00  3.67250017e+00  3.67884886e+00
  3.68320411e+00  3.69022523e+00  3.69493220e+00  3.70601339e+00
  3.71434400e+00  3.72149097e+00  3.73557800e+00  3.74206508e+00
  3.74463349e+00  3.75990393e+00  3.76416717e+00  3.77261360e+00
  3.78330351e+00  3.79352960e+00  3.80461716e+00  3.81159185e+00
  3.81901569e+00  3.82494382e+00  3.83708568e+00  3.85432259e+00
  3.86153314e+00  3.86989215e+00  3.87329073e+00  3.87483477e+00
  3.88448384e+00  3.89095062e+00  3.89962055e+00  3.91463238e+00
  3.92264047e+00  3.92946571e+00  3.94003128e+00  3.94828076e+00
  3.95657444e+00  3.95847607e+00  3.96519085e+00  3.98440673e+00
  4.00203121e+00  4.00877542e+00  4.01896940e+00  4.03053148e+00
  4.04360839e+00  4.05156628e+00  4.05528500e+00  4.06388718e+00
  4.06483182e+00  4.07385830e+00  4.08024461e+00  4.08674912e+00
  4.09473423e+00  4.10254192e+00  4.10829617e+00  4.11196663e+00
  4.12023398e+00  4.12157052e+00  4.13536973e+00  4.14178724e+00
  4.14421371e+00  4.15300669e+00  4.15504805e+00  4.16283727e+00
  4.16441091e+00  4.16713230e+00  4.17157159e+00  4.17468369e+00
  4.17704914e+00  4.18157432e+00  4.19277562e+00  4.19756177e+00
  4.20222980e+00  4.20745769e+00  4.21131693e+00  4.22022364e+00
  4.22169510e+00  4.22626320e+00  4.24071515e+00  4.24567152e+00
  4.25327530e+00  4.25631145e+00  4.26141562e+00  4.26840022e+00
  4.27247611e+00  4.27643559e+00  4.27982911e+00  4.29149164e+00
  4.29667916e+00  4.31341631e+00  4.32022501e+00  4.32688327e+00
  4.33982825e+00  4.34671560e+00  4.35636261e+00  4.36043411e+00
  4.36994472e+00  4.37760670e+00  4.39452938e+00  4.40105477e+00
  4.40878811e+00  4.41271925e+00  4.42024665e+00  4.43939840e+00
  4.44893495e+00  4.46330450e+00  4.49304185e+00  4.52661933e+00
  4.53788487e+00  4.54962387e+00  4.56063850e+00  4.56449564e+00
  4.57334789e+00  4.58715707e+00  4.59474682e+00  4.60370718e+00
  4.62425919e+00  4.62833407e+00  4.65075045e+00  4.66933006e+00
  4.68197883e+00  4.71932388e+00  4.73687333e+00  4.74965103e+00
  4.76224010e+00  4.77081869e+00  4.77999326e+00  4.79114267e+00
  4.79748246e+00  4.80381612e+00  4.81075610e+00  4.82042688e+00
  4.82851389e+00  4.84307587e+00  4.84767671e+00  4.86549804e+00
  4.87799842e+00  4.88732537e+00  4.89398194e+00  4.90306472e+00
  4.92209302e+00  4.93888108e+00  4.94467387e+00  4.95525322e+00
  4.97925781e+00  4.99052640e+00  5.01212611e+00  5.01963973e+00
  5.03288765e+00  5.04558619e+00  5.08125713e+00  5.08886702e+00
  5.11804440e+00  5.12632863e+00  5.14596541e+00  5.15496635e+00
  5.16770600e+00  5.18218251e+00  5.19900874e+00  5.22569437e+00
  5.23298147e+00  5.25693149e+00  5.29422749e+00  5.32886351e+00
  5.33929717e+00  5.36300424e+00  5.38740834e+00  5.39787933e+00
  5.40608763e+00  5.41811988e+00  5.43747499e+00  5.45346086e+00
  5.46014881e+00  5.46582157e+00  5.48607060e+00  5.55479718e+00
  5.56901360e+00  5.58040770e+00  5.62032377e+00  5.62194342e+00
  5.70006889e+00  5.70149573e+00  5.70968992e+00  5.74773752e+00
  5.82636248e+00  5.85427953e+00  5.86584230e+00  5.87120015e+00
  6.02522239e+00  6.26491620e+00  6.34416789e+00  6.85597227e+00
  6.85778888e+00  6.86164183e+00  6.86315688e+00  6.86565996e+00
  6.86712679e+00  6.86898859e+00  6.87005668e+00  6.87220039e+00
  6.87276708e+00  6.87395812e+00  6.87663767e+00  6.87800361e+00
  6.87875518e+00  6.87987241e+00  6.88477675e+00  6.89096071e+00
  6.89163251e+00  6.89399869e+00  6.90154013e+00  6.91880004e+00
  6.92031124e+00  6.94233116e+00  6.94326720e+00  6.96042777e+00
  6.96217735e+00  6.97523511e+00  6.97701086e+00  7.00415816e+00
  7.00694961e+00  7.02482952e+00  7.03122476e+00  7.05496111e+00
  7.05690756e+00  7.06722319e+00  7.06992449e+00  7.10884484e+00
  7.11121526e+00  7.14504984e+00  7.14669084e+00  7.16409457e+00
  7.16731777e+00  7.16925632e+00  7.18850655e+00  7.19301505e+00
  7.22643280e+00  7.22868496e+00  7.26149108e+00  7.26266426e+00
  7.27232871e+00  7.27460064e+00  7.27512724e+00  7.27547539e+00
  7.34074952e+00  7.34157978e+00  7.37401321e+00  7.37810534e+00
  7.39464376e+00  7.39688534e+00  7.42340755e+00  7.42586124e+00
  7.47612722e+00  7.47935142e+00  7.57374576e+00  7.57641822e+00
  7.61702307e+00  7.61969647e+00  7.69930573e+00  7.70183055e+00
  7.97441546e+00  7.97859578e+00  8.31714469e+00  8.31949543e+00
  8.34623348e+00  8.34919216e+00  8.38351670e+00  8.38756189e+00
  8.40014730e+00  8.43076502e+00  8.44199951e+00  8.46606376e+00
  8.47483103e+00  8.48039290e+00  8.55008078e+00  8.55140417e+00
  8.58563083e+00  8.59502652e+00  8.60142714e+00  8.60586405e+00
  8.69398831e+00  8.69618288e+00  8.72790425e+00  8.73011167e+00
  8.73592375e+00  8.74397835e+00  8.77084018e+00  8.77430650e+00
  8.80319804e+00  8.80561520e+00  8.81005724e+00  8.81344596e+00
  8.86209257e+00  8.86681138e+00  8.89930609e+00  8.90206047e+00
  8.94425618e+00  8.94963132e+00  8.95750558e+00  8.96024917e+00
  9.04966037e+00  9.05394947e+00  9.05499693e+00  9.05898815e+00
  9.08767604e+00  9.08919569e+00  9.09620679e+00  9.11321316e+00
  9.14179196e+00  9.15133377e+00  9.33501787e+00  9.34560513e+00
  1.57466469e+01  2.22411698e+01  2.23740842e+01  2.24079367e+01
  2.24701621e+01  2.26072560e+01  2.26186007e+01  2.26455081e+01
  2.26750357e+01  2.27880449e+01  2.28634829e+01  2.28930937e+01
  2.29027155e+01  2.29175454e+01  2.29239231e+01  2.29311124e+01
  2.30330525e+01  2.30401045e+01  2.30672792e+01  2.30982688e+01
  2.31721067e+01  2.32529704e+01  2.34912886e+01  2.35834021e+01
  2.36550245e+01  3.25236581e+01  3.30914252e+01  5.72386013e+01
  5.72509594e+01  5.74263556e+01  5.74324448e+01  5.75114785e+01
  5.75219919e+01  5.76582473e+01  5.76771668e+01  5.76907899e+01
  5.77338432e+01]
nelec by numeric integration = 261.99994087317185
    CPU time for vxc    145.99 sec, wall time      9.87 sec
    CPU time for df vj and vk    661.09 sec, wall time     52.08 sec
E1 = -11347.492346701632  Ecoul = 5269.301562790201  Exc = -253.97622875860893
cycle= 1 E= -2051.32563914593  delta_E= 1.16e-10  |g|= 2.64e-05  |ddm|= 6.15e-05
    CPU time for cycle= 1    813.13 sec, wall time     62.84 sec
  HOMO = -0.263834033044177  LUMO = -0.131611170095744
  mo_energy =
[-2.48140909e+01 -2.48119884e+01 -2.48094894e+01 -2.48094042e+01
 -2.48081730e+01 -2.48080777e+01 -2.48066460e+01 -2.48041806e+01
 -2.48038132e+01 -2.48035046e+01 -1.45105262e+01 -1.44817474e+01
 -1.03490307e+01 -1.03465723e+01 -1.03426145e+01 -1.03423156e+01
 -1.03420017e+01 -1.03412725e+01 -1.03412522e+01 -1.03410012e+01
 -1.03407161e+01 -1.03388924e+01 -1.03015230e+01 -1.02843062e+01
 -1.02653959e+01 -1.02636831e+01 -1.02622405e+01 -1.02612922e+01
 -1.02602909e+01 -1.02590189e+01 -1.02587648e+01 -1.02580222e+01
 -1.02576719e+01 -1.02573495e+01 -1.02531558e+01 -1.02478642e+01
 -6.79768903e+00 -1.29911292e+00 -1.29715675e+00 -1.29085378e+00
 -1.28903131e+00 -1.28532125e+00 -1.28307751e+00 -1.27644025e+00
 -1.27452742e+00 -1.27398336e+00 -1.27253138e+00 -1.12090287e+00
 -9.31872462e-01 -9.20843501e-01 -9.19426453e-01 -8.99830857e-01
 -8.58795956e-01 -8.16892239e-01 -8.03745208e-01 -8.00048967e-01
 -7.99155865e-01 -7.98488134e-01 -7.95864374e-01 -7.82982744e-01
 -7.43153125e-01 -6.99530039e-01 -6.87788747e-01 -6.83569219e-01
 -6.82562788e-01 -6.71814560e-01 -6.65890256e-01 -6.42339970e-01
 -6.20892137e-01 -6.17340180e-01 -6.15726316e-01 -6.08979914e-01
 -6.07031484e-01 -6.02160356e-01 -5.97312088e-01 -5.85357846e-01
 -5.70930193e-01 -5.64987639e-01 -5.63542059e-01 -5.60224061e-01
 -5.58575759e-01 -5.46255350e-01 -5.43868056e-01 -5.36777770e-01
 -5.35781344e-01 -5.31915491e-01 -5.20239714e-01 -5.19501686e-01
 -5.14993256e-01 -5.10650720e-01 -5.07459656e-01 -5.03740752e-01
 -4.99844184e-01 -4.92539719e-01 -4.87725948e-01 -4.86676860e-01
 -4.86269595e-01 -4.83622685e-01 -4.77487158e-01 -4.68428035e-01
 -4.66591616e-01 -4.63638083e-01 -4.63382758e-01 -4.61352003e-01
 -4.60773106e-01 -4.56190039e-01 -4.52674460e-01 -4.36854166e-01
 -4.33880891e-01 -4.31925620e-01 -4.18784932e-01 -4.11145290e-01
 -4.03855559e-01 -4.02080151e-01 -4.00927479e-01 -3.96540065e-01
 -3.90997232e-01 -3.85856569e-01 -3.79747614e-01 -3.73839942e-01
 -3.66818380e-01 -3.45550623e-01 -3.34613355e-01 -3.18036278e-01
 -2.95430986e-01 -2.90088805e-01 -2.76511422e-01 -2.71156909e-01
 -2.70175887e-01 -2.66463474e-01 -2.63834033e-01 -1.31611170e-01
 -4.27140041e-02 -3.77797041e-02 -3.01391807e-02 -2.57948670e-02
 -1.95719663e-02 -1.57405502e-02 -1.38785468e-02 -6.53252477e-03
  2.32017838e-03  7.78988321e-03  4.47170079e-02  4.83044774e-02
  6.11773008e-02  6.87886375e-02  7.34302450e-02  7.68659150e-02
  8.48812782e-02  9.12725616e-02  9.46757501e-02  1.01121670e-01
  1.05724354e-01  1.14005201e-01  1.15969182e-01  1.20964055e-01
  1.23300104e-01  1.25512243e-01  1.29330838e-01  1.33348498e-01
  1.38712785e-01  1.47633654e-01  1.57628197e-01  1.66367874e-01
  1.69021291e-01  1.70889379e-01  1.78779787e-01  1.79784420e-01
  1.82247671e-01  1.84678398e-01  1.87037666e-01  1.89728860e-01
  1.92239916e-01  1.93633288e-01  1.96655174e-01  2.04967062e-01
  2.06754444e-01  2.07841532e-01  2.12315458e-01  2.12739989e-01
  2.18517370e-01  2.24461910e-01  2.25316078e-01  2.26800135e-01
  2.34093826e-01  2.36526911e-01  2.42080147e-01  2.46502669e-01
  2.50447133e-01  2.52356182e-01  2.61619389e-01  2.64518222e-01
  2.65752883e-01  2.72725054e-01  2.73546771e-01  2.77109211e-01
  2.82419483e-01  2.83750045e-01  2.85198979e-01  2.87735836e-01
  2.89359117e-01  2.91954502e-01  2.96138096e-01  2.99742397e-01
  3.03364135e-01  3.12136110e-01  3.13465709e-01  3.17601452e-01
  3.20185886e-01  3.28510612e-01  3.30468139e-01  3.33825966e-01
  3.37547376e-01  3.40002730e-01  3.44488646e-01  3.45840782e-01
  3.51481348e-01  3.53681137e-01  3.55810733e-01  3.58214084e-01
  3.62762052e-01  3.65087309e-01  3.68782983e-01  3.75260843e-01
  3.77106227e-01  3.80337337e-01  3.85142191e-01  3.86353839e-01
  3.89501350e-01  3.91820004e-01  3.98492127e-01  3.99227893e-01
  4.03332674e-01  4.05877860e-01  4.07121970e-01  4.10383611e-01
  4.13147144e-01  4.15322300e-01  4.17312163e-01  4.19412801e-01
  4.23267569e-01  4.26478822e-01  4.30592833e-01  4.31007874e-01
  4.34348589e-01  4.36532881e-01  4.37814948e-01  4.40209179e-01
  4.44477000e-01  4.47146088e-01  4.49813160e-01  4.56103100e-01
  4.58190411e-01  4.63024306e-01  4.65866865e-01  4.68597604e-01
  4.70971384e-01  4.74939343e-01  4.79317384e-01  4.82016157e-01
  4.83433859e-01  4.84671334e-01  4.90015910e-01  4.92646808e-01
  4.96894726e-01  5.02219764e-01  5.06886496e-01  5.10834213e-01
  5.16000549e-01  5.22378462e-01  5.24456282e-01  5.29989150e-01
  5.37167660e-01  5.42278022e-01  5.54884570e-01  5.58669684e-01
  5.65942020e-01  5.67950270e-01  5.74361318e-01  5.80910409e-01
  5.90900912e-01  5.92514535e-01  6.00394116e-01  6.08585501e-01
  6.12633769e-01  6.16086826e-01  6.20652789e-01  6.25719461e-01
  6.28365212e-01  6.34107359e-01  6.35823277e-01  6.37987370e-01
  6.40238300e-01  6.48183658e-01  6.51449721e-01  6.56444074e-01
  6.62427070e-01  6.63470064e-01  6.64670384e-01  6.68272644e-01
  6.72300397e-01  6.75283949e-01  6.76962943e-01  6.82819239e-01
  6.86738516e-01  6.92698213e-01  6.94254978e-01  6.96798397e-01
  7.06491912e-01  7.09098541e-01  7.12241196e-01  7.17177493e-01
  7.21054186e-01  7.22205301e-01  7.29532863e-01  7.32752377e-01
  7.36291787e-01  7.43896533e-01  7.47060896e-01  7.48850243e-01
  7.50558127e-01  7.58174189e-01  7.62548589e-01  7.65373960e-01
  7.68414750e-01  7.73021303e-01  7.80341018e-01  7.81151117e-01
  7.94112375e-01  7.98016615e-01  8.01245110e-01  8.02618978e-01
  8.04167627e-01  8.07814254e-01  8.13827129e-01  8.20123638e-01
  8.20825297e-01  8.28105458e-01  8.31404881e-01  8.37471092e-01
  8.39382636e-01  8.44665331e-01  8.51699224e-01  8.52945850e-01
  8.61056883e-01  8.68132469e-01  8.70517276e-01  8.75512509e-01
  8.82375916e-01  8.84111110e-01  8.86284498e-01  8.91746960e-01
  8.93866265e-01  8.98063561e-01  9.06223377e-01  9.09628797e-01
  9.12489273e-01  9.23261556e-01  9.26692754e-01  9.29019039e-01
  9.33369913e-01  9.35587072e-01  9.41902089e-01  9.48338822e-01
  9.48644236e-01  9.56739153e-01  9.58725261e-01  9.63813824e-01
  9.70727570e-01  9.72028443e-01  9.80686328e-01  9.84413949e-01
  9.87989200e-01  9.92246663e-01  9.93424966e-01  9.95932700e-01
  1.00274277e+00  1.00841688e+00  1.01664502e+00  1.02200450e+00
  1.03197041e+00  1.03736149e+00  1.04257731e+00  1.04464997e+00
  1.05177601e+00  1.06070347e+00  1.06382403e+00  1.06932636e+00
  1.07159534e+00  1.07912900e+00  1.08364257e+00  1.08944690e+00
  1.09934869e+00  1.10383318e+00  1.10539923e+00  1.10887857e+00
  1.11231355e+00  1.11602053e+00  1.11907069e+00  1.12493875e+00
  1.13003481e+00  1.13391275e+00  1.14158633e+00  1.14673781e+00
  1.15898448e+00  1.16480669e+00  1.16759597e+00  1.17482226e+00
  1.17814756e+00  1.18570389e+00  1.19010334e+00  1.19399307e+00
  1.19750996e+00  1.20156179e+00  1.20534725e+00  1.21096750e+00
  1.22143937e+00  1.22388093e+00  1.22765222e+00  1.23031233e+00
  1.23419524e+00  1.23756367e+00  1.24767089e+00  1.25101441e+00
  1.25399622e+00  1.25910052e+00  1.26417081e+00  1.26823910e+00
  1.27542553e+00  1.28198529e+00  1.28878693e+00  1.30226579e+00
  1.31122591e+00  1.31152157e+00  1.31598368e+00  1.32478301e+00
  1.32869376e+00  1.33515416e+00  1.33578799e+00  1.34582253e+00
  1.35560982e+00  1.36600281e+00  1.36825580e+00  1.37503913e+00
  1.38273010e+00  1.39165565e+00  1.39728219e+00  1.40187596e+00
  1.40690311e+00  1.41869388e+00  1.42127750e+00  1.42910468e+00
  1.43062767e+00  1.43590014e+00  1.43696198e+00  1.44378283e+00
  1.44596910e+00  1.45237327e+00  1.45469587e+00  1.46115572e+00
  1.46503685e+00  1.47037697e+00  1.47805847e+00  1.48005014e+00
  1.48929573e+00  1.49055620e+00  1.50158891e+00  1.50530466e+00
  1.50853616e+00  1.52036292e+00  1.52204247e+00  1.52937234e+00
  1.53765603e+00  1.54176876e+00  1.54492996e+00  1.55290735e+00
  1.56497796e+00  1.57395668e+00  1.57948799e+00  1.58484693e+00
  1.58942044e+00  1.60033497e+00  1.60637642e+00  1.61101875e+00
  1.61900966e+00  1.62159174e+00  1.63025606e+00  1.63127770e+00
  1.64368107e+00  1.64932380e+00  1.65676520e+00  1.66543080e+00
  1.66782413e+00  1.67312148e+00  1.67970351e+00  1.68071545e+00
  1.68640941e+00  1.68937901e+00  1.69572980e+00  1.70570416e+00
  1.71117373e+00  1.71779373e+00  1.72100750e+00  1.72319914e+00
  1.72890817e+00  1.73949136e+00  1.74337346e+00  1.74909727e+00
  1.75123202e+00  1.75934042e+00  1.76531321e+00  1.77124003e+00
  1.77707849e+00  1.78551955e+00  1.79065134e+00  1.80289682e+00
  1.81107873e+00  1.81469357e+00  1.82773399e+00  1.82984879e+00
  1.83503613e+00  1.84432536e+00  1.84948292e+00  1.85253409e+00
  1.86787091e+00  1.88310885e+00  1.88582705e+00  1.89250198e+00
  1.90968174e+00  1.91616290e+00  1.92407065e+00  1.92659449e+00
  1.93063466e+00  1.93443414e+00  1.94206563e+00  1.95091933e+00
  1.95683524e+00  1.95981158e+00  1.96707503e+00  1.97553949e+00
  1.97947537e+00  1.98851808e+00  1.99875765e+00  2.00027777e+00
  2.00673855e+00  2.01322107e+00  2.01760063e+00  2.02371449e+00
  2.02528468e+00  2.02812700e+00  2.03029035e+00  2.03460256e+00
  2.04555820e+00  2.05129195e+00  2.05868599e+00  2.06007928e+00
  2.06174762e+00  2.07208945e+00  2.07308001e+00  2.08380151e+00
  2.08477598e+00  2.09010703e+00  2.09066255e+00  2.09712814e+00
  2.10340365e+00  2.11357007e+00  2.11792049e+00  2.12103314e+00
  2.12663120e+00  2.13819509e+00  2.14367146e+00  2.14463489e+00
  2.15331749e+00  2.16304779e+00  2.17239986e+00  2.17309462e+00
  2.17590783e+00  2.18477784e+00  2.19244576e+00  2.19874528e+00
  2.20260876e+00  2.20757256e+00  2.20869134e+00  2.21310609e+00
  2.22062280e+00  2.22803859e+00  2.23093965e+00  2.23706572e+00
  2.24337603e+00  2.25049639e+00  2.25513409e+00  2.26004326e+00
  2.26910569e+00  2.27582230e+00  2.28417067e+00  2.29188182e+00
  2.30346682e+00  2.31097322e+00  2.32086469e+00  2.32721977e+00
  2.33188276e+00  2.33836740e+00  2.34233508e+00  2.36009657e+00
  2.36094944e+00  2.37190586e+00  2.37630539e+00  2.39933231e+00
  2.40828524e+00  2.42121279e+00  2.42667251e+00  2.43613421e+00
  2.43974990e+00  2.45590131e+00  2.46246850e+00  2.46976933e+00
  2.47907589e+00  2.48823807e+00  2.49565348e+00  2.49953975e+00
  2.50217697e+00  2.51071558e+00  2.51201360e+00  2.52158040e+00
  2.52365214e+00  2.53100992e+00  2.54021832e+00  2.54361215e+00
  2.54669084e+00  2.55372226e+00  2.55777486e+00  2.56484478e+00
  2.57541445e+00  2.57766659e+00  2.58299477e+00  2.58871723e+00
  2.59329288e+00  2.60051171e+00  2.60330536e+00  2.61056778e+00
  2.61965758e+00  2.62151691e+00  2.62709231e+00  2.63241615e+00
  2.63467832e+00  2.63740084e+00  2.63943672e+00  2.64569061e+00
  2.64983067e+00  2.65088040e+00  2.65725484e+00  2.66089748e+00
  2.66265193e+00  2.66953266e+00  2.67432612e+00  2.67966905e+00
  2.68521346e+00  2.68798057e+00  2.69548514e+00  2.70111331e+00
  2.70999043e+00  2.71103910e+00  2.71668143e+00  2.72035517e+00
  2.72584620e+00  2.72804025e+00  2.73619556e+00  2.73985156e+00
  2.74652475e+00  2.74970519e+00  2.76277033e+00  2.76651293e+00
  2.77566809e+00  2.77911710e+00  2.78424389e+00  2.78692660e+00
  2.79306116e+00  2.79784559e+00  2.80686160e+00  2.80934676e+00
  2.81381278e+00  2.81769366e+00  2.82331000e+00  2.82403217e+00
  2.82763386e+00  2.83245643e+00  2.83692295e+00  2.84248537e+00
  2.84873536e+00  2.85786206e+00  2.85986022e+00  2.86425537e+00
  2.87011692e+00  2.87126783e+00  2.87290375e+00  2.87604682e+00
  2.88301409e+00  2.88770491e+00  2.89185274e+00  2.89733008e+00
  2.90384863e+00  2.91080069e+00  2.91182922e+00  2.91637012e+00
  2.92103789e+00  2.92809618e+00  2.92917734e+00  2.93417712e+00
  2.94252300e+00  2.94712984e+00  2.95408148e+00  2.95748744e+00
  2.95948161e+00  2.96688740e+00  2.97034653e+00  2.97359548e+00
  2.97675160e+00  2.97947075e+00  2.98515191e+00  2.98824299e+00
  2.99809650e+00  3.00195534e+00  3.00687190e+00  3.01125405e+00
  3.01193997e+00  3.02827536e+00  3.03385541e+00  3.03850787e+00
  3.04235196e+00  3.04582860e+00  3.04901821e+00  3.05097619e+00
  3.05742839e+00  3.06533922e+00  3.06903859e+00  3.07670511e+00
  3.07738049e+00  3.09260336e+00  3.10077850e+00  3.10565413e+00
  3.10755448e+00  3.11663794e+00  3.12004077e+00  3.12125180e+00
  3.12689031e+00  3.13295528e+00  3.13476882e+00  3.13770709e+00
  3.14296760e+00  3.14582058e+00  3.14995588e+00  3.15301446e+00
  3.15674367e+00  3.16038833e+00  3.16583138e+00  3.16823170e+00
  3.17165831e+00  3.17508254e+00  3.18307359e+00  3.18757852e+00
  3.19283473e+00  3.19712834e+00  3.20092615e+00  3.20963047e+00
  3.21431801e+00  3.21690948e+00  3.22119188e+00  3.22494006e+00
  3.22718909e+00  3.23355443e+00  3.24270023e+00  3.24564836e+00
  3.25604604e+00  3.25964174e+00  3.26339589e+00  3.26583598e+00
  3.27214518e+00  3.27741180e+00  3.28117860e+00  3.28481092e+00
  3.28698526e+00  3.30238584e+00  3.30341211e+00  3.30905217e+00
  3.31208888e+00  3.32078196e+00  3.32535896e+00  3.33092255e+00
  3.33459336e+00  3.34061383e+00  3.34828655e+00  3.34914708e+00
  3.35514688e+00  3.35754706e+00  3.36346303e+00  3.36993518e+00
  3.38073870e+00  3.38093232e+00  3.38626996e+00  3.39064339e+00
  3.39638851e+00  3.39988650e+00  3.40263132e+00  3.40477240e+00
  3.41473384e+00  3.42077200e+00  3.42585179e+00  3.42977401e+00
  3.43618155e+00  3.44263061e+00  3.44414498e+00  3.45376167e+00
  3.45524961e+00  3.45869963e+00  3.46297508e+00  3.46716191e+00
  3.46903418e+00  3.47088939e+00  3.47283296e+00  3.47778363e+00
  3.48005278e+00  3.48041482e+00  3.48849691e+00  3.49275591e+00
  3.49417846e+00  3.49725285e+00  3.49887394e+00  3.50701799e+00
  3.51174434e+00  3.51244389e+00  3.51828910e+00  3.52313819e+00
  3.52619200e+00  3.53469278e+00  3.54066430e+00  3.54427459e+00
  3.54629815e+00  3.55330192e+00  3.56640827e+00  3.57709106e+00
  3.58042396e+00  3.59211016e+00  3.59532427e+00  3.60223386e+00
  3.60749300e+00  3.61364424e+00  3.61843234e+00  3.62641017e+00
  3.63464042e+00  3.63765683e+00  3.64494022e+00  3.64795780e+00
  3.66776132e+00  3.67003912e+00  3.67250087e+00  3.67884968e+00
  3.68320475e+00  3.69022561e+00  3.69493281e+00  3.70601389e+00
  3.71434489e+00  3.72149188e+00  3.73557885e+00  3.74206548e+00
  3.74463404e+00  3.75990440e+00  3.76416769e+00  3.77261465e+00
  3.78330352e+00  3.79352984e+00  3.80461750e+00  3.81159214e+00
  3.81901587e+00  3.82494446e+00  3.83708628e+00  3.85432324e+00
  3.86153320e+00  3.86989241e+00  3.87329111e+00  3.87483540e+00
  3.88448425e+00  3.89095062e+00  3.89962092e+00  3.91463268e+00
  3.92263997e+00  3.92946610e+00  3.94003138e+00  3.94828096e+00
  3.95657494e+00  3.95847659e+00  3.96519146e+00  3.98440653e+00
  4.00203170e+00  4.00877572e+00  4.01896919e+00  4.03053210e+00
  4.04360920e+00  4.05156613e+00  4.05528503e+00  4.06388759e+00
  4.06483239e+00  4.07385888e+00  4.08024503e+00  4.08674973e+00
  4.09473493e+00  4.10254250e+00  4.10829672e+00  4.11196667e+00
  4.12023437e+00  4.12157103e+00  4.13537028e+00  4.14178813e+00
  4.14421383e+00  4.15300730e+00  4.15504844e+00  4.16283770e+00
  4.16441139e+00  4.16713287e+00  4.17157235e+00  4.17468430e+00
  4.17704954e+00  4.18157443e+00  4.19277604e+00  4.19756259e+00
  4.20223027e+00  4.20745809e+00  4.21131706e+00  4.22022463e+00
  4.22169542e+00  4.22626360e+00  4.24071536e+00  4.24567220e+00
  4.25327595e+00  4.25631186e+00  4.26141611e+00  4.26840129e+00
  4.27247655e+00  4.27643607e+00  4.27982968e+00  4.29149210e+00
  4.29667971e+00  4.31341687e+00  4.32022483e+00  4.32688395e+00
  4.33982901e+00  4.34671687e+00  4.35636343e+00  4.36043455e+00
  4.36994537e+00  4.37760715e+00  4.39452940e+00  4.40105548e+00
  4.40878813e+00  4.41271989e+00  4.42024627e+00  4.43939914e+00
  4.44893511e+00  4.46330530e+00  4.49304227e+00  4.52661950e+00
  4.53788557e+00  4.54962390e+00  4.56063931e+00  4.56449569e+00
  4.57334813e+00  4.58715787e+00  4.59474768e+00  4.60370798e+00
  4.62425992e+00  4.62833494e+00  4.65075088e+00  4.66933078e+00
  4.68197919e+00  4.71932185e+00  4.73687326e+00  4.74965128e+00
  4.76224002e+00  4.77081910e+00  4.77999317e+00  4.79114216e+00
  4.79748289e+00  4.80381604e+00  4.81075549e+00  4.82042685e+00
  4.82851448e+00  4.84307319e+00  4.84767697e+00  4.86549796e+00
  4.87799775e+00  4.88732503e+00  4.89398081e+00  4.90306526e+00
  4.92209314e+00  4.93888175e+00  4.94467327e+00  4.95525384e+00
  4.97925845e+00  4.99052658e+00  5.01212671e+00  5.01963879e+00
  5.03288663e+00  5.04558491e+00  5.08125732e+00  5.08886784e+00
  5.11804529e+00  5.12632804e+00  5.14596447e+00  5.15496667e+00
  5.16770561e+00  5.18218144e+00  5.19900919e+00  5.22569561e+00
  5.23298068e+00  5.25693199e+00  5.29422616e+00  5.32886399e+00
  5.33929779e+00  5.36300491e+00  5.38740878e+00  5.39787996e+00
  5.40608852e+00  5.41812073e+00  5.43747569e+00  5.45346126e+00
  5.46014905e+00  5.46582203e+00  5.48607073e+00  5.55479741e+00
  5.56901423e+00  5.58040671e+00  5.62032219e+00  5.62194176e+00
  5.70006689e+00  5.70149622e+00  5.70968972e+00  5.74773540e+00
  5.82636261e+00  5.85427963e+00  5.86584304e+00  5.87120094e+00
  6.02522260e+00  6.26491495e+00  6.34416651e+00  6.85597263e+00
  6.85778928e+00  6.86164256e+00  6.86315767e+00  6.86566051e+00
  6.86712716e+00  6.86898938e+00  6.87005711e+00  6.87220104e+00
  6.87276760e+00  6.87395872e+00  6.87663847e+00  6.87800439e+00
  6.87875668e+00  6.87987341e+00  6.88477720e+00  6.89096286e+00
  6.89163220e+00  6.89400071e+00  6.90153994e+00  6.91880056e+00
  6.92031183e+00  6.94233191e+00  6.94326801e+00  6.96042825e+00
  6.96217796e+00  6.97523575e+00  6.97701156e+00  7.00415896e+00
  7.00695049e+00  7.02483023e+00  7.03122559e+00  7.05496174e+00
  7.05690821e+00  7.06722381e+00  7.06992504e+00  7.10884553e+00
  7.11121618e+00  7.14505033e+00  7.14669139e+00  7.16409249e+00
  7.16731857e+00  7.16925650e+00  7.18850735e+00  7.19301537e+00
  7.22643344e+00  7.22868569e+00  7.26149160e+00  7.26266476e+00
  7.27232943e+00  7.27460143e+00  7.27512803e+00  7.27547607e+00
  7.34075006e+00  7.34158047e+00  7.37401408e+00  7.37810612e+00
  7.39464436e+00  7.39688596e+00  7.42340830e+00  7.42586203e+00
  7.47612795e+00  7.47935217e+00  7.57374653e+00  7.57641889e+00
  7.61702364e+00  7.61969706e+00  7.69930650e+00  7.70183132e+00
  7.97441607e+00  7.97859639e+00  8.31714537e+00  8.31949608e+00
  8.34623453e+00  8.34919318e+00  8.38351756e+00  8.38756264e+00
  8.40014822e+00  8.43076695e+00  8.44200077e+00  8.46606383e+00
  8.47483171e+00  8.48039360e+00  8.55008174e+00  8.55140515e+00
  8.58563085e+00  8.59502744e+00  8.60142892e+00  8.60586519e+00
  8.69398914e+00  8.69618366e+00  8.72790520e+00  8.73011270e+00
  8.73592468e+00  8.74397937e+00  8.77084090e+00  8.77430734e+00
  8.80319904e+00  8.80561594e+00  8.81005813e+00  8.81344692e+00
  8.86209338e+00  8.86681204e+00  8.89930696e+00  8.90206141e+00
  8.94425704e+00  8.94963250e+00  8.95750593e+00  8.96024992e+00
  9.04966252e+00  9.05395056e+00  9.05499746e+00  9.05898829e+00
  9.08767681e+00  9.08919651e+00  9.09620777e+00  9.11321428e+00
  9.14179275e+00  9.15133453e+00  9.33501870e+00  9.34560594e+00
  1.57466509e+01  2.22411703e+01  2.23740837e+01  2.24079367e+01
  2.24701622e+01  2.26072555e+01  2.26186013e+01  2.26455059e+01
  2.26750364e+01  2.27880476e+01  2.28634846e+01  2.28930941e+01
  2.29027155e+01  2.29175452e+01  2.29239232e+01  2.29311123e+01
  2.30330520e+01  2.30401047e+01  2.30672815e+01  2.30982687e+01
  2.31721078e+01  2.32529739e+01  2.34912898e+01  2.35834031e+01
  2.36550259e+01  3.25236408e+01  3.30914312e+01  5.72386027e+01
  5.72509607e+01  5.74263574e+01  5.74324465e+01  5.75114794e+01
  5.75219928e+01  5.76582500e+01  5.76771702e+01  5.76907900e+01
  5.77338431e+01]
nelec by numeric integration = 261.9999408735332
    CPU time for vxc    148.62 sec, wall time     10.50 sec
    CPU time for df vj and vk    664.31 sec, wall time     50.88 sec
E1 = -11347.491982401387  Ecoul = 5269.301192541987  Exc = -253.9762228100476
cycle= 2 E= -2051.32563914534  delta_E= 5.92e-10  |g|= 5.78e-05  |ddm|= 0.000119
    CPU time for cycle= 2    820.09 sec, wall time     62.35 sec
  HOMO = -0.263834651420585  LUMO = -0.131610672979352
  mo_energy =
[-2.48140910e+01 -2.48119884e+01 -2.48094908e+01 -2.48094045e+01
 -2.48081732e+01 -2.48080790e+01 -2.48066461e+01 -2.48041822e+01
 -2.48038130e+01 -2.48035071e+01 -1.45105330e+01 -1.44817357e+01
 -1.03490302e+01 -1.03465723e+01 -1.03426116e+01 -1.03423182e+01
 -1.03419984e+01 -1.03412745e+01 -1.03412561e+01 -1.03409990e+01
 -1.03407181e+01 -1.03388904e+01 -1.03015276e+01 -1.02843036e+01
 -1.02653921e+01 -1.02636830e+01 -1.02622443e+01 -1.02612938e+01
 -1.02602911e+01 -1.02590186e+01 -1.02587671e+01 -1.02580221e+01
 -1.02576755e+01 -1.02573493e+01 -1.02531577e+01 -1.02478664e+01
 -6.79769240e+00 -1.29911299e+00 -1.29715694e+00 -1.29085408e+00
 -1.28903181e+00 -1.28532173e+00 -1.28307789e+00 -1.27644032e+00
 -1.27452846e+00 -1.27398423e+00 -1.27253160e+00 -1.12090212e+00
 -9.31873194e-01 -9.20843970e-01 -9.19426799e-01 -8.99831062e-01
 -8.58796197e-01 -8.16893073e-01 -8.03745936e-01 -8.00049280e-01
 -7.99156744e-01 -7.98488361e-01 -7.95864353e-01 -7.82983059e-01
 -7.43153594e-01 -6.99530613e-01 -6.87789233e-01 -6.83569702e-01
 -6.82563279e-01 -6.71814963e-01 -6.65890444e-01 -6.42340308e-01
 -6.20892590e-01 -6.17340602e-01 -6.15726896e-01 -6.08980524e-01
 -6.07031892e-01 -6.02160719e-01 -5.97312561e-01 -5.85358286e-01
 -5.70930245e-01 -5.64987865e-01 -5.63542378e-01 -5.60224405e-01
 -5.58576089e-01 -5.46255507e-01 -5.43868443e-01 -5.36778410e-01
 -5.35782141e-01 -5.31916104e-01 -5.20240096e-01 -5.19501773e-01
 -5.14993709e-01 -5.10651304e-01 -5.07459924e-01 -5.03741065e-01
 -4.99844632e-01 -4.92540006e-01 -4.87726858e-01 -4.86677324e-01
 -4.86270029e-01 -4.83622907e-01 -4.77487724e-01 -4.68428030e-01
 -4.66591970e-01 -4.63638312e-01 -4.63383048e-01 -4.61352637e-01
 -4.60773425e-01 -4.56190811e-01 -4.52675339e-01 -4.36854450e-01
 -4.33881585e-01 -4.31926183e-01 -4.18785559e-01 -4.11145611e-01
 -4.03855825e-01 -4.02080446e-01 -4.00927710e-01 -3.96540771e-01
 -3.90997539e-01 -3.85857246e-01 -3.79748425e-01 -3.73840451e-01
 -3.66819345e-01 -3.45550903e-01 -3.34611736e-01 -3.18036561e-01
 -2.95431885e-01 -2.90089055e-01 -2.76512126e-01 -2.71157435e-01
 -2.70176287e-01 -2.66463747e-01 -2.63834651e-01 -1.31610673e-01
 -4.27144303e-02 -3.77805413e-02 -3.01400443e-02 -2.57951445e-02
 -1.95726282e-02 -1.57410162e-02 -1.38789081e-02 -6.53283745e-03
  2.32015964e-03  7.78996679e-03  4.47167588e-02  4.83047328e-02
  6.11771312e-02  6.87883173e-02  7.34303667e-02  7.68656846e-02
  8.48812384e-02  9.12721936e-02  9.46754442e-02  1.01121674e-01
  1.05724028e-01  1.14004717e-01  1.15968985e-01  1.20963510e-01
  1.23300065e-01  1.25512127e-01  1.29330125e-01  1.33347938e-01
  1.38712382e-01  1.47632952e-01  1.57627807e-01  1.66367404e-01
  1.69020518e-01  1.70889227e-01  1.78779507e-01  1.79784299e-01
  1.82247461e-01  1.84678146e-01  1.87037491e-01  1.89728725e-01
  1.92239780e-01  1.93633133e-01  1.96654859e-01  2.04966608e-01
  2.06754356e-01  2.07841077e-01  2.12315243e-01  2.12739762e-01
  2.18517253e-01  2.24461543e-01  2.25315998e-01  2.26799781e-01
  2.34093634e-01  2.36526499e-01  2.42079767e-01  2.46502472e-01
  2.50446570e-01  2.52355673e-01  2.61619273e-01  2.64517994e-01
  2.65752577e-01  2.72724915e-01  2.73546463e-01  2.77109027e-01
  2.82419225e-01  2.83749902e-01  2.85198536e-01  2.87735585e-01
  2.89359034e-01  2.91953939e-01  2.96137906e-01  2.99741697e-01
  3.03363866e-01  3.12135871e-01  3.13465295e-01  3.17601228e-01
  3.20185518e-01  3.28510630e-01  3.30467605e-01  3.33825729e-01
  3.37547089e-01  3.40002178e-01  3.44488208e-01  3.45840558e-01
  3.51481714e-01  3.53680474e-01  3.55810206e-01  3.58213871e-01
  3.62761756e-01  3.65086942e-01  3.68782526e-01  3.75260418e-01
  3.77106047e-01  3.80337119e-01  3.85142116e-01  3.86353399e-01
  3.89500960e-01  3.91819939e-01  3.98491962e-01  3.99227710e-01
  4.03332346e-01  4.05877484e-01  4.07121578e-01  4.10383238e-01
  4.13146922e-01  4.15322014e-01  4.17311926e-01  4.19412879e-01
  4.23267403e-01  4.26478333e-01  4.30592618e-01  4.31007708e-01
  4.34348293e-01  4.36532335e-01  4.37814784e-01  4.40208948e-01
  4.44476709e-01  4.47145763e-01  4.49812691e-01  4.56102690e-01
  4.58190290e-01  4.63024053e-01  4.65866609e-01  4.68597142e-01
  4.70971252e-01  4.74939143e-01  4.79317216e-01  4.82015823e-01
  4.83433549e-01  4.84670770e-01  4.90015575e-01  4.92646308e-01
  4.96894358e-01  5.02219281e-01  5.06886262e-01  5.10834003e-01
  5.16000323e-01  5.22378320e-01  5.24456098e-01  5.29988662e-01
  5.37167364e-01  5.42277488e-01  5.54883984e-01  5.58669266e-01
  5.65941510e-01  5.67949963e-01  5.74360946e-01  5.80910390e-01
  5.90900507e-01  5.92514109e-01  6.00393538e-01  6.08584859e-01
  6.12633447e-01  6.16086293e-01  6.20652264e-01  6.25718978e-01
  6.28365105e-01  6.34107018e-01  6.35822983e-01  6.37986946e-01
  6.40237859e-01  6.48183399e-01  6.51449328e-01  6.56443805e-01
  6.62426853e-01  6.63469293e-01  6.64670053e-01  6.68272486e-01
  6.72300216e-01  6.75283468e-01  6.76962698e-01  6.82819015e-01
  6.86737974e-01  6.92698054e-01  6.94254525e-01  6.96797908e-01
  7.06491455e-01  7.09098171e-01  7.12240672e-01  7.17177033e-01
  7.21053951e-01  7.22204998e-01  7.29532598e-01  7.32752370e-01
  7.36291514e-01  7.43896160e-01  7.47060456e-01  7.48849809e-01
  7.50557623e-01  7.58173920e-01  7.62548167e-01  7.65373740e-01
  7.68414437e-01  7.73020863e-01  7.80340714e-01  7.81150572e-01
  7.94112037e-01  7.98016089e-01  8.01244803e-01  8.02618736e-01
  8.04167303e-01  8.07814119e-01  8.13826709e-01  8.20123292e-01
  8.20825089e-01  8.28105155e-01  8.31404349e-01  8.37470594e-01
  8.39382156e-01  8.44664844e-01  8.51698926e-01  8.52945445e-01
  8.61056685e-01  8.68132092e-01  8.70516848e-01  8.75512130e-01
  8.82375731e-01  8.84110783e-01  8.86284334e-01  8.91746546e-01
  8.93866081e-01  8.98063268e-01  9.06223160e-01  9.09628412e-01
  9.12488679e-01  9.23261279e-01  9.26692330e-01  9.29018582e-01
  9.33369509e-01  9.35586818e-01  9.41901808e-01  9.48338609e-01
  9.48644014e-01  9.56738701e-01  9.58725026e-01  9.63813600e-01
  9.70727288e-01  9.72028046e-01  9.80686033e-01  9.84413806e-01
  9.87988766e-01  9.92246415e-01  9.93424508e-01  9.95932405e-01
  1.00274261e+00  1.00841632e+00  1.01664461e+00  1.02200410e+00
  1.03197011e+00  1.03736119e+00  1.04257691e+00  1.04464979e+00
  1.05177573e+00  1.06070310e+00  1.06382363e+00  1.06932604e+00
  1.07159494e+00  1.07912854e+00  1.08364225e+00  1.08944656e+00
  1.09934824e+00  1.10383304e+00  1.10539923e+00  1.10887830e+00
  1.11231342e+00  1.11602017e+00  1.11907048e+00  1.12493832e+00
  1.13003446e+00  1.13391213e+00  1.14158582e+00  1.14673729e+00
  1.15898401e+00  1.16480627e+00  1.16759541e+00  1.17482183e+00
  1.17814715e+00  1.18570346e+00  1.19010273e+00  1.19399262e+00
  1.19750965e+00  1.20156124e+00  1.20534692e+00  1.21096718e+00
  1.22143913e+00  1.22388031e+00  1.22765174e+00  1.23031206e+00
  1.23419459e+00  1.23756320e+00  1.24767046e+00  1.25101409e+00
  1.25399578e+00  1.25910032e+00  1.26417020e+00  1.26823852e+00
  1.27542485e+00  1.28198486e+00  1.28878666e+00  1.30226527e+00
  1.31122567e+00  1.31152111e+00  1.31598326e+00  1.32478234e+00
  1.32869315e+00  1.33515348e+00  1.33578761e+00  1.34582241e+00
  1.35560925e+00  1.36600224e+00  1.36825550e+00  1.37503879e+00
  1.38272990e+00  1.39165541e+00  1.39728163e+00  1.40187554e+00
  1.40690244e+00  1.41869364e+00  1.42127736e+00  1.42910448e+00
  1.43062728e+00  1.43589971e+00  1.43696149e+00  1.44378267e+00
  1.44596869e+00  1.45237304e+00  1.45469561e+00  1.46115552e+00
  1.46503651e+00  1.47037647e+00  1.47805808e+00  1.48004985e+00
  1.48929544e+00  1.49055567e+00  1.50158885e+00  1.50530445e+00
  1.50853592e+00  1.52036226e+00  1.52204208e+00  1.52937207e+00
  1.53765562e+00  1.54176846e+00  1.54492935e+00  1.55290658e+00
  1.56497780e+00  1.57395643e+00  1.57948775e+00  1.58484668e+00
  1.58941988e+00  1.60033481e+00  1.60637643e+00  1.61101795e+00
  1.61900928e+00  1.62159199e+00  1.63025565e+00  1.63127714e+00
  1.64368033e+00  1.64932365e+00  1.65676444e+00  1.66543056e+00
  1.66782377e+00  1.67312129e+00  1.67970310e+00  1.68071486e+00
  1.68640904e+00  1.68937830e+00  1.69572940e+00  1.70570376e+00
  1.71117348e+00  1.71779365e+00  1.72100716e+00  1.72319834e+00
  1.72890776e+00  1.73949103e+00  1.74337318e+00  1.74909664e+00
  1.75123185e+00  1.75934002e+00  1.76531229e+00  1.77123969e+00
  1.77707799e+00  1.78551913e+00  1.79065116e+00  1.80289640e+00
  1.81107812e+00  1.81469306e+00  1.82773392e+00  1.82984816e+00
  1.83503560e+00  1.84432492e+00  1.84948240e+00  1.85253369e+00
  1.86787043e+00  1.88310802e+00  1.88582683e+00  1.89250148e+00
  1.90968102e+00  1.91616231e+00  1.92407032e+00  1.92659408e+00
  1.93063402e+00  1.93443395e+00  1.94206507e+00  1.95091860e+00
  1.95683493e+00  1.95981097e+00  1.96707434e+00  1.97553886e+00
  1.97947505e+00  1.98851751e+00  1.99875730e+00  2.00027762e+00
  2.00673793e+00  2.01322072e+00  2.01760034e+00  2.02371406e+00
  2.02528414e+00  2.02812684e+00  2.03028994e+00  2.03460216e+00
  2.04555796e+00  2.05129111e+00  2.05868566e+00  2.06007880e+00
  2.06174752e+00  2.07208914e+00  2.07307948e+00  2.08380094e+00
  2.08477558e+00  2.09010643e+00  2.09066197e+00  2.09712757e+00
  2.10340326e+00  2.11356955e+00  2.11792007e+00  2.12103257e+00
  2.12663087e+00  2.13819432e+00  2.14367086e+00  2.14463410e+00
  2.15331666e+00  2.16304741e+00  2.17239919e+00  2.17309386e+00
  2.17590745e+00  2.18477729e+00  2.19244550e+00  2.19874475e+00
  2.20260863e+00  2.20757238e+00  2.20869076e+00  2.21310544e+00
  2.22062260e+00  2.22803779e+00  2.23093897e+00  2.23706524e+00
  2.24337563e+00  2.25049626e+00  2.25513325e+00  2.26004280e+00
  2.26910501e+00  2.27582184e+00  2.28417048e+00  2.29188123e+00
  2.30346644e+00  2.31097272e+00  2.32086447e+00  2.32721884e+00
  2.33188229e+00  2.33836710e+00  2.34233460e+00  2.36009600e+00
  2.36094890e+00  2.37190549e+00  2.37630490e+00  2.39933194e+00
  2.40828470e+00  2.42121205e+00  2.42667186e+00  2.43613397e+00
  2.43974921e+00  2.45590078e+00  2.46246832e+00  2.46976878e+00
  2.47907555e+00  2.48823787e+00  2.49565320e+00  2.49953947e+00
  2.50217676e+00  2.51071544e+00  2.51201313e+00  2.52157974e+00
  2.52365179e+00  2.53100947e+00  2.54021810e+00  2.54361167e+00
  2.54669039e+00  2.55372200e+00  2.55777473e+00  2.56484401e+00
  2.57541395e+00  2.57766613e+00  2.58299450e+00  2.58871699e+00
  2.59329245e+00  2.60051127e+00  2.60330497e+00  2.61056759e+00
  2.61965722e+00  2.62151655e+00  2.62709179e+00  2.63241614e+00
  2.63467788e+00  2.63740056e+00  2.63943628e+00  2.64569030e+00
  2.64983032e+00  2.65087996e+00  2.65725446e+00  2.66089702e+00
  2.66265152e+00  2.66953225e+00  2.67432564e+00  2.67966859e+00
  2.68521283e+00  2.68797988e+00  2.69548457e+00  2.70111276e+00
  2.70999007e+00  2.71103854e+00  2.71668074e+00  2.72035464e+00
  2.72584595e+00  2.72803978e+00  2.73619468e+00  2.73985126e+00
  2.74652444e+00  2.74970445e+00  2.76276978e+00  2.76651206e+00
  2.77566785e+00  2.77911672e+00  2.78424321e+00  2.78692587e+00
  2.79306088e+00  2.79784513e+00  2.80686123e+00  2.80934628e+00
  2.81381248e+00  2.81769321e+00  2.82330956e+00  2.82403187e+00
  2.82763337e+00  2.83245588e+00  2.83692230e+00  2.84248486e+00
  2.84873544e+00  2.85786175e+00  2.85985972e+00  2.86425479e+00
  2.87011662e+00  2.87126747e+00  2.87290355e+00  2.87604646e+00
  2.88301331e+00  2.88770423e+00  2.89185244e+00  2.89732960e+00
  2.90384801e+00  2.91080037e+00  2.91182875e+00  2.91636981e+00
  2.92103722e+00  2.92809560e+00  2.92917702e+00  2.93417681e+00
  2.94252239e+00  2.94712959e+00  2.95408112e+00  2.95748719e+00
  2.95948106e+00  2.96688682e+00  2.97034593e+00  2.97359517e+00
  2.97675123e+00  2.97947008e+00  2.98515185e+00  2.98824259e+00
  2.99809591e+00  3.00195563e+00  3.00687169e+00  3.01125358e+00
  3.01193961e+00  3.02827476e+00  3.03385503e+00  3.03850749e+00
  3.04235136e+00  3.04582831e+00  3.04901790e+00  3.05097604e+00
  3.05742799e+00  3.06533878e+00  3.06903826e+00  3.07670471e+00
  3.07738013e+00  3.09260315e+00  3.10077822e+00  3.10565404e+00
  3.10755415e+00  3.11663739e+00  3.12004037e+00  3.12125147e+00
  3.12688989e+00  3.13295477e+00  3.13476818e+00  3.13770658e+00
  3.14296707e+00  3.14582034e+00  3.14995539e+00  3.15301400e+00
  3.15674322e+00  3.16038777e+00  3.16583111e+00  3.16823108e+00
  3.17165763e+00  3.17508189e+00  3.18307318e+00  3.18757808e+00
  3.19283426e+00  3.19712790e+00  3.20092566e+00  3.20963048e+00
  3.21431762e+00  3.21690913e+00  3.22119163e+00  3.22493960e+00
  3.22718858e+00  3.23355417e+00  3.24269974e+00  3.24564794e+00
  3.25604564e+00  3.25964146e+00  3.26339565e+00  3.26583549e+00
  3.27214506e+00  3.27741121e+00  3.28117847e+00  3.28481049e+00
  3.28698452e+00  3.30238556e+00  3.30341161e+00  3.30905138e+00
  3.31208861e+00  3.32078206e+00  3.32535847e+00  3.33092173e+00
  3.33459290e+00  3.34061321e+00  3.34828624e+00  3.34914641e+00
  3.35514664e+00  3.35754633e+00  3.36346263e+00  3.36993431e+00
  3.38073811e+00  3.38093160e+00  3.38626915e+00  3.39064332e+00
  3.39638773e+00  3.39988642e+00  3.40263044e+00  3.40477216e+00
  3.41473334e+00  3.42077103e+00  3.42585156e+00  3.42977342e+00
  3.43618122e+00  3.44263039e+00  3.44414418e+00  3.45376141e+00
  3.45524912e+00  3.45869913e+00  3.46297491e+00  3.46716170e+00
  3.46903357e+00  3.47088906e+00  3.47283248e+00  3.47778309e+00
  3.48005236e+00  3.48041431e+00  3.48849675e+00  3.49275525e+00
  3.49417811e+00  3.49725260e+00  3.49887351e+00  3.50701757e+00
  3.51174388e+00  3.51244333e+00  3.51828834e+00  3.52313766e+00
  3.52619122e+00  3.53469229e+00  3.54066368e+00  3.54427407e+00
  3.54629779e+00  3.55330152e+00  3.56640797e+00  3.57709046e+00
  3.58042336e+00  3.59210968e+00  3.59532348e+00  3.60223289e+00
  3.60749262e+00  3.61364337e+00  3.61843171e+00  3.62640945e+00
  3.63463989e+00  3.63765628e+00  3.64493968e+00  3.64795712e+00
  3.66776081e+00  3.67003863e+00  3.67250017e+00  3.67884893e+00
  3.68320416e+00  3.69022514e+00  3.69493224e+00  3.70601336e+00
  3.71434408e+00  3.72149110e+00  3.73557811e+00  3.74206510e+00
  3.74463349e+00  3.75990385e+00  3.76416721e+00  3.77261374e+00
  3.78330329e+00  3.79352958e+00  3.80461705e+00  3.81159183e+00
  3.81901556e+00  3.82494386e+00  3.83708584e+00  3.85432277e+00
  3.86153284e+00  3.86989221e+00  3.87329083e+00  3.87483494e+00
  3.88448387e+00  3.89095042e+00  3.89962054e+00  3.91463236e+00
  3.92264022e+00  3.92946570e+00  3.94003112e+00  3.94828071e+00
  3.95657450e+00  3.95847602e+00  3.96519082e+00  3.98440660e+00
  4.00203114e+00  4.00877543e+00  4.01896910e+00  4.03053146e+00
  4.04360839e+00  4.05156612e+00  4.05528490e+00  4.06388728e+00
  4.06483196e+00  4.07385849e+00  4.08024470e+00  4.08674923e+00
  4.09473435e+00  4.10254195e+00  4.10829623e+00  4.11196639e+00
  4.12023400e+00  4.12157058e+00  4.13536981e+00  4.14178731e+00
  4.14421365e+00  4.15300678e+00  4.15504800e+00  4.16283736e+00
  4.16441088e+00  4.16713233e+00  4.17157163e+00  4.17468373e+00
  4.17704905e+00  4.18157426e+00  4.19277560e+00  4.19756183e+00
  4.20222986e+00  4.20745762e+00  4.21131689e+00  4.22022386e+00
  4.22169504e+00  4.22626318e+00  4.24071510e+00  4.24567159e+00
  4.25327536e+00  4.25631149e+00  4.26141566e+00  4.26840034e+00
  4.27247613e+00  4.27643554e+00  4.27982911e+00  4.29149164e+00
  4.29667920e+00  4.31341625e+00  4.32022478e+00  4.32688320e+00
  4.33982833e+00  4.34671580e+00  4.35636268e+00  4.36043405e+00
  4.36994477e+00  4.37760666e+00  4.39452927e+00  4.40105493e+00
  4.40878794e+00  4.41271929e+00  4.42024635e+00  4.43939849e+00
  4.44893486e+00  4.46330458e+00  4.49304177e+00  4.52661906e+00
  4.53788482e+00  4.54962364e+00  4.56063852e+00  4.56449543e+00
  4.57334777e+00  4.58715711e+00  4.59474688e+00  4.60370712e+00
  4.62425920e+00  4.62833411e+00  4.65075037e+00  4.66933000e+00
  4.68197868e+00  4.71932296e+00  4.73687314e+00  4.74965099e+00
  4.76223994e+00  4.77081868e+00  4.77999309e+00  4.79114238e+00
  4.79748254e+00  4.80381597e+00  4.81075568e+00  4.82042673e+00
  4.82851391e+00  4.84307465e+00  4.84767652e+00  4.86549781e+00
  4.87799805e+00  4.88732513e+00  4.89398126e+00  4.90306472e+00
  4.92209272e+00  4.93888105e+00  4.94467330e+00  4.95525312e+00
  4.97925776e+00  4.99052624e+00  5.01212603e+00  5.01963907e+00
  5.03288698e+00  5.04558511e+00  5.08125681e+00  5.08886694e+00
  5.11804447e+00  5.12632796e+00  5.14596474e+00  5.15496617e+00
  5.16770570e+00  5.18218181e+00  5.19900839e+00  5.22569427e+00
  5.23298091e+00  5.25693077e+00  5.29422687e+00  5.32886354e+00
  5.33929732e+00  5.36300411e+00  5.38740824e+00  5.39787936e+00
  5.40608752e+00  5.41811997e+00  5.43747504e+00  5.45346066e+00
  5.46014878e+00  5.46582172e+00  5.48607014e+00  5.55479714e+00
  5.56901372e+00  5.58040713e+00  5.62032298e+00  5.62194268e+00
  5.70006778e+00  5.70149573e+00  5.70968962e+00  5.74773602e+00
  5.82636186e+00  5.85427901e+00  5.86584231e+00  5.87120026e+00
  6.02522171e+00  6.26491478e+00  6.34416665e+00  6.85597256e+00
  6.85778918e+00  6.86164223e+00  6.86315731e+00  6.86566020e+00
  6.86712705e+00  6.86898895e+00  6.87005698e+00  6.87220074e+00
  6.87276723e+00  6.87395846e+00  6.87663808e+00  6.87800403e+00
  6.87875565e+00  6.87987279e+00  6.88477681e+00  6.89096151e+00
  6.89163218e+00  6.89399936e+00  6.90153986e+00  6.91880035e+00
  6.92031157e+00  6.94233146e+00  6.94326749e+00  6.96042803e+00
  6.96217767e+00  6.97523532e+00  6.97701109e+00  7.00415846e+00
  7.00694993e+00  7.02482982e+00  7.03122512e+00  7.05496143e+00
  7.05690788e+00  7.06722342e+00  7.06992470e+00  7.10884506e+00
  7.11121555e+00  7.14505015e+00  7.14669116e+00  7.16409324e+00
  7.16731805e+00  7.16925626e+00  7.18850692e+00  7.19301514e+00
  7.22643301e+00  7.22868518e+00  7.26149135e+00  7.26266451e+00
  7.27232903e+00  7.27460097e+00  7.27512754e+00  7.27547569e+00
  7.34074973e+00  7.34158004e+00  7.37401350e+00  7.37810559e+00
  7.39464408e+00  7.39688566e+00  7.42340785e+00  7.42586155e+00
  7.47612753e+00  7.47935173e+00  7.57374599e+00  7.57641842e+00
  7.61702339e+00  7.61969679e+00  7.69930602e+00  7.70183084e+00
  7.97441577e+00  7.97859609e+00  8.31714514e+00  8.31949585e+00
  8.34623406e+00  8.34919273e+00  8.38351715e+00  8.38756229e+00
  8.40014758e+00  8.43076574e+00  8.44199995e+00  8.46606368e+00
  8.47483142e+00  8.48039330e+00  8.55008130e+00  8.55140471e+00
  8.58563077e+00  8.59502682e+00  8.60142789e+00  8.60586437e+00
  8.69398878e+00  8.69618331e+00  8.72790468e+00  8.73011210e+00
  8.73592418e+00  8.74397881e+00  8.77084047e+00  8.77430682e+00
  8.80319846e+00  8.80561561e+00  8.81005764e+00  8.81344641e+00
  8.86209299e+00  8.86681170e+00  8.89930653e+00  8.90206091e+00
  8.94425659e+00  8.94963189e+00  8.95750583e+00  8.96024959e+00
  9.04966123e+00  9.05394986e+00  9.05499716e+00  9.05898815e+00
  9.08767645e+00  9.08919609e+00  9.09620712e+00  9.11321356e+00
  9.14179225e+00  9.15133401e+00  9.33501828e+00  9.34560553e+00
  1.57466477e+01  2.22411696e+01  2.23740841e+01  2.24079366e+01
  2.24701621e+01  2.26072553e+01  2.26186007e+01  2.26455074e+01
  2.26750361e+01  2.27880454e+01  2.28634832e+01  2.28930937e+01
  2.29027154e+01  2.29175453e+01  2.29239231e+01  2.29311123e+01
  2.30330521e+01  2.30401046e+01  2.30672799e+01  2.30982684e+01
  2.31721070e+01  2.32529711e+01  2.34912890e+01  2.35834022e+01
  2.36550247e+01  3.25236516e+01  3.30914249e+01  5.72386021e+01
  5.72509601e+01  5.74263566e+01  5.74324457e+01  5.75114790e+01
  5.75219924e+01  5.76582486e+01  5.76771682e+01  5.76907899e+01
  5.77338431e+01]
nelec by numeric integration = 261.9999408732496
    CPU time for vxc    171.36 sec, wall time     12.64 sec
    CPU time for df vj and vk    657.03 sec, wall time     50.03 sec
E1 = -11347.492299516349  Ecoul = 5269.301512372267  Exc = -253.97622552609153
cycle= 3 E= -2051.32563914607  delta_E= -7.25e-10  |g|= 6.22e-06  |ddm|= 7.6e-05
    CPU time for cycle= 3    835.04 sec, wall time     63.58 sec
  HOMO = -0.263834545498299  LUMO = -0.131610365638952
  mo_energy =
[-2.48140912e+01 -2.48119885e+01 -2.48094912e+01 -2.48094046e+01
 -2.48081733e+01 -2.48080794e+01 -2.48066459e+01 -2.48041825e+01
 -2.48038128e+01 -2.48035072e+01 -1.45105316e+01 -1.44817350e+01
 -1.03490304e+01 -1.03465726e+01 -1.03426109e+01 -1.03423186e+01
 -1.03419977e+01 -1.03412746e+01 -1.03412563e+01 -1.03409988e+01
 -1.03407182e+01 -1.03388899e+01 -1.03015272e+01 -1.02843039e+01
 -1.02653923e+01 -1.02636831e+01 -1.02622439e+01 -1.02612938e+01
 -1.02602911e+01 -1.02590186e+01 -1.02587666e+01 -1.02580218e+01
 -1.02576751e+01 -1.02573497e+01 -1.02531578e+01 -1.02478664e+01
 -6.79769202e+00 -1.29911307e+00 -1.29715703e+00 -1.29085409e+00
 -1.28903184e+00 -1.28532175e+00 -1.28307789e+00 -1.27644022e+00
 -1.27452855e+00 -1.27398423e+00 -1.27253155e+00 -1.12090147e+00
 -9.31872960e-01 -9.20843839e-01 -9.19426687e-01 -8.99831054e-01
 -8.58796011e-01 -8.16892941e-01 -8.03745816e-01 -8.00049174e-01
 -7.99156608e-01 -7.98488272e-01 -7.95864365e-01 -7.82983000e-01
 -7.43153404e-01 -6.99530509e-01 -6.87789147e-01 -6.83569643e-01
 -6.82563236e-01 -6.71814826e-01 -6.65890284e-01 -6.42340208e-01
 -6.20892543e-01 -6.17340574e-01 -6.15726788e-01 -6.08980467e-01
 -6.07031831e-01 -6.02160682e-01 -5.97312571e-01 -5.85358169e-01
 -5.70930088e-01 -5.64987856e-01 -5.63542381e-01 -5.60224408e-01
 -5.58576073e-01 -5.46255463e-01 -5.43868428e-01 -5.36778275e-01
 -5.35782059e-01 -5.31915968e-01 -5.20240039e-01 -5.19501723e-01
 -5.14993713e-01 -5.10651253e-01 -5.07459792e-01 -5.03740955e-01
 -4.99844467e-01 -4.92539987e-01 -4.87726959e-01 -4.86677364e-01
 -4.86269986e-01 -4.83622805e-01 -4.77487619e-01 -4.68428012e-01
 -4.66591945e-01 -4.63638388e-01 -4.63383004e-01 -4.61352637e-01
 -4.60773419e-01 -4.56190652e-01 -4.52675251e-01 -4.36854459e-01
 -4.33881536e-01 -4.31926108e-01 -4.18785503e-01 -4.11145547e-01
 -4.03855783e-01 -4.02080392e-01 -4.00927677e-01 -3.96540666e-01
 -3.90997472e-01 -3.85857120e-01 -3.79748300e-01 -3.73840352e-01
 -3.66819180e-01 -3.45550733e-01 -3.34611484e-01 -3.18036463e-01
 -2.95431753e-01 -2.90089073e-01 -2.76512018e-01 -2.71157331e-01
 -2.70176190e-01 -2.66463652e-01 -2.63834545e-01 -1.31610366e-01
 -4.27143918e-02 -3.77804162e-02 -3.01398994e-02 -2.57950852e-02
 -1.95725261e-02 -1.57408874e-02 -1.38788042e-02 -6.53277854e-03
  2.32018064e-03  7.79004382e-03  4.47168233e-02  4.83046861e-02
  6.11772182e-02  6.87883937e-02  7.34303840e-02  7.68657304e-02
  8.48812683e-02  9.12722570e-02  9.46755038e-02  1.01121687e-01
  1.05724095e-01  1.14004807e-01  1.15969044e-01  1.20963612e-01
  1.23300106e-01  1.25512158e-01  1.29330252e-01  1.33348018e-01
  1.38712452e-01  1.47633070e-01  1.57627896e-01  1.66367509e-01
  1.69020611e-01  1.70889291e-01  1.78779514e-01  1.79784375e-01
  1.82247545e-01  1.84678251e-01  1.87037551e-01  1.89728822e-01
  1.92239832e-01  1.93633179e-01  1.96654987e-01  2.04966720e-01
  2.06754401e-01  2.07841170e-01  2.12315265e-01  2.12739784e-01
  2.18517312e-01  2.24461604e-01  2.25316058e-01  2.26799856e-01
  2.34093699e-01  2.36526576e-01  2.42079854e-01  2.46502529e-01
  2.50446611e-01  2.52355745e-01  2.61619340e-01  2.64518059e-01
  2.65752627e-01  2.72724961e-01  2.73546520e-01  2.77109104e-01
  2.82419269e-01  2.83749973e-01  2.85198565e-01  2.87735649e-01
  2.89359092e-01  2.91954068e-01  2.96137966e-01  2.99741733e-01
  3.03363959e-01  3.12135923e-01  3.13465345e-01  3.17601265e-01
  3.20185583e-01  3.28510656e-01  3.30467678e-01  3.33825787e-01
  3.37547166e-01  3.40002279e-01  3.44488296e-01  3.45840601e-01
  3.51481763e-01  3.53680592e-01  3.55810282e-01  3.58213909e-01
  3.62761836e-01  3.65087029e-01  3.68782635e-01  3.75260511e-01
  3.77106091e-01  3.80337183e-01  3.85142187e-01  3.86353496e-01
  3.89501062e-01  3.91820029e-01  3.98492043e-01  3.99227776e-01
  4.03332440e-01  4.05877554e-01  4.07121667e-01  4.10383307e-01
  4.13146974e-01  4.15322100e-01  4.17311994e-01  4.19412943e-01
  4.23267415e-01  4.26478409e-01  4.30592680e-01  4.31007755e-01
  4.34348347e-01  4.36532420e-01  4.37814822e-01  4.40209004e-01
  4.44476784e-01  4.47145865e-01  4.49812746e-01  4.56102760e-01
  4.58190345e-01  4.63024126e-01  4.65866655e-01  4.68597223e-01
  4.70971322e-01  4.74939223e-01  4.79317271e-01  4.82015879e-01
  4.83433636e-01  4.84670873e-01  4.90015648e-01  4.92646415e-01
  4.96894400e-01  5.02219377e-01  5.06886334e-01  5.10834076e-01
  5.16000395e-01  5.22378407e-01  5.24456169e-01  5.29988748e-01
  5.37167447e-01  5.42277585e-01  5.54884109e-01  5.58669362e-01
  5.65941604e-01  5.67950048e-01  5.74361058e-01  5.80910442e-01
  5.90900619e-01  5.92514190e-01  6.00393666e-01  6.08584955e-01
  6.12633545e-01  6.16086405e-01  6.20652332e-01  6.25719067e-01
  6.28365155e-01  6.34107067e-01  6.35823054e-01  6.37987048e-01
  6.40237952e-01  6.48183477e-01  6.51449416e-01  6.56443869e-01
  6.62426916e-01  6.63469404e-01  6.64670130e-01  6.68272549e-01
  6.72300259e-01  6.75283543e-01  6.76962766e-01  6.82819068e-01
  6.86738069e-01  6.92698103e-01  6.94254610e-01  6.96798020e-01
  7.06491543e-01  7.09098257e-01  7.12240750e-01  7.17177126e-01
  7.21054049e-01  7.22205053e-01  7.29532671e-01  7.32752442e-01
  7.36291568e-01  7.43896230e-01  7.47060525e-01  7.48849900e-01
  7.50557712e-01  7.58173974e-01  7.62548258e-01  7.65373834e-01
  7.68414499e-01  7.73020950e-01  7.80340785e-01  7.81150653e-01
  7.94112086e-01  7.98016176e-01  8.01244873e-01  8.02618777e-01
  8.04167407e-01  8.07814165e-01  8.13826814e-01  8.20123377e-01
  8.20825139e-01  8.28105255e-01  8.31404465e-01  8.37470682e-01
  8.39382226e-01  8.44664948e-01  8.51698997e-01  8.52945532e-01
  8.61056757e-01  8.68132179e-01  8.70516921e-01  8.75512202e-01
  8.82375761e-01  8.84110854e-01  8.86284379e-01  8.91746595e-01
  8.93866126e-01  8.98063367e-01  9.06223201e-01  9.09628491e-01
  9.12488811e-01  9.23261362e-01  9.26692431e-01  9.29018676e-01
  9.33369614e-01  9.35586899e-01  9.41901898e-01  9.48338670e-01
  9.48644065e-01  9.56738782e-01  9.58725108e-01  9.63813691e-01
  9.70727325e-01  9.72028144e-01  9.80686086e-01  9.84413839e-01
  9.87988792e-01  9.92246491e-01  9.93424569e-01  9.95932453e-01
  1.00274265e+00  1.00841641e+00  1.01664467e+00  1.02200420e+00
  1.03197019e+00  1.03736126e+00  1.04257699e+00  1.04464984e+00
  1.05177583e+00  1.06070317e+00  1.06382372e+00  1.06932610e+00
  1.07159504e+00  1.07912860e+00  1.08364230e+00  1.08944664e+00
  1.09934832e+00  1.10383303e+00  1.10539928e+00  1.10887835e+00
  1.11231345e+00  1.11602024e+00  1.11907055e+00  1.12493840e+00
  1.13003455e+00  1.13391224e+00  1.14158594e+00  1.14673739e+00
  1.15898409e+00  1.16480632e+00  1.16759551e+00  1.17482190e+00
  1.17814724e+00  1.18570356e+00  1.19010281e+00  1.19399274e+00
  1.19750971e+00  1.20156135e+00  1.20534701e+00  1.21096726e+00
  1.22143917e+00  1.22388041e+00  1.22765181e+00  1.23031213e+00
  1.23419471e+00  1.23756328e+00  1.24767054e+00  1.25101415e+00
  1.25399588e+00  1.25910034e+00  1.26417030e+00  1.26823864e+00
  1.27542496e+00  1.28198495e+00  1.28878676e+00  1.30226536e+00
  1.31122574e+00  1.31152122e+00  1.31598332e+00  1.32478247e+00
  1.32869323e+00  1.33515356e+00  1.33578773e+00  1.34582245e+00
  1.35560934e+00  1.36600234e+00  1.36825557e+00  1.37503887e+00
  1.38273003e+00  1.39165549e+00  1.39728169e+00  1.40187563e+00
  1.40690256e+00  1.41869375e+00  1.42127741e+00  1.42910456e+00
  1.43062738e+00  1.43589981e+00  1.43696159e+00  1.44378280e+00
  1.44596879e+00  1.45237312e+00  1.45469572e+00  1.46115554e+00
  1.46503659e+00  1.47037661e+00  1.47805817e+00  1.48004994e+00
  1.48929551e+00  1.49055579e+00  1.50158890e+00  1.50530457e+00
  1.50853602e+00  1.52036238e+00  1.52204215e+00  1.52937217e+00
  1.53765572e+00  1.54176853e+00  1.54492948e+00  1.55290667e+00
  1.56497791e+00  1.57395653e+00  1.57948785e+00  1.58484681e+00
  1.58941997e+00  1.60033487e+00  1.60637650e+00  1.61101806e+00
  1.61900940e+00  1.62159211e+00  1.63025573e+00  1.63127726e+00
  1.64368053e+00  1.64932373e+00  1.65676456e+00  1.66543063e+00
  1.66782389e+00  1.67312137e+00  1.67970320e+00  1.68071498e+00
  1.68640912e+00  1.68937842e+00  1.69572947e+00  1.70570381e+00
  1.71117353e+00  1.71779373e+00  1.72100722e+00  1.72319845e+00
  1.72890777e+00  1.73949110e+00  1.74337326e+00  1.74909676e+00
  1.75123192e+00  1.75934014e+00  1.76531237e+00  1.77123979e+00
  1.77707809e+00  1.78551923e+00  1.79065119e+00  1.80289647e+00
  1.81107820e+00  1.81469321e+00  1.82773391e+00  1.82984830e+00
  1.83503565e+00  1.84432507e+00  1.84948256e+00  1.85253381e+00
  1.86787059e+00  1.88310813e+00  1.88582697e+00  1.89250162e+00
  1.90968115e+00  1.91616243e+00  1.92407040e+00  1.92659422e+00
  1.93063421e+00  1.93443408e+00  1.94206518e+00  1.95091874e+00
  1.95683500e+00  1.95981106e+00  1.96707450e+00  1.97553897e+00
  1.97947510e+00  1.98851761e+00  1.99875737e+00  2.00027771e+00
  2.00673799e+00  2.01322081e+00  2.01760045e+00  2.02371411e+00
  2.02528424e+00  2.02812692e+00  2.03028996e+00  2.03460227e+00
  2.04555800e+00  2.05129122e+00  2.05868572e+00  2.06007891e+00
  2.06174758e+00  2.07208924e+00  2.07307959e+00  2.08380102e+00
  2.08477566e+00  2.09010654e+00  2.09066203e+00  2.09712765e+00
  2.10340338e+00  2.11356966e+00  2.11792018e+00  2.12103266e+00
  2.12663092e+00  2.13819444e+00  2.14367100e+00  2.14463425e+00
  2.15331679e+00  2.16304753e+00  2.17239931e+00  2.17309397e+00
  2.17590756e+00  2.18477740e+00  2.19244560e+00  2.19874487e+00
  2.20260868e+00  2.20757248e+00  2.20869089e+00  2.21310556e+00
  2.22062267e+00  2.22803793e+00  2.23093907e+00  2.23706533e+00
  2.24337572e+00  2.25049635e+00  2.25513342e+00  2.26004292e+00
  2.26910509e+00  2.27582197e+00  2.28417058e+00  2.29188132e+00
  2.30346659e+00  2.31097284e+00  2.32086461e+00  2.32721899e+00
  2.33188238e+00  2.33836719e+00  2.34233467e+00  2.36009610e+00
  2.36094904e+00  2.37190559e+00  2.37630504e+00  2.39933207e+00
  2.40828485e+00  2.42121216e+00  2.42667202e+00  2.43613405e+00
  2.43974932e+00  2.45590087e+00  2.46246830e+00  2.46976888e+00
  2.47907561e+00  2.48823795e+00  2.49565328e+00  2.49953952e+00
  2.50217677e+00  2.51071555e+00  2.51201320e+00  2.52157983e+00
  2.52365189e+00  2.53100956e+00  2.54021819e+00  2.54361175e+00
  2.54669050e+00  2.55372212e+00  2.55777479e+00  2.56484403e+00
  2.57541405e+00  2.57766624e+00  2.58299456e+00  2.58871707e+00
  2.59329253e+00  2.60051136e+00  2.60330505e+00  2.61056765e+00
  2.61965728e+00  2.62151664e+00  2.62709185e+00  2.63241613e+00
  2.63467794e+00  2.63740061e+00  2.63943638e+00  2.64569037e+00
  2.64983039e+00  2.65087999e+00  2.65725452e+00  2.66089707e+00
  2.66265161e+00  2.66953233e+00  2.67432569e+00  2.67966867e+00
  2.68521297e+00  2.68797995e+00  2.69548466e+00  2.70111286e+00
  2.70999014e+00  2.71103861e+00  2.71668086e+00  2.72035475e+00
  2.72584598e+00  2.72803983e+00  2.73619480e+00  2.73985136e+00
  2.74652447e+00  2.74970456e+00  2.76276988e+00  2.76651217e+00
  2.77566791e+00  2.77911678e+00  2.78424331e+00  2.78692601e+00
  2.79306093e+00  2.79784522e+00  2.80686135e+00  2.80934636e+00
  2.81381255e+00  2.81769326e+00  2.82330961e+00  2.82403194e+00
  2.82763343e+00  2.83245598e+00  2.83692239e+00  2.84248495e+00
  2.84873547e+00  2.85786182e+00  2.85985978e+00  2.86425485e+00
  2.87011669e+00  2.87126754e+00  2.87290361e+00  2.87604655e+00
  2.88301340e+00  2.88770430e+00  2.89185249e+00  2.89732968e+00
  2.90384812e+00  2.91080042e+00  2.91182891e+00  2.91636991e+00
  2.92103726e+00  2.92809570e+00  2.92917711e+00  2.93417693e+00
  2.94252250e+00  2.94712966e+00  2.95408122e+00  2.95748731e+00
  2.95948115e+00  2.96688691e+00  2.97034599e+00  2.97359523e+00
  2.97675129e+00  2.97947021e+00  2.98515193e+00  2.98824269e+00
  2.99809603e+00  3.00195569e+00  3.00687178e+00  3.01125364e+00
  3.01193973e+00  3.02827486e+00  3.03385510e+00  3.03850755e+00
  3.04235146e+00  3.04582837e+00  3.04901800e+00  3.05097609e+00
  3.05742806e+00  3.06533883e+00  3.06903834e+00  3.07670479e+00
  3.07738018e+00  3.09260323e+00  3.10077829e+00  3.10565407e+00
  3.10755423e+00  3.11663751e+00  3.12004046e+00  3.12125149e+00
  3.12688995e+00  3.13295486e+00  3.13476829e+00  3.13770667e+00
  3.14296715e+00  3.14582038e+00  3.14995549e+00  3.15301407e+00
  3.15674332e+00  3.16038784e+00  3.16583120e+00  3.16823121e+00
  3.17165770e+00  3.17508198e+00  3.18307325e+00  3.18757817e+00
  3.19283432e+00  3.19712798e+00  3.20092575e+00  3.20963053e+00
  3.21431769e+00  3.21690915e+00  3.22119176e+00  3.22493967e+00
  3.22718864e+00  3.23355427e+00  3.24269983e+00  3.24564803e+00
  3.25604572e+00  3.25964151e+00  3.26339577e+00  3.26583553e+00
  3.27214517e+00  3.27741132e+00  3.28117850e+00  3.28481060e+00
  3.28698461e+00  3.30238567e+00  3.30341166e+00  3.30905149e+00
  3.31208870e+00  3.32078208e+00  3.32535854e+00  3.33092184e+00
  3.33459298e+00  3.34061332e+00  3.34828631e+00  3.34914653e+00
  3.35514672e+00  3.35754649e+00  3.36346274e+00  3.36993444e+00
  3.38073824e+00  3.38093171e+00  3.38626929e+00  3.39064339e+00
  3.39638783e+00  3.39988650e+00  3.40263061e+00  3.40477221e+00
  3.41473349e+00  3.42077117e+00  3.42585160e+00  3.42977345e+00
  3.43618130e+00  3.44263048e+00  3.44414427e+00  3.45376145e+00
  3.45524921e+00  3.45869922e+00  3.46297499e+00  3.46716179e+00
  3.46903362e+00  3.47088916e+00  3.47283259e+00  3.47778320e+00
  3.48005241e+00  3.48041439e+00  3.48849680e+00  3.49275535e+00
  3.49417815e+00  3.49725267e+00  3.49887358e+00  3.50701764e+00
  3.51174394e+00  3.51244343e+00  3.51828846e+00  3.52313776e+00
  3.52619134e+00  3.53469238e+00  3.54066377e+00  3.54427416e+00
  3.54629789e+00  3.55330161e+00  3.56640801e+00  3.57709053e+00
  3.58042345e+00  3.59210975e+00  3.59532361e+00  3.60223305e+00
  3.60749269e+00  3.61364347e+00  3.61843184e+00  3.62640958e+00
  3.63463998e+00  3.63765642e+00  3.64493975e+00  3.64795722e+00
  3.66776095e+00  3.67003870e+00  3.67250031e+00  3.67884906e+00
  3.68320426e+00  3.69022529e+00  3.69493232e+00  3.70601348e+00
  3.71434421e+00  3.72149121e+00  3.73557823e+00  3.74206519e+00
  3.74463362e+00  3.75990400e+00  3.76416731e+00  3.77261388e+00
  3.78330343e+00  3.79352966e+00  3.80461720e+00  3.81159192e+00
  3.81901571e+00  3.82494398e+00  3.83708589e+00  3.85432281e+00
  3.86153305e+00  3.86989225e+00  3.87329087e+00  3.87483497e+00
  3.88448394e+00  3.89095054e+00  3.89962061e+00  3.91463242e+00
  3.92264025e+00  3.92946577e+00  3.94003124e+00  3.94828079e+00
  3.95657459e+00  3.95847618e+00  3.96519096e+00  3.98440664e+00
  4.00203126e+00  4.00877547e+00  4.01896924e+00  4.03053159e+00
  4.04360854e+00  4.05156618e+00  4.05528497e+00  4.06388732e+00
  4.06483199e+00  4.07385849e+00  4.08024474e+00  4.08674928e+00
  4.09473442e+00  4.10254206e+00  4.10829631e+00  4.11196657e+00
  4.12023409e+00  4.12157065e+00  4.13536989e+00  4.14178745e+00
  4.14421372e+00  4.15300687e+00  4.15504813e+00  4.16283739e+00
  4.16441099e+00  4.16713243e+00  4.17157174e+00  4.17468383e+00
  4.17704919e+00  4.18157432e+00  4.19277569e+00  4.19756195e+00
  4.20222993e+00  4.20745774e+00  4.21131693e+00  4.22022394e+00
  4.22169514e+00  4.22626329e+00  4.24071516e+00  4.24567168e+00
  4.25327547e+00  4.25631153e+00  4.26141574e+00  4.26840049e+00
  4.27247622e+00  4.27643569e+00  4.27982918e+00  4.29149174e+00
  4.29667930e+00  4.31341640e+00  4.32022489e+00  4.32688338e+00
  4.33982845e+00  4.34671596e+00  4.35636281e+00  4.36043420e+00
  4.36994488e+00  4.37760680e+00  4.39452937e+00  4.40105501e+00
  4.40878808e+00  4.41271942e+00  4.42024645e+00  4.43939860e+00
  4.44893499e+00  4.46330474e+00  4.49304191e+00  4.52661925e+00
  4.53788501e+00  4.54962380e+00  4.56063869e+00  4.56449557e+00
  4.57334788e+00  4.58715728e+00  4.59474703e+00  4.60370732e+00
  4.62425933e+00  4.62833430e+00  4.65075050e+00  4.66933017e+00
  4.68197884e+00  4.71932313e+00  4.73687320e+00  4.74965106e+00
  4.76224000e+00  4.77081879e+00  4.77999317e+00  4.79114247e+00
  4.79748259e+00  4.80381606e+00  4.81075584e+00  4.82042684e+00
  4.82851403e+00  4.84307490e+00  4.84767668e+00  4.86549796e+00
  4.87799817e+00  4.88732524e+00  4.89398147e+00  4.90306485e+00
  4.92209293e+00  4.93888122e+00  4.94467355e+00  4.95525332e+00
  4.97925793e+00  4.99052640e+00  5.01212624e+00  5.01963930e+00
  5.03288722e+00  5.04558555e+00  5.08125704e+00  5.08886712e+00
  5.11804464e+00  5.12632829e+00  5.14596497e+00  5.15496636e+00
  5.16770578e+00  5.18218201e+00  5.19900868e+00  5.22569456e+00
  5.23298107e+00  5.25693134e+00  5.29422698e+00  5.32886364e+00
  5.33929738e+00  5.36300431e+00  5.38740838e+00  5.39787951e+00
  5.40608778e+00  5.41812012e+00  5.43747519e+00  5.45346089e+00
  5.46014888e+00  5.46582175e+00  5.48607045e+00  5.55479724e+00
  5.56901381e+00  5.58040729e+00  5.62032315e+00  5.62194281e+00
  5.70006810e+00  5.70149586e+00  5.70968981e+00  5.74773657e+00
  5.82636230e+00  5.85427937e+00  5.86584248e+00  5.87120039e+00
  6.02522219e+00  6.26491545e+00  6.34416718e+00  6.85597246e+00
  6.85778909e+00  6.86164215e+00  6.86315722e+00  6.86566019e+00
  6.86712698e+00  6.86898891e+00  6.87005689e+00  6.87220067e+00
  6.87276728e+00  6.87395839e+00  6.87663800e+00  6.87800394e+00
  6.87875570e+00  6.87987277e+00  6.88477690e+00  6.89096145e+00
  6.89163238e+00  6.89399938e+00  6.90154005e+00  6.91880028e+00
  6.92031150e+00  6.94233145e+00  6.94326751e+00  6.96042799e+00
  6.96217761e+00  6.97523535e+00  6.97701112e+00  7.00415846e+00
  7.00694994e+00  7.02482980e+00  7.03122509e+00  7.05496137e+00
  7.05690783e+00  7.06722343e+00  7.06992471e+00  7.10884509e+00
  7.11121559e+00  7.14505007e+00  7.14669109e+00  7.16409369e+00
  7.16731807e+00  7.16925637e+00  7.18850687e+00  7.19301518e+00
  7.22643304e+00  7.22868523e+00  7.26149132e+00  7.26266448e+00
  7.27232901e+00  7.27460095e+00  7.27512755e+00  7.27547567e+00
  7.34074974e+00  7.34158005e+00  7.37401353e+00  7.37810563e+00
  7.39464403e+00  7.39688561e+00  7.42340785e+00  7.42586155e+00
  7.47612751e+00  7.47935172e+00  7.57374604e+00  7.57641847e+00
  7.61702333e+00  7.61969674e+00  7.69930603e+00  7.70183085e+00
  7.97441573e+00  7.97859605e+00  8.31714501e+00  8.31949574e+00
  8.34623393e+00  8.34919260e+00  8.38351706e+00  8.38756222e+00
  8.40014763e+00  8.43076571e+00  8.44199997e+00  8.46606379e+00
  8.47483134e+00  8.48039321e+00  8.55008119e+00  8.55140459e+00
  8.58563086e+00  8.59502687e+00  8.60142778e+00  8.60586445e+00
  8.69398866e+00  8.69618322e+00  8.72790463e+00  8.73011207e+00
  8.73592412e+00  8.74397875e+00  8.77084046e+00  8.77430682e+00
  8.80319843e+00  8.80561552e+00  8.81005759e+00  8.81344635e+00
  8.86209291e+00  8.86681166e+00  8.89930645e+00  8.90206085e+00
  8.94425653e+00  8.94963179e+00  8.95750577e+00  8.96024950e+00
  9.04966114e+00  9.05394987e+00  9.05499715e+00  9.05898822e+00
  9.08767637e+00  9.08919603e+00  9.09620715e+00  9.11321357e+00
  9.14179226e+00  9.15133405e+00  9.33501821e+00  9.34560547e+00
  1.57466480e+01  2.22411697e+01  2.23740839e+01  2.24079367e+01
  2.24701621e+01  2.26072555e+01  2.26186007e+01  2.26455073e+01
  2.26750359e+01  2.27880455e+01  2.28634833e+01  2.28930937e+01
  2.29027155e+01  2.29175454e+01  2.29239231e+01  2.29311124e+01
  2.30330523e+01  2.30401046e+01  2.30672800e+01  2.30982687e+01
  2.31721071e+01  2.32529713e+01  2.34912889e+01  2.35834024e+01
  2.36550250e+01  3.25236523e+01  3.30914263e+01  5.72386019e+01
  5.72509600e+01  5.74263564e+01  5.74324455e+01  5.75114789e+01
  5.75219923e+01  5.76582483e+01  5.76771681e+01  5.76907900e+01
  5.77338432e+01]
nelec by numeric integration = 261.9999408732761
    CPU time for vxc    149.46 sec, wall time     10.19 sec
    CPU time for df vj and vk    660.20 sec, wall time     50.70 sec
E1 = -11347.492249609815  Ecoul = 5269.301463389204  Exc = -253.97622644957198
cycle= 4 E= -2051.32563914608  delta_E= -1e-11  |g|= 6.14e-07  |ddm|= 9.11e-06
    CPU time for cycle= 4    817.34 sec, wall time     67.18 sec
  HOMO = -0.263834543833115  LUMO = -0.131610378074682
  mo_energy =
[-2.48140912e+01 -2.48119885e+01 -2.48094913e+01 -2.48094047e+01
 -2.48081734e+01 -2.48080794e+01 -2.48066461e+01 -2.48041825e+01
 -2.48038129e+01 -2.48035074e+01 -1.45105315e+01 -1.44817351e+01
 -1.03490305e+01 -1.03465727e+01 -1.03426110e+01 -1.03423185e+01
 -1.03419978e+01 -1.03412746e+01 -1.03412562e+01 -1.03409988e+01
 -1.03407182e+01 -1.03388900e+01 -1.03015273e+01 -1.02843041e+01
 -1.02653921e+01 -1.02636828e+01 -1.02622438e+01 -1.02612938e+01
 -1.02602909e+01 -1.02590184e+01 -1.02587668e+01 -1.02580216e+01
 -1.02576753e+01 -1.02573496e+01 -1.02531577e+01 -1.02478664e+01
 -6.79769217e+00 -1.29911309e+00 -1.29715705e+00 -1.29085413e+00
 -1.28903187e+00 -1.28532178e+00 -1.28307792e+00 -1.27644028e+00
 -1.27452857e+00 -1.27398428e+00 -1.27253159e+00 -1.12090153e+00
 -9.31872981e-01 -9.20843877e-01 -9.19426732e-01 -8.99830991e-01
 -8.58795973e-01 -8.16892991e-01 -8.03745874e-01 -8.00049193e-01
 -7.99156574e-01 -7.98488307e-01 -7.95864328e-01 -7.82982965e-01
 -7.43153389e-01 -6.99530533e-01 -6.87789188e-01 -6.83569682e-01
 -6.82563277e-01 -6.71814833e-01 -6.65890271e-01 -6.42340178e-01
 -6.20892565e-01 -6.17340600e-01 -6.15726792e-01 -6.08980504e-01
 -6.07031873e-01 -6.02160706e-01 -5.97312604e-01 -5.85358181e-01
 -5.70930082e-01 -5.64987884e-01 -5.63542413e-01 -5.60224431e-01
 -5.58576107e-01 -5.46255495e-01 -5.43868456e-01 -5.36778321e-01
 -5.35782111e-01 -5.31915962e-01 -5.20240058e-01 -5.19501704e-01
 -5.14993740e-01 -5.10651284e-01 -5.07459828e-01 -5.03740979e-01
 -4.99844502e-01 -4.92540021e-01 -4.87726976e-01 -4.86677377e-01
 -4.86269994e-01 -4.83622821e-01 -4.77487604e-01 -4.68427999e-01
 -4.66591960e-01 -4.63638402e-01 -4.63383011e-01 -4.61352668e-01
 -4.60773420e-01 -4.56190657e-01 -4.52675305e-01 -4.36854464e-01
 -4.33881580e-01 -4.31926160e-01 -4.18785492e-01 -4.11145555e-01
 -4.03855813e-01 -4.02080376e-01 -4.00927677e-01 -3.96540626e-01
 -3.90997422e-01 -3.85857131e-01 -3.79748312e-01 -3.73840390e-01
 -3.66819249e-01 -3.45550778e-01 -3.34611527e-01 -3.18036432e-01
 -2.95431721e-01 -2.90089047e-01 -2.76512050e-01 -2.71157363e-01
 -2.70176221e-01 -2.66463683e-01 -2.63834544e-01 -1.31610378e-01
 -4.27143930e-02 -3.77804115e-02 -3.01399254e-02 -2.57950711e-02
 -1.95725519e-02 -1.57409150e-02 -1.38788355e-02 -6.53280818e-03
  2.32018132e-03  7.79003845e-03  4.47168351e-02  4.83047076e-02
  6.11771930e-02  6.87883767e-02  7.34303891e-02  7.68657199e-02
  8.48812772e-02  9.12722526e-02  9.46755009e-02  1.01121691e-01
  1.05724080e-01  1.14004772e-01  1.15969029e-01  1.20963599e-01
  1.23300107e-01  1.25512152e-01  1.29330228e-01  1.33348016e-01
  1.38712450e-01  1.47633043e-01  1.57627875e-01  1.66367486e-01
  1.69020608e-01  1.70889286e-01  1.78779497e-01  1.79784360e-01
  1.82247533e-01  1.84678236e-01  1.87037537e-01  1.89728804e-01
  1.92239823e-01  1.93633171e-01  1.96654965e-01  2.04966701e-01
  2.06754397e-01  2.07841160e-01  2.12315276e-01  2.12739797e-01
  2.18517315e-01  2.24461604e-01  2.25316053e-01  2.26799845e-01
  2.34093693e-01  2.36526573e-01  2.42079840e-01  2.46502514e-01
  2.50446605e-01  2.52355740e-01  2.61619334e-01  2.64518051e-01
  2.65752630e-01  2.72724962e-01  2.73546525e-01  2.77109090e-01
  2.82419258e-01  2.83749966e-01  2.85198546e-01  2.87735642e-01
  2.89359090e-01  2.91954035e-01  2.96137953e-01  2.99741721e-01
  3.03363944e-01  3.12135915e-01  3.13465335e-01  3.17601258e-01
  3.20185569e-01  3.28510658e-01  3.30467672e-01  3.33825777e-01
  3.37547155e-01  3.40002266e-01  3.44488285e-01  3.45840597e-01
  3.51481757e-01  3.53680584e-01  3.55810267e-01  3.58213906e-01
  3.62761826e-01  3.65087021e-01  3.68782627e-01  3.75260491e-01
  3.77106084e-01  3.80337173e-01  3.85142178e-01  3.86353473e-01
  3.89501053e-01  3.91820021e-01  3.98492037e-01  3.99227760e-01
  4.03332421e-01  4.05877530e-01  4.07121665e-01  4.10383288e-01
  4.13146958e-01  4.15322091e-01  4.17311985e-01  4.19412932e-01
  4.23267416e-01  4.26478396e-01  4.30592666e-01  4.31007749e-01
  4.34348339e-01  4.36532410e-01  4.37814814e-01  4.40208998e-01
  4.44476775e-01  4.47145856e-01  4.49812729e-01  4.56102749e-01
  4.58190336e-01  4.63024120e-01  4.65866653e-01  4.68597215e-01
  4.70971299e-01  4.74939210e-01  4.79317275e-01  4.82015871e-01
  4.83433625e-01  4.84670862e-01  4.90015644e-01  4.92646403e-01
  4.96894397e-01  5.02219368e-01  5.06886321e-01  5.10834068e-01
  5.16000387e-01  5.22378392e-01  5.24456152e-01  5.29988731e-01
  5.37167432e-01  5.42277564e-01  5.54884087e-01  5.58669348e-01
  5.65941594e-01  5.67950032e-01  5.74361042e-01  5.80910440e-01
  5.90900595e-01  5.92514173e-01  6.00393640e-01  6.08584938e-01
  6.12633528e-01  6.16086375e-01  6.20652319e-01  6.25719038e-01
  6.28365149e-01  6.34107046e-01  6.35823049e-01  6.37987034e-01
  6.40237943e-01  6.48183463e-01  6.51449395e-01  6.56443863e-01
  6.62426910e-01  6.63469391e-01  6.64670131e-01  6.68272538e-01
  6.72300258e-01  6.75283535e-01  6.76962758e-01  6.82819063e-01
  6.86738067e-01  6.92698085e-01  6.94254598e-01  6.96797998e-01
  7.06491533e-01  7.09098239e-01  7.12240736e-01  7.17177114e-01
  7.21054033e-01  7.22205043e-01  7.29532656e-01  7.32752440e-01
  7.36291575e-01  7.43896218e-01  7.47060519e-01  7.48849889e-01
  7.50557704e-01  7.58173986e-01  7.62548249e-01  7.65373820e-01
  7.68414492e-01  7.73020935e-01  7.80340777e-01  7.81150634e-01
  7.94112080e-01  7.98016161e-01  8.01244852e-01  8.02618778e-01
  8.04167378e-01  8.07814156e-01  8.13826792e-01  8.20123361e-01
  8.20825129e-01  8.28105237e-01  8.31404439e-01  8.37470662e-01
  8.39382205e-01  8.44664931e-01  8.51698988e-01  8.52945518e-01
  8.61056739e-01  8.68132167e-01  8.70516905e-01  8.75512193e-01
  8.82375755e-01  8.84110847e-01  8.86284371e-01  8.91746583e-01
  8.93866108e-01  8.98063348e-01  9.06223190e-01  9.09628481e-01
  9.12488799e-01  9.23261353e-01  9.26692417e-01  9.29018657e-01
  9.33369595e-01  9.35586897e-01  9.41901886e-01  9.48338650e-01
  9.48644062e-01  9.56738769e-01  9.58725096e-01  9.63813671e-01
  9.70727316e-01  9.72028125e-01  9.80686073e-01  9.84413836e-01
  9.87988788e-01  9.92246475e-01  9.93424554e-01  9.95932448e-01
  1.00274266e+00  1.00841639e+00  1.01664466e+00  1.02200418e+00
  1.03197017e+00  1.03736125e+00  1.04257698e+00  1.04464983e+00
  1.05177580e+00  1.06070315e+00  1.06382373e+00  1.06932610e+00
  1.07159501e+00  1.07912859e+00  1.08364229e+00  1.08944665e+00
  1.09934832e+00  1.10383304e+00  1.10539927e+00  1.10887833e+00
  1.11231344e+00  1.11602022e+00  1.11907053e+00  1.12493841e+00
  1.13003454e+00  1.13391221e+00  1.14158591e+00  1.14673738e+00
  1.15898407e+00  1.16480631e+00  1.16759548e+00  1.17482189e+00
  1.17814724e+00  1.18570354e+00  1.19010279e+00  1.19399272e+00
  1.19750971e+00  1.20156134e+00  1.20534700e+00  1.21096726e+00
  1.22143917e+00  1.22388041e+00  1.22765180e+00  1.23031211e+00
  1.23419470e+00  1.23756328e+00  1.24767053e+00  1.25101414e+00
  1.25399586e+00  1.25910036e+00  1.26417029e+00  1.26823863e+00
  1.27542493e+00  1.28198494e+00  1.28878674e+00  1.30226534e+00
  1.31122575e+00  1.31152120e+00  1.31598332e+00  1.32478245e+00
  1.32869321e+00  1.33515355e+00  1.33578771e+00  1.34582244e+00
  1.35560933e+00  1.36600232e+00  1.36825555e+00  1.37503885e+00
  1.38273001e+00  1.39165546e+00  1.39728169e+00  1.40187562e+00
  1.40690252e+00  1.41869373e+00  1.42127741e+00  1.42910457e+00
  1.43062734e+00  1.43589979e+00  1.43696157e+00  1.44378278e+00
  1.44596879e+00  1.45237313e+00  1.45469570e+00  1.46115556e+00
  1.46503657e+00  1.47037659e+00  1.47805816e+00  1.48004992e+00
  1.48929550e+00  1.49055577e+00  1.50158890e+00  1.50530455e+00
  1.50853601e+00  1.52036236e+00  1.52204216e+00  1.52937217e+00
  1.53765572e+00  1.54176851e+00  1.54492946e+00  1.55290665e+00
  1.56497791e+00  1.57395653e+00  1.57948784e+00  1.58484679e+00
  1.58941998e+00  1.60033487e+00  1.60637650e+00  1.61101805e+00
  1.61900938e+00  1.62159209e+00  1.63025572e+00  1.63127725e+00
  1.64368050e+00  1.64932372e+00  1.65676457e+00  1.66543063e+00
  1.66782387e+00  1.67312136e+00  1.67970320e+00  1.68071499e+00
  1.68640912e+00  1.68937841e+00  1.69572947e+00  1.70570382e+00
  1.71117354e+00  1.71779373e+00  1.72100721e+00  1.72319844e+00
  1.72890776e+00  1.73949109e+00  1.74337325e+00  1.74909675e+00
  1.75123190e+00  1.75934013e+00  1.76531236e+00  1.77123978e+00
  1.77707806e+00  1.78551922e+00  1.79065117e+00  1.80289646e+00
  1.81107819e+00  1.81469318e+00  1.82773391e+00  1.82984828e+00
  1.83503564e+00  1.84432507e+00  1.84948254e+00  1.85253379e+00
  1.86787056e+00  1.88310810e+00  1.88582694e+00  1.89250159e+00
  1.90968112e+00  1.91616241e+00  1.92407039e+00  1.92659420e+00
  1.93063416e+00  1.93443405e+00  1.94206516e+00  1.95091872e+00
  1.95683499e+00  1.95981103e+00  1.96707447e+00  1.97553895e+00
  1.97947509e+00  1.98851758e+00  1.99875736e+00  2.00027768e+00
  2.00673797e+00  2.01322079e+00  2.01760043e+00  2.02371409e+00
  2.02528421e+00  2.02812690e+00  2.03028993e+00  2.03460224e+00
  2.04555799e+00  2.05129119e+00  2.05868572e+00  2.06007888e+00
  2.06174757e+00  2.07208922e+00  2.07307959e+00  2.08380100e+00
  2.08477565e+00  2.09010652e+00  2.09066202e+00  2.09712764e+00
  2.10340334e+00  2.11356965e+00  2.11792015e+00  2.12103263e+00
  2.12663091e+00  2.13819440e+00  2.14367097e+00  2.14463422e+00
  2.15331675e+00  2.16304749e+00  2.17239928e+00  2.17309396e+00
  2.17590753e+00  2.18477741e+00  2.19244559e+00  2.19874486e+00
  2.20260869e+00  2.20757245e+00  2.20869088e+00  2.21310554e+00
  2.22062266e+00  2.22803790e+00  2.23093905e+00  2.23706534e+00
  2.24337570e+00  2.25049634e+00  2.25513340e+00  2.26004289e+00
  2.26910507e+00  2.27582194e+00  2.28417055e+00  2.29188131e+00
  2.30346656e+00  2.31097280e+00  2.32086458e+00  2.32721896e+00
  2.33188235e+00  2.33836718e+00  2.34233464e+00  2.36009607e+00
  2.36094900e+00  2.37190558e+00  2.37630501e+00  2.39933207e+00
  2.40828482e+00  2.42121215e+00  2.42667201e+00  2.43613405e+00
  2.43974930e+00  2.45590085e+00  2.46246828e+00  2.46976886e+00
  2.47907561e+00  2.48823794e+00  2.49565328e+00  2.49953950e+00
  2.50217675e+00  2.51071553e+00  2.51201320e+00  2.52157980e+00
  2.52365190e+00  2.53100955e+00  2.54021818e+00  2.54361174e+00
  2.54669047e+00  2.55372211e+00  2.55777481e+00  2.56484403e+00
  2.57541402e+00  2.57766624e+00  2.58299454e+00  2.58871707e+00
  2.59329253e+00  2.60051136e+00  2.60330508e+00  2.61056766e+00
  2.61965728e+00  2.62151664e+00  2.62709186e+00  2.63241613e+00
  2.63467795e+00  2.63740061e+00  2.63943636e+00  2.64569036e+00
  2.64983038e+00  2.65087999e+00  2.65725452e+00  2.66089706e+00
  2.66265161e+00  2.66953233e+00  2.67432568e+00  2.67966867e+00
  2.68521296e+00  2.68797996e+00  2.69548465e+00  2.70111288e+00
  2.70999016e+00  2.71103862e+00  2.71668085e+00  2.72035474e+00
  2.72584599e+00  2.72803986e+00  2.73619481e+00  2.73985134e+00
  2.74652448e+00  2.74970455e+00  2.76276989e+00  2.76651217e+00
  2.77566791e+00  2.77911679e+00  2.78424332e+00  2.78692601e+00
  2.79306094e+00  2.79784519e+00  2.80686133e+00  2.80934635e+00
  2.81381253e+00  2.81769326e+00  2.82330959e+00  2.82403193e+00
  2.82763343e+00  2.83245598e+00  2.83692240e+00  2.84248496e+00
  2.84873547e+00  2.85786181e+00  2.85985977e+00  2.86425484e+00
  2.87011667e+00  2.87126752e+00  2.87290361e+00  2.87604653e+00
  2.88301338e+00  2.88770429e+00  2.89185249e+00  2.89732968e+00
  2.90384811e+00  2.91080042e+00  2.91182889e+00  2.91636989e+00
  2.92103725e+00  2.92809569e+00  2.92917708e+00  2.93417691e+00
  2.94252248e+00  2.94712965e+00  2.95408121e+00  2.95748730e+00
  2.95948112e+00  2.96688688e+00  2.97034598e+00  2.97359522e+00
  2.97675126e+00  2.97947018e+00  2.98515191e+00  2.98824267e+00
  2.99809600e+00  3.00195567e+00  3.00687176e+00  3.01125363e+00
  3.01193971e+00  3.02827484e+00  3.03385508e+00  3.03850752e+00
  3.04235145e+00  3.04582835e+00  3.04901798e+00  3.05097609e+00
  3.05742804e+00  3.06533884e+00  3.06903832e+00  3.07670477e+00
  3.07738018e+00  3.09260323e+00  3.10077830e+00  3.10565408e+00
  3.10755421e+00  3.11663751e+00  3.12004046e+00  3.12125151e+00
  3.12688996e+00  3.13295486e+00  3.13476827e+00  3.13770666e+00
  3.14296715e+00  3.14582039e+00  3.14995550e+00  3.15301407e+00
  3.15674331e+00  3.16038784e+00  3.16583119e+00  3.16823121e+00
  3.17165769e+00  3.17508199e+00  3.18307324e+00  3.18757816e+00
  3.19283431e+00  3.19712796e+00  3.20092574e+00  3.20963053e+00
  3.21431766e+00  3.21690914e+00  3.22119173e+00  3.22493966e+00
  3.22718861e+00  3.23355424e+00  3.24269981e+00  3.24564801e+00
  3.25604570e+00  3.25964151e+00  3.26339574e+00  3.26583554e+00
  3.27214515e+00  3.27741132e+00  3.28117849e+00  3.28481059e+00
  3.28698462e+00  3.30238565e+00  3.30341166e+00  3.30905148e+00
  3.31208869e+00  3.32078209e+00  3.32535853e+00  3.33092183e+00
  3.33459298e+00  3.34061331e+00  3.34828632e+00  3.34914654e+00
  3.35514672e+00  3.35754646e+00  3.36346272e+00  3.36993443e+00
  3.38073823e+00  3.38093171e+00  3.38626928e+00  3.39064338e+00
  3.39638782e+00  3.39988647e+00  3.40263061e+00  3.40477222e+00
  3.41473347e+00  3.42077116e+00  3.42585159e+00  3.42977345e+00
  3.43618128e+00  3.44263046e+00  3.44414424e+00  3.45376145e+00
  3.45524922e+00  3.45869922e+00  3.46297498e+00  3.46716176e+00
  3.46903361e+00  3.47088914e+00  3.47283258e+00  3.47778319e+00
  3.48005239e+00  3.48041438e+00  3.48849679e+00  3.49275535e+00
  3.49417816e+00  3.49725266e+00  3.49887355e+00  3.50701764e+00
  3.51174394e+00  3.51244342e+00  3.51828844e+00  3.52313774e+00
  3.52619135e+00  3.53469236e+00  3.54066375e+00  3.54427414e+00
  3.54629787e+00  3.55330159e+00  3.56640800e+00  3.57709052e+00
  3.58042343e+00  3.59210974e+00  3.59532357e+00  3.60223301e+00
  3.60749268e+00  3.61364344e+00  3.61843180e+00  3.62640954e+00
  3.63463994e+00  3.63765641e+00  3.64493972e+00  3.64795719e+00
  3.66776092e+00  3.67003870e+00  3.67250030e+00  3.67884904e+00
  3.68320425e+00  3.69022527e+00  3.69493233e+00  3.70601347e+00
  3.71434420e+00  3.72149119e+00  3.73557820e+00  3.74206516e+00
  3.74463359e+00  3.75990398e+00  3.76416728e+00  3.77261385e+00
  3.78330342e+00  3.79352963e+00  3.80461717e+00  3.81159189e+00
  3.81901567e+00  3.82494395e+00  3.83708585e+00  3.85432279e+00
  3.86153303e+00  3.86989222e+00  3.87329084e+00  3.87483496e+00
  3.88448393e+00  3.89095054e+00  3.89962062e+00  3.91463243e+00
  3.92264028e+00  3.92946579e+00  3.94003124e+00  3.94828078e+00
  3.95657456e+00  3.95847615e+00  3.96519095e+00  3.98440664e+00
  4.00203127e+00  4.00877548e+00  4.01896924e+00  4.03053159e+00
  4.04360855e+00  4.05156618e+00  4.05528496e+00  4.06388730e+00
  4.06483198e+00  4.07385848e+00  4.08024472e+00  4.08674927e+00
  4.09473441e+00  4.10254204e+00  4.10829629e+00  4.11196654e+00
  4.12023406e+00  4.12157064e+00  4.13536987e+00  4.14178743e+00
  4.14421371e+00  4.15300684e+00  4.15504811e+00  4.16283739e+00
  4.16441099e+00  4.16713242e+00  4.17157175e+00  4.17468382e+00
  4.17704918e+00  4.18157432e+00  4.19277569e+00  4.19756195e+00
  4.20222992e+00  4.20745774e+00  4.21131694e+00  4.22022392e+00
  4.22169514e+00  4.22626327e+00  4.24071517e+00  4.24567167e+00
  4.25327545e+00  4.25631155e+00  4.26141574e+00  4.26840047e+00
  4.27247620e+00  4.27643566e+00  4.27982923e+00  4.29149172e+00
  4.29667927e+00  4.31341640e+00  4.32022489e+00  4.32688337e+00
  4.33982842e+00  4.34671591e+00  4.35636278e+00  4.36043416e+00
  4.36994486e+00  4.37760677e+00  4.39452934e+00  4.40105497e+00
  4.40878804e+00  4.41271938e+00  4.42024645e+00  4.43939858e+00
  4.44893494e+00  4.46330468e+00  4.49304189e+00  4.52661926e+00
  4.53788498e+00  4.54962378e+00  4.56063866e+00  4.56449556e+00
  4.57334789e+00  4.58715723e+00  4.59474701e+00  4.60370731e+00
  4.62425933e+00  4.62833425e+00  4.65075049e+00  4.66933018e+00
  4.68197884e+00  4.71932311e+00  4.73687325e+00  4.74965107e+00
  4.76224002e+00  4.77081876e+00  4.77999317e+00  4.79114246e+00
  4.79748257e+00  4.80381605e+00  4.81075581e+00  4.82042681e+00
  4.82851401e+00  4.84307487e+00  4.84767668e+00  4.86549793e+00
  4.87799814e+00  4.88732521e+00  4.89398144e+00  4.90306482e+00
  4.92209292e+00  4.93888119e+00  4.94467352e+00  4.95525329e+00
  4.97925791e+00  4.99052637e+00  5.01212619e+00  5.01963928e+00
  5.03288719e+00  5.04558551e+00  5.08125703e+00  5.08886716e+00
  5.11804459e+00  5.12632824e+00  5.14596496e+00  5.15496634e+00
  5.16770581e+00  5.18218203e+00  5.19900869e+00  5.22569457e+00
  5.23298110e+00  5.25693130e+00  5.29422699e+00  5.32886361e+00
  5.33929735e+00  5.36300432e+00  5.38740838e+00  5.39787946e+00
  5.40608775e+00  5.41812007e+00  5.43747514e+00  5.45346085e+00
  5.46014884e+00  5.46582172e+00  5.48607044e+00  5.55479720e+00
  5.56901376e+00  5.58040727e+00  5.62032314e+00  5.62194280e+00
  5.70006805e+00  5.70149582e+00  5.70968976e+00  5.74773651e+00
  5.82636225e+00  5.85427933e+00  5.86584244e+00  5.87120035e+00
  6.02522214e+00  6.26491539e+00  6.34416712e+00  6.85597246e+00
  6.85778908e+00  6.86164212e+00  6.86315720e+00  6.86566015e+00
  6.86712697e+00  6.86898888e+00  6.87005689e+00  6.87220065e+00
  6.87276723e+00  6.87395837e+00  6.87663798e+00  6.87800392e+00
  6.87875563e+00  6.87987275e+00  6.88477686e+00  6.89096142e+00
  6.89163231e+00  6.89399932e+00  6.90153998e+00  6.91880026e+00
  6.92031148e+00  6.94233141e+00  6.94326747e+00  6.96042797e+00
  6.96217759e+00  6.97523531e+00  6.97701108e+00  7.00415842e+00
  7.00694990e+00  7.02482977e+00  7.03122505e+00  7.05496135e+00
  7.05690781e+00  7.06722340e+00  7.06992468e+00  7.10884505e+00
  7.11121554e+00  7.14505005e+00  7.14669107e+00  7.16409364e+00
  7.16731803e+00  7.16925632e+00  7.18850684e+00  7.19301514e+00
  7.22643300e+00  7.22868518e+00  7.26149129e+00  7.26266446e+00
  7.27232897e+00  7.27460092e+00  7.27512750e+00  7.27547563e+00
  7.34074970e+00  7.34158001e+00  7.37401349e+00  7.37810558e+00
  7.39464400e+00  7.39688558e+00  7.42340781e+00  7.42586151e+00
  7.47612748e+00  7.47935168e+00  7.57374600e+00  7.57641842e+00
  7.61702331e+00  7.61969671e+00  7.69930599e+00  7.70183081e+00
  7.97441570e+00  7.97859602e+00  8.31714500e+00  8.31949572e+00
  8.34623390e+00  8.34919257e+00  8.38351704e+00  8.38756219e+00
  8.40014757e+00  8.43076566e+00  8.44199990e+00  8.46606373e+00
  8.47483131e+00  8.48039319e+00  8.55008116e+00  8.55140456e+00
  8.58563081e+00  8.59502680e+00  8.60142777e+00  8.60586438e+00
  8.69398864e+00  8.69618320e+00  8.72790459e+00  8.73011202e+00
  8.73592409e+00  8.74397872e+00  8.77084042e+00  8.77430678e+00
  8.80319838e+00  8.80561550e+00  8.81005755e+00  8.81344631e+00
  8.86209288e+00  8.86681163e+00  8.89930642e+00  8.90206081e+00
  8.94425650e+00  8.94963176e+00  8.95750574e+00  8.96024948e+00
  9.04966110e+00  9.05394982e+00  9.05499712e+00  9.05898816e+00
  9.08767634e+00  9.08919600e+00  9.09620710e+00  9.11321352e+00
  9.14179221e+00  9.15133400e+00  9.33501818e+00  9.34560544e+00
  1.57466479e+01  2.22411698e+01  2.23740841e+01  2.24079367e+01
  2.24701621e+01  2.26072557e+01  2.26186009e+01  2.26455075e+01
  2.26750360e+01  2.27880456e+01  2.28634833e+01  2.28930938e+01
  2.29027155e+01  2.29175453e+01  2.29239231e+01  2.29311123e+01
  2.30330523e+01  2.30401045e+01  2.30672799e+01  2.30982687e+01
  2.31721070e+01  2.32529713e+01  2.34912889e+01  2.35834023e+01
  2.36550249e+01  3.25236522e+01  3.30914263e+01  5.72386019e+01
  5.72509599e+01  5.74263563e+01  5.74324455e+01  5.75114789e+01
  5.75219923e+01  5.76582483e+01  5.76771680e+01  5.76907899e+01
  5.77338431e+01]
nelec by numeric integration = 261.9999408732711
    CPU time for vxc    154.41 sec, wall time     11.02 sec
    CPU time for df vj and vk    666.54 sec, wall time     50.73 sec
E1 = -11347.492261877285  Ecoul = 5269.301475606324  Exc = -253.97622639923685
Extra cycle  E= -2051.32563914609  delta_E= -1.55e-11  |g|= 1.13e-06  |ddm|= 2.18e-06
    CPU time for scf_cycle   5415.90 sec, wall time    452.94 sec
    CPU time for SCF   5415.97 sec, wall time    452.94 sec
converged SCF energy = -2051.32563914609
SCF Done after 452.97 seconds
after SCF memory used: 17.09 GB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
hdiag shape (140170,)
n_occ =  131
n_vir =  1070
max_vir =  284
A_size =  140170
A_reduced_size = 37204
a_x = 0.25
beta = 0.6575
alpha = 1.54
Q-Gamma tensors building time = 0.78
after Q matrix memory used: 17.24 GB
TDDFT
|-------- In-house Developed TDDFT Starts ---------|
Residual conv = 1e-05

Number of excited states = 1
Initial guess:   sTDDFT
Preconditioner:  sTDDFT
A matrix size =  140170
setting initial guess
sTDDFT Convergence tol = 1.00e-03
sTDDFT diagonalization Converged
after  6 iterations; 1.7083 seconds
final subspace 13
max_norm =  5.15e-04
MVcost     1.2889s 75.45%
GScost     0.1565s 9.16%
subgencost 0.1512s 8.85%
subcost    0.0037s 0.22%
sTDDFT excitation energy:
[2.58421354 2.62954596]
new_m = 2
initial guess done

iteration 0
beginning of step 0 memory used: 17.38 GB
    CPU time for df vj and vk   1329.66 sec, wall time     97.99 sec
subspace size: 2
Maximum residual norm:  4.72e-02
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 18 steps; 2.1615 s
final subspace 18
max_norm =  8.59e-03
initial_cost 0.0220s  1.02%
MVcost     0.9516s  44.03%
GScost     0.3738s  17.30%
subgencost 0.6270s  29.01%
subcost    0.0119s  0.55%
m & new_m 2 3

iteration 1
beginning of step 1 memory used: 17.44 GB
    CPU time for df vj and vk    664.88 sec, wall time     50.96 sec
subspace size: 3
Maximum residual norm:  1.17e-02
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 19 steps; 2.2712 s
final subspace 19
max_norm =  6.39e-03
initial_cost 0.0076s  0.34%
MVcost     1.0182s  44.83%
GScost     0.3729s  16.42%
subgencost 0.6953s  30.61%
subcost    0.0117s  0.51%
m & new_m 3 4

iteration 2
beginning of step 2 memory used: 17.46 GB
    CPU time for df vj and vk    666.05 sec, wall time     50.62 sec
subspace size: 4
Maximum residual norm:  1.06e-02
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 19 steps; 2.1474 s
final subspace 19
max_norm =  6.19e-03
initial_cost 0.0070s  0.33%
MVcost     0.9460s  44.05%
GScost     0.3592s  16.73%
subgencost 0.6608s  30.77%
subcost    0.0116s  0.54%
m & new_m 4 5

iteration 3
beginning of step 3 memory used: 17.41 GB
    CPU time for df vj and vk    668.00 sec, wall time     51.12 sec
subspace size: 5
Maximum residual norm:  1.27e-02
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 18 steps; 2.0627 s
final subspace 18
max_norm =  8.67e-03
initial_cost 0.0073s  0.35%
MVcost     0.9209s  44.65%
GScost     0.3431s  16.63%
subgencost 0.6223s  30.17%
subcost    0.0109s  0.53%
m & new_m 5 6

iteration 4
beginning of step 4 memory used: 17.40 GB
    CPU time for df vj and vk    665.24 sec, wall time     50.80 sec
subspace size: 6
Maximum residual norm:  4.12e-03
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 2.3978 s
final subspace 20
max_norm =  8.07e-03
initial_cost 0.0143s  0.60%
MVcost     1.0215s  42.60%
GScost     0.4147s  17.29%
subgencost 0.7510s  31.32%
subcost    0.0137s  0.57%
m & new_m 6 7

iteration 5
beginning of step 5 memory used: 17.44 GB
    CPU time for df vj and vk    670.99 sec, wall time     51.35 sec
subspace size: 7
Maximum residual norm:  2.50e-03
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 2.3696 s
final subspace 20
max_norm =  7.49e-03
initial_cost 0.0173s  0.73%
MVcost     1.0272s  43.35%
GScost     0.4011s  16.93%
subgencost 0.7362s  31.07%
subcost    0.0125s  0.53%
m & new_m 7 8

iteration 6
beginning of step 6 memory used: 17.44 GB
    CPU time for df vj and vk    666.80 sec, wall time     50.92 sec
subspace size: 8
Maximum residual norm:  3.12e-03
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 16 steps; 1.7236 s
final subspace 16
max_norm =  5.30e-03
initial_cost 0.0151s  0.87%
MVcost     0.8127s  47.15%
GScost     0.2712s  15.73%
subgencost 0.4844s  28.10%
subcost    0.0092s  0.54%
m & new_m 8 9

iteration 7
beginning of step 7 memory used: 17.44 GB
    CPU time for df vj and vk    667.99 sec, wall time     51.17 sec
subspace size: 9
Maximum residual norm:  1.16e-03
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 2.4399 s
final subspace 20
max_norm =  5.55e-03
initial_cost 0.0090s  0.37%
MVcost     1.0276s  42.11%
GScost     0.4600s  18.85%
subgencost 0.7454s  30.55%
subcost    0.0127s  0.52%
m & new_m 9 10

iteration 8
beginning of step 8 memory used: 17.46 GB
    CPU time for df vj and vk    665.16 sec, wall time     50.70 sec
subspace size: 10
Maximum residual norm:  4.06e-04
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 2.4072 s
final subspace 20
max_norm =  8.32e-03
initial_cost 0.0309s  1.29%
MVcost     1.0207s  42.40%
GScost     0.4173s  17.33%
subgencost 0.7359s  30.57%
subcost    0.0127s  0.53%
m & new_m 10 11

iteration 9
beginning of step 9 memory used: 17.46 GB
    CPU time for df vj and vk    665.71 sec, wall time     50.78 sec
subspace size: 11
Maximum residual norm:  1.23e-04
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 18 steps; 1.9968 s
final subspace 18
max_norm =  8.09e-03
initial_cost 0.0076s  0.38%
MVcost     0.8956s  44.85%
GScost     0.3291s  16.48%
subgencost 0.6010s  30.10%
subcost    0.0110s  0.55%
m & new_m 11 12

iteration 10
beginning of step 10 memory used: 17.46 GB
    CPU time for df vj and vk    667.87 sec, wall time     51.04 sec
subspace size: 12
Maximum residual norm:  4.02e-05
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 20 steps; 2.3325 s
final subspace 20
max_norm =  4.50e-03
initial_cost 0.0080s  0.34%
MVcost     0.9976s  42.77%
GScost     0.3997s  17.14%
subgencost 0.7315s  31.36%
subcost    0.0127s  0.55%
m & new_m 12 13

iteration 11
beginning of step 11 memory used: 17.41 GB
    CPU time for df vj and vk    665.49 sec, wall time     50.76 sec
subspace size: 13
Maximum residual norm:  1.26e-05
unconverged states [0]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 12 steps; 1.1369 s
final subspace 12
max_norm =  8.79e-03
initial_cost 0.0068s  0.60%
MVcost     0.6013s  52.89%
GScost     0.1560s  13.72%
subgencost 0.2780s  24.46%
subcost    0.0064s  0.56%
m & new_m 13 14

iteration 12
beginning of step 12 memory used: 17.40 GB
    CPU time for df vj and vk    663.72 sec, wall time     51.37 sec
subspace size: 14
Maximum residual norm:  3.57e-06
TDDFT precedure Done

============= TDDFT Calculation Done ==============
after 13 iterations 917.26 s
Final subspace  14
preconditioning cost 25.5126 0.03 %
max_norm =  3.57e-06
Total TDDFT memory used: 17.42 GB
Excited State energies (eV) =
 [2.82892892]
xyzfile = 46_Azobenzene_3a.xyz
checkfile = True
method = RKS
functional = pbe0
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 1
pytd = False
TDA = False
TDDFT = True
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
ip_options = [0]
conv_tolerance = 1e-05
initial_TOL = 0.001
precond_TOL = 0.01
extrainitial = 8
max = 30
eigensolver_tol = 1e-05
memory = 50000
verbose = 5
beta = []
alpha = []
|-------- In-house Developed TDDFT Ends ----------|
