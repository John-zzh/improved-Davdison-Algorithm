curpath /scratch/pbsjobs/job.15978489.hpc
lib.num_threads() =  16
at beginning memory used: 0.05 GB
mol.max_memory 160000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul9.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

'''wb97x  methanol, 1e-5
  sTDDFT no truncate [6.46636611 8.18031534 8.38140651 9.45011415 9.5061059 ]
            40 eV    [6.46746642 8.18218267 8.38314651 9.45214869 9.5126739 ]
    sTDA no truncate [6.46739711 8.18182208 8.38358473 9.45195554 9.52133129]
            40 eV    [6.46827111 8.18334703 8.38483801 9.45361525 9.52562255]
'''
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

def gen_args():
    parser = argparse.ArgumentParser(description='Davidson')
    parser.add_argument('-x', '--xyzfile',          type=str,   default='NA',  help='xyz filename (molecule.xyz)')
    parser.add_argument('-chk', '--checkfile',      type=bool,  default=False, help='checkpoint filename (.chk)')
    parser.add_argument('-m', '--method',           type=str,   default='RKS', help='RHF RKS UHF UKS')
    parser.add_argument('-f', '--functional',       type=str,   default='NA',  help='xc functional')
    parser.add_argument('-b', '--basis_set',        type=str,   default='NA',  help='basis set')
    parser.add_argument('-df', '--density_fit',     type=bool,  default=True,  help='density fitting turn on')
    parser.add_argument('-g', '--grid_level',       type=int,   default='3',   help='0-9, 9 is best')

    parser.add_argument('-n','--nstates',           type=int,   default = 4,      help='number of excited states')
    parser.add_argument('-pytd','--pytd',           type=bool,  default = False , help='whether to compare with PySCF TDDFT')

    parser.add_argument('-TDA','--TDA',             type=bool,  default = False, help='perform TDA')
    parser.add_argument('-TDDFT','--TDDFT',         type=bool,  default = False, help='perform TDDFT')
    parser.add_argument('-dynpol','--dynpol',       type=bool,  default = False, help='perform dynamic polarizability')
    parser.add_argument('-omega','--dynpol_omega',  type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
    parser.add_argument('-stapol','--stapol',       type=bool,  default = False, help='perform static polarizability')
    parser.add_argument('-sTDA','--sTDA',           type=bool,  default = False, help='perform sTDA calculation')
    parser.add_argument('-sTDDFT','--sTDDFT',       type=bool,  default = False, help='perform sTDDFT calculation')
    parser.add_argument('-TT','--Truncate_test',    type=bool,  default = False, help='test the wall time for different virtual truncation')

    parser.add_argument('-TV','--truncate_virtual', type=float, default = 40,    help='the threshold to truncate virtual orbitals, in eV')

    parser.add_argument('-o','--ip_options',        type=int,   default = [0], nargs='+', help='0-7')
    parser.add_argument('-t','--conv_tolerance',    type=float, default= 1e-5, help='residual norm Convergence threhsold')

    parser.add_argument('-it','--initial_TOL',      type=float, default= 1e-3, help='conv for the inital guess')
    parser.add_argument('-pt','--precond_TOL',      type=float, default= 1e-2, help='conv for TDA preconditioner')

    parser.add_argument('-ei','--extrainitial',     type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
    parser.add_argument('-max','--max',             type=int,   default= 30,   help='max iterations')

    parser.add_argument('-et','--eigensolver_tol',  type=float, default= 1e-5, help='conv for new guess generator in new_ES')
    parser.add_argument('-M','--memory',            type=int,   default= 4000, help='max_memory')
    parser.add_argument('-v','--verbose',           type=int,   default= 5,    help='mol.verbose = 3,4,5')

    parser.add_argument('-be','--beta',             type=float, default= [],    nargs='+', help='beta = 0.83')
    parser.add_argument('-al','--alpha',            type=float, default= [],    nargs='+', help='alpha = 0.83')

    args = parser.parse_args()
    if args.dynpol == True and args.dynpol_omega == []:
        raise ValueError('External Perturbation ω cannot be None')
    return args
args = gen_args()

def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024**3
    print('{} memory used: {:<.2f} GB'.format(hint, memory))

show_memory_info('at beginning')

'''read xyz file and delete its first two lines'''
basename = args.xyzfile.split('.',1)[0]

def SCF_kernel():
    kernel_0 = time.time()
    f = open(args.xyzfile)
    atom_coordinates = f.readlines()
    del atom_coordinates[:2]
    '''build geometry in PySCF'''
    mol = gto.Mole()
    mol.atom = atom_coordinates
    mol.basis = args.basis_set
    mol.verbose = args.verbose
    mol.max_memory = args.memory
    print('mol.max_memory', mol.max_memory)
    mol.build(parse_arg = False)
    '''DFT or HF'''
    if args.method == 'RKS':
        mf = dft.RKS(mol)
    elif args.method == 'UKS':
        mf = dft.UKS(mol)
    elif args.method == 'RHF':
        mf = scf.RHF(mol)
    elif args.method == 'UHF':
        mf = scf.UHF(mol)
    if 'KS' in args.method:
        print('RKS')
        mf.xc = args.functional
        mf.grids.level = args.grid_level
    else:
        print('HF')
    if args.density_fit:
        mf = mf.density_fit()
        print('Density fitting turned on')
    if args.checkfile == True:
        '''use the *.chk file as scf input'''
        mf.chkfile = basename + '_' + args.functional + '.chk'
        mf.init_guess = 'chkfile'
    mf.conv_tol = 1e-10
    print ('Molecule built')
    print ('Calculating SCF Energy...')
    mf.kernel()

    kernel_1 = time.time()
    kernel_t = kernel_1 - kernel_0

    return mol, mf, kernel_t

mol, mf, kernel_t = SCF_kernel()

print ('SCF Done after %.2f'%kernel_t, 'seconds')

show_memory_info('after SCF')

'''Collect everything needed from PySCF'''

Hartree_to_eV = 27.211386245988

def gen_global_var():
    '''TDA_vind & TDDFT_vind are ab-initio matrix vector multiplication function
    '''
    td = tddft.TDA(mf)
    TD = tddft.TDDFT(mf)
    TDA_vind, hdiag = td.gen_vind(mf)
    TDDFT_vind, Hdiag = TD.gen_vind(mf)

    Natm = mol.natm
    '''mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
       N_bf is the total amount of MOs
       coefficient_matrix_C is the unorthonormalized coefficient matrix
       if no truncation, then max_vir = n_vir and n_occ + max_vir = N_bf
    '''
    mo_occ = mf.mo_occ
    coefficient_matrix_C = mf.mo_coeff
    N_bf = len(mo_occ)
    n_occ = len(np.where(mo_occ > 0)[0])
    n_vir = len(np.where(mo_occ == 0)[0])
    delta_hdiag = hdiag.reshape(n_occ, n_vir)
    A_size = n_occ * n_vir

    tol_eV = args.truncate_virtual/Hartree_to_eV
    homo_vir = delta_hdiag[-1,:]
    max_vir = len(np.where(homo_vir <= tol_eV)[0])

    max_vir_hdiag = delta_hdiag[:,:max_vir]

    A_reduced_size = n_occ * max_vir

    '''R_array is inter-particle distance array
       unit == ’Bohr’, 5.29177210903(80)×10^(−11) m
    '''
    R_array = pyscf.gto.mole.inter_distance(mol, coords=None)

    print('hdiag shape', hdiag.shape)
    print('n_occ = ', n_occ)
    print('n_vir = ', n_vir)
    print('max_vir = ', max_vir)
    print('A_size = ', A_size)
    print('A_reduced_size =', A_reduced_size)

    return TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
                    max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
                        n_vir, max_vir, A_size, A_reduced_size, R_array

TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
        max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
             n_vir, max_vir, A_size, A_reduced_size, R_array = gen_global_var()

def TDA_matrix_vector(V):
    '''return AX'''
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X
       this is not the optimum way, but the only way in PySCF
    '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1

def gen_HARDNESS():
    '''a dictionary of chemical hardness, by mappig two lists:
       list of elements 1-94
       list of hardness for elements 1-94, floats,in Hartree
    '''
    elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', \
    'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', \
    'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', \
    'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', \
    'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', \
    'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\
    'Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', \
    'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
    hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,\
    0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,\
    0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,\
    0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,\
    0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,\
    0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,\
    0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,\
    0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,\
    0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,\
    0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,\
    0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,\
    0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,\
    0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,\
    0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,\
    0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,\
    0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
    HARDNESS = dict(zip(elements,hardness))
    return HARDNESS

def matrix_power(S,a):
    '''X == S^a'''
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    return X

def orthonormalize(C):
    ''' produce orthonormalized coefficient matrix C, N_bf * N_bf
        S = mf.get_ovlp()  is basis overlap matrix
        S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
        np.dot(C.T,C) is a an identity matrix
    '''
    S = mf.get_ovlp()
    X = matrix_power(S, 0.5)
    C = np.dot(X,C)
    return C

def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    '''NA is for Hartree-Fork'''
    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    Func_ax = dict(zip(hybride_F, hybride_paramt))

    beta1 = 0.2
    beta2 = 1.83
    alpha1 = 1.42
    alpha2 = 0.48
    '''RSH functionals have specific a_x, beta, alpha values;
       hybride fucntionals have fixed alpha12 and beta12 values,
       with different a_x values, by which create beta, alpha
    '''
    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]
    elif args.functional in hybride_F:
        a_x = Func_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)

    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

def gen_gammaJK():
    '''creat GammaK and GammaK matrix
       mol.atom_pure_symbol(atom_id) returns the element symbol
    '''
    HARDNESS = gen_HARDNESS()
    a = [HARDNESS[mol.atom_pure_symbol(atom_id)] for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2
    GammaJ = (R_array**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R_array**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

def generateQ():
    '''build q_iajb tensor'''
    C = orthonormalize(coefficient_matrix_C)
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

def gen_QJK(max_vir=max_vir):

    '''pre-calculate and store the Q-Gamma rank 3 tensor
       qia * gamma * qjb -> qia GK_q_jb
    '''
    Qstart = time.time()
    q_tensors = generateQ()
    GammaJ, GammaK = gen_gammaJK()

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)
    Qend = time.time()
    Q_time = Qend - Qstart
    print('Q-Gamma tensors building time = %.2f'%Q_time)
    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()

show_memory_info('after Q matrix')

def gen_iajb_ijab_ibja_delta_fly(max_vir = max_vir, \
                                    q_ij = q_ij, \
                                    q_ab = q_ab, \
                                    q_ia = q_ia , \
                                 GK_q_jb = GK_q_jb, \
                                 GJ_q_ab = GJ_q_ab):
    '''define sTDA on-the-fly two electron intergeral (pq|rs)
       A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v
       iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
       ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)
    '''
    def iajb_fly(V):
        '''(ia|jb) '''
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        return iajb_V

    def ijab_fly(V):
        '''(ij|ab) '''
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        return ijab_V

    def ibja_fly(V):
        '''the Forck exchange energy in B matrix
           (ib|ja)
        '''
        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        return ibja_V

    def delta_fly(V):
        '''delta_hdiag.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_hdiag, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''max_vir_hdiag.shape = (n_occ, max_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir = max_vir, \
                              iajb_fly = iajb_fly, \
                              ijab_fly = ijab_fly, \
                              ibja_fly = ibja_fly, \
                     delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        '''return AX'''
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''return AX+BY and AY+BX
           sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
           sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        '''return (A+B)X = delta_fly(V) + 4*iajb_fly(V)
           - ijab_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir, -1)
        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)
        U = U.reshape(n_occ*max_vir, -1)

        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

def Gram_Schmidt_bvec(A, bvec):
    '''orthonormalize vector b against all vectors in A
       b = b - A*(A.T*b)
       suppose A is orthonormalized
    '''
    if A.shape[1] != 0:
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    '''orthonormalize vector |x,y> against all vectors in |V,W>'''
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)
    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    '''V is a vectors holder
       count is the amount of vectors that already sit in the holder
       nvec is amount of new vectors intended to fill in the V
       count will be final amount of vectors in V
    '''
    nvec = np.shape(vecs)[1]
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize
        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count
    return V, new_count

def S_symmetry_orthogonal(x,y):
    '''symmetrically orthogonalize the vectors |x,y> and |y,x>
       as close to original vectors as possible
    '''
    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A

def check_orthonormal(A):
    '''define the orthonormality of a matrix A as the norm of (A.T*A - I)'''
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c

def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    '''put X_new into V, and Y_new into W
       m: the amount of vectors that already on V or W
       nvec: amount of new vectors intended to put in the V and W
    '''
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]

    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):
        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart

        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m

def solve_AX_Xla_B(A, omega, Q):
    '''AX - XΩ  = Q
       A, Ω, Q are known, solve X
    '''
    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)
    X *= Qnorm

    return X

def TDA_A_diag_initial_guess(m, hdiag = hdiag):
    '''m is the amount of initial guesses'''
    hdiag = hdiag.reshape(-1,)
    V_size = hdiag.shape[0]
    Dsort = hdiag.argsort()
    energies = hdiag[Dsort][:m]*Hartree_to_eV
    V = np.zeros((V_size, m))
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V, energies

def TDA_A_diag_preconditioner(residual, sub_eigenvalue, current_dic = None,\
                            hdiag = hdiag, tol = None, full_guess=None, \
                        return_index=None, W_H=None, V_H=None, sub_A_H=None):
    '''DX = XΩ'''
    k = np.shape(residual)[1]
    t = 1e-14
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    '''force all small values not in [-t,t]'''
    D = np.where( abs(D) < t, np.sign(D)*t, D)
    new_guess = residual/D

    if current_dic != None:
        return new_guess, current_dic
    else:
        return new_guess

def sTDA_eigen_solver(k, tol=args.initial_TOL):
    '''A'X = XΩ'''
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    max = 30

    '''m is size of subspace'''
    m = 0
    new_m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)

    '''V is subsapce basis
       W is transformed guess vectors'''
    V[:, :new_m],initial_energies = TDA_A_diag_initial_guess(\
                                            new_m, hdiag = max_vir_hdiag)
    for i in range(max):
        '''create subspace'''
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)

        '''Diagonalize the subspace Hamiltonian, and sorted.
        sub_eigenvalue[:k] are smallest k eigenvalues'''
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])

        '''residual = AX - XΩ = AVx - XΩ = Wx - XΩ'''
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess*sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        '''precondition the unconverged residuals'''
        new_guess = TDA_A_diag_preconditioner(\
                        residual = residual[:,index],\
                  sub_eigenvalue = sub_eigenvalue[:k][index],\
                           hdiag = max_vir_hdiag)

        '''orthonormalize the new guess against basis and put into V holder'''
        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalized in', i, 'steps; ', '%.4f'%sTDA_D, 'seconds' )
    print('threshold =', tol)
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*Hartree_to_eV)

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    omega = sub_eigenvalue[:k]*Hartree_to_eV
    return U, omega

def sTDA_preconditioner(residual, sub_eigenvalue, tol=args.precond_TOL,\
                        current_dic=None, full_guess=None, return_index=None,\
                        W_H=None, V_H=None, sub_A_H=None):
    '''sTDA preconditioner
       (A - Ω*I)^-1 P = X
       AX - XΩ = P
       P is residuals (in big Davidson's loop) to be preconditioned
    '''
    p_start = time.time()

    '''number of vectors to be preconditioned'''
    N_vectors = residual.shape[1]
    Residuals = residual.reshape(n_occ,n_vir,-1)
    omega = sub_eigenvalue
    P = Residuals[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P = P/pnorm

    start = time.time()
    tol = args.precond_TOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    '''now V and W are empty holders, 0 vectors
       W = sTDA_mv(V)
       count is the amount of vectors that already sit in the holder
       in each iteration, V and W will be filled/updated with new guess basis
       which is the preconditioned residuals
    '''

    '''initial guess: DX - XΩ = P
       Dp is the preconditioner
       <t: returns np.sign(D)*t; else: D
    '''
    t = 1e-10
    Dp = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - omega
    Dp = np.where(abs(Dp)<t, \
                                        np.sign(Dp)*t, Dp)
    Dp = Dp.reshape(n_occ, n_vir, -1)
    D = Dp[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    '''generate initial guess'''
    Xig = P*inv_D
    count = 0
    V, new_count = Gram_Schmidt_fill_holder(V, count, Xig)

    origin_dic = current_dic.copy()
    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0

    for i in range(max):
        substart = time.time()
        '''project sTDA_A matrix and vector P into subspace'''
        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        sub_P= np.dot(V[:,:new_count].T, P)
        sub_A = np.dot(V[:,:new_count].T, W[:,:new_count])
        subend = time.time()
        subgencost += subend - substart

        sub_A = symmetrize(sub_A)
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, omega, sub_P)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:new_count], sub_guess)
        residual = np.dot(W[:,:new_count], sub_guess) - full_guess*omega - P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append(\
                                    {'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index of unconverged states'''
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''precondition the unconverged residuals'''
        new_guess = residual[:,index]*inv_D[:,index]


        GSstart = time.time()
        count = new_count
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart

    p_end = time.time()
    p_cost = p_end - p_start

    if i == (max -1):
        print('_____sTDA Preconditioner Failed Due to Iteration Limit _______')
        print('failed after ', i, 'steps,', '%.4f'%p_cost,'s')
        print('orthonormality of V', check_orthonormal(V[:,:count]))
        print('current residual norms', r_norms)
    else:
        print('sTDA precond Done after', i, 'steps;', '%.4f'%p_cost,'seconds')

    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['subgencost', 'mvcost', 'GScost', 'subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/p_cost))
    full_guess *= pnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = P2'''
        P2 = Residuals[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = Dp[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)

    '''if we want to know more about the preconditioning process,
        return the current_dic, rather than origin_dic'''
    if current_dic != None:
        return U, origin_dic
    else:
        return U

def Jacobi_preconditioner(residual, sub_eigenvalue, current_dic, full_guess,\
                return_index = None, W_H = None, V_H = None, sub_A_H = None):
    '''(1-uu*)(A-Ω*I)(1-uu*)t = -B
       B is residual, we want to solve t
       z approximates t
       z = (A-Ω*I)^(-1)*(-B) - α(A-Ω*I)^(-1)*u
            let K_inv_y = (A-Ω*I)^(-1)*(-B)
            and K_inv_u = (A-Ω*I)^(-1)*u
       z = K_inv_y - α*K_inv_u
       where α = [u*(A-Ω*I)^(-1)y]/[u*(A-Ω*I)^(-1)u]
       first, solve (A-Ω*I)^(-1)y and (A-Ω*I)^(-1)u
    '''
    B = residual
    omega = sub_eigenvalue
    u = current_guess

    K_inv_y = sTDA_preconditioner(-B, omega)
    K_inv_u = sTDA_preconditioner(u, omega)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d
    z = K_inv_y -  Alpha*K_inv_u

    return z, current_dic

def on_the_fly_Hx(W, V, sub_A, x):
    def Qx(V, x):
        '''Qx = (1 - V*V.T)*x = x - V*V.T*x'''
        VX = np.dot(V.T,x)
        x -= np.dot(V,VX)
        return x
    '''on-the-fly compute H'x
       H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q
       K approximates H, here K = sTDA_A
       H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)
       H′x ≡ a + b − c + d
    '''
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx

def new_ES(full_guess, return_index, W_H, V_H, sub_A_H, \
                        residual=None, sub_eigenvalue=None, current_dic=None):
    '''new eigenvalue solver, to diagonalize the H'
       the traditional Davidson to diagonalize the H' matrix
       W_H, V_H, sub_A_H are from the exact H
    '''
    new_ES_start = time.time()
    tol = args.eigensolver_tol
    max = 30

    k = args.nstates
    m = min([k+8, 2*k, A_size])

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    '''sTDA as initial guess'''
    V = sTDA_eigen_solver(m, V)
    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])

    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        residual = np.dot(W[:,:m], sub_eigenket[:,:k])
        residual -= np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        new_guess = TDA_A_diag_preconditioner(residual[:,index], \
                                                    sub_eigenvalue[:k][index])
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m

    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    new_ES_end = time.time()
    new_ES_cost = new_ES_end - new_ES_start
    print('H_app diagonalization done in',i,'steps; ','%.2f'%new_ES_cost, 's')
    print('threshold =', tol)
    return full_guess[:,return_index], current_dic

def gen_TDA_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDA']   = sTDA_eigen_solver
    i_lib['Adiag']  = TDA_A_diag_initial_guess
    p_lib['sTDA']   = sTDA_preconditioner
    p_lib['Adiag']  = TDA_A_diag_preconditioner
    p_lib['Jacobi'] = Jacobi_preconditioner
    p_lib['new_ES'] = new_ES
    return i_lib, p_lib

def fill_dictionary(dic,init,prec,k,icost,pcost,wall_time,N_itr,N_mv,\
            initial_energies=None,energies=None,difference=None,overlap=None,\
            tensor_alpha=None, initial_tensor_alpha=None):
    dic['initial guess'] = init
    dic['preconditioner'] = prec
    dic['nstate'] = k
    dic['molecule'] = basename
    dic['method'] = args.method
    dic['functional'] = args.functional
    dic['threshold'] = args.conv_tolerance
    dic['SCF time'] = kernel_t
    dic['Initial guess time'] = icost
    dic['initial guess threshold'] = args.initial_TOL
    dic['New guess generating time'] = pcost
    dic['preconditioner threshold'] = args.precond_TOL
    dic['total time'] = wall_time
    dic['excitation energy(eV)'] = energies
    dic['iterations'] = N_itr
    dic['A matrix size'] = A_size
    dic['final subspace size'] = N_mv
    dic['ax'] = a_x
    dic['alpha'] = alpha
    dic['beta'] = beta
    dic['virtual truncation tol'] = args.truncate_virtual
    dic['n_occ'] = n_occ
    dic['n_vir'] = n_vir
    dic['max_vir'] = max_vir
    dic['semiempirical_difference'] = difference
    dic['overlap'] = overlap
    dic['initial_energies'] = initial_energies
    dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    dic['Dynamic polarizability tensor alpha'] = tensor_alpha
    dic['Dynamic polarizability initial tensor alpha'] = initial_tensor_alpha
    return dic

def Davidson(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''Davidson frame, we can use different initial guess and preconditioner'''
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    TDA_i_lib, TDA_p_lib = gen_TDA_lib()
    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)

    init_start = time.time()
    max = args.max
    m = 0
    new_m = min([k + args.extrainitial, 2*k, A_size])
    V = np.zeros((A_size, max*k + new_m))
    W = np.zeros_like(V)
    V[:, :new_m], initial_energies = initial_guess(new_m)
    init_end = time.time()

    init_time = init_end - init_start
    print('initial guess time %.4f seconds'%init_time)

    Pcost = 0
    MVcost = 0
    for ii in range(max):
        print('\nIteration ', ii)
        istart = time.time()

        MV_start = time.time()
        W[:, m:new_m] = TDA_matrix_vector(V[:,m:new_m])
        MV_end = time.time()
        iMVcost = MV_end - MV_start
        MVcost += iMVcost
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm %.2e'%max_norm)
        if max_norm < tol or ii == (max-1):
            iend = time.time()
            icost = iend - istart
            current_dic['iteration total cost'] = icost
            current_dic['iteration MV cost'] = iMVcost
            iteration_list[ii] = current_dic
            print('iMVcost %.4f'%iMVcost)
            print('icost %.4f'%icost)
            print('Davidson procedure Done \n')
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                residual = residual[:,index],
                          sub_eigenvalue = sub_eigenvalue[:k][index],
                             current_dic = current_dic,
                              full_guess = full_guess[:,index],
                            return_index = index,
                                     W_H = W[:,:m],
                                     V_H = V[:,:m],
                                 sub_A_H = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('new generated guesses:', new_m - m)

        iend = time.time()
        icost = iend - istart
        current_dic['iteration cost'] = icost
        current_dic['iteration MV cost'] = iMVcost
        iteration_list[ii] = current_dic
        print('iMVcost %.4f'%iMVcost)
        print('icost %.4f'%icost)

    energies = sub_eigenvalue[:k]*Hartree_to_eV

    D_end = time.time()
    Dcost = D_end - D_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
                                icost=init_time, pcost=Pcost, wall_time=Dcost,\
            energies = energies.tolist(), N_itr=ii+1, N_mv=np.shape(sub_A)[0],\
            initial_energies=initial_energies.tolist())
    if ii == max-1:
        print('========== Davidson Failed Due to Iteration Limit ============')
        print('current residual norms', r_norms)
    else:
        print('------- Davidson done -------')
    print('max_norm = ', max_norm)
    print('Total steps =', ii+1)
    print('Total time: %.4f seconds'%Dcost)
    print('MVcost %.4f'%MVcost)
    print('Final subspace shape = %s'%np.shape(sub_A)[0])
    print('Precond time: %.4f seconds'%Pcost, '{:.2%}'.format(Pcost/Dcost))
    return energies, full_guess, Davidson_dic

def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag=hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder[:,:new_m], energies = TDA_A_diag_initial_guess(new_m, hdiag=hdiag)
    return V_holder, W_holder, new_m, energies,\
                V_holder[:,:new_m], W_holder[:,:new_m]

def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag=hdiag, tol=None):
    '''preconditioners for each corresponding residual (state)'''
    hdiag = hdiag.reshape(-1,1)
    k = R_x.shape[1]
    t = 1e-14
    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    D_y_inv = D_y**-1

    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new

def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  Ω = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    dambd =  d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    dapbd = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    M = np.linalg.multi_dot([G.T, L_inv, dapbd, L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([L_inv.T, G, Z])\
            *(np.array(omega)**-0.5).reshape(1,-1)

    x_m_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([U_inv, G_inv.T, Z])\
            *(np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    return omega, x, y

def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    '''[ a b ] x - [ σ   π] x  Ω = p
       [ b a ] y   [-π  -σ] y    = q
       normalize the right hand side first
    '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)

    p /= pqnorm
    q /= pqnorm

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    '''LU = d^−1/2 (σ − π) d^−1/2
       A = PLU
       P is identity matrix only when A is diagonally dominant
    '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T'''
    dambd = d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    '''G is lower triangle matrix'''
    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    '''a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T
       M = G^T (a ̃+ b ̃) G
    '''
    dapba = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    a_p_b_tilde = np.linalg.multi_dot([L_inv, dapba, L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde)
    T += np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    '''(x ̃+ y ̃) = GZ
       x + y = d^-1/2 L^-T (x ̃+ y ̃)
       x - y = d^-1/2 U^-1 (x ̃- y ̃)
    '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)

    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x
    x *= pqnorm
    y *= pqnorm
    return x, y

def sTDDFT_eigen_solver(k, tol=args.initial_TOL):
    '''[ A' B' ] X - [1   0] Y Ω = 0
       [ B' A' ] Y   [0  -1] X   = 0
    '''
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    print('sTDDFT Convergence tol = %.2e'%tol)
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''set up initial guess V W, transformed vectors U1 U2'''
    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)


        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the eigenvalue omega in the subspace'''
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)

        '''GS and symmetric orthonormalization'''
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTDDFT Failed Due to Iteration Limit=================')
        print('sTDDFT diagonalization failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT diagonalization Converged' )

    print('after ', ii+1, 'iterations; %.4f'%sTDDFT_cost, 'seconds')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s {:<5.2%}".format(enrty, cost, cost/sTDDFT_cost))
    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*Hartree_to_eV
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y

def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup

def sTDDFT_preconditioner(Rx, Ry, omega, tol=args.precond_TOL):
    ''' [ A' B' ] - [1  0]X  Ω = P'''
    ''' [ B' A' ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''

    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    P /= pqnorm
    Q /= pqnorm

    X_new, Y_new  = TDDFT_A_diag_preconditioner(\
                        P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                    V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        '''solve the x & y in the subspace'''
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                    a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega - P
           R_y = U2x + U1y + Y_full*omega - Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index],\
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    P_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit========')
        print('sTDDFT preconditioning failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT preconditioning Done')
    print('after',ii+1,'steps; %.4f'%P_cost,'s')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/P_cost))

    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_hdiag[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)

    return X, Y

def gen_TDDFT_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_initial_guess
    i_lib['Adiag']  = TDDFT_A_diag_initial_guess
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''[ A B ] X - [1   0] Y Ω = 0
       [ B A ] Y   [0  -1] X   = 0
    '''
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    new_m = min([k + args.extrainitial, 2*k, A_size])

    TDDFT_i_lib, TDDFT_p_lib = gen_TDDFT_lib()

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig =\
                                    initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')

    Pcost = 0
    for ii in range(max):
        print('\niteration', ii)
        show_memory_info('beginning of step '+ str(ii))

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] =\
                            TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('subspace size: %s' %sigma.shape[0])

        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        max_norm = np.max(r_norms)
        print('Maximum residual norm: ', '%.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('TDDFT precedure Done\n')
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)

        P_start = time.time()
        X_new, Y_new = new_guess_generator(\
                            R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start

        m = new_m
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    omega *= Hartree_to_eV

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) \
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
            icost=init_time, pcost=Pcost, wall_time=TDDFT_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            initial_energies=initial_energies, difference=difference,\
            overlap=overlap)
    if ii == (max -1):
        print('===== TDDFT Failed Due to Iteration Limit============')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('============= TDDFT Calculation Done ==============')

    print('after', ii+1,'iterations','%.2f'%TDDFT_cost,'s')
    print('Final subspace ', sigma.shape[0])
    print('preconditioning cost', '%.4f'%Pcost, '%.2f'%(Pcost/TDDFT_cost),"%")
    print('max_norm = ', '%.2e'%max_norm)

    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic

def gen_dynpol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_preconditioner
    i_lib['Adiag']  = TDDFT_A_diag_preconditioner
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P

def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()

    dynpol_i_lib, dynpol_p_lib = gen_dynpol_lib()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        '''if have 3 ω, [ω1 ω1 ω1, ω2 ω2 ω2, ω3 ω3 ω3]
           convert nm to Hartree'''
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P

    max = args.max
    tol = args.conv_tolerance
    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega, tol=args.initial_TOL)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        '''*-1 from the definition of dipole moment. *2 for double occupancy'''
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
    initial_cost = init_end - init_start
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('Iteration', ii)

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(\
                                                V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        print('sigma.shape', sigma.shape)

        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                    a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega + P
           R_y = U2x + U1y + Y_full*omega + Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''
        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x += P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y += Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('maximum residual norm: ', '%.3e'%np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], \
                            R_y[:,index], omega[index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('======= Dynamic polarizability Failed Due to Iteration Limit=====')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full))\
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)

    show_memory_info('Total Dynamic polarizability')
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3*k,\
            icost=initial_cost, pcost=Pcost, wall_time=dp_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            difference=difference, overlap=overlap,\
            tensor_alpha=[i.tolist() for i in alpha_omega],\
            initial_tensor_alpha=[i.tolist() for i in alpha_omega_ig])
    return alpha_omega, Davidson_dic

def stapol_A_diag_initprec(P, hdiag=hdiag, tol=None):
    d = hdiag.reshape(-1,1)
    P = -P/d
    # P /= -d
    return P

def stapol_sTDDFT_initprec(Pr, tol=args.initial_TOL):
    '''(A* + B*)X = -P
       residual = (A* + B*)X + P
       X_ig = -P/d
       X_new = residual/D
    '''
    ssp_start = time.time()
    max = 30
    m = 0
    npvec = Pr.shape[1]

    P = Pr.reshape(n_occ,n_vir,-1)[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)
    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    V_holder = np.zeros((A_reduced_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    '''setting up initial guess'''
    init_start = time.time()
    X_ig = stapol_A_diag_initprec(P, hdiag=max_vir_hdiag)
    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    init_end = time.time()
    initial_cost = init_end - init_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        '''creating the subspace'''
        MV_start = time.time()
        '''U = AX + BX = (A+B)X'''
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the x in the subspace'''
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        index = [r_norms.index(i) for i in r_norms if i > tol]
        if np.max(r_norms) < tol or ii == (max -1):
            print('Static polarizability procedure aborted')
            break

        Pstart = time.time()
        X_new = stapol_A_diag_initprec(-residual[:,index], hdiag=max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
    X_full = np.dot(V,x)
    '''alpha = np.dot(X_full.T, P)*-4'''

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('== sTDDFT Stapol precond Failed Due to Iteration Limit======')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT Stapol precond Converged' )
    print('after', ii+1, 'steps', '%.4f'%ssp_cost,'s')
    print('conv threhsold = %.2e'%tol)
    print('final subspace:', a_p_b.shape[0])
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/ssp_cost))

    X_full *= pnorm

    U = np.zeros((n_occ,n_vir,npvec))
    U[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)[:,:,:]

    if max_vir < n_vir:
        ''' DX2 = -P2'''
        P2 = Pr.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)
        D2 = hdiag.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (-P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2
    U = U.reshape(A_size, npvec)
    return U

def gen_stapol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = stapol_sTDDFT_initprec
    i_lib['Adiag']  = stapol_A_diag_initprec
    p_lib['sTDDFT'] = stapol_sTDDFT_initprec
    p_lib['Adiag']  = stapol_A_diag_initprec
    return i_lib, p_lib

def static_polarizability(init, prec):
    '''(A+B)X = -P
       residual = (A+B)X + P
       X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    stapol_i_lib, stapol_p_lib = gen_stapol_lib()
    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.conv_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig = initial_guess(P, tol=args.initial_TOL)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
    initial_cost = init_end - init_start

    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('\nIteration', ii)
        MV_start = time.time()
        U_holder[:, m:new_m] = \
                    static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()

        '''solve the x in the subspace'''
        x = np.linalg.solve(a_p_b, -p)

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        max_norm = np.max(r_norms)
        print('max_norm = %.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('static polarizability precodure aborted\n')
            break

        '''preconditioning step'''
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    X_full = np.dot(V,x)
    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start

    if ii == (max -1):
        print('==== Static polarizability Failed Due to Iteration Limit ======')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Static polarizability Converged')

    print('after', ii+1, 'steps; %.4f'%sp_cost,'s')
    print('final subspace', a_p_b.shape)
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','Pcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/sp_cost))

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3,\
            icost=initial_cost, pcost=Pcost, wall_time=sp_cost, \
            N_itr=ii+1, N_mv=np.shape(a_p_b)[0], difference=difference,\
            overlap=overlap, tensor_alpha=[i.tolist() for i in tensor_alpha],\
            initial_tensor_alpha=[i.tolist() for i in alpha_init])
    return tensor_alpha, Davidson_dic

def gen_calc():
    name_dic={}
    name_dic['TDA'] = args.TDA
    name_dic['TDDFT'] = args.TDDFT
    name_dic['dynpol'] = args.dynpol
    name_dic['stapol'] = args.stapol
    name_dic['sTDA'] = args.sTDA
    name_dic['sTDDFT'] = args.sTDDFT
    name_dic['Truncate_test'] = args.Truncate_test
    name_dic['PySCF_TDDFT'] = args.pytd
    for calc in ['TDA','TDDFT','dynpol','stapol',\
                        'sTDA','sTDDFT','Truncate_test','PySCF_TDDFT']:
        if name_dic[calc] == True:
            print(calc)
            return calc

def dump_yaml(Davidson_dic, calc, init, prec):
    curpath = os.getcwd()
    yamlpath = os.path.join(\
                   curpath,basename+'_'+calc+'_i_'+init+'_p_'+prec+'.yaml')
    with open(yamlpath, "w", encoding="utf-8") as f:
        yaml.dump(Davidson_dic, f)

if __name__ == "__main__":
    calc = gen_calc()
    TDA_combo = [            # option
    ['sTDA','sTDA'],         # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDA'],        # 2
    ['sTDA','Adiag'],        # 3
    ['sTDA','Jacobi'],       # 4
    ['Adiag','Jacobi'],      # 5
    ['Adiag','new_ES'],      # 6
    ['sTDA','new_ES']]       # 7
    TDDFT_combo = [          # option
    ['sTDDFT','sTDDFT'],     # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDDFT'],      # 2
    ['sTDDFT','Adiag']]      # 3
    print('|-------- In-house Developed {0} Starts ---------|'.format(calc))
    print('Residual conv =', args.conv_tolerance)
    if args.TDA == True:
        for option in args.ip_options:
            init, prec = TDA_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies, eigenkets, Davidson_dic = Davidson(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.TDDFT == True:
        for option in args.ip_options:
            init, prec = TDDFT_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies,X,Y,Davidson_dic = TDDFT_eigen_solver(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.dynpol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\nPerturbation wavelength omega (nm) =', args.dynpol_omega)
            alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
            print('Dynamic polarizability tensor alpha')
            dump_yaml(Davidson_dic, calc, init, prec)
            for i in range(len(args.dynpol_omega)):
                print(args.dynpol_omega[i],'nm')
                print(alpha_omega[i])
    if args.stapol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\n')
            tensor_alpha, Davidson_dic = static_polarizability(init,prec)
            print('Static polarizability tensor alpha')
            print(tensor_alpha)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.sTDA == True:
        X, energies = sTDA_eigen_solver(k=args.nstates, tol=args.conv_tolerance)
    if args.sTDDFT == True:
        energies,X,Y = sTDDFT_eigen_solver(k=args.nstates,tol=args.conv_tolerance)
    if args.Truncate_test == True:
        n_states= args.nstates
        X = np.random.rand(A_size,n_state)
        Y = np.random.rand(A_size,n_state)
        print('n_vir = ', n_vir)
        print('A_size =', A_size)
        print('n_states =', n_states)
        print("{:<8} {:<8} {:<8} {:<8}".format(\
                'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
        for vir_trunc in [40, 50, 60, 70, 10000000]:
            del max_vir, sTDA_mv, sTDDFT_mv
            max_vir = gen_maxvir(tol_eV = vir_trunc)
            q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
            # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
            iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                            max_vir=max_vir, \
                                            q_ij = q_ij, \
                                            q_ab = q_ab, \
                                            q_ia = q_ia , \
                                            GK_q_jb = GK_q_jb, \
                                            GJ_q_ab = GJ_q_ab)

            sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                            max_vir=max_vir, \
                                            iajb_fly = iajb_fly, \
                                            ijab_fly = ijab_fly, \
                                            ibja_fly = ibja_fly, \
                                            delta_fly = delta_fly)

            sTDA_start = time.time()
            sTDA_X = sTDA_mv(X)
            sTDA_end = time.time()
            sTDA_mv_time = sTDA_end - sTDA_start

            sTDDFT_start = time.time()
            sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
            sTDDFT_end = time.time()
            sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

            print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                    vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))
    if args.pytd == True:
        TD.nstates = args.nstates
        TD.conv_tol = args.conv_tolerance
        TD.kernel()
        end = time.time()
    if args.verbose > 3:
        for key in vars(args):
            print(key,'=', vars(args)[key])
    print('|-------- In-house Developed {0} Ends ----------|'.format(calc))
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt314', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Sat Jul 10 14:12:04 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 160000 
[INPUT] num. atoms = 76
[INPUT] num. electrons = 298
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      5.559624300023   0.651281421802  -1.864908644267 AA   10.506167282520   1.230743517223  -3.524166584999 Bohr
[INPUT]  2 O      6.377818206338  -2.016379333822  -1.837706674260 AA   12.052329682244  -3.810404704157  -3.472762311637 Bohr
[INPUT]  3 O      5.512230034255   0.072439663768   0.316303558149 AA   10.416605100343   0.136891125078   0.597727097128 Bohr
[INPUT]  4 O      6.471897998305  -3.379034502832  -0.038452621334 AA   12.230114722916  -6.385449775807  -0.072664923093 Bohr
[INPUT]  5 N     -2.263082163733   1.934033430576  -0.066862640884 AA   -4.276605486843   3.654793499542  -0.126352079235 Bohr
[INPUT]  6 N     -2.511154661691  -1.321748027285   0.086743556711 AA   -4.745394567021  -2.497741777253   0.163921565255 Bohr
[INPUT]  7 N      0.391100920292   1.702542236117   0.341845347179 AA    0.739073626417   3.217338541765   0.645994083125 Bohr
[INPUT]  8 N      0.149306387569  -1.441986897956   0.416680386999 AA    0.282148181154  -2.724960312348   0.787411812907 Bohr
[INPUT]  9 C      2.564937035245   2.497666720731   0.699931612457 AA    4.847028523368   4.719906052622   1.322679053470 Bohr
[INPUT] 10 C      2.213489988193  -2.526329979928   0.617078962096 AA    4.182889857151  -4.774071762342   1.166110235592 Bohr
[INPUT] 11 C      1.680599987073   1.317228325896   0.562672356105 AA    3.175873700515   2.489200779463   1.063296650903 Bohr
[INPUT] 12 C      1.755348126111   3.599763120853   0.538742301773 AA    3.317127211618   6.802566411722   1.018075402070 Bohr
[INPUT] 13 C      1.490954599230  -1.236757836467   0.547216448788 AA    2.817495856706  -2.337133593332   1.034089219066 Bohr
[INPUT] 14 C      1.254628984339  -3.509530173101   0.541706249594 AA    2.370905168343  -6.632050853058   1.023676451698 Bohr
[INPUT] 15 C      0.404908797691   3.069517785127   0.319793554834 AA    0.765166733063   5.800547948371   0.604322235037 Bohr
[INPUT] 16 C     -0.025004741228  -2.799277418137   0.422293475505 AA   -0.047252112736  -5.289867666959   0.798019012895 Bohr
[INPUT] 17 C     -2.028433219596   3.294736861614  -0.076362459956 AA   -3.833183247006   6.226150320959  -0.144304135514 Bohr
[INPUT] 18 C     -3.806881296063  -0.875919091383  -0.064403969441 AA   -7.193963038288  -1.655247189992  -0.121705863579 Bohr
[INPUT] 19 C     -2.485113968327  -2.693932919016   0.174361796825 AA   -4.696184788469  -5.090795414891   0.329496042586 Bohr
[INPUT] 20 C     -3.599045782518   1.674058260878  -0.267776011601 AA   -6.801210838731   3.163511629626  -0.506023324653 Bohr
[INPUT] 21 C      4.047701716662   2.507984511616   0.958976376394 AA    7.649047678423   4.739403851605   1.812202711313 Bohr
[INPUT] 22 C      3.705115313662  -2.690825737728   0.639067266532 AA    7.001653202754  -5.084923693236   1.207662108919 Bohr
[INPUT] 23 C      2.159543738343  -0.002402987027   0.644521891546 AA    4.080946219487  -0.004540987362   1.217969856309 Bohr
[INPUT] 24 C     -3.281928287856   3.959315994444  -0.306121867632 AA   -6.201945624510   7.482022870110  -0.578486490564 Bohr
[INPUT] 25 C     -4.665105590143  -2.042353530479  -0.066632942983 AA   -8.815771907549  -3.859488822144  -0.125918013112 Bohr
[INPUT] 26 C     -4.254399767884   2.965841788186  -0.455453217856 AA   -8.039650385714   5.604628708462  -0.860681844300 Bohr
[INPUT] 27 C     -3.848431169213  -3.173712924899   0.070021789421 AA   -7.272480919053  -5.997448226052   0.132322004758 Bohr
[INPUT] 28 C     -0.752813232445   3.841306721983   0.115420576995 AA   -1.422610832270   7.259017665000   0.218113279659 Bohr
[INPUT] 29 C     -1.289363978288  -3.408051480024   0.323518783121 AA   -2.436544793844  -6.440283915665   0.611361896251 Bohr
[INPUT] 30 C     -4.261472886620   0.441956246278  -0.221886854989 AA   -8.053016642972   0.835176264506  -0.419305386571 Bohr
[INPUT] 31 C      2.119372345372   5.053692292635   0.572544779609 AA    4.005033288730   9.550094350905   1.081952827510 Bohr
[INPUT] 32 C      4.925843940857   2.342906077874  -0.306491836570 AA    9.308495980569   4.427450822761  -0.579185630533 Bohr
[INPUT] 33 C      4.294711290848  -2.578110755852  -0.782629532417 AA    8.115828123781  -4.871923247355  -1.478955473265 Bohr
[INPUT] 34 C      1.429558152170  -4.998471636530   0.552478871990 AA    2.701473386740  -9.445742434448   1.044033757669 Bohr
[INPUT] 35 C     -3.455511697611   5.443214539949  -0.427532937636 AA   -6.529970728715  10.286184717754  -0.807920161363 Bohr
[INPUT] 36 C     -6.158718607069  -2.010722506939  -0.180363765536 AA  -11.638291445623  -3.799714850613  -0.340838119658 Bohr
[INPUT] 37 C     -5.663662615932   3.211826545843  -0.755370583521 AA  -10.702771206049   6.069472531251  -1.427443525407 Bohr
[INPUT] 38 C     -4.196394415250  -4.586714204087   0.129378220222 AA   -7.930036155477  -8.667633657378   0.244489402704 Bohr
[INPUT] 39 C      5.346788275321   0.908094807187  -0.562403177576 AA   10.103965486393   1.716050480723  -1.062787977205 Bohr
[INPUT] 40 C      5.797601852709  -2.717301328334  -0.792284121396 AA   10.955879680892  -5.134955308468  -1.497200002281 Bohr
[INPUT] 41 C     -6.494210827619   2.451534451164  -1.501352343501 AA  -12.272279859386   4.632728697637  -2.837144745691 Bohr
[INPUT] 42 C     -5.374381906977  -5.174140621413  -0.180044612494 AA  -10.156109893003  -9.777708704458  -0.340235007818 Bohr
[INPUT] 43 H      4.332963203896   1.712991976864   1.670455659906 AA    8.188113763181   3.237085689850   3.156703700452 Bohr
[INPUT] 44 H      4.306930454131   3.466855861878   1.438473710191 AA    8.138918995856   6.551408092292   2.718321349648 Bohr
[INPUT] 45 H      3.986253530777  -3.670839595528   1.059914601652 AA    7.532927436250  -6.936881482756   2.002948312549 Bohr
[INPUT] 46 H      4.182115176280  -1.923457164521   1.271232219167 AA    7.903052304556  -3.634807253277   2.402280734948 Bohr
[INPUT] 47 H      3.237905891275  -0.084404355624   0.813168049000 AA    6.118755351625  -0.159501115850   1.536664905856 Bohr
[INPUT] 48 H     -0.662788450474   4.931007802631   0.107000929864 AA   -1.252488649921   9.318254265066   0.202202452516 Bohr
[INPUT] 49 H     -1.345591332255  -4.499069544781   0.358515334275 AA   -2.542799093551  -8.502009255008   0.677495793237 Bohr
[INPUT] 50 H     -1.432246892536   1.323063846525   0.106197128117 AA   -2.706554369653   2.500228315246   0.200683487356 Bohr
[INPUT] 51 H     -1.587122041616  -0.835758816099   0.163801945146 AA   -2.999225984916  -1.579355268618   0.309540814997 Bohr
[INPUT] 52 H     -5.344471507339   0.529156515479  -0.321890269578 AA  -10.099587429413   0.999960891285  -0.608284451664 Bohr
[INPUT] 53 H      1.486917835643   5.613273615728   1.286139745064 AA    2.809867479096  10.607549795972   2.430451876089 Bohr
[INPUT] 54 H      3.171042614435   5.200438297701   0.869621327576 AA    5.992402070608   9.827404110355   1.643346141200 Bohr
[INPUT] 55 H      1.985334574351   5.527358336554  -0.418526055697 AA    3.751738611153  10.445193448418  -0.790899621262 Bohr
[INPUT] 56 H      5.872102906281   2.903403800947  -0.176825319871 AA   11.096666268134   5.486638012811  -0.334151426445 Bohr
[INPUT] 57 H      4.439002275062   2.749925054515  -1.207343985535 AA    8.388498566189   5.196605216113  -2.281549470803 Bohr
[INPUT] 58 H      3.890065432922  -3.386705403339  -1.422112078361 AA    7.351158274860  -6.399945676896  -2.687402346538 Bohr
[INPUT] 59 H      4.003308098872  -1.630244252785  -1.261909964788 AA    7.565155899122  -3.080715153910  -2.384664227309 Bohr
[INPUT] 60 H      2.478958576011  -5.277037786881   0.744107985359 AA    4.684552782802  -9.972156166186   1.406160299431 Bohr
[INPUT] 61 H      1.133139877550  -5.449614911079  -0.413492845670 AA    2.141324029393 -10.298279666286  -0.781388232784 Bohr
[INPUT] 62 H      0.808166296344  -5.473325400301   1.334131672225 AA    1.527212963194 -10.343085997194   2.521143474614 Bohr
[INPUT] 63 H     -4.506281062450   5.739719334664  -0.277798275255 AA   -8.515637048344  10.846497574386  -0.524962658108 Bohr
[INPUT] 64 H     -3.152205553838   5.801653802871  -1.429444318104 AA   -5.956805185086  10.963536756967  -2.701258271532 Bohr
[INPUT] 65 H     -2.840009459856   5.980442810003   0.314434835521 AA   -5.366840070301  11.301399014529   0.594195723157 Bohr
[INPUT] 66 H     -6.497624650500  -2.344065643939  -1.179828324093 AA  -12.278731049668  -4.429642085047  -2.229552406540 Bohr
[INPUT] 67 H     -6.562994334467  -1.000053009711  -0.012067214322 AA  -12.402261849215  -1.889826298401  -0.022803730155 Bohr
[INPUT] 68 H     -6.618977840437  -2.686857898709   0.561928261844 AA  -12.508055342991  -5.077425564184   1.061890516538 Bohr
[INPUT] 69 H     -6.063327228222   4.152097286252  -0.349090565261 AA  -11.458027864957   7.846326713567  -0.659685561012 Bohr
[INPUT] 70 H     -3.383268052462  -5.244494092092   0.464138631706 AA   -6.393450025145  -9.910657495953   0.877094897755 Bohr
[INPUT] 71 H     -7.535989807776   2.751455596418  -1.657478757286 AA  -14.240956814210   5.199497521132  -3.132180908555 Bohr
[INPUT] 72 H     -6.160906615927   1.536741716220  -2.002972833264 AA  -11.642426183124   2.904020967850  -3.785070089813 Bohr
[INPUT] 73 H     -5.492848751428  -6.258265397419  -0.081113405580 AA  -10.379979783859 -11.826407615965  -0.153282121577 Bohr
[INPUT] 74 H     -6.239355130685  -4.618233280566  -0.550872080796 AA  -11.790672390894  -8.727196079621  -1.040997362373 Bohr
[INPUT] 75 H      5.876896067352  -0.290777046710  -1.930316146589 AA   11.105724029830  -0.549488981591  -3.647768850879 Bohr
[INPUT] 76 H      7.342654726540  -2.183889966448  -1.764646943557 AA   13.875606460404  -4.126953922773  -3.334699429874 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1

nuclear repulsion = 4767.94707731771
number of shells = 598
number of NR pGTOs = 2204
number of NR cGTOs = 1506
basis = def2-tzvp
ecp = {}
CPU time:         2.29
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 76_Protoporphyrin_pbe0.chk
max_memory 160000 MB (current use 56 MB)
XC functionals = pbe0
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7fec4cefbe18>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7fec4cefbd90>
Set gradient conv threshold to 1e-05
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
tot grids = 926716
Drop grids 177230
    CPU time for setting up grids    270.31 sec, wall time     18.49 sec
nelec by numeric integration = 298.000361948121
    CPU time for vxc    392.39 sec, wall time     26.44 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 160000
_cderi_to_save = /tmp/job.15978489.hpc/tmp56s0zsk0
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
num shells = 1254, num cGTOs = 3778
size of aux basis 3778
int3c2e [1/1], AO [0:598], nrow = 1134771
    CPU time for cholesky_eri    836.36 sec, wall time    152.83 sec
    CPU time for df vj and vk   2574.71 sec, wall time    288.45 sec
E1 = -11984.455296757427  Ecoul = 5639.050529470301  Exc = -257.1056722022498
init E= -1834.56336217166
cond(S) = 2944103.1704552816
    CPU time for initialize scf   3257.77 sec, wall time    335.60 sec
  HOMO = -0.201316332451847  LUMO = -0.0916234890206252
  mo_energy =
[-1.92736728e+01 -1.92490871e+01 -1.92072206e+01 -1.91960221e+01
 -1.44228910e+01 -1.44212952e+01 -1.43544449e+01 -1.43543715e+01
 -1.03679430e+01 -1.03588892e+01 -1.02855977e+01 -1.02825726e+01
 -1.02754380e+01 -1.02739493e+01 -1.02537932e+01 -1.02537791e+01
 -1.02536617e+01 -1.02528827e+01 -1.02510098e+01 -1.02502968e+01
 -1.02493269e+01 -1.02483510e+01 -1.02461610e+01 -1.02461388e+01
 -1.02449425e+01 -1.02444681e+01 -1.02440644e+01 -1.02386965e+01
 -1.02381607e+01 -1.02363633e+01 -1.02349480e+01 -1.02346670e+01
 -1.02337932e+01 -1.02310396e+01 -1.02303478e+01 -1.02302118e+01
 -1.02290487e+01 -1.02285821e+01 -1.02277278e+01 -1.02268564e+01
 -1.02266387e+01 -1.02251941e+01 -1.14582322e+00 -1.13148175e+00
 -1.05642754e+00 -1.04064403e+00 -1.01462243e+00 -1.00852220e+00
 -9.65349918e-01 -9.58850408e-01 -8.52807315e-01 -8.47643109e-01
 -8.45487529e-01 -8.35422601e-01 -8.32812574e-01 -8.19852980e-01
 -8.13530587e-01 -7.96191359e-01 -7.89672377e-01 -7.86702830e-01
 -7.81035583e-01 -7.61073776e-01 -7.49763786e-01 -7.34503242e-01
 -7.32395874e-01 -7.25866510e-01 -7.07516315e-01 -6.85147037e-01
 -6.82742852e-01 -6.72414914e-01 -6.64052557e-01 -6.44679004e-01
 -6.34147970e-01 -6.15601515e-01 -6.09152222e-01 -6.00299664e-01
 -5.94737278e-01 -5.78556250e-01 -5.71203481e-01 -5.61366171e-01
 -5.49875942e-01 -5.49541765e-01 -5.34198998e-01 -5.27814014e-01
 -5.24679795e-01 -5.23625124e-01 -5.16874084e-01 -5.11174905e-01
 -5.08650923e-01 -5.00659784e-01 -4.94390515e-01 -4.91799163e-01
 -4.89411567e-01 -4.79548487e-01 -4.77509426e-01 -4.71572565e-01
 -4.63093401e-01 -4.60067919e-01 -4.56187578e-01 -4.50679131e-01
 -4.49018054e-01 -4.47611841e-01 -4.45073067e-01 -4.42444477e-01
 -4.39931005e-01 -4.35969077e-01 -4.33585671e-01 -4.31153084e-01
 -4.25047735e-01 -4.22086747e-01 -4.19286538e-01 -4.19101934e-01
 -4.15414643e-01 -4.12019499e-01 -4.09919953e-01 -4.08682985e-01
 -4.05504240e-01 -4.01381049e-01 -3.98867925e-01 -3.96065475e-01
 -3.92078774e-01 -3.90548001e-01 -3.83570361e-01 -3.80807998e-01
 -3.78542911e-01 -3.73794226e-01 -3.68349676e-01 -3.63360699e-01
 -3.60430283e-01 -3.57124751e-01 -3.54705708e-01 -3.53306155e-01
 -3.49390946e-01 -3.42072766e-01 -3.35253480e-01 -3.26900104e-01
 -3.18509832e-01 -3.06602169e-01 -2.97266363e-01 -2.89035174e-01
 -2.86929939e-01 -2.84841900e-01 -2.65105948e-01 -2.52233439e-01
 -2.46726537e-01 -2.39695677e-01 -2.33845327e-01 -2.02586959e-01
 -2.01316332e-01 -9.16234890e-02 -8.86657211e-02 -3.75494511e-02
 -1.81838493e-02 -4.68513051e-03  1.36783829e-03  6.36070171e-03
  3.12521712e-02  3.47105015e-02  3.81016621e-02  4.28790444e-02
  4.56949609e-02  4.72156347e-02  5.86408694e-02  6.40928038e-02
  6.65577566e-02  7.27228268e-02  7.51617588e-02  7.82748346e-02
  7.88974161e-02  8.26486573e-02  8.60249885e-02  8.95792887e-02
  9.14097412e-02  9.23909891e-02  9.73648736e-02  1.00150789e-01
  1.04272760e-01  1.11346267e-01  1.12464699e-01  1.16016309e-01
  1.17899606e-01  1.19947876e-01  1.21606601e-01  1.23387715e-01
  1.26820126e-01  1.29435098e-01  1.30634331e-01  1.33220296e-01
  1.34521073e-01  1.40754376e-01  1.41473420e-01  1.42395060e-01
  1.46761207e-01  1.49918162e-01  1.52036161e-01  1.53236182e-01
  1.54968407e-01  1.56947944e-01  1.60149509e-01  1.63090291e-01
  1.63802406e-01  1.66523706e-01  1.70354674e-01  1.73339530e-01
  1.76079645e-01  1.77821474e-01  1.83828816e-01  1.86301035e-01
  1.86968197e-01  1.91730535e-01  1.96016110e-01  1.97401100e-01
  1.99411040e-01  2.00486320e-01  2.03958963e-01  2.05531421e-01
  2.08492155e-01  2.12857351e-01  2.16435573e-01  2.17458930e-01
  2.18683315e-01  2.19513373e-01  2.22788057e-01  2.26154389e-01
  2.28071998e-01  2.29818333e-01  2.33387663e-01  2.35248524e-01
  2.36921625e-01  2.41804473e-01  2.44264415e-01  2.49398832e-01
  2.54444643e-01  2.57046670e-01  2.57327597e-01  2.59292173e-01
  2.62358314e-01  2.63429646e-01  2.65408693e-01  2.67782499e-01
  2.69228455e-01  2.75331614e-01  2.78039093e-01  2.78726743e-01
  2.80713511e-01  2.82160901e-01  2.86428686e-01  2.87983541e-01
  2.93249812e-01  2.94206689e-01  2.97961195e-01  3.02614709e-01
  3.03825261e-01  3.05492850e-01  3.10189764e-01  3.12023943e-01
  3.13819606e-01  3.17354328e-01  3.19165818e-01  3.22938486e-01
  3.23703847e-01  3.26482658e-01  3.29376187e-01  3.34017074e-01
  3.36808645e-01  3.37813655e-01  3.40283880e-01  3.45134232e-01
  3.47480205e-01  3.48730230e-01  3.52635300e-01  3.55273624e-01
  3.56876722e-01  3.58181016e-01  3.60053184e-01  3.65853255e-01
  3.66280281e-01  3.68716537e-01  3.70366502e-01  3.70799865e-01
  3.75402209e-01  3.77819522e-01  3.81651416e-01  3.85354730e-01
  3.85444838e-01  3.87186927e-01  3.89392435e-01  3.92316818e-01
  3.94068345e-01  3.97368904e-01  3.99796243e-01  4.01448405e-01
  4.04380616e-01  4.09714011e-01  4.11777561e-01  4.12632320e-01
  4.16494564e-01  4.17592822e-01  4.19013366e-01  4.21689320e-01
  4.23249529e-01  4.24467647e-01  4.29499295e-01  4.31048000e-01
  4.33546770e-01  4.34957151e-01  4.36845670e-01  4.38756826e-01
  4.39997631e-01  4.44215125e-01  4.47685144e-01  4.49026409e-01
  4.49906919e-01  4.52974059e-01  4.54338301e-01  4.56901457e-01
  4.57754641e-01  4.60954741e-01  4.63966819e-01  4.66257405e-01
  4.70921521e-01  4.72480406e-01  4.73896884e-01  4.76668848e-01
  4.78520272e-01  4.81228678e-01  4.83354637e-01  4.85567753e-01
  4.86468402e-01  4.89283915e-01  4.90258973e-01  4.93549159e-01
  4.94412323e-01  4.98243970e-01  5.00967133e-01  5.03705690e-01
  5.06546883e-01  5.09568629e-01  5.11880797e-01  5.13183443e-01
  5.15350600e-01  5.18917426e-01  5.20383976e-01  5.24242824e-01
  5.27607389e-01  5.29110843e-01  5.35924381e-01  5.39140544e-01
  5.40412139e-01  5.42237230e-01  5.44413224e-01  5.47639644e-01
  5.48650828e-01  5.55466562e-01  5.58891381e-01  5.59980059e-01
  5.63059280e-01  5.63269735e-01  5.69054184e-01  5.70045961e-01
  5.73151327e-01  5.75782699e-01  5.78602228e-01  5.81900540e-01
  5.87142417e-01  5.89326430e-01  5.91631308e-01  5.94848086e-01
  5.99433417e-01  6.03185629e-01  6.06488225e-01  6.08265954e-01
  6.11722359e-01  6.14460975e-01  6.16829258e-01  6.19219650e-01
  6.22916305e-01  6.25834527e-01  6.27109938e-01  6.27322203e-01
  6.31440845e-01  6.34315104e-01  6.36193101e-01  6.39662959e-01
  6.41937202e-01  6.45338630e-01  6.49386438e-01  6.50777454e-01
  6.52725303e-01  6.54017417e-01  6.57507135e-01  6.59760230e-01
  6.61318445e-01  6.66012967e-01  6.69846755e-01  6.71314828e-01
  6.75212183e-01  6.77851360e-01  6.78887169e-01  6.81568414e-01
  6.83220160e-01  6.86763240e-01  6.91889405e-01  6.95453728e-01
  6.97530219e-01  7.01048550e-01  7.04625873e-01  7.06794769e-01
  7.11680291e-01  7.15246301e-01  7.17349506e-01  7.17663586e-01
  7.24898765e-01  7.27801608e-01  7.31116864e-01  7.34503782e-01
  7.38303289e-01  7.39541269e-01  7.43697242e-01  7.46195910e-01
  7.52270536e-01  7.56068627e-01  7.59189439e-01  7.60641944e-01
  7.64223758e-01  7.70862180e-01  7.72674679e-01  7.75882328e-01
  7.78837460e-01  7.82055765e-01  7.88460943e-01  7.90199379e-01
  7.94286275e-01  7.98403634e-01  8.01132753e-01  8.05171626e-01
  8.10573532e-01  8.12404436e-01  8.14273852e-01  8.20173498e-01
  8.23013372e-01  8.25838045e-01  8.31262749e-01  8.35205967e-01
  8.37580081e-01  8.38571271e-01  8.41256369e-01  8.48673567e-01
  8.50389364e-01  8.55419556e-01  8.59631610e-01  8.62954640e-01
  8.64211290e-01  8.73250279e-01  8.76732585e-01  8.78331717e-01
  8.83748096e-01  8.87112949e-01  8.92734479e-01  8.94084387e-01
  8.97060361e-01  9.00139585e-01  9.03073577e-01  9.07209189e-01
  9.11683587e-01  9.20912721e-01  9.24050576e-01  9.24311482e-01
  9.27876032e-01  9.32552139e-01  9.36946361e-01  9.39082358e-01
  9.42031683e-01  9.44915817e-01  9.47437993e-01  9.52449828e-01
  9.54402705e-01  9.58744272e-01  9.60269082e-01  9.60853996e-01
  9.68390987e-01  9.73138924e-01  9.76254448e-01  9.77973671e-01
  9.79883501e-01  9.83342828e-01  9.88958763e-01  9.92322692e-01
  9.95100906e-01  9.98360973e-01  1.00380661e+00  1.00444614e+00
  1.01269557e+00  1.01973781e+00  1.02403100e+00  1.02722914e+00
  1.03363199e+00  1.03572774e+00  1.03902084e+00  1.04120199e+00
  1.04484006e+00  1.04715038e+00  1.05561671e+00  1.05969936e+00
  1.06238354e+00  1.06556895e+00  1.06903279e+00  1.07286819e+00
  1.07790246e+00  1.08020665e+00  1.08327516e+00  1.08545011e+00
  1.09164474e+00  1.09404704e+00  1.09763558e+00  1.10557339e+00
  1.10898080e+00  1.11336163e+00  1.12190330e+00  1.12384533e+00
  1.12717255e+00  1.12825575e+00  1.13114433e+00  1.13691816e+00
  1.14533584e+00  1.14891876e+00  1.15202093e+00  1.15543691e+00
  1.15797170e+00  1.16728046e+00  1.16926124e+00  1.17505747e+00
  1.18115813e+00  1.18338305e+00  1.18779919e+00  1.19157608e+00
  1.19598652e+00  1.19729922e+00  1.20616728e+00  1.21030211e+00
  1.21598553e+00  1.21980726e+00  1.22278610e+00  1.22578754e+00
  1.22929772e+00  1.23449940e+00  1.24200010e+00  1.24264849e+00
  1.24632216e+00  1.25023571e+00  1.25731368e+00  1.26016308e+00
  1.26938161e+00  1.27411634e+00  1.27723578e+00  1.27900239e+00
  1.28116214e+00  1.28571129e+00  1.29094947e+00  1.29578360e+00
  1.30397116e+00  1.30646364e+00  1.31506064e+00  1.31837729e+00
  1.32043441e+00  1.32359161e+00  1.32584479e+00  1.33151807e+00
  1.33633397e+00  1.34309576e+00  1.34686268e+00  1.35318989e+00
  1.35568055e+00  1.36020218e+00  1.36722327e+00  1.36977837e+00
  1.37392333e+00  1.37958870e+00  1.38234369e+00  1.39151087e+00
  1.39705943e+00  1.40147161e+00  1.40362859e+00  1.41327742e+00
  1.41575438e+00  1.42124890e+00  1.42204845e+00  1.43085087e+00
  1.43636680e+00  1.44091163e+00  1.44189147e+00  1.44458837e+00
  1.45058258e+00  1.45385549e+00  1.45694564e+00  1.45954588e+00
  1.46296669e+00  1.46610732e+00  1.47344474e+00  1.47531834e+00
  1.48589029e+00  1.49239092e+00  1.49633925e+00  1.49895206e+00
  1.50178266e+00  1.50817018e+00  1.51160316e+00  1.51565194e+00
  1.52035367e+00  1.52447653e+00  1.52994821e+00  1.53578942e+00
  1.53818366e+00  1.54324986e+00  1.54597911e+00  1.54715619e+00
  1.54942215e+00  1.55261630e+00  1.55458279e+00  1.55767820e+00
  1.55930413e+00  1.56382014e+00  1.56769794e+00  1.57140037e+00
  1.57392546e+00  1.57646820e+00  1.57742115e+00  1.57996394e+00
  1.58243297e+00  1.58596172e+00  1.58694659e+00  1.59192895e+00
  1.59469081e+00  1.59477131e+00  1.59711816e+00  1.60151517e+00
  1.60641359e+00  1.60893703e+00  1.61061077e+00  1.61598808e+00
  1.61779592e+00  1.62125705e+00  1.62437251e+00  1.62638114e+00
  1.62883576e+00  1.63506245e+00  1.63594288e+00  1.64139393e+00
  1.64636283e+00  1.64932985e+00  1.65172678e+00  1.65445350e+00
  1.65565136e+00  1.65973245e+00  1.66446943e+00  1.66644075e+00
  1.66868567e+00  1.67226851e+00  1.67423189e+00  1.67793864e+00
  1.68706515e+00  1.68902113e+00  1.69479223e+00  1.69751283e+00
  1.70085826e+00  1.70627387e+00  1.71182622e+00  1.71353319e+00
  1.71605672e+00  1.72279872e+00  1.72410280e+00  1.72868459e+00
  1.73192758e+00  1.73553116e+00  1.73901184e+00  1.74117859e+00
  1.74581732e+00  1.75437630e+00  1.75809744e+00  1.76218300e+00
  1.76585380e+00  1.76923583e+00  1.77306498e+00  1.78389698e+00
  1.78710346e+00  1.79004961e+00  1.79769576e+00  1.79910977e+00
  1.80617194e+00  1.80881056e+00  1.81505448e+00  1.82528588e+00
  1.82696768e+00  1.83074463e+00  1.83521512e+00  1.83653710e+00
  1.84019603e+00  1.84555213e+00  1.84785011e+00  1.85137628e+00
  1.85320272e+00  1.85741756e+00  1.86275869e+00  1.86741950e+00
  1.86959378e+00  1.87277824e+00  1.87379462e+00  1.87639107e+00
  1.88496899e+00  1.88789546e+00  1.89368633e+00  1.89912384e+00
  1.90397260e+00  1.90889454e+00  1.91252977e+00  1.91705683e+00
  1.92081018e+00  1.92712399e+00  1.92948358e+00  1.93128830e+00
  1.93996699e+00  1.94455799e+00  1.94717304e+00  1.95312020e+00
  1.95596764e+00  1.96508480e+00  1.96875190e+00  1.97757922e+00
  1.98436551e+00  1.98831578e+00  1.99216627e+00  1.99619864e+00
  2.00187688e+00  2.00688943e+00  2.01528568e+00  2.01892034e+00
  2.02265720e+00  2.02739743e+00  2.03381332e+00  2.03681177e+00
  2.04594488e+00  2.04786334e+00  2.05113257e+00  2.05497652e+00
  2.05761505e+00  2.06233491e+00  2.06330152e+00  2.07120455e+00
  2.07429365e+00  2.07819166e+00  2.08115354e+00  2.08274715e+00
  2.08739337e+00  2.09070938e+00  2.09427550e+00  2.09955428e+00
  2.10242090e+00  2.10688825e+00  2.10941930e+00  2.11507972e+00
  2.11827061e+00  2.12336745e+00  2.12806660e+00  2.13469589e+00
  2.13929500e+00  2.14133399e+00  2.14498505e+00  2.14722193e+00
  2.15304722e+00  2.16223870e+00  2.16392281e+00  2.16736094e+00
  2.17176621e+00  2.17591212e+00  2.18015905e+00  2.18729206e+00
  2.19423333e+00  2.20119845e+00  2.20393766e+00  2.20657101e+00
  2.21704232e+00  2.21913019e+00  2.22412681e+00  2.23298702e+00
  2.23457496e+00  2.24060822e+00  2.24769897e+00  2.25130022e+00
  2.25793059e+00  2.26056547e+00  2.26248905e+00  2.27249620e+00
  2.27654745e+00  2.27819385e+00  2.28544781e+00  2.28863046e+00
  2.29438638e+00  2.30049783e+00  2.30434941e+00  2.30779340e+00
  2.31289006e+00  2.31672474e+00  2.32374221e+00  2.32914847e+00
  2.33066786e+00  2.33361079e+00  2.33982150e+00  2.34263922e+00
  2.34972263e+00  2.35585533e+00  2.35744487e+00  2.36345238e+00
  2.36482277e+00  2.36931239e+00  2.37147046e+00  2.37534488e+00
  2.37631442e+00  2.38461588e+00  2.38728174e+00  2.39002440e+00
  2.39473901e+00  2.39769783e+00  2.40496362e+00  2.41060049e+00
  2.41315974e+00  2.41782829e+00  2.42117404e+00  2.42482382e+00
  2.42972170e+00  2.43150513e+00  2.44154405e+00  2.44700016e+00
  2.44878791e+00  2.45168227e+00  2.45706565e+00  2.46182901e+00
  2.46381988e+00  2.47007793e+00  2.47169196e+00  2.47646235e+00
  2.48655911e+00  2.49016937e+00  2.49811330e+00  2.50266802e+00
  2.50647190e+00  2.51183708e+00  2.51918482e+00  2.52729264e+00
  2.52939317e+00  2.53176110e+00  2.53654869e+00  2.54011138e+00
  2.54597529e+00  2.54832970e+00  2.54981395e+00  2.55358225e+00
  2.55837467e+00  2.56024810e+00  2.56213598e+00  2.56712666e+00
  2.57154896e+00  2.57507309e+00  2.58206725e+00  2.58501580e+00
  2.58669294e+00  2.59351602e+00  2.59526250e+00  2.59888157e+00
  2.60741878e+00  2.61559327e+00  2.61701794e+00  2.61933710e+00
  2.62345641e+00  2.62940746e+00  2.63372524e+00  2.63863538e+00
  2.64283545e+00  2.64390515e+00  2.64839133e+00  2.65170380e+00
  2.65581384e+00  2.65816285e+00  2.66405926e+00  2.66743184e+00
  2.66935169e+00  2.67603494e+00  2.67973712e+00  2.68558099e+00
  2.68628549e+00  2.69014847e+00  2.69389315e+00  2.70521859e+00
  2.70754360e+00  2.70997488e+00  2.71456580e+00  2.71927403e+00
  2.72187320e+00  2.73217821e+00  2.73491742e+00  2.74043340e+00
  2.74581916e+00  2.74680393e+00  2.74968145e+00  2.75236162e+00
  2.75506206e+00  2.75888500e+00  2.76565435e+00  2.76610407e+00
  2.77239933e+00  2.77433668e+00  2.78096655e+00  2.78384216e+00
  2.78543851e+00  2.79215449e+00  2.79586543e+00  2.79778307e+00
  2.80821877e+00  2.80920684e+00  2.81376635e+00  2.81526754e+00
  2.81969190e+00  2.82412048e+00  2.83324636e+00  2.83497721e+00
  2.83778775e+00  2.84467879e+00  2.84662106e+00  2.85241767e+00
  2.85394799e+00  2.85754195e+00  2.86449184e+00  2.86923488e+00
  2.87242244e+00  2.87584691e+00  2.87928374e+00  2.88286066e+00
  2.88535410e+00  2.89178377e+00  2.89440401e+00  2.90033051e+00
  2.90420383e+00  2.91124355e+00  2.91367348e+00  2.91662602e+00
  2.91762775e+00  2.92456713e+00  2.93280192e+00  2.93387431e+00
  2.94198402e+00  2.94366645e+00  2.94628503e+00  2.94875424e+00
  2.95619979e+00  2.96106001e+00  2.96251739e+00  2.96943358e+00
  2.97200455e+00  2.97755182e+00  2.97871305e+00  2.98178266e+00
  2.98448525e+00  2.98758279e+00  2.99299905e+00  2.99741393e+00
  2.99955653e+00  3.00414562e+00  3.00783664e+00  3.01167336e+00
  3.01444605e+00  3.01680428e+00  3.01766868e+00  3.02062333e+00
  3.02396641e+00  3.02860738e+00  3.03045684e+00  3.03342315e+00
  3.03695177e+00  3.03921986e+00  3.04451458e+00  3.04937610e+00
  3.05088313e+00  3.05499960e+00  3.05939886e+00  3.06462919e+00
  3.06810546e+00  3.07006235e+00  3.07242262e+00  3.07517490e+00
  3.08254768e+00  3.08382516e+00  3.08536791e+00  3.08668573e+00
  3.09152107e+00  3.09567349e+00  3.10169778e+00  3.10436105e+00
  3.10565271e+00  3.11045229e+00  3.11190648e+00  3.12140029e+00
  3.12274700e+00  3.12499002e+00  3.13164043e+00  3.13383211e+00
  3.13765265e+00  3.14115689e+00  3.14204553e+00  3.14572449e+00
  3.14895112e+00  3.15194401e+00  3.15479553e+00  3.15893188e+00
  3.15980648e+00  3.16435411e+00  3.16602217e+00  3.16857978e+00
  3.17008368e+00  3.17139406e+00  3.17781913e+00  3.17873850e+00
  3.18347277e+00  3.18813822e+00  3.19179902e+00  3.19343535e+00
  3.19995166e+00  3.20154281e+00  3.20250397e+00  3.20803596e+00
  3.21146037e+00  3.21327728e+00  3.21801535e+00  3.22047993e+00
  3.22224376e+00  3.22558489e+00  3.22848127e+00  3.23069708e+00
  3.23357761e+00  3.23629523e+00  3.24342143e+00  3.24497627e+00
  3.24964525e+00  3.25414064e+00  3.25618270e+00  3.25892880e+00
  3.26209227e+00  3.26501544e+00  3.26858551e+00  3.26983416e+00
  3.27558877e+00  3.27972134e+00  3.28403601e+00  3.28843036e+00
  3.29039663e+00  3.29505148e+00  3.29567797e+00  3.29749665e+00
  3.30014093e+00  3.30243504e+00  3.30632434e+00  3.30989477e+00
  3.31130931e+00  3.31319561e+00  3.31443303e+00  3.31758854e+00
  3.32008856e+00  3.32087474e+00  3.32240798e+00  3.32457373e+00
  3.32784078e+00  3.32871588e+00  3.33446113e+00  3.33453366e+00
  3.33686211e+00  3.33967871e+00  3.34600106e+00  3.35104975e+00
  3.35582372e+00  3.35666461e+00  3.35740618e+00  3.36014692e+00
  3.36503907e+00  3.36647922e+00  3.37018752e+00  3.37326362e+00
  3.37873215e+00  3.38076619e+00  3.38508271e+00  3.38787633e+00
  3.38940721e+00  3.39358318e+00  3.39899855e+00  3.40346953e+00
  3.40777960e+00  3.41005204e+00  3.41374640e+00  3.41810930e+00
  3.42091624e+00  3.42137342e+00  3.42746425e+00  3.42940924e+00
  3.43130344e+00  3.43831566e+00  3.44172071e+00  3.44595314e+00
  3.45254602e+00  3.45566521e+00  3.46029020e+00  3.46523871e+00
  3.46890784e+00  3.47078486e+00  3.47932630e+00  3.48455373e+00
  3.48637483e+00  3.49037432e+00  3.49391671e+00  3.50209792e+00
  3.50627413e+00  3.50913777e+00  3.51343727e+00  3.51597354e+00
  3.52034025e+00  3.53039393e+00  3.53517844e+00  3.53859806e+00
  3.54399218e+00  3.55039197e+00  3.55593425e+00  3.55753892e+00
  3.56290735e+00  3.56392721e+00  3.56796944e+00  3.57044858e+00
  3.57373237e+00  3.57609496e+00  3.57900548e+00  3.58507552e+00
  3.59012692e+00  3.59590017e+00  3.59977318e+00  3.60794708e+00
  3.60898817e+00  3.61039045e+00  3.61848641e+00  3.62648712e+00
  3.62894574e+00  3.63387764e+00  3.64651271e+00  3.64839757e+00
  3.65319523e+00  3.65392565e+00  3.66166966e+00  3.66260261e+00
  3.67120100e+00  3.67495390e+00  3.68044650e+00  3.68404886e+00
  3.68914696e+00  3.69278774e+00  3.69442180e+00  3.70074820e+00
  3.70737440e+00  3.71113386e+00  3.71449978e+00  3.71701698e+00
  3.72250505e+00  3.73037101e+00  3.73395743e+00  3.73821175e+00
  3.74399742e+00  3.74676919e+00  3.75453378e+00  3.75615529e+00
  3.76290493e+00  3.76409004e+00  3.76809584e+00  3.77754960e+00
  3.77991293e+00  3.78633149e+00  3.79030122e+00  3.79774442e+00
  3.80606122e+00  3.80933631e+00  3.81503817e+00  3.82345413e+00
  3.82989723e+00  3.83159004e+00  3.83445344e+00  3.84783080e+00
  3.85252982e+00  3.85381354e+00  3.86176366e+00  3.86504065e+00
  3.87214153e+00  3.88692699e+00  3.88972897e+00  3.90531860e+00
  3.90872983e+00  3.91155522e+00  3.92000566e+00  3.93501383e+00
  3.93631419e+00  3.94205119e+00  3.94349296e+00  3.94646607e+00
  3.94971818e+00  3.95430709e+00  3.95867770e+00  3.96299123e+00
  3.97571778e+00  3.98071392e+00  3.98587395e+00  3.99100099e+00
  3.99179940e+00  3.99710666e+00  4.00312656e+00  4.01568258e+00
  4.02224554e+00  4.02621757e+00  4.03155107e+00  4.03928618e+00
  4.04515911e+00  4.04674618e+00  4.05204667e+00  4.07062287e+00
  4.07343549e+00  4.08632453e+00  4.08824202e+00  4.09465702e+00
  4.10116611e+00  4.10582352e+00  4.11971509e+00  4.12487965e+00
  4.12833084e+00  4.13017160e+00  4.13543981e+00  4.14399927e+00
  4.14782552e+00  4.15202068e+00  4.15539818e+00  4.16245821e+00
  4.17240139e+00  4.17728108e+00  4.17927816e+00  4.18347342e+00
  4.19432273e+00  4.19777841e+00  4.20232450e+00  4.21667389e+00
  4.22009161e+00  4.22118627e+00  4.22898925e+00  4.23133599e+00
  4.23538206e+00  4.24318970e+00  4.24713107e+00  4.25592618e+00
  4.26051959e+00  4.26629579e+00  4.26703173e+00  4.26816464e+00
  4.27446954e+00  4.28779749e+00  4.29591001e+00  4.30976510e+00
  4.31591058e+00  4.32711053e+00  4.33088591e+00  4.33224056e+00
  4.34072498e+00  4.34615817e+00  4.35595888e+00  4.36536924e+00
  4.37129413e+00  4.38246665e+00  4.38619384e+00  4.39669400e+00
  4.40087519e+00  4.40217639e+00  4.40587468e+00  4.41384852e+00
  4.42114563e+00  4.42851584e+00  4.43523247e+00  4.44210570e+00
  4.44826050e+00  4.45449329e+00  4.45920209e+00  4.46727450e+00
  4.48472633e+00  4.48867368e+00  4.50162002e+00  4.51835263e+00
  4.52220411e+00  4.53415822e+00  4.55072305e+00  4.55323937e+00
  4.56586338e+00  4.56986776e+00  4.57216765e+00  4.57772567e+00
  4.58114083e+00  4.59161043e+00  4.60356699e+00  4.61338808e+00
  4.61952281e+00  4.62043409e+00  4.62858371e+00  4.63462865e+00
  4.64360488e+00  4.64744264e+00  4.65704545e+00  4.65745995e+00
  4.66714206e+00  4.67992222e+00  4.69204549e+00  4.69342037e+00
  4.71715364e+00  4.72407041e+00  4.73479390e+00  4.74227430e+00
  4.75129307e+00  4.75777944e+00  4.76685844e+00  4.77171359e+00
  4.77515146e+00  4.80144580e+00  4.80932159e+00  4.81978645e+00
  4.82212652e+00  4.83403765e+00  4.84558897e+00  4.84943020e+00
  4.85300625e+00  4.86638755e+00  4.87281885e+00  4.87978437e+00
  4.88644798e+00  4.89241527e+00  4.89886546e+00  4.90217369e+00
  4.91132811e+00  4.91971532e+00  4.93463154e+00  4.94491534e+00
  4.94729703e+00  4.96004673e+00  4.96919519e+00  4.97450791e+00
  4.97644826e+00  4.98886773e+00  4.99904987e+00  5.00793005e+00
  5.01647047e+00  5.03364078e+00  5.06496393e+00  5.08132807e+00
  5.08626000e+00  5.09024884e+00  5.09808753e+00  5.09933532e+00
  5.12415646e+00  5.12680769e+00  5.13510572e+00  5.14406320e+00
  5.15531151e+00  5.15933913e+00  5.16007197e+00  5.16476909e+00
  5.16715514e+00  5.17287236e+00  5.19036542e+00  5.19888979e+00
  5.20435083e+00  5.21990813e+00  5.23721275e+00  5.24493464e+00
  5.26422386e+00  5.28373950e+00  5.28963184e+00  5.30770232e+00
  5.32377403e+00  5.33506238e+00  5.35988184e+00  5.36420947e+00
  5.37281474e+00  5.38238123e+00  5.38418123e+00  5.39325641e+00
  5.40199891e+00  5.41037305e+00  5.41292705e+00  5.42010566e+00
  5.43747558e+00  5.45766252e+00  5.48365593e+00  5.49683681e+00
  5.50460653e+00  5.50977578e+00  5.51375741e+00  5.51721188e+00
  5.54084658e+00  5.56201877e+00  5.56947561e+00  5.57856704e+00
  5.58471347e+00  5.59044412e+00  5.60654486e+00  5.61068287e+00
  5.64861606e+00  5.66944589e+00  5.67679786e+00  5.70001785e+00
  5.72488093e+00  5.73167907e+00  5.76379267e+00  5.76828149e+00
  5.78571708e+00  5.79158326e+00  5.83748325e+00  5.85563264e+00
  5.85906705e+00  5.88575957e+00  5.89018581e+00  5.90580391e+00
  5.91703039e+00  5.94691893e+00  5.96910356e+00  5.99304728e+00
  6.01524960e+00  6.05042126e+00  6.06080229e+00  6.09386805e+00
  6.14087049e+00  6.15958106e+00  6.16113837e+00  6.19768877e+00
  6.22868562e+00  6.27709279e+00  6.32753033e+00  6.34827123e+00
  6.36830722e+00  6.38904964e+00  6.39440922e+00  6.41224978e+00
  6.50997474e+00  6.51104554e+00  6.56002091e+00  6.56204640e+00
  6.67185781e+00  6.68116164e+00  6.74386985e+00  6.74710078e+00
  6.76948892e+00  6.82121663e+00  6.84229782e+00  6.90656004e+00
  6.93919376e+00  6.97077273e+00  7.09906376e+00  7.12802856e+00
  7.15299315e+00  7.17033951e+00  7.27271548e+00  7.36518077e+00
  2.22980553e+01  2.23515933e+01  2.24463325e+01  2.24550568e+01
  2.24594367e+01  2.24738442e+01  2.25514422e+01  2.25743735e+01
  2.26542668e+01  2.26732716e+01  2.27679178e+01  2.27729914e+01
  2.28263169e+01  2.28419119e+01  2.28593854e+01  2.28732074e+01
  2.29041804e+01  2.29457424e+01  2.29695341e+01  2.30398541e+01
  2.31574589e+01  2.31847686e+01  2.32000470e+01  2.32464586e+01
  2.33043521e+01  2.33139452e+01  2.33246584e+01  2.33965545e+01
  2.34484364e+01  2.34825274e+01  2.36262376e+01  2.36865745e+01
  2.36989741e+01  2.37801088e+01  3.27424161e+01  3.27764229e+01
  3.27962511e+01  3.28292474e+01  4.39276288e+01  4.39842225e+01
  4.40019572e+01  4.41073232e+01]
nelec by numeric integration = 298.00036191213974
    CPU time for vxc    305.01 sec, wall time     20.47 sec
    CPU time for df vj and vk   1747.94 sec, wall time    131.37 sec
E1 = -11984.455403453818  Ecoul = 5639.0506424333325  Exc = -257.1056784479388
cycle= 1 E= -1834.56336215071  delta_E= 2.1e-08  |g|= 3.66e-05  |ddm|= 7.14e-05
    CPU time for cycle= 1   2064.77 sec, wall time    153.57 sec
  HOMO = -0.201316342796554  LUMO = -0.0916236634544606
  mo_energy =
[-1.92736590e+01 -1.92490724e+01 -1.92072334e+01 -1.91960330e+01
 -1.44228945e+01 -1.44213044e+01 -1.43544312e+01 -1.43543657e+01
 -1.03679414e+01 -1.03588869e+01 -1.02856083e+01 -1.02825870e+01
 -1.02754458e+01 -1.02739459e+01 -1.02537924e+01 -1.02537661e+01
 -1.02536538e+01 -1.02528798e+01 -1.02510196e+01 -1.02502955e+01
 -1.02493309e+01 -1.02483524e+01 -1.02461589e+01 -1.02461442e+01
 -1.02449567e+01 -1.02444696e+01 -1.02440617e+01 -1.02386847e+01
 -1.02381625e+01 -1.02363607e+01 -1.02349459e+01 -1.02346703e+01
 -1.02337959e+01 -1.02310390e+01 -1.02303464e+01 -1.02302027e+01
 -1.02290471e+01 -1.02285769e+01 -1.02277232e+01 -1.02268510e+01
 -1.02266374e+01 -1.02251933e+01 -1.14582052e+00 -1.13147834e+00
 -1.05642857e+00 -1.04064376e+00 -1.01462729e+00 -1.00852716e+00
 -9.65344101e-01 -9.58845096e-01 -8.52810161e-01 -8.47647352e-01
 -8.45490013e-01 -8.35421258e-01 -8.32809889e-01 -8.19852953e-01
 -8.13528386e-01 -7.96189013e-01 -7.89670313e-01 -7.86703090e-01
 -7.81037745e-01 -7.61073219e-01 -7.49764124e-01 -7.34505793e-01
 -7.32395207e-01 -7.25863862e-01 -7.07516964e-01 -6.85143923e-01
 -6.82739770e-01 -6.72415227e-01 -6.64051678e-01 -6.44680646e-01
 -6.34150265e-01 -6.15598715e-01 -6.09148089e-01 -6.00301416e-01
 -5.94736878e-01 -5.78559039e-01 -5.71205769e-01 -5.61367235e-01
 -5.49875862e-01 -5.49540768e-01 -5.34197383e-01 -5.27813277e-01
 -5.24679604e-01 -5.23623034e-01 -5.16873795e-01 -5.11174297e-01
 -5.08650669e-01 -5.00658718e-01 -4.94388473e-01 -4.91798497e-01
 -4.89412764e-01 -4.79546471e-01 -4.77508802e-01 -4.71574181e-01
 -4.63097046e-01 -4.60069701e-01 -4.56189178e-01 -4.50678201e-01
 -4.49017965e-01 -4.47612393e-01 -4.45071679e-01 -4.42443751e-01
 -4.39927700e-01 -4.35970304e-01 -4.33585412e-01 -4.31152678e-01
 -4.25049714e-01 -4.22086750e-01 -4.19288411e-01 -4.19100453e-01
 -4.15414725e-01 -4.12022012e-01 -4.09917527e-01 -4.08684582e-01
 -4.05503270e-01 -4.01380225e-01 -3.98864843e-01 -3.96062757e-01
 -3.92078858e-01 -3.90546037e-01 -3.83569306e-01 -3.80806999e-01
 -3.78540252e-01 -3.73793059e-01 -3.68349792e-01 -3.63359222e-01
 -3.60431088e-01 -3.57126333e-01 -3.54702886e-01 -3.53303940e-01
 -3.49389350e-01 -3.42075244e-01 -3.35252217e-01 -3.26901757e-01
 -3.18511790e-01 -3.06605076e-01 -2.97268246e-01 -2.89035042e-01
 -2.86926284e-01 -2.84841163e-01 -2.65101263e-01 -2.52234675e-01
 -2.46730329e-01 -2.39692124e-01 -2.33841917e-01 -2.02586331e-01
 -2.01316343e-01 -9.16236635e-02 -8.86657573e-02 -3.75483032e-02
 -1.81867161e-02 -4.68508163e-03  1.36782420e-03  6.36014971e-03
  3.12536455e-02  3.47124535e-02  3.81019373e-02  4.28784887e-02
  4.56930083e-02  4.72163661e-02  5.86415368e-02  6.40937554e-02
  6.65576106e-02  7.27214065e-02  7.51616416e-02  7.82761560e-02
  7.88962076e-02  8.26495161e-02  8.60257490e-02  8.95777051e-02
  9.14093208e-02  9.23908132e-02  9.73652360e-02  1.00151571e-01
  1.04272144e-01  1.11347281e-01  1.12465519e-01  1.16016545e-01
  1.17899645e-01  1.19949278e-01  1.21607851e-01  1.23388801e-01
  1.26820302e-01  1.29435555e-01  1.30634560e-01  1.33221657e-01
  1.34517961e-01  1.40754543e-01  1.41474337e-01  1.42394804e-01
  1.46761306e-01  1.49919126e-01  1.52038528e-01  1.53236409e-01
  1.54969592e-01  1.56946832e-01  1.60149378e-01  1.63090977e-01
  1.63800958e-01  1.66524223e-01  1.70354449e-01  1.73339882e-01
  1.76079290e-01  1.77820776e-01  1.83828871e-01  1.86301021e-01
  1.86967449e-01  1.91731570e-01  1.96016895e-01  1.97401566e-01
  1.99411082e-01  2.00484876e-01  2.03959306e-01  2.05531394e-01
  2.08491824e-01  2.12858205e-01  2.16435204e-01  2.17459379e-01
  2.18683342e-01  2.19513588e-01  2.22788045e-01  2.26153292e-01
  2.28070151e-01  2.29817324e-01  2.33386447e-01  2.35248027e-01
  2.36921485e-01  2.41804987e-01  2.44265379e-01  2.49399218e-01
  2.54445468e-01  2.57046978e-01  2.57328200e-01  2.59292442e-01
  2.62358518e-01  2.63431098e-01  2.65409152e-01  2.67783285e-01
  2.69227570e-01  2.75332463e-01  2.78039336e-01  2.78726736e-01
  2.80714097e-01  2.82160225e-01  2.86428749e-01  2.87981765e-01
  2.93250112e-01  2.94206501e-01  2.97961074e-01  3.02615710e-01
  3.03825020e-01  3.05492180e-01  3.10190445e-01  3.12023863e-01
  3.13819024e-01  3.17355215e-01  3.19166506e-01  3.22938273e-01
  3.23704962e-01  3.26483376e-01  3.29376245e-01  3.34017889e-01
  3.36809571e-01  3.37812818e-01  3.40284917e-01  3.45134269e-01
  3.47479697e-01  3.48731663e-01  3.52636277e-01  3.55274443e-01
  3.56876272e-01  3.58181745e-01  3.60052335e-01  3.65852222e-01
  3.66280714e-01  3.68715714e-01  3.70366626e-01  3.70800481e-01
  3.75401670e-01  3.77820173e-01  3.81651971e-01  3.85354359e-01
  3.85444751e-01  3.87187502e-01  3.89393012e-01  3.92317300e-01
  3.94068407e-01  3.97369482e-01  3.99796824e-01  4.01448228e-01
  4.04380545e-01  4.09714277e-01  4.11776924e-01  4.12632364e-01
  4.16495532e-01  4.17592415e-01  4.19013550e-01  4.21689634e-01
  4.23249491e-01  4.24467671e-01  4.29500182e-01  4.31048255e-01
  4.33547223e-01  4.34957681e-01  4.36846178e-01  4.38758157e-01
  4.39998601e-01  4.44216073e-01  4.47686322e-01  4.49026425e-01
  4.49906649e-01  4.52973994e-01  4.54337825e-01  4.56902620e-01
  4.57756019e-01  4.60955907e-01  4.63967333e-01  4.66257042e-01
  4.70921738e-01  4.72480990e-01  4.73896335e-01  4.76668158e-01
  4.78521161e-01  4.81229077e-01  4.83354286e-01  4.85568158e-01
  4.86469800e-01  4.89283293e-01  4.90258702e-01  4.93549748e-01
  4.94412947e-01  4.98244594e-01  5.00967804e-01  5.03706102e-01
  5.06546908e-01  5.09568607e-01  5.11881581e-01  5.13183586e-01
  5.15351324e-01  5.18916902e-01  5.20383329e-01  5.24243498e-01
  5.27607984e-01  5.29112260e-01  5.35924933e-01  5.39140259e-01
  5.40412959e-01  5.42238087e-01  5.44412765e-01  5.47639895e-01
  5.48650584e-01  5.55467432e-01  5.58891250e-01  5.59980662e-01
  5.63059750e-01  5.63269899e-01  5.69054567e-01  5.70045407e-01
  5.73151184e-01  5.75782202e-01  5.78602262e-01  5.81900650e-01
  5.87142420e-01  5.89326217e-01  5.91630619e-01  5.94848171e-01
  5.99433750e-01  6.03185274e-01  6.06488233e-01  6.08266025e-01
  6.11722639e-01  6.14461047e-01  6.16828701e-01  6.19219511e-01
  6.22915972e-01  6.25835286e-01  6.27110544e-01  6.27322798e-01
  6.31440555e-01  6.34315621e-01  6.36192683e-01  6.39662802e-01
  6.41937348e-01  6.45340121e-01  6.49386167e-01  6.50776903e-01
  6.52724937e-01  6.54017628e-01  6.57507208e-01  6.59760724e-01
  6.61319049e-01  6.66013225e-01  6.69846499e-01  6.71314522e-01
  6.75211113e-01  6.77850217e-01  6.78888110e-01  6.81568601e-01
  6.83219937e-01  6.86763673e-01  6.91888365e-01  6.95454104e-01
  6.97530499e-01  7.01047750e-01  7.04626308e-01  7.06794721e-01
  7.11681420e-01  7.15245478e-01  7.17349344e-01  7.17664576e-01
  7.24899149e-01  7.27801816e-01  7.31116987e-01  7.34505561e-01
  7.38303766e-01  7.39541867e-01  7.43696490e-01  7.46195684e-01
  7.52270892e-01  7.56068998e-01  7.59189970e-01  7.60642803e-01
  7.64223153e-01  7.70862872e-01  7.72674229e-01  7.75882605e-01
  7.78838075e-01  7.82056630e-01  7.88460679e-01  7.90199708e-01
  7.94286742e-01  7.98403727e-01  8.01132768e-01  8.05171688e-01
  8.10574618e-01  8.12404312e-01  8.14274122e-01  8.20174041e-01
  8.23013132e-01  8.25838010e-01  8.31262211e-01  8.35206551e-01
  8.37579511e-01  8.38572127e-01  8.41256999e-01  8.48671801e-01
  8.50389620e-01  8.55419793e-01  8.59632382e-01  8.62953569e-01
  8.64211101e-01  8.73251518e-01  8.76732935e-01  8.78332236e-01
  8.83748206e-01  8.87112208e-01  8.92734848e-01  8.94085017e-01
  8.97059919e-01  9.00140365e-01  9.03074384e-01  9.07210512e-01
  9.11684478e-01  9.20912808e-01  9.24051014e-01  9.24310759e-01
  9.27876678e-01  9.32553366e-01  9.36945946e-01  9.39083122e-01
  9.42032215e-01  9.44915858e-01  9.47438305e-01  9.52449591e-01
  9.54403179e-01  9.58744311e-01  9.60269255e-01  9.60854146e-01
  9.68391130e-01  9.73139029e-01  9.76253953e-01  9.77973879e-01
  9.79883600e-01  9.83342328e-01  9.88958156e-01  9.92322028e-01
  9.95099878e-01  9.98361375e-01  1.00380688e+00  1.00444604e+00
  1.01269669e+00  1.01973911e+00  1.02403087e+00  1.02723035e+00
  1.03363238e+00  1.03572807e+00  1.03902223e+00  1.04120118e+00
  1.04484120e+00  1.04715105e+00  1.05561731e+00  1.05970015e+00
  1.06238324e+00  1.06556887e+00  1.06903280e+00  1.07286759e+00
  1.07790355e+00  1.08020670e+00  1.08327539e+00  1.08545018e+00
  1.09164437e+00  1.09404705e+00  1.09763649e+00  1.10557307e+00
  1.10898067e+00  1.11336115e+00  1.12190376e+00  1.12384594e+00
  1.12717203e+00  1.12825629e+00  1.13114488e+00  1.13691788e+00
  1.14533517e+00  1.14891884e+00  1.15202130e+00  1.15543720e+00
  1.15797034e+00  1.16728084e+00  1.16926220e+00  1.17505658e+00
  1.18115743e+00  1.18338353e+00  1.18780051e+00  1.19157556e+00
  1.19598631e+00  1.19729962e+00  1.20616766e+00  1.21030092e+00
  1.21598591e+00  1.21980787e+00  1.22278601e+00  1.22578745e+00
  1.22929805e+00  1.23449984e+00  1.24199990e+00  1.24264837e+00
  1.24632241e+00  1.25023618e+00  1.25731362e+00  1.26016405e+00
  1.26938175e+00  1.27411660e+00  1.27723545e+00  1.27900329e+00
  1.28116372e+00  1.28571349e+00  1.29094979e+00  1.29578453e+00
  1.30397245e+00  1.30646442e+00  1.31506099e+00  1.31837915e+00
  1.32043306e+00  1.32359163e+00  1.32584541e+00  1.33151744e+00
  1.33633405e+00  1.34309671e+00  1.34686370e+00  1.35319074e+00
  1.35568199e+00  1.36020155e+00  1.36722398e+00  1.36977807e+00
  1.37392201e+00  1.37958895e+00  1.38234507e+00  1.39151157e+00
  1.39705872e+00  1.40147224e+00  1.40363017e+00  1.41327817e+00
  1.41575455e+00  1.42124900e+00  1.42204822e+00  1.43085042e+00
  1.43636645e+00  1.44091090e+00  1.44189110e+00  1.44458819e+00
  1.45058217e+00  1.45385527e+00  1.45694537e+00  1.45954575e+00
  1.46296494e+00  1.46610885e+00  1.47344459e+00  1.47531880e+00
  1.48589084e+00  1.49239076e+00  1.49633812e+00  1.49895054e+00
  1.50178325e+00  1.50816945e+00  1.51160239e+00  1.51565359e+00
  1.52035499e+00  1.52447619e+00  1.52994778e+00  1.53578961e+00
  1.53818425e+00  1.54324999e+00  1.54598077e+00  1.54715675e+00
  1.54942210e+00  1.55261588e+00  1.55458346e+00  1.55767812e+00
  1.55930323e+00  1.56381929e+00  1.56769863e+00  1.57140125e+00
  1.57392542e+00  1.57646753e+00  1.57742250e+00  1.57996394e+00
  1.58243370e+00  1.58596111e+00  1.58694678e+00  1.59192883e+00
  1.59469130e+00  1.59477128e+00  1.59711843e+00  1.60151527e+00
  1.60641360e+00  1.60893780e+00  1.61061012e+00  1.61598942e+00
  1.61779535e+00  1.62125665e+00  1.62437233e+00  1.62638002e+00
  1.62883675e+00  1.63506198e+00  1.63594420e+00  1.64139511e+00
  1.64636215e+00  1.64933129e+00  1.65172633e+00  1.65445466e+00
  1.65565161e+00  1.65973296e+00  1.66447008e+00  1.66644178e+00
  1.66868622e+00  1.67226935e+00  1.67423292e+00  1.67793938e+00
  1.68706458e+00  1.68902146e+00  1.69479179e+00  1.69751293e+00
  1.70085921e+00  1.70627511e+00  1.71182505e+00  1.71353359e+00
  1.71605822e+00  1.72279828e+00  1.72410308e+00  1.72868623e+00
  1.73192880e+00  1.73553086e+00  1.73901226e+00  1.74117964e+00
  1.74581749e+00  1.75437601e+00  1.75809762e+00  1.76218356e+00
  1.76585308e+00  1.76923666e+00  1.77306580e+00  1.78389774e+00
  1.78710495e+00  1.79004918e+00  1.79769583e+00  1.79910837e+00
  1.80617376e+00  1.80881174e+00  1.81505529e+00  1.82528585e+00
  1.82696715e+00  1.83074539e+00  1.83521531e+00  1.83653665e+00
  1.84019553e+00  1.84555260e+00  1.84784891e+00  1.85137613e+00
  1.85320197e+00  1.85741661e+00  1.86275765e+00  1.86742052e+00
  1.86959368e+00  1.87277828e+00  1.87379426e+00  1.87639213e+00
  1.88496961e+00  1.88789485e+00  1.89368728e+00  1.89912367e+00
  1.90397295e+00  1.90889419e+00  1.91253070e+00  1.91705637e+00
  1.92081203e+00  1.92712539e+00  1.92948398e+00  1.93128826e+00
  1.93996749e+00  1.94455852e+00  1.94717363e+00  1.95312179e+00
  1.95596833e+00  1.96508412e+00  1.96875085e+00  1.97758044e+00
  1.98436618e+00  1.98831729e+00  1.99216609e+00  1.99619927e+00
  2.00187827e+00  2.00688990e+00  2.01528733e+00  2.01892019e+00
  2.02265727e+00  2.02739765e+00  2.03381360e+00  2.03681342e+00
  2.04594599e+00  2.04786366e+00  2.05113279e+00  2.05497539e+00
  2.05761506e+00  2.06233549e+00  2.06330201e+00  2.07120494e+00
  2.07429285e+00  2.07818992e+00  2.08115345e+00  2.08274722e+00
  2.08739218e+00  2.09070795e+00  2.09427607e+00  2.09955554e+00
  2.10241944e+00  2.10688914e+00  2.10942035e+00  2.11507906e+00
  2.11826877e+00  2.12336806e+00  2.12806662e+00  2.13469647e+00
  2.13929536e+00  2.14133519e+00  2.14498616e+00  2.14722111e+00
  2.15304881e+00  2.16223981e+00  2.16392419e+00  2.16736246e+00
  2.17176528e+00  2.17591115e+00  2.18015990e+00  2.18729229e+00
  2.19423424e+00  2.20119969e+00  2.20393769e+00  2.20657182e+00
  2.21704311e+00  2.21913101e+00  2.22412525e+00  2.23298796e+00
  2.23457578e+00  2.24060888e+00  2.24770074e+00  2.25130111e+00
  2.25793071e+00  2.26056529e+00  2.26249043e+00  2.27249509e+00
  2.27654787e+00  2.27819281e+00  2.28544844e+00  2.28863046e+00
  2.29438657e+00  2.30049783e+00  2.30434911e+00  2.30779406e+00
  2.31289068e+00  2.31672557e+00  2.32374320e+00  2.32914838e+00
  2.33066881e+00  2.33361064e+00  2.33982172e+00  2.34264000e+00
  2.34972414e+00  2.35585370e+00  2.35744527e+00  2.36345319e+00
  2.36482327e+00  2.36931311e+00  2.37146888e+00  2.37534653e+00
  2.37631552e+00  2.38461508e+00  2.38728275e+00  2.39002645e+00
  2.39473978e+00  2.39769826e+00  2.40496482e+00  2.41059932e+00
  2.41316059e+00  2.41782868e+00  2.42117162e+00  2.42482607e+00
  2.42972409e+00  2.43150644e+00  2.44154458e+00  2.44699987e+00
  2.44878819e+00  2.45168325e+00  2.45706524e+00  2.46183008e+00
  2.46381973e+00  2.47007878e+00  2.47169069e+00  2.47646242e+00
  2.48655907e+00  2.49017009e+00  2.49811177e+00  2.50266876e+00
  2.50647042e+00  2.51183842e+00  2.51918517e+00  2.52729098e+00
  2.52939190e+00  2.53176227e+00  2.53654967e+00  2.54011367e+00
  2.54597563e+00  2.54833098e+00  2.54981247e+00  2.55358327e+00
  2.55837521e+00  2.56024949e+00  2.56213520e+00  2.56712722e+00
  2.57154890e+00  2.57507270e+00  2.58206750e+00  2.58501491e+00
  2.58669364e+00  2.59351698e+00  2.59526394e+00  2.59888049e+00
  2.60741859e+00  2.61559293e+00  2.61701930e+00  2.61933771e+00
  2.62345596e+00  2.62940652e+00  2.63372532e+00  2.63863709e+00
  2.64283628e+00  2.64390543e+00  2.64839246e+00  2.65170528e+00
  2.65581162e+00  2.65816246e+00  2.66406127e+00  2.66743182e+00
  2.66935158e+00  2.67603564e+00  2.67973755e+00  2.68558183e+00
  2.68628453e+00  2.69014918e+00  2.69389396e+00  2.70521952e+00
  2.70754266e+00  2.70997593e+00  2.71456565e+00  2.71927453e+00
  2.72187284e+00  2.73217956e+00  2.73491856e+00  2.74043469e+00
  2.74581986e+00  2.74680462e+00  2.74968213e+00  2.75236240e+00
  2.75506240e+00  2.75888375e+00  2.76565406e+00  2.76610308e+00
  2.77239731e+00  2.77433818e+00  2.78096681e+00  2.78384299e+00
  2.78544001e+00  2.79215517e+00  2.79586577e+00  2.79778484e+00
  2.80821949e+00  2.80920795e+00  2.81376654e+00  2.81526640e+00
  2.81969248e+00  2.82412226e+00  2.83324650e+00  2.83497801e+00
  2.83778969e+00  2.84467896e+00  2.84662149e+00  2.85241782e+00
  2.85394976e+00  2.85754302e+00  2.86449049e+00  2.86923374e+00
  2.87242251e+00  2.87584703e+00  2.87928368e+00  2.88285860e+00
  2.88535439e+00  2.89178235e+00  2.89440370e+00  2.90033050e+00
  2.90420511e+00  2.91124417e+00  2.91367323e+00  2.91662674e+00
  2.91762781e+00  2.92456584e+00  2.93279998e+00  2.93387641e+00
  2.94198415e+00  2.94366809e+00  2.94628421e+00  2.94875220e+00
  2.95619922e+00  2.96105977e+00  2.96251571e+00  2.96943358e+00
  2.97200375e+00  2.97755200e+00  2.97871195e+00  2.98178222e+00
  2.98448617e+00  2.98758298e+00  2.99300006e+00  2.99741407e+00
  2.99955654e+00  3.00414583e+00  3.00783740e+00  3.01167409e+00
  3.01444460e+00  3.01680419e+00  3.01766842e+00  3.02062396e+00
  3.02396816e+00  3.02860782e+00  3.03045686e+00  3.03342168e+00
  3.03695292e+00  3.03922098e+00  3.04451339e+00  3.04937703e+00
  3.05088321e+00  3.05499839e+00  3.05940007e+00  3.06463020e+00
  3.06810606e+00  3.07006214e+00  3.07242264e+00  3.07517585e+00
  3.08254845e+00  3.08382450e+00  3.08536801e+00  3.08668546e+00
  3.09152075e+00  3.09567479e+00  3.10169881e+00  3.10435983e+00
  3.10565345e+00  3.11045221e+00  3.11190633e+00  3.12140033e+00
  3.12274591e+00  3.12498888e+00  3.13164010e+00  3.13383192e+00
  3.13765125e+00  3.14115646e+00  3.14204609e+00  3.14572341e+00
  3.14895179e+00  3.15194478e+00  3.15479739e+00  3.15893200e+00
  3.15980681e+00  3.16435281e+00  3.16602260e+00  3.16858062e+00
  3.17008264e+00  3.17139242e+00  3.17782015e+00  3.17873992e+00
  3.18347051e+00  3.18813916e+00  3.19179970e+00  3.19343537e+00
  3.19995186e+00  3.20154209e+00  3.20250480e+00  3.20803629e+00
  3.21146117e+00  3.21327849e+00  3.21801444e+00  3.22048008e+00
  3.22224557e+00  3.22558512e+00  3.22847991e+00  3.23069759e+00
  3.23357669e+00  3.23629417e+00  3.24342072e+00  3.24497546e+00
  3.24964509e+00  3.25414125e+00  3.25618284e+00  3.25892974e+00
  3.26209361e+00  3.26501640e+00  3.26858579e+00  3.26983459e+00
  3.27558795e+00  3.27972275e+00  3.28403659e+00  3.28843114e+00
  3.29039712e+00  3.29505198e+00  3.29567814e+00  3.29749838e+00
  3.30014043e+00  3.30243475e+00  3.30632376e+00  3.30989581e+00
  3.31130911e+00  3.31319658e+00  3.31443394e+00  3.31758909e+00
  3.32008974e+00  3.32087432e+00  3.32240812e+00  3.32457456e+00
  3.32784048e+00  3.32871590e+00  3.33446238e+00  3.33453312e+00
  3.33686157e+00  3.33967956e+00  3.34600161e+00  3.35104876e+00
  3.35582369e+00  3.35666427e+00  3.35740516e+00  3.36014741e+00
  3.36503903e+00  3.36647958e+00  3.37018786e+00  3.37326389e+00
  3.37873344e+00  3.38076623e+00  3.38508315e+00  3.38787705e+00
  3.38940673e+00  3.39358386e+00  3.39899951e+00  3.40346988e+00
  3.40778168e+00  3.41005211e+00  3.41374753e+00  3.41810918e+00
  3.42091704e+00  3.42137385e+00  3.42746538e+00  3.42941082e+00
  3.43130359e+00  3.43831455e+00  3.44172115e+00  3.44595296e+00
  3.45254671e+00  3.45566449e+00  3.46029133e+00  3.46523979e+00
  3.46890672e+00  3.47078441e+00  3.47932708e+00  3.48455450e+00
  3.48637565e+00  3.49037280e+00  3.49391752e+00  3.50209868e+00
  3.50627419e+00  3.50913760e+00  3.51343911e+00  3.51597448e+00
  3.52033984e+00  3.53039260e+00  3.53517859e+00  3.53859883e+00
  3.54399243e+00  3.55039241e+00  3.55593554e+00  3.55753847e+00
  3.56290825e+00  3.56392686e+00  3.56796862e+00  3.57044841e+00
  3.57373266e+00  3.57609472e+00  3.57900554e+00  3.58507551e+00
  3.59012659e+00  3.59589911e+00  3.59977291e+00  3.60794639e+00
  3.60898833e+00  3.61039036e+00  3.61848597e+00  3.62648815e+00
  3.62894551e+00  3.63387763e+00  3.64651212e+00  3.64839823e+00
  3.65319541e+00  3.65392558e+00  3.66166979e+00  3.66260321e+00
  3.67120138e+00  3.67495426e+00  3.68044530e+00  3.68404926e+00
  3.68914685e+00  3.69278811e+00  3.69442105e+00  3.70074882e+00
  3.70737292e+00  3.71113285e+00  3.71450013e+00  3.71701682e+00
  3.72250399e+00  3.73037348e+00  3.73395748e+00  3.73821178e+00
  3.74399851e+00  3.74676950e+00  3.75453372e+00  3.75615588e+00
  3.76290459e+00  3.76409224e+00  3.76809741e+00  3.77755115e+00
  3.77991371e+00  3.78633229e+00  3.79030233e+00  3.79774568e+00
  3.80606186e+00  3.80933740e+00  3.81503945e+00  3.82345251e+00
  3.82989924e+00  3.83159016e+00  3.83445329e+00  3.84783215e+00
  3.85253094e+00  3.85381455e+00  3.86176532e+00  3.86503869e+00
  3.87214167e+00  3.88692620e+00  3.88972960e+00  3.90532089e+00
  3.90873075e+00  3.91155523e+00  3.92000547e+00  3.93501373e+00
  3.93631528e+00  3.94205237e+00  3.94349256e+00  3.94646731e+00
  3.94971857e+00  3.95430479e+00  3.95867832e+00  3.96299208e+00
  3.97571920e+00  3.98071412e+00  3.98587406e+00  3.99100184e+00
  3.99179872e+00  3.99710547e+00  4.00312894e+00  4.01568327e+00
  4.02224537e+00  4.02621866e+00  4.03155118e+00  4.03928816e+00
  4.04516134e+00  4.04674623e+00  4.05204820e+00  4.07062152e+00
  4.07343594e+00  4.08632466e+00  4.08824209e+00  4.09465557e+00
  4.10116553e+00  4.10582551e+00  4.11971612e+00  4.12487973e+00
  4.12833142e+00  4.13017183e+00  4.13543886e+00  4.14399987e+00
  4.14782561e+00  4.15202126e+00  4.15539973e+00  4.16245832e+00
  4.17240356e+00  4.17728038e+00  4.17927875e+00  4.18347266e+00
  4.19432276e+00  4.19777883e+00  4.20232545e+00  4.21667255e+00
  4.22009129e+00  4.22118595e+00  4.22898900e+00  4.23133652e+00
  4.23538313e+00  4.24319268e+00  4.24713152e+00  4.25592448e+00
  4.26051912e+00  4.26629374e+00  4.26703093e+00  4.26816498e+00
  4.27446960e+00  4.28779571e+00  4.29591138e+00  4.30976564e+00
  4.31591122e+00  4.32711018e+00  4.33088628e+00  4.33224032e+00
  4.34072466e+00  4.34615863e+00  4.35595839e+00  4.36536897e+00
  4.37129485e+00  4.38246609e+00  4.38619278e+00  4.39669438e+00
  4.40087736e+00  4.40217881e+00  4.40587327e+00  4.41385046e+00
  4.42114623e+00  4.42851660e+00  4.43523165e+00  4.44210681e+00
  4.44826011e+00  4.45449425e+00  4.45920146e+00  4.46727356e+00
  4.48472752e+00  4.48867414e+00  4.50162041e+00  4.51835080e+00
  4.52220355e+00  4.53416147e+00  4.55072061e+00  4.55323956e+00
  4.56586188e+00  4.56986962e+00  4.57216881e+00  4.57772416e+00
  4.58114187e+00  4.59161211e+00  4.60356369e+00  4.61338834e+00
  4.61952419e+00  4.62043557e+00  4.62858467e+00  4.63463057e+00
  4.64360561e+00  4.64744438e+00  4.65704663e+00  4.65746027e+00
  4.66714459e+00  4.67992256e+00  4.69204818e+00  4.69341812e+00
  4.71715346e+00  4.72407127e+00  4.73479419e+00  4.74227370e+00
  4.75129259e+00  4.75777967e+00  4.76685832e+00  4.77171428e+00
  4.77515231e+00  4.80144489e+00  4.80932121e+00  4.81978387e+00
  4.82212438e+00  4.83403690e+00  4.84559209e+00  4.84942931e+00
  4.85300692e+00  4.86638963e+00  4.87281793e+00  4.87978531e+00
  4.88644911e+00  4.89241678e+00  4.89886456e+00  4.90217319e+00
  4.91132914e+00  4.91971787e+00  4.93463220e+00  4.94491501e+00
  4.94729731e+00  4.96005060e+00  4.96919418e+00  4.97450886e+00
  4.97645183e+00  4.98886524e+00  4.99905085e+00  5.00793159e+00
  5.01647067e+00  5.03363910e+00  5.06496443e+00  5.08132694e+00
  5.08625586e+00  5.09024844e+00  5.09808473e+00  5.09933656e+00
  5.12415578e+00  5.12680658e+00  5.13510565e+00  5.14406577e+00
  5.15531328e+00  5.15934397e+00  5.16007171e+00  5.16477225e+00
  5.16715476e+00  5.17287342e+00  5.19036232e+00  5.19888939e+00
  5.20435044e+00  5.21990746e+00  5.23721039e+00  5.24493351e+00
  5.26422332e+00  5.28373651e+00  5.28962710e+00  5.30769941e+00
  5.32377106e+00  5.33506168e+00  5.35988539e+00  5.36421421e+00
  5.37281951e+00  5.38238577e+00  5.38418563e+00  5.39325812e+00
  5.40200438e+00  5.41037415e+00  5.41293062e+00  5.42010298e+00
  5.43747735e+00  5.45766071e+00  5.48365859e+00  5.49683813e+00
  5.50460794e+00  5.50977584e+00  5.51375998e+00  5.51721497e+00
  5.54084604e+00  5.56202065e+00  5.56947320e+00  5.57856695e+00
  5.58471188e+00  5.59044525e+00  5.60654602e+00  5.61068373e+00
  5.64861638e+00  5.66945050e+00  5.67680011e+00  5.70001809e+00
  5.72488218e+00  5.73168156e+00  5.76379404e+00  5.76828365e+00
  5.78572030e+00  5.79157920e+00  5.83748514e+00  5.85563060e+00
  5.85906846e+00  5.88576091e+00  5.89018640e+00  5.90580086e+00
  5.91703397e+00  5.94692293e+00  5.96909973e+00  5.99304781e+00
  6.01525033e+00  6.05042564e+00  6.06080206e+00  6.09386926e+00
  6.14087299e+00  6.15958058e+00  6.16113780e+00  6.19768792e+00
  6.22868980e+00  6.27709635e+00  6.32752971e+00  6.34826929e+00
  6.36830406e+00  6.38905353e+00  6.39440446e+00  6.41224598e+00
  6.50997173e+00  6.51104247e+00  6.56002225e+00  6.56204691e+00
  6.67186031e+00  6.68116517e+00  6.74387584e+00  6.74710723e+00
  6.76949121e+00  6.82121806e+00  6.84229446e+00  6.90655573e+00
  6.93919872e+00  6.97077802e+00  7.09905993e+00  7.12802536e+00
  7.15298924e+00  7.17033867e+00  7.27272018e+00  7.36518693e+00
  2.22980535e+01  2.23515936e+01  2.24463349e+01  2.24550585e+01
  2.24594392e+01  2.24738415e+01  2.25514449e+01  2.25743755e+01
  2.26542693e+01  2.26732725e+01  2.27679166e+01  2.27729882e+01
  2.28263127e+01  2.28419110e+01  2.28593904e+01  2.28732068e+01
  2.29041850e+01  2.29457429e+01  2.29695309e+01  2.30398537e+01
  2.31574648e+01  2.31847711e+01  2.32000485e+01  2.32464552e+01
  2.33043488e+01  2.33139445e+01  2.33246548e+01  2.33965511e+01
  2.34484379e+01  2.34825317e+01  2.36262358e+01  2.36865765e+01
  2.36989716e+01  2.37801106e+01  3.27424224e+01  3.27764204e+01
  3.27962564e+01  3.28292448e+01  4.39276402e+01  4.39842190e+01
  4.40019600e+01  4.41073173e+01]
nelec by numeric integration = 298.000361911988
    CPU time for vxc    309.89 sec, wall time     20.98 sec
    CPU time for df vj and vk   1743.88 sec, wall time    130.40 sec
E1 = -11984.455199666541  Ecoul = 5639.05043326518  Exc = -257.10567306513934
cycle= 2 E= -1834.56336214879  delta_E= 1.92e-09  |g|= 8.9e-05  |ddm|= 0.000184
    CPU time for cycle= 2   2069.15 sec, wall time    153.47 sec
  HOMO = -0.201316372619371  LUMO = -0.0916234963115972
  mo_energy =
[-1.92736666e+01 -1.92490807e+01 -1.92072253e+01 -1.91960262e+01
 -1.44228923e+01 -1.44212974e+01 -1.43544413e+01 -1.43543695e+01
 -1.03679428e+01 -1.03588890e+01 -1.02856007e+01 -1.02825762e+01
 -1.02754399e+01 -1.02739491e+01 -1.02537927e+01 -1.02537760e+01
 -1.02536605e+01 -1.02528828e+01 -1.02510118e+01 -1.02502967e+01
 -1.02493277e+01 -1.02483508e+01 -1.02461603e+01 -1.02461398e+01
 -1.02449457e+01 -1.02444679e+01 -1.02440636e+01 -1.02386936e+01
 -1.02381604e+01 -1.02363624e+01 -1.02349474e+01 -1.02346673e+01
 -1.02337935e+01 -1.02310395e+01 -1.02303471e+01 -1.02302092e+01
 -1.02290477e+01 -1.02285808e+01 -1.02277263e+01 -1.02268558e+01
 -1.02266386e+01 -1.02251934e+01 -1.14582210e+00 -1.13148050e+00
 -1.05642789e+00 -1.04064404e+00 -1.01462376e+00 -1.00852353e+00
 -9.65348530e-01 -9.58849095e-01 -8.52807951e-01 -8.47643916e-01
 -8.45488122e-01 -8.35422284e-01 -8.32811896e-01 -8.19852928e-01
 -8.13530107e-01 -7.96190613e-01 -7.89671784e-01 -7.86702754e-01
 -7.81035923e-01 -7.61073722e-01 -7.49763817e-01 -7.34503734e-01
 -7.32395653e-01 -7.25865785e-01 -7.07516411e-01 -6.85146131e-01
 -6.82741947e-01 -6.72414953e-01 -6.64052381e-01 -6.44679326e-01
 -6.34148366e-01 -6.15600415e-01 -6.09150770e-01 -6.00300074e-01
 -5.94737198e-01 -5.78556867e-01 -5.71204056e-01 -5.61366412e-01
 -5.49875914e-01 -5.49541529e-01 -5.34198646e-01 -5.27813777e-01
 -5.24679605e-01 -5.23624645e-01 -5.16874049e-01 -5.11174749e-01
 -5.08650809e-01 -5.00659382e-01 -4.94389985e-01 -4.91798915e-01
 -4.89411720e-01 -4.79547949e-01 -4.77509173e-01 -4.71572922e-01
 -4.63094244e-01 -4.60068274e-01 -4.56187929e-01 -4.50678806e-01
 -4.49017995e-01 -4.47611881e-01 -4.45072603e-01 -4.42444147e-01
 -4.39930110e-01 -4.35969197e-01 -4.33585484e-01 -4.31152819e-01
 -4.25048148e-01 -4.22086610e-01 -4.19286921e-01 -4.19101482e-01
 -4.15414525e-01 -4.12019996e-01 -4.09919276e-01 -4.08683261e-01
 -4.05503978e-01 -4.01380786e-01 -3.98867124e-01 -3.96064720e-01
 -3.92078684e-01 -3.90547442e-01 -3.83570081e-01 -3.80807718e-01
 -3.78542216e-01 -3.73793870e-01 -3.68349658e-01 -3.63360315e-01
 -3.60430405e-01 -3.57125033e-01 -3.54704967e-01 -3.53305552e-01
 -3.49390580e-01 -3.42073344e-01 -3.35253092e-01 -3.26900362e-01
 -3.18510184e-01 -3.06603284e-01 -2.97267234e-01 -2.89035167e-01
 -2.86929025e-01 -2.84841784e-01 -2.65104757e-01 -2.52233742e-01
 -2.46727274e-01 -2.39694761e-01 -2.33844418e-01 -2.02586824e-01
 -2.01316373e-01 -9.16234963e-02 -8.86657573e-02 -3.75491388e-02
 -1.81843973e-02 -4.68525812e-03  1.36780823e-03  6.36059662e-03
  3.12526658e-02  3.47109942e-02  3.81017049e-02  4.28790228e-02
  4.56945916e-02  4.72158237e-02  5.86410265e-02  6.40930720e-02
  6.65578078e-02  7.27225555e-02  7.51617995e-02  7.82751691e-02
  7.88971844e-02  8.26487756e-02  8.60251718e-02  8.95789133e-02
  9.14097180e-02  9.23909974e-02  9.73649711e-02  1.00150988e-01
  1.04272688e-01  1.11346534e-01  1.12464926e-01  1.16016468e-01
  1.17899647e-01  1.19948232e-01  1.21606917e-01  1.23387962e-01
  1.26820245e-01  1.29435227e-01  1.30634449e-01  1.33220620e-01
  1.34520379e-01  1.40754457e-01  1.41473648e-01  1.42395099e-01
  1.46761297e-01  1.49918409e-01  1.52036739e-01  1.53236326e-01
  1.54968688e-01  1.56947738e-01  1.60149484e-01  1.63090471e-01
  1.63802141e-01  1.66523802e-01  1.70354640e-01  1.73339620e-01
  1.76079592e-01  1.77821336e-01  1.83828875e-01  1.86301062e-01
  1.86968069e-01  1.91730776e-01  1.96016336e-01  1.97401200e-01
  1.99411068e-01  2.00486025e-01  2.03959058e-01  2.05531423e-01
  2.08492093e-01  2.12857542e-01  2.16435515e-01  2.17459058e-01
  2.18683353e-01  2.19513422e-01  2.22788073e-01  2.26154173e-01
  2.28071592e-01  2.29818116e-01  2.33387430e-01  2.35248443e-01
  2.36921638e-01  2.41804611e-01  2.44264640e-01  2.49399011e-01
  2.54444819e-01  2.57046769e-01  2.57327827e-01  2.59292284e-01
  2.62358436e-01  2.63429956e-01  2.65408846e-01  2.67782700e-01
  2.69228296e-01  2.75331842e-01  2.78039212e-01  2.78726784e-01
  2.80713682e-01  2.82160736e-01  2.86428718e-01  2.87983177e-01
  2.93249904e-01  2.94206681e-01  2.97961232e-01  3.02615013e-01
  3.03825206e-01  3.05492748e-01  3.10189961e-01  3.12023952e-01
  3.13819491e-01  3.17354553e-01  3.19166026e-01  3.22938443e-01
  3.23704127e-01  3.26482819e-01  3.29376231e-01  3.34017279e-01
  3.36808868e-01  3.37813496e-01  3.40284135e-01  3.45134236e-01
  3.47480120e-01  3.48730601e-01  3.52635548e-01  3.55273839e-01
  3.56876669e-01  3.58181244e-01  3.60053044e-01  3.65853077e-01
  3.66280391e-01  3.68716426e-01  3.70366550e-01  3.70800004e-01
  3.75402088e-01  3.77819716e-01  3.81651574e-01  3.85354699e-01
  3.85444833e-01  3.87187105e-01  3.89392624e-01  3.92317026e-01
  3.94068424e-01  3.97369046e-01  3.99796382e-01  4.01448413e-01
  4.04380659e-01  4.09714073e-01  4.11777475e-01  4.12632367e-01
  4.16494818e-01  4.17592780e-01  4.19013445e-01  4.21689444e-01
  4.23249562e-01  4.24467677e-01  4.29499520e-01  4.31048094e-01
  4.33546902e-01  4.34957313e-01  4.36845819e-01  4.38757169e-01
  4.39997879e-01  4.44215352e-01  4.47685418e-01  4.49026449e-01
  4.49906883e-01  4.52974060e-01  4.54338222e-01  4.56901768e-01
  4.57755000e-01  4.60955028e-01  4.63967020e-01  4.66257350e-01
  4.70921603e-01  4.72480562e-01  4.73896805e-01  4.76668776e-01
  4.78520516e-01  4.81228823e-01  4.83354568e-01  4.85567858e-01
  4.86468765e-01  4.89283806e-01  4.90258971e-01  4.93549373e-01
  4.94412502e-01  4.98244157e-01  5.00967359e-01  5.03705825e-01
  5.06546925e-01  5.09568660e-01  5.11881031e-01  5.13183529e-01
  5.15350808e-01  5.18917335e-01  5.20383842e-01  5.24243010e-01
  5.27607576e-01  5.29111186e-01  5.35924589e-01  5.39140509e-01
  5.40412381e-01  5.42237495e-01  5.44413141e-01  5.47639773e-01
  5.48650786e-01  5.55466736e-01  5.58891398e-01  5.59980229e-01
  5.63059421e-01  5.63269792e-01  5.69054265e-01  5.70045847e-01
  5.73151351e-01  5.75782593e-01  5.78602283e-01  5.81900610e-01
  5.87142440e-01  5.89326386e-01  5.91631128e-01  5.94848118e-01
  5.99433533e-01  6.03185599e-01  6.06488267e-01  6.08266012e-01
  6.11722463e-01  6.14461038e-01  6.16829164e-01  6.19219641e-01
  6.22916247e-01  6.25834680e-01  6.27110076e-01  6.27322347e-01
  6.31440783e-01  6.34315267e-01  6.36193085e-01  6.39662899e-01
  6.41937221e-01  6.45338972e-01  6.49386398e-01  6.50777328e-01
  6.52725259e-01  6.54017362e-01  6.57507149e-01  6.59760355e-01
  6.61318611e-01  6.66013065e-01  6.69846690e-01  6.71314776e-01
  6.75211968e-01  6.77851155e-01  6.78887420e-01  6.81568456e-01
  6.83220179e-01  6.86763402e-01  6.91889195e-01  6.95453824e-01
  6.97530293e-01  7.01048416e-01  7.04625976e-01  7.06794754e-01
  7.11680592e-01  7.15246118e-01  7.17349479e-01  7.17663819e-01
  7.24898877e-01  7.27801684e-01  7.31116884e-01  7.34504145e-01
  7.38303446e-01  7.39541374e-01  7.43697086e-01  7.46195895e-01
  7.52270624e-01  7.56068704e-01  7.59189593e-01  7.60642141e-01
  7.64223602e-01  7.70862359e-01  7.72674599e-01  7.75882394e-01
  7.78837592e-01  7.82055975e-01  7.88460867e-01  7.90199479e-01
  7.94286412e-01  7.98403676e-01  8.01132803e-01  8.05171656e-01
  8.10573776e-01  8.12404447e-01  8.14273907e-01  8.20173632e-01
  8.23013374e-01  8.25838076e-01  8.31262631e-01  8.35206164e-01
  8.37579992e-01  8.38571498e-01  8.41256525e-01  8.48673222e-01
  8.50389456e-01  8.55419626e-01  8.59631780e-01  8.62954426e-01
  8.64211284e-01  8.73250546e-01  8.76732719e-01  8.78331891e-01
  8.83748164e-01  8.87112812e-01  8.92734567e-01  8.94084587e-01
  8.97060287e-01  9.00139829e-01  9.03073799e-01  9.07209518e-01
  9.11683836e-01  9.20912776e-01  9.24050697e-01  9.24311375e-01
  9.27876180e-01  9.32552397e-01  9.36946290e-01  9.39082568e-01
  9.42031840e-01  9.44915888e-01  9.47438100e-01  9.52449789e-01
  9.54402860e-01  9.58744301e-01  9.60269190e-01  9.60854083e-01
  9.68391050e-01  9.73138954e-01  9.76254377e-01  9.77973713e-01
  9.79883545e-01  9.83342754e-01  9.88958634e-01  9.92322555e-01
  9.95100710e-01  9.98361057e-01  1.00380666e+00  1.00444613e+00
  1.01269585e+00  1.01973812e+00  1.02403102e+00  1.02722940e+00
  1.03363211e+00  1.03572781e+00  1.03902117e+00  1.04120183e+00
  1.04484033e+00  1.04715057e+00  1.05561683e+00  1.05969957e+00
  1.06238350e+00  1.06556898e+00  1.06903278e+00  1.07286808e+00
  1.07790274e+00  1.08020665e+00  1.08327524e+00  1.08545014e+00
  1.09164468e+00  1.09404709e+00  1.09763581e+00  1.10557335e+00
  1.10898082e+00  1.11336160e+00  1.12190345e+00  1.12384549e+00
  1.12717249e+00  1.12825594e+00  1.13114449e+00  1.13691812e+00
  1.14533574e+00  1.14891879e+00  1.15202103e+00  1.15543703e+00
  1.15797147e+00  1.16728057e+00  1.16926149e+00  1.17505731e+00
  1.18115798e+00  1.18338322e+00  1.18779950e+00  1.19157599e+00
  1.19598651e+00  1.19729935e+00  1.20616738e+00  1.21030188e+00
  1.21598567e+00  1.21980745e+00  1.22278609e+00  1.22578757e+00
  1.22929785e+00  1.23449953e+00  1.24200010e+00  1.24264846e+00
  1.24632225e+00  1.25023584e+00  1.25731370e+00  1.26016333e+00
  1.26938166e+00  1.27411644e+00  1.27723577e+00  1.27900260e+00
  1.28116253e+00  1.28571179e+00  1.29094960e+00  1.29578382e+00
  1.30397155e+00  1.30646383e+00  1.31506076e+00  1.31837774e+00
  1.32043415e+00  1.32359165e+00  1.32584494e+00  1.33151796e+00
  1.33633405e+00  1.34309606e+00  1.34686303e+00  1.35319017e+00
  1.35568087e+00  1.36020209e+00  1.36722347e+00  1.36977835e+00
  1.37392308e+00  1.37958879e+00  1.38234400e+00  1.39151110e+00
  1.39705927e+00  1.40147176e+00  1.40362901e+00  1.41327762e+00
  1.41575446e+00  1.42124895e+00  1.42204841e+00  1.43085084e+00
  1.43636679e+00  1.44091151e+00  1.44189143e+00  1.44458837e+00
  1.45058255e+00  1.45385547e+00  1.45694562e+00  1.45954588e+00
  1.46296635e+00  1.46610770e+00  1.47344473e+00  1.47531847e+00
  1.48589039e+00  1.49239087e+00  1.49633905e+00  1.49895176e+00
  1.50178279e+00  1.50817005e+00  1.51160301e+00  1.51565236e+00
  1.52035399e+00  1.52447648e+00  1.52994816e+00  1.53578954e+00
  1.53818382e+00  1.54324996e+00  1.54597957e+00  1.54715638e+00
  1.54942220e+00  1.55261626e+00  1.55458299e+00  1.55767827e+00
  1.55930392e+00  1.56381999e+00  1.56769813e+00  1.57140064e+00
  1.57392546e+00  1.57646806e+00  1.57742149e+00  1.57996399e+00
  1.58243314e+00  1.58596157e+00  1.58694666e+00  1.59192893e+00
  1.59469099e+00  1.59477137e+00  1.59711821e+00  1.60151520e+00
  1.60641363e+00  1.60893719e+00  1.61061069e+00  1.61598837e+00
  1.61779584e+00  1.62125701e+00  1.62437250e+00  1.62638095e+00
  1.62883600e+00  1.63506240e+00  1.63594319e+00  1.64139427e+00
  1.64636274e+00  1.64933026e+00  1.65172672e+00  1.65445374e+00
  1.65565145e+00  1.65973261e+00  1.66446962e+00  1.66644101e+00
  1.66868582e+00  1.67226873e+00  1.67423216e+00  1.67793882e+00
  1.68706505e+00  1.68902129e+00  1.69479217e+00  1.69751287e+00
  1.70085849e+00  1.70627420e+00  1.71182604e+00  1.71353333e+00
  1.71605709e+00  1.72279866e+00  1.72410291e+00  1.72868502e+00
  1.73192789e+00  1.73553113e+00  1.73901201e+00  1.74117890e+00
  1.74581739e+00  1.75437628e+00  1.75809753e+00  1.76218312e+00
  1.76585365e+00  1.76923606e+00  1.77306519e+00  1.78389723e+00
  1.78710382e+00  1.79004959e+00  1.79769580e+00  1.79910953e+00
  1.80617241e+00  1.80881092e+00  1.81505475e+00  1.82528596e+00
  1.82696760e+00  1.83074492e+00  1.83521516e+00  1.83653709e+00
  1.84019599e+00  1.84555227e+00  1.84784984e+00  1.85137626e+00
  1.85320257e+00  1.85741742e+00  1.86275846e+00  1.86741978e+00
  1.86959376e+00  1.87277827e+00  1.87379455e+00  1.87639134e+00
  1.88496911e+00  1.88789537e+00  1.89368662e+00  1.89912386e+00
  1.90397275e+00  1.90889449e+00  1.91252998e+00  1.91705677e+00
  1.92081068e+00  1.92712437e+00  1.92948375e+00  1.93128833e+00
  1.93996712e+00  1.94455821e+00  1.94717318e+00  1.95312058e+00
  1.95596790e+00  1.96508470e+00  1.96875171e+00  1.97757961e+00
  1.98436570e+00  1.98831614e+00  1.99216625e+00  1.99619885e+00
  2.00187726e+00  2.00688961e+00  2.01528618e+00  2.01892031e+00
  2.02265725e+00  2.02739753e+00  2.03381343e+00  2.03681224e+00
  2.04594521e+00  2.04786351e+00  2.05113265e+00  2.05497633e+00
  2.05761510e+00  2.06233508e+00  2.06330173e+00  2.07120467e+00
  2.07429352e+00  2.07819131e+00  2.08115362e+00  2.08274721e+00
  2.08739314e+00  2.09070914e+00  2.09427569e+00  2.09955464e+00
  2.10242063e+00  2.10688850e+00  2.10941959e+00  2.11507960e+00
  2.11827023e+00  2.12336760e+00  2.12806666e+00  2.13469606e+00
  2.13929514e+00  2.14133438e+00  2.14498533e+00  2.14722180e+00
  2.15304766e+00  2.16223895e+00  2.16392312e+00  2.16736132e+00
  2.17176607e+00  2.17591199e+00  2.18015928e+00  2.18729224e+00
  2.19423359e+00  2.20119875e+00  2.20393770e+00  2.20657128e+00
  2.21704247e+00  2.21913046e+00  2.22412644e+00  2.23298725e+00
  2.23457515e+00  2.24060836e+00  2.24769939e+00  2.25130047e+00
  2.25793065e+00  2.26056549e+00  2.26248942e+00  2.27249593e+00
  2.27654756e+00  2.27819367e+00  2.28544798e+00  2.28863054e+00
  2.29438645e+00  2.30049789e+00  2.30434937e+00  2.30779359e+00
  2.31289028e+00  2.31672499e+00  2.32374252e+00  2.32914850e+00
  2.33066813e+00  2.33361086e+00  2.33982162e+00  2.34263943e+00
  2.34972304e+00  2.35585506e+00  2.35744499e+00  2.36345262e+00
  2.36482287e+00  2.36931259e+00  2.37147017e+00  2.37534535e+00
  2.37631471e+00  2.38461577e+00  2.38728206e+00  2.39002494e+00
  2.39473925e+00  2.39769800e+00  2.40496394e+00  2.41060026e+00
  2.41316004e+00  2.41782842e+00  2.42117357e+00  2.42482436e+00
  2.42972233e+00  2.43150549e+00  2.44154422e+00  2.44700018e+00
  2.44878803e+00  2.45168260e+00  2.45706560e+00  2.46182929e+00
  2.46381988e+00  2.47007816e+00  2.47169175e+00  2.47646245e+00
  2.48655916e+00  2.49016957e+00  2.49811300e+00  2.50266822e+00
  2.50647161e+00  2.51183741e+00  2.51918494e+00  2.52729231e+00
  2.52939295e+00  2.53176144e+00  2.53654897e+00  2.54011203e+00
  2.54597547e+00  2.54833012e+00  2.54981373e+00  2.55358259e+00
  2.55837485e+00  2.56024848e+00  2.56213587e+00  2.56712684e+00
  2.57154901e+00  2.57507311e+00  2.58206740e+00  2.58501569e+00
  2.58669317e+00  2.59351630e+00  2.59526290e+00  2.59888139e+00
  2.60741878e+00  2.61559327e+00  2.61701830e+00  2.61933732e+00
  2.62345640e+00  2.62940738e+00  2.63372535e+00  2.63863580e+00
  2.64283566e+00  2.64390529e+00  2.64839163e+00  2.65170423e+00
  2.65581339e+00  2.65816283e+00  2.66405977e+00  2.66743194e+00
  2.66935180e+00  2.67603520e+00  2.67973732e+00  2.68558118e+00
  2.68628534e+00  2.69014872e+00  2.69389341e+00  2.70521888e+00
  2.70754345e+00  2.70997512e+00  2.71456583e+00  2.71927429e+00
  2.72187324e+00  2.73217851e+00  2.73491781e+00  2.74043373e+00
  2.74581934e+00  2.74680414e+00  2.74968179e+00  2.75236184e+00
  2.75506219e+00  2.75888474e+00  2.76565434e+00  2.76610395e+00
  2.77239891e+00  2.77433709e+00  2.78096663e+00  2.78384246e+00
  2.78543892e+00  2.79215466e+00  2.79586555e+00  2.79778347e+00
  2.80821898e+00  2.80920715e+00  2.81376646e+00  2.81526733e+00
  2.81969207e+00  2.82412104e+00  2.83324643e+00  2.83497739e+00
  2.83778812e+00  2.84467888e+00  2.84662115e+00  2.85241777e+00
  2.85394842e+00  2.85754211e+00  2.86449163e+00  2.86923470e+00
  2.87242247e+00  2.87584698e+00  2.87928376e+00  2.88286022e+00
  2.88535417e+00  2.89178345e+00  2.89440398e+00  2.90033059e+00
  2.90420410e+00  2.91124373e+00  2.91367344e+00  2.91662623e+00
  2.91762781e+00  2.92456689e+00  2.93280153e+00  2.93387480e+00
  2.94198409e+00  2.94366698e+00  2.94628489e+00  2.94875382e+00
  2.95619980e+00  2.96105996e+00  2.96251705e+00  2.96943360e+00
  2.97200442e+00  2.97755185e+00  2.97871284e+00  2.98178259e+00
  2.98448548e+00  2.98758286e+00  2.99299936e+00  2.99741399e+00
  2.99955655e+00  3.00414566e+00  3.00783685e+00  3.01167360e+00
  3.01444576e+00  3.01680431e+00  3.01766865e+00  3.02062349e+00
  3.02396681e+00  3.02860748e+00  3.03045686e+00  3.03342287e+00
  3.03695205e+00  3.03922017e+00  3.04451435e+00  3.04937644e+00
  3.05088318e+00  3.05499940e+00  3.05939913e+00  3.06462945e+00
  3.06810565e+00  3.07006232e+00  3.07242270e+00  3.07517512e+00
  3.08254791e+00  3.08382505e+00  3.08536796e+00  3.08668571e+00
  3.09152101e+00  3.09567385e+00  3.10169804e+00  3.10436084e+00
  3.10565295e+00  3.11045231e+00  3.11190648e+00  3.12140035e+00
  3.12274684e+00  3.12498979e+00  3.13164041e+00  3.13383211e+00
  3.13765241e+00  3.14115678e+00  3.14204570e+00  3.14572424e+00
  3.14895127e+00  3.15194420e+00  3.15479596e+00  3.15893198e+00
  3.15980657e+00  3.16435389e+00  3.16602228e+00  3.16858000e+00
  3.17008348e+00  3.17139376e+00  3.17781941e+00  3.17873887e+00
  3.18347234e+00  3.18813845e+00  3.19179918e+00  3.19343540e+00
  3.19995174e+00  3.20154265e+00  3.20250424e+00  3.20803607e+00
  3.21146060e+00  3.21327754e+00  3.21801518e+00  3.22048006e+00
  3.22224419e+00  3.22558504e+00  3.22848101e+00  3.23069728e+00
  3.23357741e+00  3.23629505e+00  3.24342137e+00  3.24497610e+00
  3.24964528e+00  3.25414084e+00  3.25618277e+00  3.25892911e+00
  3.26209260e+00  3.26501573e+00  3.26858565e+00  3.26983433e+00
  3.27558863e+00  3.27972177e+00  3.28403627e+00  3.28843059e+00
  3.29039682e+00  3.29505168e+00  3.29567809e+00  3.29749713e+00
  3.30014092e+00  3.30243506e+00  3.30632429e+00  3.30989510e+00
  3.31130931e+00  3.31319585e+00  3.31443336e+00  3.31758870e+00
  3.32008892e+00  3.32087472e+00  3.32240808e+00  3.32457398e+00
  3.32784077e+00  3.32871593e+00  3.33446152e+00  3.33453360e+00
  3.33686205e+00  3.33967907e+00  3.34600126e+00  3.35104958e+00
  3.35582381e+00  3.35666459e+00  3.35740602e+00  3.36014710e+00
  3.36503915e+00  3.36647936e+00  3.37018764e+00  3.37326374e+00
  3.37873250e+00  3.38076625e+00  3.38508283e+00  3.38787649e+00
  3.38940711e+00  3.39358339e+00  3.39899879e+00  3.40346959e+00
  3.40778012e+00  3.41005208e+00  3.41374665e+00  3.41810932e+00
  3.42091642e+00  3.42137355e+00  3.42746455e+00  3.42940961e+00
  3.43130352e+00  3.43831541e+00  3.44172087e+00  3.44595319e+00
  3.45254619e+00  3.45566513e+00  3.46029047e+00  3.46523897e+00
  3.46890762e+00  3.47078483e+00  3.47932649e+00  3.48455393e+00
  3.48637507e+00  3.49037399e+00  3.49391689e+00  3.50209809e+00
  3.50627417e+00  3.50913775e+00  3.51343768e+00  3.51597377e+00
  3.52034015e+00  3.53039369e+00  3.53517853e+00  3.53859825e+00
  3.54399222e+00  3.55039212e+00  3.55593454e+00  3.55753885e+00
  3.56290757e+00  3.56392717e+00  3.56796929e+00  3.57044860e+00
  3.57373242e+00  3.57609491e+00  3.57900545e+00  3.58507553e+00
  3.59012688e+00  3.59589997e+00  3.59977315e+00  3.60794697e+00
  3.60898821e+00  3.61039049e+00  3.61848633e+00  3.62648738e+00
  3.62894574e+00  3.63387770e+00  3.64651265e+00  3.64839775e+00
  3.65319533e+00  3.65392564e+00  3.66166972e+00  3.66260275e+00
  3.67120115e+00  3.67495399e+00  3.68044622e+00  3.68404894e+00
  3.68914695e+00  3.69278782e+00  3.69442171e+00  3.70074838e+00
  3.70737415e+00  3.71113370e+00  3.71449990e+00  3.71701698e+00
  3.72250485e+00  3.73037158e+00  3.73395747e+00  3.73821181e+00
  3.74399773e+00  3.74676930e+00  3.75453384e+00  3.75615547e+00
  3.76290494e+00  3.76409053e+00  3.76809629e+00  3.77754999e+00
  3.77991313e+00  3.78633175e+00  3.79030155e+00  3.79774475e+00
  3.80606146e+00  3.80933667e+00  3.81503847e+00  3.82345381e+00
  3.82989772e+00  3.83159013e+00  3.83445351e+00  3.84783118e+00
  3.85253013e+00  3.85381392e+00  3.86176409e+00  3.86504024e+00
  3.87214158e+00  3.88692690e+00  3.88972910e+00  3.90531918e+00
  3.90873012e+00  3.91155530e+00  3.92000566e+00  3.93501388e+00
  3.93631449e+00  3.94205148e+00  3.94349290e+00  3.94646642e+00
  3.94971830e+00  3.95430664e+00  3.95867788e+00  3.96299145e+00
  3.97571814e+00  3.98071403e+00  3.98587404e+00  3.99100126e+00
  3.99179929e+00  3.99710645e+00  4.00312715e+00  4.01568283e+00
  4.02224554e+00  4.02621784e+00  4.03155113e+00  4.03928672e+00
  4.04515974e+00  4.04674627e+00  4.05204708e+00  4.07062270e+00
  4.07343564e+00  4.08632461e+00  4.08824205e+00  4.09465668e+00
  4.10116597e+00  4.10582398e+00  4.11971533e+00  4.12487976e+00
  4.12833103e+00  4.13017167e+00  4.13543966e+00  4.14399943e+00
  4.14782556e+00  4.15202087e+00  4.15539856e+00  4.16245826e+00
  4.17240186e+00  4.17728095e+00  4.17927835e+00  4.18347327e+00
  4.19432280e+00  4.19777857e+00  4.20232476e+00  4.21667366e+00
  4.22009163e+00  4.22118620e+00  4.22898919e+00  4.23133614e+00
  4.23538231e+00  4.24319039e+00  4.24713120e+00  4.25592587e+00
  4.26051953e+00  4.26629539e+00  4.26703163e+00  4.26816475e+00
  4.27446963e+00  4.28779718e+00  4.29591040e+00  4.30976525e+00
  4.31591085e+00  4.32711050e+00  4.33088601e+00  4.33224055e+00
  4.34072497e+00  4.34615835e+00  4.35595885e+00  4.36536918e+00
  4.37129436e+00  4.38246655e+00  4.38619362e+00  4.39669413e+00
  4.40087575e+00  4.40217701e+00  4.40587442e+00  4.41384900e+00
  4.42114582e+00  4.42851604e+00  4.43523223e+00  4.44210597e+00
  4.44826044e+00  4.45449343e+00  4.45920203e+00  4.46727435e+00
  4.48472664e+00  4.48867385e+00  4.50162012e+00  4.51835224e+00
  4.52220402e+00  4.53415900e+00  4.55072256e+00  4.55323944e+00
  4.56586313e+00  4.56986837e+00  4.57216802e+00  4.57772542e+00
  4.58114126e+00  4.59161091e+00  4.60356636e+00  4.61338816e+00
  4.61952314e+00  4.62043445e+00  4.62858396e+00  4.63462926e+00
  4.64360510e+00  4.64744319e+00  4.65704575e+00  4.65746012e+00
  4.66714269e+00  4.67992241e+00  4.69204615e+00  4.69341996e+00
  4.71715363e+00  4.72407072e+00  4.73479404e+00  4.74227427e+00
  4.75129305e+00  4.75777953e+00  4.76685846e+00  4.77171379e+00
  4.77515170e+00  4.80144559e+00  4.80932154e+00  4.81978589e+00
  4.82212601e+00  4.83403754e+00  4.84558973e+00  4.84942993e+00
  4.85300646e+00  4.86638808e+00  4.87281864e+00  4.87978459e+00
  4.88644831e+00  4.89241564e+00  4.89886533e+00  4.90217358e+00
  4.91132843e+00  4.91971606e+00  4.93463173e+00  4.94491528e+00
  4.94729714e+00  4.96004769e+00  4.96919493e+00  4.97450809e+00
  4.97644920e+00  4.98886713e+00  4.99905010e+00  5.00793041e+00
  5.01647053e+00  5.03364047e+00  5.06496409e+00  5.08132781e+00
  5.08625890e+00  5.09024878e+00  5.09808675e+00  5.09933560e+00
  5.12415630e+00  5.12680749e+00  5.13510567e+00  5.14406379e+00
  5.15531185e+00  5.15934029e+00  5.16007177e+00  5.16476991e+00
  5.16715510e+00  5.17287270e+00  5.19036426e+00  5.19888984e+00
  5.20435078e+00  5.21990779e+00  5.23721222e+00  5.24493408e+00
  5.26422367e+00  5.28373859e+00  5.28963066e+00  5.30770157e+00
  5.32377329e+00  5.33506225e+00  5.35988277e+00  5.36421142e+00
  5.37281593e+00  5.38238273e+00  5.38418257e+00  5.39325693e+00
  5.40200110e+00  5.41037342e+00  5.41292836e+00  5.42010510e+00
  5.43747602e+00  5.45766212e+00  5.48365658e+00  5.49683727e+00
  5.50460697e+00  5.50977592e+00  5.51375810e+00  5.51721266e+00
  5.54084648e+00  5.56201921e+00  5.56947508e+00  5.57856709e+00
  5.58471309e+00  5.59044437e+00  5.60654508e+00  5.61068302e+00
  5.64861619e+00  5.66944703e+00  5.67679833e+00  5.70001784e+00
  5.72488129e+00  5.73168014e+00  5.76379288e+00  5.76828196e+00
  5.78571828e+00  5.79158222e+00  5.83748408e+00  5.85563217e+00
  5.85906774e+00  5.88576017e+00  5.89018618e+00  5.90580313e+00
  5.91703176e+00  5.94691993e+00  5.96910256e+00  5.99304740e+00
  6.01524972e+00  6.05042224e+00  6.06080227e+00  6.09386828e+00
  6.14087153e+00  6.15958072e+00  6.16113797e+00  6.19768845e+00
  6.22868742e+00  6.27709358e+00  6.32753013e+00  6.34827038e+00
  6.36830599e+00  6.38905126e+00  6.39440743e+00  6.41224884e+00
  6.50997366e+00  6.51104439e+00  6.56002154e+00  6.56204667e+00
  6.67185894e+00  6.68116317e+00  6.74387239e+00  6.74710347e+00
  6.76948994e+00  6.82121726e+00  6.84229657e+00  6.90655827e+00
  6.93919591e+00  6.97077495e+00  7.09906236e+00  7.12802741e+00
  7.15299153e+00  7.17033915e+00  7.27271750e+00  7.36518327e+00
  2.22980552e+01  2.23515937e+01  2.24463333e+01  2.24550576e+01
  2.24594377e+01  2.24738440e+01  2.25514431e+01  2.25743742e+01
  2.26542675e+01  2.26732718e+01  2.27679180e+01  2.27729909e+01
  2.28263159e+01  2.28419118e+01  2.28593864e+01  2.28732072e+01
  2.29041815e+01  2.29457429e+01  2.29695332e+01  2.30398541e+01
  2.31574603e+01  2.31847691e+01  2.32000472e+01  2.32464577e+01
  2.33043512e+01  2.33139448e+01  2.33246574e+01  2.33965537e+01
  2.34484368e+01  2.34825285e+01  2.36262371e+01  2.36865749e+01
  2.36989734e+01  2.37801091e+01  3.27424179e+01  3.27764222e+01
  3.27962527e+01  3.28292467e+01  4.39276340e+01  4.39842215e+01
  4.40019588e+01  4.41073212e+01]
nelec by numeric integration = 298.00036191194795
    CPU time for vxc    314.55 sec, wall time     21.10 sec
    CPU time for df vj and vk   1726.06 sec, wall time    128.11 sec
E1 = -11984.455341865736  Ecoul = 5639.050576054328  Exc = -257.1056736573587
cycle= 3 E= -1834.56336215105  delta_E= -2.27e-09  |g|= 8.3e-06  |ddm|= 0.000137
    CPU time for cycle= 3   2052.45 sec, wall time    150.87 sec
  HOMO = -0.201316343931441  LUMO = -0.0916235166434427
  mo_energy =
[-1.92736679e+01 -1.92490820e+01 -1.92072244e+01 -1.91960253e+01
 -1.44228920e+01 -1.44212977e+01 -1.43544410e+01 -1.43543697e+01
 -1.03679427e+01 -1.03588887e+01 -1.02856007e+01 -1.02825766e+01
 -1.02754402e+01 -1.02739486e+01 -1.02537930e+01 -1.02537756e+01
 -1.02536597e+01 -1.02528822e+01 -1.02510123e+01 -1.02502965e+01
 -1.02493279e+01 -1.02483511e+01 -1.02461603e+01 -1.02461402e+01
 -1.02449462e+01 -1.02444683e+01 -1.02440635e+01 -1.02386932e+01
 -1.02381610e+01 -1.02363624e+01 -1.02349473e+01 -1.02346676e+01
 -1.02337938e+01 -1.02310393e+01 -1.02303473e+01 -1.02302092e+01
 -1.02290481e+01 -1.02285806e+01 -1.02277263e+01 -1.02268550e+01
 -1.02266383e+01 -1.02251936e+01 -1.14582227e+00 -1.13148062e+00
 -1.05642778e+00 -1.04064389e+00 -1.01462380e+00 -1.00852360e+00
 -9.65348314e-01 -9.58848934e-01 -8.52808044e-01 -8.47644187e-01
 -8.45488193e-01 -8.35422182e-01 -8.32811777e-01 -8.19852957e-01
 -8.13529973e-01 -7.96190635e-01 -7.89671745e-01 -7.86702834e-01
 -7.81036089e-01 -7.61073629e-01 -7.49763842e-01 -7.34503877e-01
 -7.32395643e-01 -7.25865719e-01 -7.07516460e-01 -6.85146105e-01
 -6.82741923e-01 -6.72414972e-01 -6.64052312e-01 -6.44679402e-01
 -6.34148541e-01 -6.15600569e-01 -6.09150904e-01 -6.00300128e-01
 -5.94737156e-01 -5.78556986e-01 -5.71204094e-01 -5.61366432e-01
 -5.49875897e-01 -5.49541470e-01 -5.34198531e-01 -5.27813743e-01
 -5.24679650e-01 -5.23624520e-01 -5.16873980e-01 -5.11174695e-01
 -5.08650806e-01 -5.00659385e-01 -4.94389906e-01 -4.91798921e-01
 -4.89411838e-01 -4.79547888e-01 -4.77509191e-01 -4.71572971e-01
 -4.63094374e-01 -4.60068364e-01 -4.56187988e-01 -4.50678806e-01
 -4.49017978e-01 -4.47611937e-01 -4.45072612e-01 -4.42444205e-01
 -4.39930040e-01 -4.35969338e-01 -4.33585522e-01 -4.31152893e-01
 -4.25048234e-01 -4.22086677e-01 -4.19287015e-01 -4.19101461e-01
 -4.15414584e-01 -4.12020134e-01 -4.09919219e-01 -4.08683364e-01
 -4.05503932e-01 -4.01380780e-01 -3.98867028e-01 -3.96064655e-01
 -3.92078741e-01 -3.90547407e-01 -3.83570028e-01 -3.80807684e-01
 -3.78542144e-01 -3.73793850e-01 -3.68349666e-01 -3.63360249e-01
 -3.60430452e-01 -3.57125129e-01 -3.54704872e-01 -3.53305469e-01
 -3.49390464e-01 -3.42073427e-01 -3.35253019e-01 -3.26900488e-01
 -3.18510305e-01 -3.06603010e-01 -2.97266908e-01 -2.89035142e-01
 -2.86928906e-01 -2.84841697e-01 -2.65104622e-01 -2.52233747e-01
 -2.46727508e-01 -2.39694653e-01 -2.33844338e-01 -2.02586775e-01
 -2.01316344e-01 -9.16235166e-02 -8.86657205e-02 -3.75490990e-02
 -1.81845646e-02 -4.68513219e-03  1.36784835e-03  6.36057626e-03
  3.12526393e-02  3.47110527e-02  3.81017419e-02  4.28789288e-02
  4.56944681e-02  4.72158519e-02  5.86410714e-02  6.40930907e-02
  6.65577488e-02  7.27224717e-02  7.51617614e-02  7.82752208e-02
  7.88971131e-02  8.26488903e-02  8.60252130e-02  8.95788739e-02
  9.14096629e-02  9.23909693e-02  9.73649895e-02  1.00151017e-01
  1.04272621e-01  1.11346560e-01  1.12464943e-01  1.16016411e-01
  1.17899636e-01  1.19948273e-01  1.21606961e-01  1.23388028e-01
  1.26820206e-01  1.29435239e-01  1.30634415e-01  1.33220679e-01
  1.34520248e-01  1.40754446e-01  1.41473687e-01  1.42395034e-01
  1.46761265e-01  1.49918447e-01  1.52036824e-01  1.53236281e-01
  1.54968748e-01  1.56947672e-01  1.60149492e-01  1.63090496e-01
  1.63802046e-01  1.66523860e-01  1.70354635e-01  1.73339643e-01
  1.76079568e-01  1.77821306e-01  1.83828860e-01  1.86301059e-01
  1.86968021e-01  1.91730834e-01  1.96016354e-01  1.97401242e-01
  1.99411073e-01  2.00485952e-01  2.03959078e-01  2.05531434e-01
  2.08492082e-01  2.12857600e-01  2.16435492e-01  2.17459074e-01
  2.18683348e-01  2.19513444e-01  2.22788076e-01  2.26154113e-01
  2.28071514e-01  2.29818073e-01  2.33387359e-01  2.35248415e-01
  2.36921612e-01  2.41804632e-01  2.44264696e-01  2.49398982e-01
  2.54444880e-01  2.57046779e-01  2.57327805e-01  2.59292269e-01
  2.62358409e-01  2.63430052e-01  2.65408844e-01  2.67782736e-01
  2.69228242e-01  2.75331867e-01  2.78039192e-01  2.78726766e-01
  2.80713693e-01  2.82160733e-01  2.86428726e-01  2.87983082e-01
  2.93249918e-01  2.94206663e-01  2.97961196e-01  3.02615019e-01
  3.03825214e-01  3.05492693e-01  3.10189982e-01  3.12023945e-01
  3.13819470e-01  3.17354592e-01  3.19166035e-01  3.22938445e-01
  3.23704176e-01  3.26482868e-01  3.29376226e-01  3.34017320e-01
  3.36808917e-01  3.37813441e-01  3.40284184e-01  3.45134258e-01
  3.47480091e-01  3.48730656e-01  3.52635591e-01  3.55273867e-01
  3.56876627e-01  3.58181250e-01  3.60052984e-01  3.65853003e-01
  3.66280419e-01  3.68716352e-01  3.70366562e-01  3.70800047e-01
  3.75402080e-01  3.77819726e-01  3.81651594e-01  3.85354658e-01
  3.85444836e-01  3.87187113e-01  3.89392625e-01  3.92316989e-01
  3.94068394e-01  3.97369083e-01  3.99796419e-01  4.01448392e-01
  4.04380629e-01  4.09714103e-01  4.11777420e-01  4.12632358e-01
  4.16494851e-01  4.17592747e-01  4.19013441e-01  4.21689434e-01
  4.23249544e-01  4.24467679e-01  4.29499560e-01  4.31048099e-01
  4.33546916e-01  4.34957325e-01  4.36845834e-01  4.38757217e-01
  4.39997918e-01  4.44215404e-01  4.47685488e-01  4.49026440e-01
  4.49906872e-01  4.52974059e-01  4.54338195e-01  4.56901805e-01
  4.57755044e-01  4.60955076e-01  4.63967005e-01  4.66257330e-01
  4.70921609e-01  4.72480589e-01  4.73896765e-01  4.76668704e-01
  4.78520544e-01  4.81228819e-01  4.83354562e-01  4.85567888e-01
  4.86468817e-01  4.89283774e-01  4.90258936e-01  4.93549361e-01
  4.94412520e-01  4.98244168e-01  5.00967352e-01  5.03705829e-01
  5.06546916e-01  5.09568649e-01  5.11881045e-01  5.13183512e-01
  5.15350826e-01  5.18917304e-01  5.20383821e-01  5.24243036e-01
  5.27607583e-01  5.29111254e-01  5.35924571e-01  5.39140495e-01
  5.40412400e-01  5.42237502e-01  5.44413118e-01  5.47639750e-01
  5.48650787e-01  5.55466812e-01  5.58891379e-01  5.59980250e-01
  5.63059434e-01  5.63269805e-01  5.69054307e-01  5.70045831e-01
  5.73151323e-01  5.75782586e-01  5.78602270e-01  5.81900598e-01
  5.87142443e-01  5.89326393e-01  5.91631129e-01  5.94848128e-01
  5.99433537e-01  6.03185561e-01  6.06488252e-01  6.08265996e-01
  6.11722460e-01  6.14461023e-01  6.16829132e-01  6.19219638e-01
  6.22916231e-01  6.25834751e-01  6.27110120e-01  6.27322385e-01
  6.31440783e-01  6.34315270e-01  6.36193024e-01  6.39662927e-01
  6.41937250e-01  6.45339057e-01  6.49386388e-01  6.50777324e-01
  6.52725233e-01  6.54017467e-01  6.57507172e-01  6.59760386e-01
  6.61318634e-01  6.66013060e-01  6.69846698e-01  6.71314768e-01
  6.75211916e-01  6.77851079e-01  6.78887453e-01  6.81568485e-01
  6.83220129e-01  6.86763394e-01  6.91889151e-01  6.95453847e-01
  6.97530313e-01  7.01048357e-01  7.04626011e-01  7.06794772e-01
  7.11680624e-01  7.15246094e-01  7.17349481e-01  7.17663874e-01
  7.24898891e-01  7.27801693e-01  7.31116911e-01  7.34504278e-01
  7.38303451e-01  7.39541438e-01  7.43697060e-01  7.46195875e-01
  7.52270648e-01  7.56068740e-01  7.59189607e-01  7.60642196e-01
  7.64223606e-01  7.70862394e-01  7.72674578e-01  7.75882424e-01
  7.78837643e-01  7.82056022e-01  7.88460885e-01  7.90199489e-01
  7.94286428e-01  7.98403682e-01  8.01132787e-01  8.05171663e-01
  8.10573845e-01  8.12404435e-01  8.14273943e-01  8.20173666e-01
  8.23013339e-01  8.25838064e-01  8.31262624e-01  8.35206160e-01
  8.37579955e-01  8.38571531e-01  8.41256561e-01  8.48673119e-01
  8.50389462e-01  8.55419646e-01  8.59631838e-01  8.62954377e-01
  8.64211270e-01  8.73250633e-01  8.76732716e-01  8.78331894e-01
  8.83748159e-01  8.87112772e-01  8.92734601e-01  8.94084591e-01
  8.97060265e-01  9.00139832e-01  9.03073829e-01  9.07209578e-01
  9.11683858e-01  9.20912774e-01  9.24050726e-01  9.24311322e-01
  9.27876232e-01  9.32552485e-01  9.36946273e-01  9.39082596e-01
  9.42031858e-01  9.44915868e-01  9.47438103e-01  9.52449787e-01
  9.54402870e-01  9.58744308e-01  9.60269166e-01  9.60854072e-01
  9.68391051e-01  9.73138975e-01  9.76254347e-01  9.77973749e-01
  9.79883554e-01  9.83342724e-01  9.88958622e-01  9.92322534e-01
  9.95100658e-01  9.98361099e-01  1.00380670e+00  1.00444614e+00
  1.01269590e+00  1.01973818e+00  1.02403099e+00  1.02722949e+00
  1.03363212e+00  1.03572785e+00  1.03902125e+00  1.04120179e+00
  1.04484039e+00  1.04715059e+00  1.05561689e+00  1.05969961e+00
  1.06238348e+00  1.06556896e+00  1.06903281e+00  1.07286805e+00
  1.07790279e+00  1.08020668e+00  1.08327525e+00  1.08545015e+00
  1.09164467e+00  1.09404707e+00  1.09763585e+00  1.10557333e+00
  1.10898080e+00  1.11336154e+00  1.12190346e+00  1.12384552e+00
  1.12717244e+00  1.12825593e+00  1.13114451e+00  1.13691811e+00
  1.14533569e+00  1.14891881e+00  1.15202106e+00  1.15543703e+00
  1.15797137e+00  1.16728060e+00  1.16926153e+00  1.17505726e+00
  1.18115796e+00  1.18338322e+00  1.18779958e+00  1.19157596e+00
  1.19598649e+00  1.19729936e+00  1.20616741e+00  1.21030181e+00
  1.21598566e+00  1.21980746e+00  1.22278609e+00  1.22578754e+00
  1.22929784e+00  1.23449955e+00  1.24200007e+00  1.24264848e+00
  1.24632225e+00  1.25023586e+00  1.25731369e+00  1.26016336e+00
  1.26938167e+00  1.27411644e+00  1.27723572e+00  1.27900266e+00
  1.28116259e+00  1.28571191e+00  1.29094959e+00  1.29578387e+00
  1.30397156e+00  1.30646387e+00  1.31506076e+00  1.31837782e+00
  1.32043408e+00  1.32359164e+00  1.32584498e+00  1.33151792e+00
  1.33633403e+00  1.34309606e+00  1.34686301e+00  1.35319018e+00
  1.35568096e+00  1.36020204e+00  1.36722349e+00  1.36977833e+00
  1.37392300e+00  1.37958880e+00  1.38234408e+00  1.39151111e+00
  1.39705925e+00  1.40147180e+00  1.40362906e+00  1.41327765e+00
  1.41575446e+00  1.42124896e+00  1.42204841e+00  1.43085078e+00
  1.43636675e+00  1.44091147e+00  1.44189140e+00  1.44458835e+00
  1.45058249e+00  1.45385546e+00  1.45694560e+00  1.45954587e+00
  1.46296624e+00  1.46610776e+00  1.47344472e+00  1.47531849e+00
  1.48589046e+00  1.49239090e+00  1.49633898e+00  1.49895168e+00
  1.50178284e+00  1.50817001e+00  1.51160299e+00  1.51565242e+00
  1.52035405e+00  1.52447647e+00  1.52994813e+00  1.53578951e+00
  1.53818385e+00  1.54324993e+00  1.54597960e+00  1.54715638e+00
  1.54942218e+00  1.55261622e+00  1.55458300e+00  1.55767822e+00
  1.55930390e+00  1.56381994e+00  1.56769817e+00  1.57140065e+00
  1.57392548e+00  1.57646804e+00  1.57742155e+00  1.57996397e+00
  1.58243319e+00  1.58596158e+00  1.58694667e+00  1.59192894e+00
  1.59469099e+00  1.59477134e+00  1.59711825e+00  1.60151522e+00
  1.60641362e+00  1.60893725e+00  1.61061064e+00  1.61598847e+00
  1.61779581e+00  1.62125698e+00  1.62437249e+00  1.62638088e+00
  1.62883605e+00  1.63506236e+00  1.63594326e+00  1.64139429e+00
  1.64636268e+00  1.64933028e+00  1.65172669e+00  1.65445384e+00
  1.65565146e+00  1.65973261e+00  1.66446964e+00  1.66644106e+00
  1.66868585e+00  1.67226877e+00  1.67423220e+00  1.67793887e+00
  1.68706503e+00  1.68902126e+00  1.69479214e+00  1.69751288e+00
  1.70085855e+00  1.70627425e+00  1.71182595e+00  1.71353334e+00
  1.71605716e+00  1.72279863e+00  1.72410291e+00  1.72868508e+00
  1.73192795e+00  1.73553112e+00  1.73901200e+00  1.74117892e+00
  1.74581739e+00  1.75437626e+00  1.75809752e+00  1.76218317e+00
  1.76585362e+00  1.76923609e+00  1.77306524e+00  1.78389722e+00
  1.78710390e+00  1.79004954e+00  1.79769581e+00  1.79910943e+00
  1.80617248e+00  1.80881092e+00  1.81505474e+00  1.82528592e+00
  1.82696758e+00  1.83074490e+00  1.83521519e+00  1.83653701e+00
  1.84019593e+00  1.84555230e+00  1.84784981e+00  1.85137627e+00
  1.85320254e+00  1.85741734e+00  1.86275843e+00  1.86741983e+00
  1.86959377e+00  1.87277828e+00  1.87379455e+00  1.87639139e+00
  1.88496917e+00  1.88789533e+00  1.89368663e+00  1.89912384e+00
  1.90397273e+00  1.90889448e+00  1.91253005e+00  1.91705674e+00
  1.92081074e+00  1.92712442e+00  1.92948373e+00  1.93128833e+00
  1.93996715e+00  1.94455819e+00  1.94717323e+00  1.95312066e+00
  1.95596789e+00  1.96508466e+00  1.96875165e+00  1.97757960e+00
  1.98436572e+00  1.98831621e+00  1.99216624e+00  1.99619885e+00
  2.00187730e+00  2.00688961e+00  2.01528619e+00  2.01892033e+00
  2.02265725e+00  2.02739753e+00  2.03381344e+00  2.03681227e+00
  2.04594522e+00  2.04786348e+00  2.05113266e+00  2.05497626e+00
  2.05761510e+00  2.06233510e+00  2.06330170e+00  2.07120469e+00
  2.07429347e+00  2.07819122e+00  2.08115356e+00  2.08274721e+00
  2.08739308e+00  2.09070904e+00  2.09427570e+00  2.09955467e+00
  2.10242054e+00  2.10688854e+00  2.10941962e+00  2.11507958e+00
  2.11827014e+00  2.12336765e+00  2.12806665e+00  2.13469608e+00
  2.13929513e+00  2.14133439e+00  2.14498538e+00  2.14722174e+00
  2.15304770e+00  2.16223902e+00  2.16392321e+00  2.16736138e+00
  2.17176600e+00  2.17591190e+00  2.18015931e+00  2.18729219e+00
  2.19423362e+00  2.20119881e+00  2.20393770e+00  2.20657128e+00
  2.21704256e+00  2.21913046e+00  2.22412640e+00  2.23298730e+00
  2.23457520e+00  2.24060842e+00  2.24769948e+00  2.25130051e+00
  2.25793066e+00  2.26056546e+00  2.26248947e+00  2.27249592e+00
  2.27654760e+00  2.27819360e+00  2.28544801e+00  2.28863051e+00
  2.29438647e+00  2.30049787e+00  2.30434936e+00  2.30779362e+00
  2.31289028e+00  2.31672500e+00  2.32374253e+00  2.32914848e+00
  2.33066816e+00  2.33361080e+00  2.33982160e+00  2.34263946e+00
  2.34972308e+00  2.35585494e+00  2.35744501e+00  2.36345264e+00
  2.36482292e+00  2.36931262e+00  2.37147007e+00  2.37534538e+00
  2.37631475e+00  2.38461570e+00  2.38728207e+00  2.39002501e+00
  2.39473926e+00  2.39769799e+00  2.40496398e+00  2.41060021e+00
  2.41316001e+00  2.41782843e+00  2.42117343e+00  2.42482446e+00
  2.42972240e+00  2.43150552e+00  2.44154423e+00  2.44700013e+00
  2.44878803e+00  2.45168259e+00  2.45706558e+00  2.46182934e+00
  2.46381987e+00  2.47007820e+00  2.47169165e+00  2.47646241e+00
  2.48655914e+00  2.49016960e+00  2.49811293e+00  2.50266826e+00
  2.50647154e+00  2.51183748e+00  2.51918495e+00  2.52729222e+00
  2.52939287e+00  2.53176147e+00  2.53654900e+00  2.54011206e+00
  2.54597543e+00  2.54833011e+00  2.54981359e+00  2.55358258e+00
  2.55837485e+00  2.56024852e+00  2.56213581e+00  2.56712685e+00
  2.57154899e+00  2.57507304e+00  2.58206738e+00  2.58501561e+00
  2.58669318e+00  2.59351632e+00  2.59526294e+00  2.59888132e+00
  2.60741876e+00  2.61559322e+00  2.61701835e+00  2.61933731e+00
  2.62345633e+00  2.62940727e+00  2.63372531e+00  2.63863587e+00
  2.64283571e+00  2.64390527e+00  2.64839168e+00  2.65170426e+00
  2.65581328e+00  2.65816279e+00  2.66405985e+00  2.66743189e+00
  2.66935173e+00  2.67603518e+00  2.67973729e+00  2.68558124e+00
  2.68628528e+00  2.69014871e+00  2.69389341e+00  2.70521890e+00
  2.70754339e+00  2.70997519e+00  2.71456580e+00  2.71927423e+00
  2.72187317e+00  2.73217861e+00  2.73491779e+00  2.74043379e+00
  2.74581938e+00  2.74680415e+00  2.74968172e+00  2.75236186e+00
  2.75506219e+00  2.75888469e+00  2.76565430e+00  2.76610385e+00
  2.77239882e+00  2.77433714e+00  2.78096666e+00  2.78384244e+00
  2.78543897e+00  2.79215471e+00  2.79586556e+00  2.79778357e+00
  2.80821900e+00  2.80920718e+00  2.81376645e+00  2.81526727e+00
  2.81969209e+00  2.82412104e+00  2.83324643e+00  2.83497745e+00
  2.83778829e+00  2.84467887e+00  2.84662120e+00  2.85241775e+00
  2.85394851e+00  2.85754226e+00  2.86449152e+00  2.86923462e+00
  2.87242249e+00  2.87584698e+00  2.87928376e+00  2.88286013e+00
  2.88535421e+00  2.89178341e+00  2.89440396e+00  2.90033055e+00
  2.90420420e+00  2.91124376e+00  2.91367345e+00  2.91662626e+00
  2.91762780e+00  2.92456682e+00  2.93280143e+00  2.93387491e+00
  2.94198410e+00  2.94366698e+00  2.94628485e+00  2.94875371e+00
  2.95619971e+00  2.96105997e+00  2.96251697e+00  2.96943360e+00
  2.97200437e+00  2.97755189e+00  2.97871278e+00  2.98178258e+00
  2.98448553e+00  2.98758287e+00  2.99299937e+00  2.99741400e+00
  2.99955655e+00  3.00414570e+00  3.00783688e+00  3.01167360e+00
  3.01444569e+00  3.01680429e+00  3.01766864e+00  3.02062353e+00
  3.02396691e+00  3.02860752e+00  3.03045687e+00  3.03342279e+00
  3.03695212e+00  3.03922021e+00  3.04451429e+00  3.04937642e+00
  3.05088318e+00  3.05499931e+00  3.05939921e+00  3.06462950e+00
  3.06810566e+00  3.07006232e+00  3.07242267e+00  3.07517518e+00
  3.08254793e+00  3.08382501e+00  3.08536797e+00  3.08668570e+00
  3.09152101e+00  3.09567388e+00  3.10169808e+00  3.10436077e+00
  3.10565295e+00  3.11045230e+00  3.11190647e+00  3.12140034e+00
  3.12274674e+00  3.12498975e+00  3.13164038e+00  3.13383210e+00
  3.13765232e+00  3.14115679e+00  3.14204572e+00  3.14572423e+00
  3.14895133e+00  3.15194425e+00  3.15479607e+00  3.15893196e+00
  3.15980660e+00  3.16435380e+00  3.16602231e+00  3.16858004e+00
  3.17008343e+00  3.17139366e+00  3.17781945e+00  3.17873892e+00
  3.18347220e+00  3.18813851e+00  3.19179923e+00  3.19343540e+00
  3.19995175e+00  3.20154264e+00  3.20250425e+00  3.20803608e+00
  3.21146063e+00  3.21327764e+00  3.21801514e+00  3.22048002e+00
  3.22224429e+00  3.22558500e+00  3.22848094e+00  3.23069727e+00
  3.23357739e+00  3.23629498e+00  3.24342130e+00  3.24497608e+00
  3.24964525e+00  3.25414085e+00  3.25618278e+00  3.25892912e+00
  3.26209267e+00  3.26501575e+00  3.26858563e+00  3.26983432e+00
  3.27558859e+00  3.27972178e+00  3.28403623e+00  3.28843062e+00
  3.29039681e+00  3.29505167e+00  3.29567806e+00  3.29749718e+00
  3.30014085e+00  3.30243501e+00  3.30632424e+00  3.30989511e+00
  3.31130929e+00  3.31319591e+00  3.31443334e+00  3.31758873e+00
  3.32008893e+00  3.32087467e+00  3.32240806e+00  3.32457400e+00
  3.32784074e+00  3.32871593e+00  3.33446152e+00  3.33453355e+00
  3.33686200e+00  3.33967902e+00  3.34600126e+00  3.35104952e+00
  3.35582376e+00  3.35666456e+00  3.35740595e+00  3.36014710e+00
  3.36503910e+00  3.36647936e+00  3.37018765e+00  3.37326374e+00
  3.37873254e+00  3.38076623e+00  3.38508285e+00  3.38787655e+00
  3.38940711e+00  3.39358340e+00  3.39899884e+00  3.40346965e+00
  3.40778020e+00  3.41005209e+00  3.41374673e+00  3.41810931e+00
  3.42091649e+00  3.42137357e+00  3.42746460e+00  3.42940969e+00
  3.43130352e+00  3.43831539e+00  3.44172087e+00  3.44595314e+00
  3.45254624e+00  3.45566506e+00  3.46029054e+00  3.46523903e+00
  3.46890757e+00  3.47078478e+00  3.47932654e+00  3.48455398e+00
  3.48637509e+00  3.49037394e+00  3.49391696e+00  3.50209816e+00
  3.50627418e+00  3.50913775e+00  3.51343779e+00  3.51597383e+00
  3.52034017e+00  3.53039361e+00  3.53517852e+00  3.53859829e+00
  3.54399227e+00  3.55039213e+00  3.55593463e+00  3.55753882e+00
  3.56290762e+00  3.56392715e+00  3.56796925e+00  3.57044857e+00
  3.57373247e+00  3.57609493e+00  3.57900551e+00  3.58507555e+00
  3.59012687e+00  3.59589992e+00  3.59977314e+00  3.60794693e+00
  3.60898824e+00  3.61039046e+00  3.61848631e+00  3.62648744e+00
  3.62894571e+00  3.63387768e+00  3.64651260e+00  3.64839777e+00
  3.65319532e+00  3.65392565e+00  3.66166973e+00  3.66260280e+00
  3.67120114e+00  3.67495402e+00  3.68044620e+00  3.68404900e+00
  3.68914696e+00  3.69278787e+00  3.69442164e+00  3.70074840e+00
  3.70737405e+00  3.71113363e+00  3.71449991e+00  3.71701697e+00
  3.72250479e+00  3.73037171e+00  3.73395748e+00  3.73821180e+00
  3.74399776e+00  3.74676931e+00  3.75453381e+00  3.75615549e+00
  3.76290489e+00  3.76409067e+00  3.76809632e+00  3.77755006e+00
  3.77991318e+00  3.78633176e+00  3.79030158e+00  3.79774480e+00
  3.80606145e+00  3.80933667e+00  3.81503855e+00  3.82345373e+00
  3.82989782e+00  3.83159012e+00  3.83445345e+00  3.84783122e+00
  3.85253018e+00  3.85381390e+00  3.86176416e+00  3.86504016e+00
  3.87214160e+00  3.88692683e+00  3.88972917e+00  3.90531927e+00
  3.90873014e+00  3.91155528e+00  3.92000565e+00  3.93501385e+00
  3.93631453e+00  3.94205155e+00  3.94349288e+00  3.94646645e+00
  3.94971833e+00  3.95430652e+00  3.95867791e+00  3.96299149e+00
  3.97571820e+00  3.98071402e+00  3.98587403e+00  3.99100126e+00
  3.99179925e+00  3.99710638e+00  4.00312724e+00  4.01568281e+00
  4.02224553e+00  4.02621790e+00  4.03155113e+00  4.03928677e+00
  4.04515978e+00  4.04674624e+00  4.05204712e+00  4.07062256e+00
  4.07343566e+00  4.08632460e+00  4.08824207e+00  4.09465665e+00
  4.10116597e+00  4.10582409e+00  4.11971540e+00  4.12487971e+00
  4.12833104e+00  4.13017169e+00  4.13543958e+00  4.14399947e+00
  4.14782558e+00  4.15202087e+00  4.15539864e+00  4.16245828e+00
  4.17240201e+00  4.17728092e+00  4.17927836e+00  4.18347325e+00
  4.19432277e+00  4.19777857e+00  4.20232479e+00  4.21667358e+00
  4.22009157e+00  4.22118620e+00  4.22898921e+00  4.23133617e+00
  4.23538237e+00  4.24319053e+00  4.24713123e+00  4.25592577e+00
  4.26051950e+00  4.26629528e+00  4.26703156e+00  4.26816476e+00
  4.27446960e+00  4.28779706e+00  4.29591043e+00  4.30976528e+00
  4.31591081e+00  4.32711048e+00  4.33088604e+00  4.33224053e+00
  4.34072492e+00  4.34615834e+00  4.35595879e+00  4.36536919e+00
  4.37129436e+00  4.38246654e+00  4.38619359e+00  4.39669415e+00
  4.40087582e+00  4.40217710e+00  4.40587434e+00  4.41384908e+00
  4.42114584e+00  4.42851608e+00  4.43523227e+00  4.44210604e+00
  4.44826044e+00  4.45449357e+00  4.45920196e+00  4.46727430e+00
  4.48472670e+00  4.48867386e+00  4.50162016e+00  4.51835218e+00
  4.52220400e+00  4.53415916e+00  4.55072244e+00  4.55323946e+00
  4.56586303e+00  4.56986835e+00  4.57216803e+00  4.57772532e+00
  4.58114120e+00  4.59161095e+00  4.60356613e+00  4.61338819e+00
  4.61952322e+00  4.62043454e+00  4.62858401e+00  4.63462926e+00
  4.64360512e+00  4.64744320e+00  4.65704581e+00  4.65746010e+00
  4.66714279e+00  4.67992237e+00  4.69204625e+00  4.69341982e+00
  4.71715362e+00  4.72407069e+00  4.73479403e+00  4.74227421e+00
  4.75129299e+00  4.75777954e+00  4.76685845e+00  4.77171382e+00
  4.77515173e+00  4.80144558e+00  4.80932152e+00  4.81978578e+00
  4.82212595e+00  4.83403749e+00  4.84558987e+00  4.84942996e+00
  4.85300647e+00  4.86638816e+00  4.87281862e+00  4.87978466e+00
  4.88644834e+00  4.89241572e+00  4.89886526e+00  4.90217358e+00
  4.91132844e+00  4.91971607e+00  4.93463176e+00  4.94491529e+00
  4.94729715e+00  4.96004783e+00  4.96919493e+00  4.97450818e+00
  4.97644929e+00  4.98886707e+00  4.99905016e+00  5.00793050e+00
  5.01647056e+00  5.03364036e+00  5.06496409e+00  5.08132779e+00
  5.08625885e+00  5.09024876e+00  5.09808675e+00  5.09933568e+00
  5.12415629e+00  5.12680741e+00  5.13510571e+00  5.14406392e+00
  5.15531201e+00  5.15934049e+00  5.16007193e+00  5.16477000e+00
  5.16715507e+00  5.17287276e+00  5.19036452e+00  5.19888977e+00
  5.20435080e+00  5.21990798e+00  5.23721213e+00  5.24493433e+00
  5.26422372e+00  5.28373864e+00  5.28963054e+00  5.30770153e+00
  5.32377322e+00  5.33506222e+00  5.35988287e+00  5.36421109e+00
  5.37281608e+00  5.38238265e+00  5.38418256e+00  5.39325694e+00
  5.40200075e+00  5.41037342e+00  5.41292823e+00  5.42010497e+00
  5.43747608e+00  5.45766205e+00  5.48365669e+00  5.49683726e+00
  5.50460700e+00  5.50977585e+00  5.51375820e+00  5.51721277e+00
  5.54084646e+00  5.56201930e+00  5.56947498e+00  5.57856709e+00
  5.58471306e+00  5.59044444e+00  5.60654521e+00  5.61068314e+00
  5.64861618e+00  5.66944718e+00  5.67679847e+00  5.70001791e+00
  5.72488129e+00  5.73167996e+00  5.76379303e+00  5.76828209e+00
  5.78571816e+00  5.79158215e+00  5.83748395e+00  5.85563211e+00
  5.85906760e+00  5.88576006e+00  5.89018607e+00  5.90580308e+00
  5.91703160e+00  5.94692006e+00  5.96910251e+00  5.99304744e+00
  6.01524980e+00  6.05042247e+00  6.06080225e+00  6.09386837e+00
  6.14087139e+00  6.15958091e+00  6.16113819e+00  6.19768858e+00
  6.22868710e+00  6.27709377e+00  6.32753016e+00  6.34827067e+00
  6.36830628e+00  6.38905102e+00  6.39440783e+00  6.41224874e+00
  6.50997393e+00  6.51104470e+00  6.56002149e+00  6.56204671e+00
  6.67185876e+00  6.68116292e+00  6.74387193e+00  6.74710299e+00
  6.76948977e+00  6.82121720e+00  6.84229687e+00  6.90655877e+00
  6.93919551e+00  6.97077457e+00  7.09906267e+00  7.12802767e+00
  7.15299200e+00  7.17033935e+00  7.27271713e+00  7.36518285e+00
  2.22980550e+01  2.23515936e+01  2.24463333e+01  2.24550574e+01
  2.24594376e+01  2.24738437e+01  2.25514431e+01  2.25743742e+01
  2.26542677e+01  2.26732720e+01  2.27679176e+01  2.27729907e+01
  2.28263158e+01  2.28419117e+01  2.28593867e+01  2.28732073e+01
  2.29041817e+01  2.29457427e+01  2.29695333e+01  2.30398541e+01
  2.31574606e+01  2.31847693e+01  2.32000473e+01  2.32464577e+01
  2.33043511e+01  2.33139449e+01  2.33246574e+01  2.33965536e+01
  2.34484368e+01  2.34825286e+01  2.36262371e+01  2.36865750e+01
  2.36989734e+01  2.37801093e+01  3.27424180e+01  3.27764222e+01
  3.27962527e+01  3.28292467e+01  4.39276329e+01  4.39842217e+01
  4.40019584e+01  4.41073217e+01]
nelec by numeric integration = 298.00036191205476
    CPU time for vxc    317.71 sec, wall time     21.39 sec
    CPU time for df vj and vk   1743.56 sec, wall time    129.92 sec
E1 = -11984.455332172594  Ecoul = 5639.050567435482  Exc = -257.1056747316861
cycle= 4 E= -1834.56336215109  delta_E= -3.27e-11  |g|= 1.02e-06  |ddm|= 1.08e-05
    CPU time for cycle= 4   2073.65 sec, wall time    153.00 sec
  HOMO = -0.201316334548  LUMO = -0.091623505692033
  mo_energy =
[-1.92736682e+01 -1.92490822e+01 -1.92072248e+01 -1.91960258e+01
 -1.44228921e+01 -1.44212976e+01 -1.43544412e+01 -1.43543697e+01
 -1.03679426e+01 -1.03588886e+01 -1.02856007e+01 -1.02825765e+01
 -1.02754399e+01 -1.02739485e+01 -1.02537927e+01 -1.02537756e+01
 -1.02536599e+01 -1.02528823e+01 -1.02510123e+01 -1.02502965e+01
 -1.02493280e+01 -1.02483512e+01 -1.02461604e+01 -1.02461401e+01
 -1.02449463e+01 -1.02444683e+01 -1.02440636e+01 -1.02386933e+01
 -1.02381607e+01 -1.02363625e+01 -1.02349475e+01 -1.02346677e+01
 -1.02337938e+01 -1.02310395e+01 -1.02303473e+01 -1.02302092e+01
 -1.02290480e+01 -1.02285808e+01 -1.02277264e+01 -1.02268553e+01
 -1.02266385e+01 -1.02251937e+01 -1.14582235e+00 -1.13148071e+00
 -1.05642789e+00 -1.04064404e+00 -1.01462377e+00 -1.00852355e+00
 -9.65348357e-01 -9.58848958e-01 -8.52808077e-01 -8.47644148e-01
 -8.45488179e-01 -8.35422262e-01 -8.32811868e-01 -8.19852922e-01
 -8.13530020e-01 -7.96190656e-01 -7.89671801e-01 -7.86702842e-01
 -7.81036095e-01 -7.61073648e-01 -7.49763854e-01 -7.34503881e-01
 -7.32395675e-01 -7.25865784e-01 -7.07516456e-01 -6.85146153e-01
 -6.82741979e-01 -6.72414978e-01 -6.64052327e-01 -6.44679428e-01
 -6.34148500e-01 -6.15600627e-01 -6.09150967e-01 -6.00300115e-01
 -5.94737169e-01 -5.78556960e-01 -5.71204102e-01 -5.61366461e-01
 -5.49875905e-01 -5.49541502e-01 -5.34198591e-01 -5.27813820e-01
 -5.24679712e-01 -5.23624588e-01 -5.16874026e-01 -5.11174754e-01
 -5.08650839e-01 -5.00659479e-01 -4.94389972e-01 -4.91798962e-01
 -4.89411822e-01 -4.79547934e-01 -4.77509228e-01 -4.71572992e-01
 -4.63094357e-01 -4.60068364e-01 -4.56187986e-01 -4.50678855e-01
 -4.49018029e-01 -4.47611952e-01 -4.45072659e-01 -4.42444223e-01
 -4.39930091e-01 -4.35969331e-01 -4.33585573e-01 -4.31152911e-01
 -4.25048242e-01 -4.22086699e-01 -4.19287002e-01 -4.19101515e-01
 -4.15414626e-01 -4.12020131e-01 -4.09919287e-01 -4.08683375e-01
 -4.05503980e-01 -4.01380803e-01 -3.98867087e-01 -3.96064729e-01
 -3.92078750e-01 -3.90547445e-01 -3.83570082e-01 -3.80807721e-01
 -3.78542174e-01 -3.73793898e-01 -3.68349698e-01 -3.63360309e-01
 -3.60430475e-01 -3.57125135e-01 -3.54704952e-01 -3.53305568e-01
 -3.49390552e-01 -3.42073410e-01 -3.35253169e-01 -3.26900493e-01
 -3.18510315e-01 -3.06603152e-01 -2.97267091e-01 -2.89035122e-01
 -2.86928942e-01 -2.84841726e-01 -2.65104666e-01 -2.52233784e-01
 -2.46727469e-01 -2.39694714e-01 -2.33844385e-01 -2.02586785e-01
 -2.01316335e-01 -9.16235057e-02 -8.86657385e-02 -3.75491304e-02
 -1.81845750e-02 -4.68517677e-03  1.36782330e-03  6.36057018e-03
  3.12526087e-02  3.47110319e-02  3.81017366e-02  4.28789493e-02
  4.56944718e-02  4.72158287e-02  5.86410374e-02  6.40930738e-02
  6.65577605e-02  7.27224698e-02  7.51617534e-02  7.82751864e-02
  7.88971173e-02  8.26488380e-02  8.60251838e-02  8.95788566e-02
  9.14096557e-02  9.23909562e-02  9.73649741e-02  1.00151002e-01
  1.04272631e-01  1.11346553e-01  1.12464935e-01  1.16016421e-01
  1.17899632e-01  1.19948265e-01  1.21606939e-01  1.23387991e-01
  1.26820208e-01  1.29435231e-01  1.30634429e-01  1.33220661e-01
  1.34520259e-01  1.40754439e-01  1.41473667e-01  1.42395027e-01
  1.46761259e-01  1.49918418e-01  1.52036798e-01  1.53236281e-01
  1.54968715e-01  1.56947669e-01  1.60149475e-01  1.63090480e-01
  1.63802054e-01  1.66523827e-01  1.70354611e-01  1.73339626e-01
  1.76079564e-01  1.77821298e-01  1.83828845e-01  1.86301038e-01
  1.86968016e-01  1.91730801e-01  1.96016331e-01  1.97401210e-01
  1.99411055e-01  2.00485951e-01  2.03959052e-01  2.05531411e-01
  2.08492075e-01  2.12857569e-01  2.16435491e-01  2.17459057e-01
  2.18683333e-01  2.19513429e-01  2.22788058e-01  2.26154117e-01
  2.28071524e-01  2.29818081e-01  2.33387362e-01  2.35248404e-01
  2.36921608e-01  2.41804615e-01  2.44264667e-01  2.49398966e-01
  2.54444852e-01  2.57046759e-01  2.57327786e-01  2.59292271e-01
  2.62358393e-01  2.63430012e-01  2.65408836e-01  2.67782707e-01
  2.69228237e-01  2.75331849e-01  2.78039182e-01  2.78726760e-01
  2.80713682e-01  2.82160712e-01  2.86428705e-01  2.87983095e-01
  2.93249895e-01  2.94206653e-01  2.97961192e-01  3.02615003e-01
  3.03825193e-01  3.05492703e-01  3.10189954e-01  3.12023931e-01
  3.13819457e-01  3.17354568e-01  3.19166020e-01  3.22938432e-01
  3.23704145e-01  3.26482845e-01  3.29376216e-01  3.34017289e-01
  3.36808889e-01  3.37813463e-01  3.40284157e-01  3.45134237e-01
  3.47480080e-01  3.48730611e-01  3.52635563e-01  3.55273856e-01
  3.56876630e-01  3.58181230e-01  3.60052985e-01  3.65853014e-01
  3.66280399e-01  3.68716354e-01  3.70366536e-01  3.70800027e-01
  3.75402066e-01  3.77819712e-01  3.81651571e-01  3.85354659e-01
  3.85444819e-01  3.87187096e-01  3.89392610e-01  3.92316988e-01
  3.94068394e-01  3.97369056e-01  3.99796394e-01  4.01448373e-01
  4.04380624e-01  4.09714075e-01  4.11777421e-01  4.12632344e-01
  4.16494829e-01  4.17592731e-01  4.19013429e-01  4.21689420e-01
  4.23249537e-01  4.24467659e-01  4.29499532e-01  4.31048078e-01
  4.33546899e-01  4.34957302e-01  4.36845816e-01  4.38757185e-01
  4.39997895e-01  4.44215375e-01  4.47685448e-01  4.49026426e-01
  4.49906853e-01  4.52974051e-01  4.54338187e-01  4.56901775e-01
  4.57755017e-01  4.60955055e-01  4.63966979e-01  4.66257321e-01
  4.70921585e-01  4.72480563e-01  4.73896755e-01  4.76668697e-01
  4.78520518e-01  4.81228802e-01  4.83354547e-01  4.85567858e-01
  4.86468778e-01  4.89283758e-01  4.90258921e-01  4.93549342e-01
  4.94412497e-01  4.98244149e-01  5.00967337e-01  5.03705813e-01
  5.06546904e-01  5.09568637e-01  5.11881020e-01  5.13183501e-01
  5.15350801e-01  5.18917304e-01  5.20383809e-01  5.24243008e-01
  5.27607561e-01  5.29111215e-01  5.35924557e-01  5.39140474e-01
  5.40412366e-01  5.42237477e-01  5.44413113e-01  5.47639739e-01
  5.48650764e-01  5.55466775e-01  5.58891359e-01  5.59980225e-01
  5.63059413e-01  5.63269783e-01  5.69054276e-01  5.70045819e-01
  5.73151311e-01  5.75782566e-01  5.78602251e-01  5.81900589e-01
  5.87142426e-01  5.89326374e-01  5.91631119e-01  5.94848113e-01
  5.99433520e-01  6.03185560e-01  6.06488246e-01  6.08265997e-01
  6.11722453e-01  6.14461016e-01  6.16829129e-01  6.19219615e-01
  6.22916230e-01  6.25834711e-01  6.27110095e-01  6.27322358e-01
  6.31440773e-01  6.34315263e-01  6.36193027e-01  6.39662903e-01
  6.41937238e-01  6.45339013e-01  6.49386375e-01  6.50777305e-01
  6.52725222e-01  6.54017423e-01  6.57507149e-01  6.59760362e-01
  6.61318613e-01  6.66013058e-01  6.69846688e-01  6.71314753e-01
  6.75211918e-01  6.77851087e-01  6.78887428e-01  6.81568462e-01
  6.83220141e-01  6.86763375e-01  6.91889136e-01  6.95453835e-01
  6.97530297e-01  7.01048371e-01  7.04625986e-01  7.06794754e-01
  7.11680607e-01  7.15246091e-01  7.17349470e-01  7.17663848e-01
  7.24898877e-01  7.27801671e-01  7.31116897e-01  7.34504223e-01
  7.38303429e-01  7.39541415e-01  7.43697050e-01  7.46195867e-01
  7.52270636e-01  7.56068722e-01  7.59189592e-01  7.60642166e-01
  7.64223592e-01  7.70862366e-01  7.72674573e-01  7.75882396e-01
  7.78837616e-01  7.82055992e-01  7.88460866e-01  7.90199478e-01
  7.94286409e-01  7.98403665e-01  8.01132776e-01  8.05171651e-01
  8.10573812e-01  8.12404412e-01  8.14273918e-01  8.20173645e-01
  8.23013331e-01  8.25838051e-01  8.31262604e-01  8.35206145e-01
  8.37579949e-01  8.38571508e-01  8.41256536e-01  8.48673131e-01
  8.50389444e-01  8.55419621e-01  8.59631806e-01  8.62954368e-01
  8.64211251e-01  8.73250590e-01  8.76732694e-01  8.78331870e-01
  8.83748138e-01  8.87112771e-01  8.92734574e-01  8.94084575e-01
  8.97060259e-01  9.00139816e-01  9.03073802e-01  9.07209541e-01
  9.11683841e-01  9.20912757e-01  9.24050690e-01  9.24311314e-01
  9.27876195e-01  9.32552450e-01  9.36946261e-01  9.39082569e-01
  9.42031833e-01  9.44915846e-01  9.47438090e-01  9.52449770e-01
  9.54402843e-01  9.58744288e-01  9.60269155e-01  9.60854052e-01
  9.68391039e-01  9.73138950e-01  9.76254329e-01  9.77973718e-01
  9.79883534e-01  9.83342710e-01  9.88958603e-01  9.92322524e-01
  9.95100649e-01  9.98361073e-01  1.00380667e+00  1.00444612e+00
  1.01269588e+00  1.01973815e+00  1.02403099e+00  1.02722945e+00
  1.03363210e+00  1.03572782e+00  1.03902121e+00  1.04120179e+00
  1.04484036e+00  1.04715057e+00  1.05561685e+00  1.05969957e+00
  1.06238347e+00  1.06556895e+00  1.06903279e+00  1.07286804e+00
  1.07790276e+00  1.08020666e+00  1.08327522e+00  1.08545013e+00
  1.09164465e+00  1.09404706e+00  1.09763583e+00  1.10557332e+00
  1.10898078e+00  1.11336154e+00  1.12190344e+00  1.12384549e+00
  1.12717244e+00  1.12825592e+00  1.13114448e+00  1.13691809e+00
  1.14533568e+00  1.14891878e+00  1.15202102e+00  1.15543701e+00
  1.15797138e+00  1.16728056e+00  1.16926150e+00  1.17505725e+00
  1.18115794e+00  1.18338320e+00  1.18779953e+00  1.19157596e+00
  1.19598648e+00  1.19729934e+00  1.20616739e+00  1.21030182e+00
  1.21598565e+00  1.21980744e+00  1.22278609e+00  1.22578754e+00
  1.22929783e+00  1.23449953e+00  1.24200007e+00  1.24264846e+00
  1.24632224e+00  1.25023584e+00  1.25731368e+00  1.26016335e+00
  1.26938165e+00  1.27411642e+00  1.27723573e+00  1.27900262e+00
  1.28116256e+00  1.28571185e+00  1.29094958e+00  1.29578385e+00
  1.30397154e+00  1.30646385e+00  1.31506075e+00  1.31837779e+00
  1.32043407e+00  1.32359163e+00  1.32584495e+00  1.33151793e+00
  1.33633400e+00  1.34309605e+00  1.34686299e+00  1.35319014e+00
  1.35568092e+00  1.36020205e+00  1.36722347e+00  1.36977831e+00
  1.37392302e+00  1.37958877e+00  1.38234405e+00  1.39151107e+00
  1.39705924e+00  1.40147178e+00  1.40362902e+00  1.41327763e+00
  1.41575444e+00  1.42124893e+00  1.42204840e+00  1.43085079e+00
  1.43636675e+00  1.44091146e+00  1.44189140e+00  1.44458834e+00
  1.45058251e+00  1.45385545e+00  1.45694559e+00  1.45954586e+00
  1.46296627e+00  1.46610773e+00  1.47344472e+00  1.47531848e+00
  1.48589041e+00  1.49239086e+00  1.49633897e+00  1.49895168e+00
  1.50178281e+00  1.50817000e+00  1.51160296e+00  1.51565239e+00
  1.52035402e+00  1.52447645e+00  1.52994812e+00  1.53578951e+00
  1.53818382e+00  1.54324993e+00  1.54597958e+00  1.54715635e+00
  1.54942216e+00  1.55261621e+00  1.55458299e+00  1.55767822e+00
  1.55930389e+00  1.56381994e+00  1.56769813e+00  1.57140063e+00
  1.57392545e+00  1.57646803e+00  1.57742151e+00  1.57996396e+00
  1.58243316e+00  1.58596156e+00  1.58694665e+00  1.59192893e+00
  1.59469096e+00  1.59477132e+00  1.59711822e+00  1.60151520e+00
  1.60641361e+00  1.60893722e+00  1.61061063e+00  1.61598842e+00
  1.61779578e+00  1.62125697e+00  1.62437248e+00  1.62638086e+00
  1.62883602e+00  1.63506235e+00  1.63594323e+00  1.64139427e+00
  1.64636268e+00  1.64933026e+00  1.65172667e+00  1.65445378e+00
  1.65565144e+00  1.65973261e+00  1.66446962e+00  1.66644102e+00
  1.66868582e+00  1.67226874e+00  1.67423217e+00  1.67793883e+00
  1.68706501e+00  1.68902126e+00  1.69479213e+00  1.69751286e+00
  1.70085850e+00  1.70627421e+00  1.71182595e+00  1.71353331e+00
  1.71605712e+00  1.72279861e+00  1.72410288e+00  1.72868504e+00
  1.73192790e+00  1.73553109e+00  1.73901197e+00  1.74117889e+00
  1.74581737e+00  1.75437624e+00  1.75809750e+00  1.76218314e+00
  1.76585363e+00  1.76923606e+00  1.77306519e+00  1.78389722e+00
  1.78710385e+00  1.79004952e+00  1.79769578e+00  1.79910944e+00
  1.80617243e+00  1.80881090e+00  1.81505474e+00  1.82528591e+00
  1.82696755e+00  1.83074486e+00  1.83521517e+00  1.83653704e+00
  1.84019593e+00  1.84555226e+00  1.84784979e+00  1.85137624e+00
  1.85320252e+00  1.85741734e+00  1.86275843e+00  1.86741977e+00
  1.86959375e+00  1.87277825e+00  1.87379453e+00  1.87639135e+00
  1.88496915e+00  1.88789532e+00  1.89368660e+00  1.89912381e+00
  1.90397272e+00  1.90889445e+00  1.91253000e+00  1.91705673e+00
  1.92081068e+00  1.92712437e+00  1.92948372e+00  1.93128830e+00
  1.93996712e+00  1.94455816e+00  1.94717319e+00  1.95312062e+00
  1.95596785e+00  1.96508464e+00  1.96875164e+00  1.97757958e+00
  1.98436569e+00  1.98831618e+00  1.99216624e+00  1.99619883e+00
  2.00187726e+00  2.00688958e+00  2.01528615e+00  2.01892029e+00
  2.02265724e+00  2.02739751e+00  2.03381341e+00  2.03681224e+00
  2.04594520e+00  2.04786345e+00  2.05113263e+00  2.05497625e+00
  2.05761507e+00  2.06233506e+00  2.06330169e+00  2.07120465e+00
  2.07429345e+00  2.07819122e+00  2.08115356e+00  2.08274718e+00
  2.08739307e+00  2.09070904e+00  2.09427567e+00  2.09955463e+00
  2.10242055e+00  2.10688849e+00  2.10941959e+00  2.11507955e+00
  2.11827015e+00  2.12336761e+00  2.12806663e+00  2.13469605e+00
  2.13929512e+00  2.14133434e+00  2.14498535e+00  2.14722174e+00
  2.15304767e+00  2.16223898e+00  2.16392316e+00  2.16736136e+00
  2.17176600e+00  2.17591191e+00  2.18015929e+00  2.18729217e+00
  2.19423358e+00  2.20119879e+00  2.20393768e+00  2.20657125e+00
  2.21704250e+00  2.21913043e+00  2.22412639e+00  2.23298726e+00
  2.23457517e+00  2.24060838e+00  2.24769944e+00  2.25130046e+00
  2.25793063e+00  2.26056544e+00  2.26248942e+00  2.27249590e+00
  2.27654755e+00  2.27819360e+00  2.28544798e+00  2.28863049e+00
  2.29438643e+00  2.30049785e+00  2.30434933e+00  2.30779358e+00
  2.31289025e+00  2.31672498e+00  2.32374250e+00  2.32914847e+00
  2.33066812e+00  2.33361080e+00  2.33982159e+00  2.34263943e+00
  2.34972305e+00  2.35585495e+00  2.35744499e+00  2.36345261e+00
  2.36482289e+00  2.36931259e+00  2.37147008e+00  2.37534534e+00
  2.37631471e+00  2.38461570e+00  2.38728204e+00  2.39002495e+00
  2.39473923e+00  2.39769797e+00  2.40496395e+00  2.41060019e+00
  2.41316001e+00  2.41782840e+00  2.42117343e+00  2.42482441e+00
  2.42972235e+00  2.43150550e+00  2.44154420e+00  2.44700012e+00
  2.44878800e+00  2.45168256e+00  2.45706556e+00  2.46182931e+00
  2.46381985e+00  2.47007815e+00  2.47169167e+00  2.47646240e+00
  2.48655912e+00  2.49016957e+00  2.49811291e+00  2.50266822e+00
  2.50647152e+00  2.51183743e+00  2.51918493e+00  2.52729222e+00
  2.52939286e+00  2.53176142e+00  2.53654896e+00  2.54011203e+00
  2.54597542e+00  2.54833008e+00  2.54981362e+00  2.55358256e+00
  2.55837483e+00  2.56024849e+00  2.56213579e+00  2.56712682e+00
  2.57154897e+00  2.57507303e+00  2.58206734e+00  2.58501559e+00
  2.58669315e+00  2.59351630e+00  2.59526290e+00  2.59888130e+00
  2.60741874e+00  2.61559322e+00  2.61701832e+00  2.61933730e+00
  2.62345634e+00  2.62940727e+00  2.63372530e+00  2.63863585e+00
  2.64283567e+00  2.64390525e+00  2.64839163e+00  2.65170422e+00
  2.65581327e+00  2.65816278e+00  2.66405980e+00  2.66743187e+00
  2.66935171e+00  2.67603516e+00  2.67973726e+00  2.68558120e+00
  2.68628526e+00  2.69014869e+00  2.69389339e+00  2.70521886e+00
  2.70754337e+00  2.70997515e+00  2.71456579e+00  2.71927421e+00
  2.72187315e+00  2.73217855e+00  2.73491777e+00  2.74043375e+00
  2.74581934e+00  2.74680414e+00  2.74968170e+00  2.75236184e+00
  2.75506217e+00  2.75888468e+00  2.76565430e+00  2.76610385e+00
  2.77239881e+00  2.77433709e+00  2.78096662e+00  2.78384242e+00
  2.78543892e+00  2.79215467e+00  2.79586553e+00  2.79778353e+00
  2.80821898e+00  2.80920716e+00  2.81376641e+00  2.81526727e+00
  2.81969207e+00  2.82412100e+00  2.83324642e+00  2.83497741e+00
  2.83778821e+00  2.84467885e+00  2.84662116e+00  2.85241774e+00
  2.85394845e+00  2.85754218e+00  2.86449153e+00  2.86923462e+00
  2.87242245e+00  2.87584695e+00  2.87928374e+00  2.88286012e+00
  2.88535418e+00  2.89178340e+00  2.89440396e+00  2.90033055e+00
  2.90420415e+00  2.91124372e+00  2.91367341e+00  2.91662622e+00
  2.91762778e+00  2.92456681e+00  2.93280144e+00  2.93387485e+00
  2.94198407e+00  2.94366693e+00  2.94628484e+00  2.94875372e+00
  2.95619968e+00  2.96105994e+00  2.96251697e+00  2.96943360e+00
  2.97200437e+00  2.97755186e+00  2.97871278e+00  2.98178255e+00
  2.98448550e+00  2.98758284e+00  2.99299935e+00  2.99741398e+00
  2.99955654e+00  3.00414567e+00  3.00783686e+00  3.01167358e+00
  3.01444569e+00  3.01680428e+00  3.01766862e+00  3.02062350e+00
  3.02396687e+00  3.02860749e+00  3.03045685e+00  3.03342278e+00
  3.03695207e+00  3.03922017e+00  3.04451429e+00  3.04937639e+00
  3.05088316e+00  3.05499931e+00  3.05939918e+00  3.06462946e+00
  3.06810564e+00  3.07006231e+00  3.07242266e+00  3.07517515e+00
  3.08254790e+00  3.08382501e+00  3.08536795e+00  3.08668567e+00
  3.09152099e+00  3.09567386e+00  3.10169806e+00  3.10436075e+00
  3.10565294e+00  3.11045229e+00  3.11190645e+00  3.12140033e+00
  3.12274677e+00  3.12498973e+00  3.13164037e+00  3.13383207e+00
  3.13765230e+00  3.14115677e+00  3.14204569e+00  3.14572420e+00
  3.14895129e+00  3.15194422e+00  3.15479601e+00  3.15893195e+00
  3.15980657e+00  3.16435380e+00  3.16602229e+00  3.16858001e+00
  3.17008343e+00  3.17139366e+00  3.17781941e+00  3.17873889e+00
  3.18347222e+00  3.18813847e+00  3.19179920e+00  3.19343537e+00
  3.19995173e+00  3.20154262e+00  3.20250422e+00  3.20803606e+00
  3.21146059e+00  3.21327758e+00  3.21801513e+00  3.22048001e+00
  3.22224423e+00  3.22558499e+00  3.22848093e+00  3.23069724e+00
  3.23357737e+00  3.23629497e+00  3.24342127e+00  3.24497606e+00
  3.24964523e+00  3.25414082e+00  3.25618275e+00  3.25892907e+00
  3.26209263e+00  3.26501571e+00  3.26858562e+00  3.26983430e+00
  3.27558858e+00  3.27972175e+00  3.28403621e+00  3.28843058e+00
  3.29039679e+00  3.29505164e+00  3.29567806e+00  3.29749714e+00
  3.30014084e+00  3.30243500e+00  3.30632421e+00  3.30989507e+00
  3.31130928e+00  3.31319586e+00  3.31443331e+00  3.31758869e+00
  3.32008891e+00  3.32087465e+00  3.32240804e+00  3.32457397e+00
  3.32784073e+00  3.32871589e+00  3.33446151e+00  3.33453355e+00
  3.33686200e+00  3.33967899e+00  3.34600123e+00  3.35104951e+00
  3.35582375e+00  3.35666453e+00  3.35740594e+00  3.36014708e+00
  3.36503910e+00  3.36647934e+00  3.37018763e+00  3.37326371e+00
  3.37873251e+00  3.38076623e+00  3.38508283e+00  3.38787651e+00
  3.38940709e+00  3.39358338e+00  3.39899881e+00  3.40346961e+00
  3.40778016e+00  3.41005206e+00  3.41374668e+00  3.41810929e+00
  3.42091644e+00  3.42137355e+00  3.42746455e+00  3.42940966e+00
  3.43130350e+00  3.43831536e+00  3.44172085e+00  3.44595313e+00
  3.45254619e+00  3.45566506e+00  3.46029050e+00  3.46523899e+00
  3.46890756e+00  3.47078477e+00  3.47932650e+00  3.48455394e+00
  3.48637507e+00  3.49037392e+00  3.49391692e+00  3.50209811e+00
  3.50627415e+00  3.50913773e+00  3.51343774e+00  3.51597379e+00
  3.52034013e+00  3.53039360e+00  3.53517850e+00  3.53859827e+00
  3.54399223e+00  3.55039210e+00  3.55593458e+00  3.55753882e+00
  3.56290759e+00  3.56392713e+00  3.56796924e+00  3.57044856e+00
  3.57373244e+00  3.57609488e+00  3.57900548e+00  3.58507552e+00
  3.59012685e+00  3.59589992e+00  3.59977312e+00  3.60794691e+00
  3.60898821e+00  3.61039045e+00  3.61848631e+00  3.62648740e+00
  3.62894571e+00  3.63387767e+00  3.64651259e+00  3.64839776e+00
  3.65319530e+00  3.65392563e+00  3.66166970e+00  3.66260277e+00
  3.67120113e+00  3.67495400e+00  3.68044617e+00  3.68404895e+00
  3.68914694e+00  3.69278783e+00  3.69442164e+00  3.70074837e+00
  3.70737405e+00  3.71113362e+00  3.71449989e+00  3.71701696e+00
  3.72250479e+00  3.73037166e+00  3.73395745e+00  3.73821178e+00
  3.74399773e+00  3.74676928e+00  3.75453380e+00  3.75615545e+00
  3.76290488e+00  3.76409060e+00  3.76809628e+00  3.77755001e+00
  3.77991314e+00  3.78633173e+00  3.79030153e+00  3.79774477e+00
  3.80606142e+00  3.80933663e+00  3.81503850e+00  3.82345371e+00
  3.82989776e+00  3.83159009e+00  3.83445344e+00  3.84783117e+00
  3.85253013e+00  3.85381385e+00  3.86176411e+00  3.86504015e+00
  3.87214157e+00  3.88692682e+00  3.88972912e+00  3.90531922e+00
  3.90873009e+00  3.91155525e+00  3.92000562e+00  3.93501383e+00
  3.93631450e+00  3.94205150e+00  3.94349286e+00  3.94646641e+00
  3.94971828e+00  3.95430651e+00  3.95867788e+00  3.96299147e+00
  3.97571817e+00  3.98071399e+00  3.98587401e+00  3.99100125e+00
  3.99179925e+00  3.99710637e+00  4.00312720e+00  4.01568281e+00
  4.02224551e+00  4.02621786e+00  4.03155111e+00  4.03928673e+00
  4.04515974e+00  4.04674624e+00  4.05204710e+00  4.07062259e+00
  4.07343562e+00  4.08632459e+00  4.08824204e+00  4.09465664e+00
  4.10116596e+00  4.10582404e+00  4.11971536e+00  4.12487973e+00
  4.12833102e+00  4.13017166e+00  4.13543961e+00  4.14399943e+00
  4.14782555e+00  4.15202086e+00  4.15539859e+00  4.16245824e+00
  4.17240194e+00  4.17728091e+00  4.17927834e+00  4.18347322e+00
  4.19432277e+00  4.19777855e+00  4.20232477e+00  4.21667356e+00
  4.22009158e+00  4.22118619e+00  4.22898919e+00  4.23133614e+00
  4.23538234e+00  4.24319049e+00  4.24713120e+00  4.25592577e+00
  4.26051949e+00  4.26629528e+00  4.26703156e+00  4.26816474e+00
  4.27446959e+00  4.28779707e+00  4.29591039e+00  4.30976525e+00
  4.31591080e+00  4.32711045e+00  4.33088601e+00  4.33224052e+00
  4.34072493e+00  4.34615833e+00  4.35595879e+00  4.36536917e+00
  4.37129435e+00  4.38246650e+00  4.38619357e+00  4.39669411e+00
  4.40087578e+00  4.40217705e+00  4.40587433e+00  4.41384904e+00
  4.42114581e+00  4.42851604e+00  4.43523222e+00  4.44210600e+00
  4.44826040e+00  4.45449350e+00  4.45920196e+00  4.46727427e+00
  4.48472664e+00  4.48867382e+00  4.50162012e+00  4.51835215e+00
  4.52220397e+00  4.53415907e+00  4.55072244e+00  4.55323942e+00
  4.56586301e+00  4.56986831e+00  4.57216799e+00  4.57772531e+00
  4.58114118e+00  4.59161090e+00  4.60356621e+00  4.61338815e+00
  4.61952317e+00  4.62043448e+00  4.62858397e+00  4.63462921e+00
  4.64360510e+00  4.64744314e+00  4.65704577e+00  4.65746007e+00
  4.66714274e+00  4.67992236e+00  4.69204623e+00  4.69341982e+00
  4.71715361e+00  4.72407069e+00  4.73479401e+00  4.74227417e+00
  4.75129299e+00  4.75777951e+00  4.76685843e+00  4.77171378e+00
  4.77515169e+00  4.80144555e+00  4.80932152e+00  4.81978580e+00
  4.82212596e+00  4.83403748e+00  4.84558980e+00  4.84942995e+00
  4.85300645e+00  4.86638813e+00  4.87281862e+00  4.87978462e+00
  4.88644830e+00  4.89241568e+00  4.89886527e+00  4.90217357e+00
  4.91132842e+00  4.91971607e+00  4.93463173e+00  4.94491525e+00
  4.94729712e+00  4.96004777e+00  4.96919492e+00  4.97450815e+00
  4.97644926e+00  4.98886706e+00  4.99905013e+00  5.00793045e+00
  5.01647052e+00  5.03364038e+00  5.06496409e+00  5.08132777e+00
  5.08625887e+00  5.09024876e+00  5.09808676e+00  5.09933563e+00
  5.12415629e+00  5.12680744e+00  5.13510569e+00  5.14406387e+00
  5.15531193e+00  5.15934042e+00  5.16007181e+00  5.16476996e+00
  5.16715507e+00  5.17287263e+00  5.19036438e+00  5.19888972e+00
  5.20435071e+00  5.21990782e+00  5.23721214e+00  5.24493417e+00
  5.26422370e+00  5.28373864e+00  5.28963058e+00  5.30770153e+00
  5.32377324e+00  5.33506221e+00  5.35988282e+00  5.36421100e+00
  5.37281604e+00  5.38238258e+00  5.38418250e+00  5.39325692e+00
  5.40200066e+00  5.41037337e+00  5.41292814e+00  5.42010499e+00
  5.43747607e+00  5.45766206e+00  5.48365664e+00  5.49683720e+00
  5.50460693e+00  5.50977586e+00  5.51375809e+00  5.51721271e+00
  5.54084645e+00  5.56201928e+00  5.56947500e+00  5.57856702e+00
  5.58471305e+00  5.59044442e+00  5.60654512e+00  5.61068306e+00
  5.64861618e+00  5.66944715e+00  5.67679844e+00  5.70001790e+00
  5.72488131e+00  5.73167987e+00  5.76379300e+00  5.76828206e+00
  5.78571806e+00  5.79158216e+00  5.83748385e+00  5.85563211e+00
  5.85906753e+00  5.88576002e+00  5.89018605e+00  5.90580309e+00
  5.91703150e+00  5.94692003e+00  5.96910252e+00  5.99304744e+00
  6.01524978e+00  6.05042240e+00  6.06080226e+00  6.09386837e+00
  6.14087127e+00  6.15958083e+00  6.16113809e+00  6.19768846e+00
  6.22868698e+00  6.27709372e+00  6.32753017e+00  6.34827051e+00
  6.36830616e+00  6.38905086e+00  6.39440763e+00  6.41224877e+00
  6.50997373e+00  6.51104448e+00  6.56002130e+00  6.56204650e+00
  6.67185861e+00  6.68116277e+00  6.74387180e+00  6.74710287e+00
  6.76948965e+00  6.82121706e+00  6.84229669e+00  6.90655851e+00
  6.93919538e+00  6.97077443e+00  7.09906249e+00  7.12802750e+00
  7.15299176e+00  7.17033915e+00  7.27271702e+00  7.36518275e+00
  2.22980549e+01  2.23515935e+01  2.24463332e+01  2.24550574e+01
  2.24594375e+01  2.24738436e+01  2.25514430e+01  2.25743741e+01
  2.26542675e+01  2.26732718e+01  2.27679177e+01  2.27729906e+01
  2.28263158e+01  2.28419117e+01  2.28593867e+01  2.28732073e+01
  2.29041817e+01  2.29457428e+01  2.29695332e+01  2.30398540e+01
  2.31574605e+01  2.31847693e+01  2.32000474e+01  2.32464577e+01
  2.33043512e+01  2.33139450e+01  2.33246574e+01  2.33965536e+01
  2.34484368e+01  2.34825286e+01  2.36262371e+01  2.36865750e+01
  2.36989734e+01  2.37801093e+01  3.27424179e+01  3.27764222e+01
  3.27962526e+01  3.28292467e+01  4.39276326e+01  4.39842214e+01
  4.40019582e+01  4.41073212e+01]
nelec by numeric integration = 298.000361912047
    CPU time for vxc    306.19 sec, wall time     20.62 sec
    CPU time for df vj and vk   1729.31 sec, wall time    128.83 sec
E1 = -11984.455347281017  Ecoul = 5639.050584016177  Exc = -257.1056762039629
Extra cycle  E= -1834.56336215109  delta_E= -3.64e-12  |g|= 2.09e-06  |ddm|= 3.74e-06
    CPU time for scf_cycle  13563.79 sec, wall time   1097.55 sec
    CPU time for SCF  13563.80 sec, wall time   1097.55 sec
converged SCF energy = -1834.56336215109
SCF Done after 1097.58 seconds
after SCF memory used: 33.50 GB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
hdiag shape (202193,)
n_occ =  149
n_vir =  1357
max_vir =  403
A_size =  202193
A_reduced_size = 60047
a_x = 0.25
beta = 0.6575
alpha = 1.54
Q-Gamma tensors building time = 2.57
after Q matrix memory used: 33.85 GB
TDDFT
|-------- In-house Developed TDDFT Starts ---------|
Residual conv = 1e-05

Number of excited states = 20
Initial guess:   sTDDFT
Preconditioner:  sTDDFT
A matrix size =  202193
setting initial guess
sTDDFT Convergence tol = 1.00e-03
sTDDFT diagonalization Converged
after  4 iterations; 79.9566 seconds
final subspace 112
max_norm =  7.25e-04
MVcost     31.6993s 39.65%
GScost     43.2191s 54.05%
subgencost 2.9229s 3.66%
subcost    0.2388s 0.30%
sTDDFT excitation energy:
[1.95002459 2.00684144 2.78306906 2.80348113 2.91987143 2.99663577
 3.16737115 3.19618545 3.31028207 3.37156458 3.43594218 3.48335961
 3.49072667 3.57683285 3.61976751 3.71341547 4.06567664 4.07564154
 4.12116707 4.16324207 4.26302591 4.35786865 4.37705957 4.50350903
 4.51514908 4.5492617  4.56852148 4.59056414]
new_m = 28
initial guess done

iteration 0
beginning of step 0 memory used: 37.80 GB
    CPU time for df vj and vk  48006.26 sec, wall time   3393.49 sec
subspace size: 28
Maximum residual norm:  8.82e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 8 steps; 80.6606 s
final subspace 104
max_norm =  8.20e-03
initial_cost 2.1236s  2.63%
MVcost     27.3409s  33.90%
GScost     41.0611s  50.91%
subgencost 7.6304s  9.46%
subcost    0.1305s  0.16%
m & new_m 28 48

iteration 1
beginning of step 1 memory used: 38.12 GB
    CPU time for df vj and vk  33372.05 sec, wall time   2396.40 sec
subspace size: 48
Maximum residual norm:  1.95e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 12 steps; 109.7020 s
final subspace 117
max_norm =  7.57e-03
initial_cost 2.1040s  1.92%
MVcost     33.0710s  30.15%
GScost     56.5328s  51.53%
subgencost 14.0859s  12.84%
subcost    0.3064s  0.28%
m & new_m 48 68

iteration 2
beginning of step 2 memory used: 38.20 GB
    CPU time for df vj and vk  32709.19 sec, wall time   2369.45 sec
subspace size: 68
Maximum residual norm:  5.54e-03
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 10 steps; 86.9511 s
final subspace 103
max_norm =  7.30e-03
initial_cost 2.2953s  2.64%
MVcost     30.5946s  35.19%
GScost     40.9814s  47.13%
subgencost 10.2938s  11.84%
subcost    0.3687s  0.42%
m & new_m 68 88

iteration 3
beginning of step 3 memory used: 38.16 GB
    CPU time for df vj and vk  32442.89 sec, wall time   2409.15 sec
subspace size: 88
Maximum residual norm:  1.54e-03
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 9 steps; 98.7964 s
final subspace 109
max_norm =  8.41e-03
initial_cost 2.0820s  2.11%
MVcost     31.5316s  31.92%
GScost     50.6322s  51.25%
subgencost 11.2026s  11.34%
subcost    0.2178s  0.22%
m & new_m 88 108

iteration 4
beginning of step 4 memory used: 38.25 GB
    CPU time for df vj and vk  32720.38 sec, wall time   2382.42 sec
subspace size: 108
Maximum residual norm:  4.54e-04
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 8 steps; 83.3970 s
final subspace 106
max_norm =  9.07e-03
initial_cost 2.1069s  2.53%
MVcost     30.5366s  36.62%
GScost     40.7955s  48.92%
subgencost 7.7551s  9.30%
subcost    0.1874s  0.22%
m & new_m 108 128

iteration 5
beginning of step 5 memory used: 38.31 GB
    CPU time for df vj and vk  32738.80 sec, wall time   2384.27 sec
subspace size: 128
Maximum residual norm:  1.18e-04
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 8 steps; 75.4115 s
final subspace 103
max_norm =  6.25e-03
initial_cost 2.0981s  2.78%
MVcost     28.2765s  37.50%
GScost     36.2090s  48.02%
subgencost 7.0932s  9.41%
subcost    0.1389s  0.18%
m & new_m 128 148

iteration 6
beginning of step 6 memory used: 38.28 GB
    CPU time for df vj and vk  32726.88 sec, wall time   2380.72 sec
subspace size: 148
Maximum residual norm:  2.65e-05
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 15, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 9 steps; 58.9142 s
final subspace 87
max_norm =  6.32e-03
initial_cost 1.2710s  2.16%
MVcost     24.5396s  41.65%
GScost     24.4821s  41.56%
subgencost 6.8980s  11.71%
subcost    0.2264s  0.38%
m & new_m 148 163

iteration 7
beginning of step 7 memory used: 38.28 GB
    CPU time for df vj and vk  24358.18 sec, wall time   1787.80 sec
subspace size: 163
Maximum residual norm:  7.08e-06
TDDFT precedure Done

============= TDDFT Calculation Done ==============
after 8 iterations 24268.81 s
Final subspace  163
preconditioning cost 596.6778 0.02 %
max_norm =  7.08e-06
Total TDDFT memory used: 38.30 GB
Excited State energies (eV) =
 [2.1798234  2.27062252 3.01410007 3.02621007 3.16972745 3.25834798
 3.41081639 3.44756427 3.56198299 3.64888249 3.65394099 3.7227748
 3.73450425 3.77321546 3.88549156 3.95758338 4.22616352 4.33144543
 4.35863734 4.40053982]
xyzfile = 76_Protoporphyrin.xyz
checkfile = True
method = RKS
functional = pbe0
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 20
pytd = False
TDA = False
TDDFT = True
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
ip_options = [0]
conv_tolerance = 1e-05
initial_TOL = 0.001
precond_TOL = 0.01
extrainitial = 8
max = 30
eigensolver_tol = 1e-05
memory = 160000
verbose = 5
beta = []
alpha = []
|-------- In-house Developed TDDFT Ends ----------|
