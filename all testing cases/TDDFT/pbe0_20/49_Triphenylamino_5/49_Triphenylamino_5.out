curpath /scratch/pbsjobs/job.15978483.hpc
lib.num_threads() =  16
at beginning memory used: 0.05 GB
mol.max_memory 50000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul9.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

'''wb97x  methanol, 1e-5
  sTDDFT no truncate [6.46636611 8.18031534 8.38140651 9.45011415 9.5061059 ]
            40 eV    [6.46746642 8.18218267 8.38314651 9.45214869 9.5126739 ]
    sTDA no truncate [6.46739711 8.18182208 8.38358473 9.45195554 9.52133129]
            40 eV    [6.46827111 8.18334703 8.38483801 9.45361525 9.52562255]
'''
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

def gen_args():
    parser = argparse.ArgumentParser(description='Davidson')
    parser.add_argument('-x', '--xyzfile',          type=str,   default='NA',  help='xyz filename (molecule.xyz)')
    parser.add_argument('-chk', '--checkfile',      type=bool,  default=False, help='checkpoint filename (.chk)')
    parser.add_argument('-m', '--method',           type=str,   default='RKS', help='RHF RKS UHF UKS')
    parser.add_argument('-f', '--functional',       type=str,   default='NA',  help='xc functional')
    parser.add_argument('-b', '--basis_set',        type=str,   default='NA',  help='basis set')
    parser.add_argument('-df', '--density_fit',     type=bool,  default=True,  help='density fitting turn on')
    parser.add_argument('-g', '--grid_level',       type=int,   default='3',   help='0-9, 9 is best')

    parser.add_argument('-n','--nstates',           type=int,   default = 4,      help='number of excited states')
    parser.add_argument('-pytd','--pytd',           type=bool,  default = False , help='whether to compare with PySCF TDDFT')

    parser.add_argument('-TDA','--TDA',             type=bool,  default = False, help='perform TDA')
    parser.add_argument('-TDDFT','--TDDFT',         type=bool,  default = False, help='perform TDDFT')
    parser.add_argument('-dynpol','--dynpol',       type=bool,  default = False, help='perform dynamic polarizability')
    parser.add_argument('-omega','--dynpol_omega',  type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
    parser.add_argument('-stapol','--stapol',       type=bool,  default = False, help='perform static polarizability')
    parser.add_argument('-sTDA','--sTDA',           type=bool,  default = False, help='perform sTDA calculation')
    parser.add_argument('-sTDDFT','--sTDDFT',       type=bool,  default = False, help='perform sTDDFT calculation')
    parser.add_argument('-TT','--Truncate_test',    type=bool,  default = False, help='test the wall time for different virtual truncation')

    parser.add_argument('-TV','--truncate_virtual', type=float, default = 40,    help='the threshold to truncate virtual orbitals, in eV')

    parser.add_argument('-o','--ip_options',        type=int,   default = [0], nargs='+', help='0-7')
    parser.add_argument('-t','--conv_tolerance',    type=float, default= 1e-5, help='residual norm Convergence threhsold')

    parser.add_argument('-it','--initial_TOL',      type=float, default= 1e-3, help='conv for the inital guess')
    parser.add_argument('-pt','--precond_TOL',      type=float, default= 1e-2, help='conv for TDA preconditioner')

    parser.add_argument('-ei','--extrainitial',     type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
    parser.add_argument('-max','--max',             type=int,   default= 30,   help='max iterations')

    parser.add_argument('-et','--eigensolver_tol',  type=float, default= 1e-5, help='conv for new guess generator in new_ES')
    parser.add_argument('-M','--memory',            type=int,   default= 4000, help='max_memory')
    parser.add_argument('-v','--verbose',           type=int,   default= 5,    help='mol.verbose = 3,4,5')

    parser.add_argument('-be','--beta',             type=float, default= [],    nargs='+', help='beta = 0.83')
    parser.add_argument('-al','--alpha',            type=float, default= [],    nargs='+', help='alpha = 0.83')

    args = parser.parse_args()
    if args.dynpol == True and args.dynpol_omega == []:
        raise ValueError('External Perturbation ω cannot be None')
    return args
args = gen_args()

def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024**3
    print('{} memory used: {:<.2f} GB'.format(hint, memory))

show_memory_info('at beginning')

'''read xyz file and delete its first two lines'''
basename = args.xyzfile.split('.',1)[0]

def SCF_kernel():
    kernel_0 = time.time()
    f = open(args.xyzfile)
    atom_coordinates = f.readlines()
    del atom_coordinates[:2]
    '''build geometry in PySCF'''
    mol = gto.Mole()
    mol.atom = atom_coordinates
    mol.basis = args.basis_set
    mol.verbose = args.verbose
    mol.max_memory = args.memory
    print('mol.max_memory', mol.max_memory)
    mol.build(parse_arg = False)
    '''DFT or HF'''
    if args.method == 'RKS':
        mf = dft.RKS(mol)
    elif args.method == 'UKS':
        mf = dft.UKS(mol)
    elif args.method == 'RHF':
        mf = scf.RHF(mol)
    elif args.method == 'UHF':
        mf = scf.UHF(mol)
    if 'KS' in args.method:
        print('RKS')
        mf.xc = args.functional
        mf.grids.level = args.grid_level
    else:
        print('HF')
    if args.density_fit:
        mf = mf.density_fit()
        print('Density fitting turned on')
    if args.checkfile == True:
        '''use the *.chk file as scf input'''
        mf.chkfile = basename + '_' + args.functional + '.chk'
        mf.init_guess = 'chkfile'
    mf.conv_tol = 1e-10
    print ('Molecule built')
    print ('Calculating SCF Energy...')
    mf.kernel()

    kernel_1 = time.time()
    kernel_t = kernel_1 - kernel_0

    return mol, mf, kernel_t

mol, mf, kernel_t = SCF_kernel()

print ('SCF Done after %.2f'%kernel_t, 'seconds')

show_memory_info('after SCF')

'''Collect everything needed from PySCF'''

Hartree_to_eV = 27.211386245988

def gen_global_var():
    '''TDA_vind & TDDFT_vind are ab-initio matrix vector multiplication function
    '''
    td = tddft.TDA(mf)
    TD = tddft.TDDFT(mf)
    TDA_vind, hdiag = td.gen_vind(mf)
    TDDFT_vind, Hdiag = TD.gen_vind(mf)

    Natm = mol.natm
    '''mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
       N_bf is the total amount of MOs
       coefficient_matrix_C is the unorthonormalized coefficient matrix
       if no truncation, then max_vir = n_vir and n_occ + max_vir = N_bf
    '''
    mo_occ = mf.mo_occ
    coefficient_matrix_C = mf.mo_coeff
    N_bf = len(mo_occ)
    n_occ = len(np.where(mo_occ > 0)[0])
    n_vir = len(np.where(mo_occ == 0)[0])
    delta_hdiag = hdiag.reshape(n_occ, n_vir)
    A_size = n_occ * n_vir

    tol_eV = args.truncate_virtual/Hartree_to_eV
    homo_vir = delta_hdiag[-1,:]
    max_vir = len(np.where(homo_vir <= tol_eV)[0])

    max_vir_hdiag = delta_hdiag[:,:max_vir]

    A_reduced_size = n_occ * max_vir

    '''R_array is inter-particle distance array
       unit == ’Bohr’, 5.29177210903(80)×10^(−11) m
    '''
    R_array = pyscf.gto.mole.inter_distance(mol, coords=None)

    print('hdiag shape', hdiag.shape)
    print('n_occ = ', n_occ)
    print('n_vir = ', n_vir)
    print('max_vir = ', max_vir)
    print('A_size = ', A_size)
    print('A_reduced_size =', A_reduced_size)

    return TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
                    max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
                        n_vir, max_vir, A_size, A_reduced_size, R_array

TDA_vind, TDDFT_vind, hdiag, max_vir_hdiag, delta_hdiag,\
        max_vir_hdiag, Natm, coefficient_matrix_C, N_bf, n_occ,\
             n_vir, max_vir, A_size, A_reduced_size, R_array = gen_global_var()

def TDA_matrix_vector(V):
    '''return AX'''
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X
       this is not the optimum way, but the only way in PySCF
    '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1

def gen_HARDNESS():
    '''a dictionary of chemical hardness, by mappig two lists:
       list of elements 1-94
       list of hardness for elements 1-94, floats,in Hartree
    '''
    elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', \
    'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', \
    'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', \
    'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', \
    'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', \
    'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\
    'Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', \
    'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
    hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,\
    0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,\
    0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,\
    0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,\
    0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,\
    0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,\
    0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,\
    0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,\
    0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,\
    0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,\
    0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,\
    0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,\
    0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,\
    0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,\
    0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,\
    0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
    HARDNESS = dict(zip(elements,hardness))
    return HARDNESS

def matrix_power(S,a):
    '''X == S^a'''
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    return X

def orthonormalize(C):
    ''' produce orthonormalized coefficient matrix C, N_bf * N_bf
        S = mf.get_ovlp()  is basis overlap matrix
        S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
        np.dot(C.T,C) is a an identity matrix
    '''
    S = mf.get_ovlp()
    X = matrix_power(S, 0.5)
    C = np.dot(X,C)
    return C

def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    '''NA is for Hartree-Fork'''
    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    Func_ax = dict(zip(hybride_F, hybride_paramt))

    beta1 = 0.2
    beta2 = 1.83
    alpha1 = 1.42
    alpha2 = 0.48
    '''RSH functionals have specific a_x, beta, alpha values;
       hybride fucntionals have fixed alpha12 and beta12 values,
       with different a_x values, by which create beta, alpha
    '''
    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]
    elif args.functional in hybride_F:
        a_x = Func_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)

    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

def gen_gammaJK():
    '''creat GammaK and GammaK matrix
       mol.atom_pure_symbol(atom_id) returns the element symbol
    '''
    HARDNESS = gen_HARDNESS()
    a = [HARDNESS[mol.atom_pure_symbol(atom_id)] for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2
    GammaJ = (R_array**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R_array**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

def generateQ():
    '''build q_iajb tensor'''
    C = orthonormalize(coefficient_matrix_C)
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

def gen_QJK(max_vir=max_vir):

    '''pre-calculate and store the Q-Gamma rank 3 tensor
       qia * gamma * qjb -> qia GK_q_jb
    '''
    Qstart = time.time()
    q_tensors = generateQ()
    GammaJ, GammaK = gen_gammaJK()

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)
    Qend = time.time()
    Q_time = Qend - Qstart
    print('Q-Gamma tensors building time = %.2f'%Q_time)
    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()

show_memory_info('after Q matrix')

def gen_iajb_ijab_ibja_delta_fly(max_vir = max_vir, \
                                    q_ij = q_ij, \
                                    q_ab = q_ab, \
                                    q_ia = q_ia , \
                                 GK_q_jb = GK_q_jb, \
                                 GJ_q_ab = GJ_q_ab):
    '''define sTDA on-the-fly two electron intergeral (pq|rs)
       A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v
       iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
       ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)
    '''
    def iajb_fly(V):
        '''(ia|jb) '''
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        return iajb_V

    def ijab_fly(V):
        '''(ij|ab) '''
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        return ijab_V

    def ibja_fly(V):
        '''the Forck exchange energy in B matrix
           (ib|ja)
        '''
        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        return ibja_V

    def delta_fly(V):
        '''delta_hdiag.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_hdiag, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''max_vir_hdiag.shape = (n_occ, max_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir = max_vir, \
                              iajb_fly = iajb_fly, \
                              ijab_fly = ijab_fly, \
                              ibja_fly = ibja_fly, \
                     delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        '''return AX'''
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''return AX+BY and AY+BX
           sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
           sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        '''return (A+B)X = delta_fly(V) + 4*iajb_fly(V)
           - ijab_fly(V) - a_x*ibja_fly(V)
        '''
        X = X.reshape(n_occ, max_vir, -1)
        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)
        U = U.reshape(n_occ*max_vir, -1)

        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

def Gram_Schmidt_bvec(A, bvec):
    '''orthonormalize vector b against all vectors in A
       b = b - A*(A.T*b)
       suppose A is orthonormalized
    '''
    if A.shape[1] != 0:
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    '''orthonormalize vector |x,y> against all vectors in |V,W>'''
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)
    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    '''V is a vectors holder
       count is the amount of vectors that already sit in the holder
       nvec is amount of new vectors intended to fill in the V
       count will be final amount of vectors in V
    '''
    nvec = np.shape(vecs)[1]
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize
        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count
    return V, new_count

def S_symmetry_orthogonal(x,y):
    '''symmetrically orthogonalize the vectors |x,y> and |y,x>
       as close to original vectors as possible
    '''
    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A

def check_orthonormal(A):
    '''define the orthonormality of a matrix A as the norm of (A.T*A - I)'''
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c

def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    '''put X_new into V, and Y_new into W
       m: the amount of vectors that already on V or W
       nvec: amount of new vectors intended to put in the V and W
    '''
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]

    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):
        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart

        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m

def solve_AX_Xla_B(A, omega, Q):
    '''AX - XΩ  = Q
       A, Ω, Q are known, solve X
    '''
    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)
    X *= Qnorm

    return X

def TDA_A_diag_initial_guess(m, hdiag = hdiag):
    '''m is the amount of initial guesses'''
    hdiag = hdiag.reshape(-1,)
    V_size = hdiag.shape[0]
    Dsort = hdiag.argsort()
    energies = hdiag[Dsort][:m]*Hartree_to_eV
    V = np.zeros((V_size, m))
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V, energies

def TDA_A_diag_preconditioner(residual, sub_eigenvalue, current_dic = None,\
                            hdiag = hdiag, tol = None, full_guess=None, \
                        return_index=None, W_H=None, V_H=None, sub_A_H=None):
    '''DX = XΩ'''
    k = np.shape(residual)[1]
    t = 1e-14
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    '''force all small values not in [-t,t]'''
    D = np.where( abs(D) < t, np.sign(D)*t, D)
    new_guess = residual/D

    if current_dic != None:
        return new_guess, current_dic
    else:
        return new_guess

def sTDA_eigen_solver(k, tol=args.initial_TOL):
    '''A'X = XΩ'''
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    max = 30

    '''m is size of subspace'''
    m = 0
    new_m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)

    '''V is subsapce basis
       W is transformed guess vectors'''
    V[:, :new_m],initial_energies = TDA_A_diag_initial_guess(\
                                            new_m, hdiag = max_vir_hdiag)
    for i in range(max):
        '''create subspace'''
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)

        '''Diagonalize the subspace Hamiltonian, and sorted.
        sub_eigenvalue[:k] are smallest k eigenvalues'''
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])

        '''residual = AX - XΩ = AVx - XΩ = Wx - XΩ'''
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess*sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        '''precondition the unconverged residuals'''
        new_guess = TDA_A_diag_preconditioner(\
                        residual = residual[:,index],\
                  sub_eigenvalue = sub_eigenvalue[:k][index],\
                           hdiag = max_vir_hdiag)

        '''orthonormalize the new guess against basis and put into V holder'''
        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalized in', i, 'steps; ', '%.4f'%sTDA_D, 'seconds' )
    print('threshold =', tol)
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*Hartree_to_eV)

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    omega = sub_eigenvalue[:k]*Hartree_to_eV
    return U, omega

def sTDA_preconditioner(residual, sub_eigenvalue, tol=args.precond_TOL,\
                        current_dic=None, full_guess=None, return_index=None,\
                        W_H=None, V_H=None, sub_A_H=None):
    '''sTDA preconditioner
       (A - Ω*I)^-1 P = X
       AX - XΩ = P
       P is residuals (in big Davidson's loop) to be preconditioned
    '''
    p_start = time.time()

    '''number of vectors to be preconditioned'''
    N_vectors = residual.shape[1]
    Residuals = residual.reshape(n_occ,n_vir,-1)
    omega = sub_eigenvalue
    P = Residuals[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P = P/pnorm

    start = time.time()
    tol = args.precond_TOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    '''now V and W are empty holders, 0 vectors
       W = sTDA_mv(V)
       count is the amount of vectors that already sit in the holder
       in each iteration, V and W will be filled/updated with new guess basis
       which is the preconditioned residuals
    '''

    '''initial guess: DX - XΩ = P
       Dp is the preconditioner
       <t: returns np.sign(D)*t; else: D
    '''
    t = 1e-10
    Dp = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - omega
    Dp = np.where(abs(Dp)<t, \
                                        np.sign(Dp)*t, Dp)
    Dp = Dp.reshape(n_occ, n_vir, -1)
    D = Dp[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    '''generate initial guess'''
    Xig = P*inv_D
    count = 0
    V, new_count = Gram_Schmidt_fill_holder(V, count, Xig)

    origin_dic = current_dic.copy()
    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0

    for i in range(max):
        substart = time.time()
        '''project sTDA_A matrix and vector P into subspace'''
        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        sub_P= np.dot(V[:,:new_count].T, P)
        sub_A = np.dot(V[:,:new_count].T, W[:,:new_count])
        subend = time.time()
        subgencost += subend - substart

        sub_A = symmetrize(sub_A)
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, omega, sub_P)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:new_count], sub_guess)
        residual = np.dot(W[:,:new_count], sub_guess) - full_guess*omega - P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append(\
                                    {'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        '''index of unconverged states'''
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''precondition the unconverged residuals'''
        new_guess = residual[:,index]*inv_D[:,index]


        GSstart = time.time()
        count = new_count
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart

    p_end = time.time()
    p_cost = p_end - p_start

    if i == (max -1):
        print('_____sTDA Preconditioner Failed Due to Iteration Limit _______')
        print('failed after ', i, 'steps,', '%.4f'%p_cost,'s')
        print('orthonormality of V', check_orthonormal(V[:,:count]))
        print('current residual norms', r_norms)
    else:
        print('sTDA precond Done after', i, 'steps;', '%.4f'%p_cost,'seconds')

    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['subgencost', 'mvcost', 'GScost', 'subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/p_cost))
    full_guess *= pnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = P2'''
        P2 = Residuals[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = Dp[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)

    '''if we want to know more about the preconditioning process,
        return the current_dic, rather than origin_dic'''
    if current_dic != None:
        return U, origin_dic
    else:
        return U

def Jacobi_preconditioner(residual, sub_eigenvalue, current_dic, full_guess,\
                return_index = None, W_H = None, V_H = None, sub_A_H = None):
    '''(1-uu*)(A-Ω*I)(1-uu*)t = -B
       B is residual, we want to solve t
       z approximates t
       z = (A-Ω*I)^(-1)*(-B) - α(A-Ω*I)^(-1)*u
            let K_inv_y = (A-Ω*I)^(-1)*(-B)
            and K_inv_u = (A-Ω*I)^(-1)*u
       z = K_inv_y - α*K_inv_u
       where α = [u*(A-Ω*I)^(-1)y]/[u*(A-Ω*I)^(-1)u]
       first, solve (A-Ω*I)^(-1)y and (A-Ω*I)^(-1)u
    '''
    B = residual
    omega = sub_eigenvalue
    u = current_guess

    K_inv_y = sTDA_preconditioner(-B, omega)
    K_inv_u = sTDA_preconditioner(u, omega)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d
    z = K_inv_y -  Alpha*K_inv_u

    return z, current_dic

def on_the_fly_Hx(W, V, sub_A, x):
    def Qx(V, x):
        '''Qx = (1 - V*V.T)*x = x - V*V.T*x'''
        VX = np.dot(V.T,x)
        x -= np.dot(V,VX)
        return x
    '''on-the-fly compute H'x
       H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q
       K approximates H, here K = sTDA_A
       H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)
       H′x ≡ a + b − c + d
    '''
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx

def new_ES(full_guess, return_index, W_H, V_H, sub_A_H, \
                        residual=None, sub_eigenvalue=None, current_dic=None):
    '''new eigenvalue solver, to diagonalize the H'
       the traditional Davidson to diagonalize the H' matrix
       W_H, V_H, sub_A_H are from the exact H
    '''
    new_ES_start = time.time()
    tol = args.eigensolver_tol
    max = 30

    k = args.nstates
    m = min([k+8, 2*k, A_size])

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    '''sTDA as initial guess'''
    V = sTDA_eigen_solver(m, V)
    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])

    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        residual = np.dot(W[:,:m], sub_eigenket[:,:k])
        residual -= np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        new_guess = TDA_A_diag_preconditioner(residual[:,index], \
                                                    sub_eigenvalue[:k][index])
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m

    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    new_ES_end = time.time()
    new_ES_cost = new_ES_end - new_ES_start
    print('H_app diagonalization done in',i,'steps; ','%.2f'%new_ES_cost, 's')
    print('threshold =', tol)
    return full_guess[:,return_index], current_dic

def gen_TDA_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDA']   = sTDA_eigen_solver
    i_lib['Adiag']  = TDA_A_diag_initial_guess
    p_lib['sTDA']   = sTDA_preconditioner
    p_lib['Adiag']  = TDA_A_diag_preconditioner
    p_lib['Jacobi'] = Jacobi_preconditioner
    p_lib['new_ES'] = new_ES
    return i_lib, p_lib

def fill_dictionary(dic,init,prec,k,icost,pcost,wall_time,N_itr,N_mv,\
            initial_energies=None,energies=None,difference=None,overlap=None,\
            tensor_alpha=None, initial_tensor_alpha=None):
    dic['initial guess'] = init
    dic['preconditioner'] = prec
    dic['nstate'] = k
    dic['molecule'] = basename
    dic['method'] = args.method
    dic['functional'] = args.functional
    dic['threshold'] = args.conv_tolerance
    dic['SCF time'] = kernel_t
    dic['Initial guess time'] = icost
    dic['initial guess threshold'] = args.initial_TOL
    dic['New guess generating time'] = pcost
    dic['preconditioner threshold'] = args.precond_TOL
    dic['total time'] = wall_time
    dic['excitation energy(eV)'] = energies
    dic['iterations'] = N_itr
    dic['A matrix size'] = A_size
    dic['final subspace size'] = N_mv
    dic['ax'] = a_x
    dic['alpha'] = alpha
    dic['beta'] = beta
    dic['virtual truncation tol'] = args.truncate_virtual
    dic['n_occ'] = n_occ
    dic['n_vir'] = n_vir
    dic['max_vir'] = max_vir
    dic['semiempirical_difference'] = difference
    dic['overlap'] = overlap
    dic['initial_energies'] = initial_energies
    dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    dic['Dynamic polarizability tensor alpha'] = tensor_alpha
    dic['Dynamic polarizability initial tensor alpha'] = initial_tensor_alpha
    return dic

def Davidson(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''Davidson frame, we can use different initial guess and preconditioner'''
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    TDA_i_lib, TDA_p_lib = gen_TDA_lib()
    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)

    init_start = time.time()
    max = args.max
    m = 0
    new_m = min([k + args.extrainitial, 2*k, A_size])
    V = np.zeros((A_size, max*k + new_m))
    W = np.zeros_like(V)
    V[:, :new_m], initial_energies = initial_guess(new_m)
    init_end = time.time()

    init_time = init_end - init_start
    print('initial guess time %.4f seconds'%init_time)

    Pcost = 0
    MVcost = 0
    for ii in range(max):
        print('\nIteration ', ii)
        istart = time.time()

        MV_start = time.time()
        W[:, m:new_m] = TDA_matrix_vector(V[:,m:new_m])
        MV_end = time.time()
        iMVcost = MV_end - MV_start
        MVcost += iMVcost
        sub_A = np.dot(V[:,:new_m].T, W[:,:new_m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        full_guess = np.dot(V[:,:new_m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:new_m], sub_eigenket[:,:k])
        residual -= full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm %.2e'%max_norm)
        if max_norm < tol or ii == (max-1):
            iend = time.time()
            icost = iend - istart
            current_dic['iteration total cost'] = icost
            current_dic['iteration MV cost'] = iMVcost
            iteration_list[ii] = current_dic
            print('iMVcost %.4f'%iMVcost)
            print('icost %.4f'%icost)
            print('Davidson procedure Done \n')
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                residual = residual[:,index],
                          sub_eigenvalue = sub_eigenvalue[:k][index],
                             current_dic = current_dic,
                              full_guess = full_guess[:,index],
                            return_index = index,
                                     W_H = W[:,:m],
                                     V_H = V[:,:m],
                                 sub_A_H = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        m = new_m
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('new generated guesses:', new_m - m)

        iend = time.time()
        icost = iend - istart
        current_dic['iteration cost'] = icost
        current_dic['iteration MV cost'] = iMVcost
        iteration_list[ii] = current_dic
        print('iMVcost %.4f'%iMVcost)
        print('icost %.4f'%icost)

    energies = sub_eigenvalue[:k]*Hartree_to_eV

    D_end = time.time()
    Dcost = D_end - D_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
                                icost=init_time, pcost=Pcost, wall_time=Dcost,\
            energies = energies.tolist(), N_itr=ii+1, N_mv=np.shape(sub_A)[0],\
            initial_energies=initial_energies.tolist())
    if ii == max-1:
        print('========== Davidson Failed Due to Iteration Limit ============')
        print('current residual norms', r_norms)
    else:
        print('------- Davidson done -------')
    print('max_norm = ', max_norm)
    print('Total steps =', ii+1)
    print('Total time: %.4f seconds'%Dcost)
    print('MVcost %.4f'%MVcost)
    print('Final subspace shape = %s'%np.shape(sub_A)[0])
    print('Precond time: %.4f seconds'%Pcost, '{:.2%}'.format(Pcost/Dcost))
    return energies, full_guess, Davidson_dic

def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag=hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder[:,:new_m], energies = TDA_A_diag_initial_guess(new_m, hdiag=hdiag)
    return V_holder, W_holder, new_m, energies,\
                V_holder[:,:new_m], W_holder[:,:new_m]

def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag=hdiag, tol=None):
    '''preconditioners for each corresponding residual (state)'''
    hdiag = hdiag.reshape(-1,1)
    k = R_x.shape[1]
    t = 1e-14
    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    D_y_inv = D_y**-1

    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new

def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  Ω = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    dambd =  d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    dapbd = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    M = np.linalg.multi_dot([G.T, L_inv, dapbd, L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([L_inv.T, G, Z])\
            *(np.array(omega)**-0.5).reshape(1,-1)

    x_m_y = d_mh.reshape(-1,1)\
            *np.linalg.multi_dot([U_inv, G_inv.T, Z])\
            *(np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    return omega, x, y

def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    '''[ a b ] x - [ σ   π] x  Ω = p
       [ b a ] y   [-π  -σ] y    = q
       normalize the right hand side first
    '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)

    p /= pqnorm
    q /= pqnorm

    d = abs(np.diag(sigma))
    d_mh = d**(-0.5)

    '''LU = d^−1/2 (σ − π) d^−1/2
       A = PLU
       P is identity matrix only when A is diagonally dominant
    '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T'''
    dambd = d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1)
    GGT = np.linalg.multi_dot([U_inv.T, dambd, U_inv])

    '''G is lower triangle matrix'''
    G = scipy.linalg.cholesky(GGT, lower=True)
    G_inv = np.linalg.inv(G)

    '''a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T
       M = G^T (a ̃+ b ̃) G
    '''
    dapba = d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1)
    a_p_b_tilde = np.linalg.multi_dot([L_inv, dapba, L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde)
    T += np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    '''(x ̃+ y ̃) = GZ
       x + y = d^-1/2 L^-T (x ̃+ y ̃)
       x - y = d^-1/2 U^-1 (x ̃- y ̃)
    '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)

    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x
    x *= pqnorm
    y *= pqnorm
    return x, y

def sTDDFT_eigen_solver(k, tol=args.initial_TOL):
    '''[ A' B' ] X - [1   0] Y Ω = 0
       [ B' A' ] Y   [0  -1] X   = 0
    '''
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    print('sTDDFT Convergence tol = %.2e'%tol)
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''set up initial guess V W, transformed vectors U1 U2'''
    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)


        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the eigenvalue omega in the subspace'''
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break

        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)

        '''GS and symmetric orthonormalization'''
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTDDFT Failed Due to Iteration Limit=================')
        print('sTDDFT diagonalization failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT diagonalization Converged' )

    print('after ', ii+1, 'iterations; %.4f'%sTDDFT_cost, 'seconds')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s {:<5.2%}".format(enrty, cost, cost/sTDDFT_cost))
    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*Hartree_to_eV
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y

def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup

def sTDDFT_preconditioner(Rx, Ry, omega, tol=args.precond_TOL):
    ''' [ A' B' ] - [1  0]X  Ω = P'''
    ''' [ B' A' ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''

    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    P /= pqnorm
    Q /= pqnorm

    X_new, Y_new  = TDDFT_A_diag_preconditioner(\
                        P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                    V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        '''U1 = AV + BW
           U2 = AW + BV'''

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        '''solve the x & y in the subspace'''
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                    a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega - P
           R_y = U2x + U1y + Y_full*omega - Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        '''preconditioning step'''
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index],\
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    sTDDFT_end = time.time()

    P_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit========')
        print('sTDDFT preconditioning failed')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT preconditioning Done')
    print('after',ii+1,'steps; %.4f'%P_cost,'s')
    print('final subspace', sigma.shape[0])
    print('max_norm = ', '%.2e'%max_norm)
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/P_cost))

    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_hdiag[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)

    return X, Y

def gen_TDDFT_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_initial_guess
    i_lib['Adiag']  = TDDFT_A_diag_initial_guess
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.conv_tolerance):
    '''[ A B ] X - [1   0] Y Ω = 0
       [ B A ] Y   [0  -1] X   = 0
    '''
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    new_m = min([k + args.extrainitial, 2*k, A_size])

    TDDFT_i_lib, TDDFT_p_lib = gen_TDDFT_lib()

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig =\
                                    initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')

    Pcost = 0
    for ii in range(max):
        print('\niteration', ii)
        show_memory_info('beginning of step '+ str(ii))

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        '''U1 = AV + BW
           U2 = AW + BV'''
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] =\
                            TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('subspace size: %s' %sigma.shape[0])

        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)

        '''compute the residual
           R_x = U1x + U2y - X_full*omega
           R_y = U2x + U1y + Y_full*omega
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        max_norm = np.max(r_norms)
        print('Maximum residual norm: ', '%.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('TDDFT precedure Done\n')
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)

        P_start = time.time()
        X_new, Y_new = new_guess_generator(\
                            R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start

        m = new_m
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    omega *= Hartree_to_eV

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) \
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start

    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=k,\
            icost=init_time, pcost=Pcost, wall_time=TDDFT_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            initial_energies=initial_energies, difference=difference,\
            overlap=overlap)
    if ii == (max -1):
        print('===== TDDFT Failed Due to Iteration Limit============')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('============= TDDFT Calculation Done ==============')

    print('after', ii+1,'iterations','%.2f'%TDDFT_cost,'s')
    print('Final subspace ', sigma.shape[0])
    print('preconditioning cost', '%.4f'%Pcost, '%.2f'%(Pcost/TDDFT_cost),"%")
    print('max_norm = ', '%.2e'%max_norm)

    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic

def gen_dynpol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = sTDDFT_preconditioner
    i_lib['Adiag']  = TDDFT_A_diag_preconditioner
    p_lib['sTDDFT'] = sTDDFT_preconditioner
    p_lib['Adiag']  = TDDFT_A_diag_preconditioner
    return i_lib, p_lib

def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P

def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()

    dynpol_i_lib, dynpol_p_lib = gen_dynpol_lib()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        '''if have 3 ω, [ω1 ω1 ω1, ω2 ω2 ω2, ω3 ω3 ω3]
           convert nm to Hartree'''
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P

    max = args.max
    tol = args.conv_tolerance
    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega, tol=args.initial_TOL)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        '''*-1 from the definition of dipole moment. *2 for double occupancy'''
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
    initial_cost = init_end - init_start
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('Iteration', ii)

        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(\
                                                V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        '''p = VP + WQ
           q = WP + VQ'''
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        print('sigma.shape', sigma.shape)

        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                    a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R_x = U1x + U2y - X_full*omega + P
           R_y = U2x + U1y + Y_full*omega + Q
           X_full = Vx + Wy
           Y_full = Wx + Vy
        '''
        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x += P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y += Q

        residual = np.vstack((R_x,R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('maximum residual norm: ', '%.3e'%np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        index = [r_norms.index(i) for i in r_norms if i > tol]

        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], \
                            R_y[:,index], omega[index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                        V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('======= Dynamic polarizability Failed Due to Iteration Limit=====')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full))\
                    + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)

    show_memory_info('Total Dynamic polarizability')
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3*k,\
            icost=initial_cost, pcost=Pcost, wall_time=dp_cost, \
            energies=omega.tolist(), N_itr=ii+1, N_mv=np.shape(sigma)[0], \
            difference=difference, overlap=overlap,\
            tensor_alpha=[i.tolist() for i in alpha_omega],\
            initial_tensor_alpha=[i.tolist() for i in alpha_omega_ig])
    return alpha_omega, Davidson_dic

def stapol_A_diag_initprec(P, hdiag=hdiag, tol=None):
    d = hdiag.reshape(-1,1)
    P = -P/d
    # P /= -d
    return P

def stapol_sTDDFT_initprec(Pr, tol=args.initial_TOL):
    '''(A* + B*)X = -P
       residual = (A* + B*)X + P
       X_ig = -P/d
       X_new = residual/D
    '''
    ssp_start = time.time()
    max = 30
    m = 0
    npvec = Pr.shape[1]

    P = Pr.reshape(n_occ,n_vir,-1)[:,:max_vir,:]
    P = P.reshape(A_reduced_size,-1)
    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    V_holder = np.zeros((A_reduced_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    '''setting up initial guess'''
    init_start = time.time()
    X_ig = stapol_A_diag_initprec(P, hdiag=max_vir_hdiag)
    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    init_end = time.time()
    initial_cost = init_end - init_start

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        '''creating the subspace'''
        MV_start = time.time()
        '''U = AX + BX = (A+B)X'''
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        '''solve the x in the subspace'''
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        index = [r_norms.index(i) for i in r_norms if i > tol]
        if np.max(r_norms) < tol or ii == (max -1):
            print('Static polarizability procedure aborted')
            break

        Pstart = time.time()
        X_new = stapol_A_diag_initprec(-residual[:,index], hdiag=max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
    X_full = np.dot(V,x)
    '''alpha = np.dot(X_full.T, P)*-4'''

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('== sTDDFT Stapol precond Failed Due to Iteration Limit======')
        print('current residual norms', r_norms)
    else:
        print('sTDDFT Stapol precond Converged' )
    print('after', ii+1, 'steps', '%.4f'%ssp_cost,'s')
    print('conv threhsold = %.2e'%tol)
    print('final subspace:', a_p_b.shape[0])
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','GScost','subgencost','subcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/ssp_cost))

    X_full *= pnorm

    U = np.zeros((n_occ,n_vir,npvec))
    U[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)[:,:,:]

    if max_vir < n_vir:
        ''' DX2 = -P2'''
        P2 = Pr.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        P2 = P2.reshape(n_occ*(n_vir-max_vir),-1)
        D2 = hdiag.reshape(n_occ,n_vir,-1)[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (-P2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2
    U = U.reshape(A_size, npvec)
    return U

def gen_stapol_lib():
    i_lib={}
    p_lib={}
    i_lib['sTDDFT'] = stapol_sTDDFT_initprec
    i_lib['Adiag']  = stapol_A_diag_initprec
    p_lib['sTDDFT'] = stapol_sTDDFT_initprec
    p_lib['Adiag']  = stapol_A_diag_initprec
    return i_lib, p_lib

def static_polarizability(init, prec):
    '''(A+B)X = -P
       residual = (A+B)X + P
       X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    stapol_i_lib, stapol_p_lib = gen_stapol_lib()
    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.conv_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    init_start = time.time()
    X_ig = initial_guess(P, tol=args.initial_TOL)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
    initial_cost = init_end - init_start

    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('\nIteration', ii)
        MV_start = time.time()
        U_holder[:, m:new_m] = \
                    static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()

        '''solve the x in the subspace'''
        x = np.linalg.solve(a_p_b, -p)

        '''compute the residual
           R = Ux + P'''
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        '''index for unconverged residuals'''
        index = [r_norms.index(i) for i in r_norms if i > tol]
        max_norm = np.max(r_norms)
        print('max_norm = %.2e'%max_norm)
        if max_norm < tol or ii == (max -1):
            print('static polarizability precodure aborted\n')
            break

        '''preconditioning step'''
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index], tol=args.precond_TOL)
        Pend = time.time()
        Pcost += Pend - Pstart

        '''GS and symmetric orthonormalization'''
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break

    X_full = np.dot(V,x)
    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start

    if ii == (max -1):
        print('==== Static polarizability Failed Due to Iteration Limit ======')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Static polarizability Converged')

    print('after', ii+1, 'steps; %.4f'%sp_cost,'s')
    print('final subspace', a_p_b.shape)
    print('max_norm = ', '%.2e'%np.max(r_norms))
    for enrty in ['initial_cost','MVcost','Pcost']:
        cost = locals()[enrty]
        print("{:<10} {:<5.4f}s  {:<5.2%}".format(enrty, cost, cost/sp_cost))

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic = fill_dictionary(Davidson_dic, init=init, prec=prec, k=3,\
            icost=initial_cost, pcost=Pcost, wall_time=sp_cost, \
            N_itr=ii+1, N_mv=np.shape(a_p_b)[0], difference=difference,\
            overlap=overlap, tensor_alpha=[i.tolist() for i in tensor_alpha],\
            initial_tensor_alpha=[i.tolist() for i in alpha_init])
    return tensor_alpha, Davidson_dic

def gen_calc():
    name_dic={}
    name_dic['TDA'] = args.TDA
    name_dic['TDDFT'] = args.TDDFT
    name_dic['dynpol'] = args.dynpol
    name_dic['stapol'] = args.stapol
    name_dic['sTDA'] = args.sTDA
    name_dic['sTDDFT'] = args.sTDDFT
    name_dic['Truncate_test'] = args.Truncate_test
    name_dic['PySCF_TDDFT'] = args.pytd
    for calc in ['TDA','TDDFT','dynpol','stapol',\
                        'sTDA','sTDDFT','Truncate_test','PySCF_TDDFT']:
        if name_dic[calc] == True:
            print(calc)
            return calc

def dump_yaml(Davidson_dic, calc, init, prec):
    curpath = os.getcwd()
    yamlpath = os.path.join(\
                   curpath,basename+'_'+calc+'_i_'+init+'_p_'+prec+'.yaml')
    with open(yamlpath, "w", encoding="utf-8") as f:
        yaml.dump(Davidson_dic, f)

if __name__ == "__main__":
    calc = gen_calc()
    TDA_combo = [            # option
    ['sTDA','sTDA'],         # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDA'],        # 2
    ['sTDA','Adiag'],        # 3
    ['sTDA','Jacobi'],       # 4
    ['Adiag','Jacobi'],      # 5
    ['Adiag','new_ES'],      # 6
    ['sTDA','new_ES']]       # 7
    TDDFT_combo = [          # option
    ['sTDDFT','sTDDFT'],     # 0
    ['Adiag','Adiag'],       # 1
    ['Adiag','sTDDFT'],      # 2
    ['sTDDFT','Adiag']]      # 3
    print('|-------- In-house Developed {0} Starts ---------|'.format(calc))
    print('Residual conv =', args.conv_tolerance)
    if args.TDA == True:
        for option in args.ip_options:
            init, prec = TDA_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies, eigenkets, Davidson_dic = Davidson(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.TDDFT == True:
        for option in args.ip_options:
            init, prec = TDDFT_combo[option]
            print('\nNumber of excited states =', args.nstates)
            Excitation_energies,X,Y,Davidson_dic = TDDFT_eigen_solver(init,prec)
            print('Excited State energies (eV) =\n',Excitation_energies)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.dynpol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\nPerturbation wavelength omega (nm) =', args.dynpol_omega)
            alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
            print('Dynamic polarizability tensor alpha')
            dump_yaml(Davidson_dic, calc, init, prec)
            for i in range(len(args.dynpol_omega)):
                print(args.dynpol_omega[i],'nm')
                print(alpha_omega[i])
    if args.stapol == True:
        for option in args.ip_options:
            init,prec = TDDFT_combo[option]
            print('\n')
            tensor_alpha, Davidson_dic = static_polarizability(init,prec)
            print('Static polarizability tensor alpha')
            print(tensor_alpha)
            dump_yaml(Davidson_dic, calc, init, prec)
    if args.sTDA == True:
        X, energies = sTDA_eigen_solver(k=args.nstates, tol=args.conv_tolerance)
    if args.sTDDFT == True:
        energies,X,Y = sTDDFT_eigen_solver(k=args.nstates,tol=args.conv_tolerance)
    if args.Truncate_test == True:
        n_states= args.nstates
        X = np.random.rand(A_size,n_state)
        Y = np.random.rand(A_size,n_state)
        print('n_vir = ', n_vir)
        print('A_size =', A_size)
        print('n_states =', n_states)
        print("{:<8} {:<8} {:<8} {:<8}".format(\
                'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
        for vir_trunc in [40, 50, 60, 70, 10000000]:
            del max_vir, sTDA_mv, sTDDFT_mv
            max_vir = gen_maxvir(tol_eV = vir_trunc)
            q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
            # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
            iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                            max_vir=max_vir, \
                                            q_ij = q_ij, \
                                            q_ab = q_ab, \
                                            q_ia = q_ia , \
                                            GK_q_jb = GK_q_jb, \
                                            GJ_q_ab = GJ_q_ab)

            sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                            max_vir=max_vir, \
                                            iajb_fly = iajb_fly, \
                                            ijab_fly = ijab_fly, \
                                            ibja_fly = ibja_fly, \
                                            delta_fly = delta_fly)

            sTDA_start = time.time()
            sTDA_X = sTDA_mv(X)
            sTDA_end = time.time()
            sTDA_mv_time = sTDA_end - sTDA_start

            sTDDFT_start = time.time()
            sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
            sTDDFT_end = time.time()
            sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

            print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                    vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))
    if args.pytd == True:
        TD.nstates = args.nstates
        TD.conv_tol = args.conv_tolerance
        TD.kernel()
        end = time.time()
    if args.verbose > 3:
        for key in vars(args):
            print(key,'=', vars(args)[key])
    print('|-------- In-house Developed {0} Ends ----------|'.format(calc))
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt160', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Fri Jul  9 16:58:40 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 50000 
[INPUT] num. atoms = 49
[INPUT] num. electrons = 212
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 N     -3.450864633004   0.055285985657  -0.008172502421 AA   -6.521189049325   0.104475371419  -0.015443791327 Bohr
[INPUT]  2 C     -4.312710911491  -1.074271985221   0.083467416329 AA   -8.149842477142  -2.030079835361   0.157730557186 Bohr
[INPUT]  3 C     -5.496224910397  -1.125384805020  -0.681088903349 AA  -10.386359799663  -2.126669066236  -1.287071493810 Bohr
[INPUT]  4 C     -3.998410379823  -2.145203102362   0.945135836673 AA   -7.555900551484  -4.053846345032   1.786047881824 Bohr
[INPUT]  5 C     -6.350456242627  -2.229056480219  -0.577886809308 AA  -12.000623064600  -4.212306263801  -1.092047800591 Bohr
[INPUT]  6 H     -5.738116555134  -0.294818975822  -1.350849791611 AA  -10.843468760036  -0.557127120629  -2.552736141571 Bohr
[INPUT]  7 C     -4.850627928716  -3.252334013126   1.026932547631 AA   -9.166358317439  -6.146020550416   1.940621263424 Bohr
[INPUT]  8 H     -3.085848632703  -2.100387210437   1.547030340390 AA   -5.831408777673  -3.969156583264   2.923463649730 Bohr
[INPUT]  9 C     -6.032019991942  -3.300425825770   0.270836626365 AA  -11.398865762672  -6.236900905147   0.511807048332 Bohr
[INPUT] 10 H     -7.266580446838  -2.257143166630  -1.177419248010 AA  -13.731846906643  -4.265382408863  -2.224999912529 Bohr
[INPUT] 11 H     -4.595976508396  -4.077343145085   1.700744389725 AA   -8.685136875803  -7.705061860083   3.213941104470 Bohr
[INPUT] 12 H     -6.699540463916  -4.164847334528   0.343633353654 AA  -12.660296637243  -7.870420812883   0.649372925671 Bohr
[INPUT] 13 C     -4.020033305612   1.359654707788  -0.051203220066 AA   -7.596761959236   2.569375021695  -0.096760062620 Bohr
[INPUT] 14 C     -3.513020058457   2.332189179355  -0.937399564309 AA   -6.638645780587   4.407198819655  -1.771428445830 Bohr
[INPUT] 15 C     -5.106086622953   1.685876419748   0.786640799366 AA   -9.649105285686   3.185844713186   1.486535669210 Bohr
[INPUT] 16 C     -4.078359361060   3.611986680527  -0.971619513367 AA   -7.706982229960   6.825665591772  -1.836094777547 Bohr
[INPUT] 17 H     -2.677484544128   2.075886983853  -1.595602647982 AA   -5.059712491157   3.922857865031  -3.015252008316 Bohr
[INPUT] 18 C     -5.675542555184   2.963028746110   0.731202957790 AA  -10.725221037613   5.599312829361   1.381773331696 Bohr
[INPUT] 19 H     -5.497506260469   0.931292359495   1.475331364771 AA  -10.388781200368   1.759887501345   2.787972222398 Bohr
[INPUT] 20 C     -5.163746993108   3.934740975748  -0.142471156335 AA   -9.758067593521   7.435582815267  -0.269231466124 Bohr
[INPUT] 21 H     -3.676224738232   4.358260815510  -1.665061313298 AA   -6.947057927609   8.235919320737  -3.146509862743 Bohr
[INPUT] 22 H     -6.518584954550   3.204157931037   1.387445234590 AA  -12.318340283810   6.054980949513   2.621891506208 Bohr
[INPUT] 23 H     -5.607823291016   4.934570473266  -0.177993253901 AA  -10.597250174976   9.324986736838  -0.336358501894 Bohr
[INPUT] 24 C     -2.051205069055  -0.116296978027  -0.052478066170 AA   -3.876215805833  -0.219769437585  -0.099169172608 Bohr
[INPUT] 25 C     -1.185554488912   0.829917370568   0.541991653563 AA   -2.240373289793   1.568316536393   1.024215787034 Bohr
[INPUT] 26 C     -1.479487609220  -1.238947305863  -0.695702189776 AA   -2.795826386114  -2.341271090848  -1.314686602937 Bohr
[INPUT] 27 C      0.195470355919   0.655945395468   0.489818723388 AA    0.369385438158   1.239557150103   0.925623237887 Bohr
[INPUT] 28 H     -1.607562005445   1.699098340864   1.053991363783 AA   -3.037851918548   3.210830522937   1.991755015206 Bohr
[INPUT] 29 C     -0.097927902328  -1.408457050055  -0.735716342206 AA   -0.185056915354  -2.661598082817  -1.390302392136 Bohr
[INPUT] 30 H     -2.132571645057  -1.972493532725  -1.176562720831 AA   -4.029976350172  -3.727472559325  -2.223381310743 Bohr
[INPUT] 31 C      0.779704115190  -0.466704605877  -0.144100420229 AA    1.473427235905  -0.881943886182  -0.272310328667 Bohr
[INPUT] 32 H      0.841667220145   1.395264725189   0.976271090710 AA    1.590520534098   2.636668201874   1.844884984772 Bohr
[INPUT] 33 H      0.310975269845  -2.274428811019  -1.264861777226 AA    0.587658091519  -4.298047542646  -2.390242344387 Bohr
[INPUT] 34 C      2.226302399054  -0.656862195528  -0.189361116537 AA    4.207101804674  -1.241289651129  -0.357840648896 Bohr
[INPUT] 35 C      2.962845104195  -1.791000762255  -0.530825739702 AA    5.598965796437  -3.384500929549  -1.003115267907 Bohr
[INPUT] 36 S      3.350286761736   0.622821505973   0.212320343377 AA    6.331124418438   1.176962070778   0.401227299657 Bohr
[INPUT] 37 H      2.514956474047  -2.748048417426  -0.811555467962 AA    4.752578951150  -5.193058885980  -1.533617569342 Bohr
[INPUT] 38 C      4.698787149831  -0.475897138178  -0.106110036575 AA    8.879420830806  -0.899315254620  -0.200518908195 Bohr
[INPUT] 39 N      4.317876760620  -1.680743844130  -0.482521714701 AA    8.159604517196  -3.176145550954  -0.911833889940 Bohr
[INPUT] 40 C      6.092239455152  -0.057129035471   0.042664612281 AA   11.512664055508  -0.107958230801   0.080624432422 Bohr
[INPUT] 41 C      7.133331502903  -0.968578741880  -0.237312334947 AA   13.480042896219  -1.830348552230  -0.448455319031 Bohr
[INPUT] 42 C      6.460448764114   1.239000716428   0.459480217238 AA   12.208478805961   2.341372022189   0.868291770236 Bohr
[INPUT] 43 C      8.457321932578  -0.544510259264  -0.088954909941 AA   15.982022199850  -1.028975262025  -0.168100417223 Bohr
[INPUT] 44 H      6.886425336133  -1.982739972906  -0.562899854903 AA   13.013457862557  -3.746835525019  -1.063726561323 Bohr
[INPUT] 45 C      7.819253042868   1.554237782815   0.573132715551 AA   14.776246749693   2.937083741972   1.083063865419 Bohr
[INPUT] 46 H      5.700054645639   1.992839812792   0.693222228615 AA   10.771542175312   3.765921456306   1.310000155542 Bohr
[INPUT] 47 H      9.280666870350  -1.239835773230  -0.302072055212 AA   17.537918638285  -2.342950050842  -0.570833454235 Bohr
[INPUT] 48 H      8.121627481428   2.559632716701   0.896510403615 AA   15.347651625639   4.837004814042   1.694159130655 Bohr
[INPUT] 49 N      8.813947368030   0.690842843162   0.307928451469 AA   16.655946601907   1.305503768693   0.581900439239 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] S
[INPUT] 0    0    [7    /1   ]  60700.928104      0.00054695944225
                                9102.6106854      0.0042297224557
                                2071.4166009      0.021747824159
                                586.02476821      0.085100053589
                                190.55395021      0.24799128459
                                67.63038426       0.46703640406
                                25.127306905      0.3643458755
[INPUT] 0    0    [3    /1   ]  112.5746301       0.02167004024
                                34.795554217      0.09360230176
                                6.5115556215      -0.26068001422
[INPUT] 0    0    [2    /1   ]  3.2399032261      1.2842089435
                                1.5477160881      0.66036416584
[INPUT] 0    0    [1    /1   ]  0.40541030112        1
[INPUT] 0    0    [1    /1   ]  0.14550651059        1
[INPUT] 1    0    [5    /1   ]  564.36716027      0.0024796796317
                                133.42624379      0.01967793025
                                42.468271189      0.089980008258
                                15.61652758       0.25705880575
                                6.1093988469      0.43515167292
[INPUT] 1    0    [1    /1   ]  2.4404160198         1
[INPUT] 1    0    [1    /1   ]  0.83882201296        1
[INPUT] 1    0    [1    /1   ]  0.312887469          1
[INPUT] 1    0    [1    /1   ]  0.10770109004        1
[INPUT] 2    0    [2    /1   ]  3.756              0.2
                                0.812                1
[INPUT] 2    0    [1    /1   ]  0.273                1
[INPUT] 3    0    [1    /1   ]  0.557                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1

nuclear repulsion = 2597.55955351967
number of shells = 408
number of NR pGTOs = 1549
number of NR cGTOs = 1050
basis = def2-tzvp
ecp = {}
CPU time:         3.09
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 49_Triphenylamino_5_pbe0.chk
max_memory 50000 MB (current use 55 MB)
XC functionals = pbe0
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f4e84824e18>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f4e84824d90>
Set gradient conv threshold to 1e-05
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
atom S rad-grids = 80, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86  86  86
  86 350 350 350 350 350 350 350 350 350 434 434 434 434 434 434 434 434
 434 434 434 434 434 434 434 434 434 434 350 350 350 350 350 350 350 350
 350 350 350 350 350 350 350 350]
tot grids = 612926
Drop grids 104594
    CPU time for setting up grids    141.97 sec, wall time     10.06 sec
nelec by numeric integration = 212.00018487337815
    CPU time for vxc    239.49 sec, wall time     15.89 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15978483.hpc/tmpgqcltywg
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for S def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
num shells = 877, num cGTOs = 2651
size of aux basis 2651
int3c2e [1/1], AO [0:408], nrow = 551775
    CPU time for cholesky_eri    399.77 sec, wall time     62.67 sec
    CPU time for df vj and vk   1240.28 sec, wall time    129.31 sec
E1 = -7291.276154684914  Ecoul = 3323.197772565783  Exc = -193.04248365127577
init E= -1563.56131225074
cond(S) = 1464567.6564929257
    CPU time for initialize scf   1633.96 sec, wall time    156.13 sec
  HOMO = -0.203950050929256  LUMO = -0.0809757024741271
  mo_energy =
[-8.90675851e+01 -1.44350380e+01 -1.43983839e+01 -1.43844766e+01
 -1.03054054e+01 -1.02886210e+01 -1.02839038e+01 -1.02838837e+01
 -1.02824384e+01 -1.02692132e+01 -1.02671152e+01 -1.02654324e+01
 -1.02634997e+01 -1.02598191e+01 -1.02483154e+01 -1.02480783e+01
 -1.02461977e+01 -1.02428245e+01 -1.02427164e+01 -1.02422102e+01
 -1.02421738e+01 -1.02420236e+01 -1.02419830e+01 -1.02404247e+01
 -1.02402448e+01 -1.02402178e+01 -1.02398636e+01 -1.02398243e+01
 -1.02375537e+01 -1.02375072e+01 -8.04542868e+00 -5.98113648e+00
 -5.97793625e+00 -5.97568348e+00 -1.00894672e+00 -9.98845465e-01
 -9.66729248e-01 -8.99123156e-01 -8.90110020e-01 -8.74969156e-01
 -8.51067946e-01 -8.37607850e-01 -7.95380712e-01 -7.92486833e-01
 -7.84704967e-01 -7.80610595e-01 -7.77483736e-01 -7.76156985e-01
 -7.62428251e-01 -7.36605131e-01 -6.77986166e-01 -6.64591873e-01
 -6.56515845e-01 -6.51785096e-01 -6.35426469e-01 -6.32510430e-01
 -6.29945938e-01 -6.07261101e-01 -5.91827906e-01 -5.81169126e-01
 -5.63547122e-01 -5.59764659e-01 -5.42222072e-01 -5.20320715e-01
 -5.08423273e-01 -5.06807859e-01 -5.01521301e-01 -4.93268771e-01
 -4.85821957e-01 -4.77955660e-01 -4.74913355e-01 -4.70703869e-01
 -4.61911527e-01 -4.53440331e-01 -4.49846090e-01 -4.46626397e-01
 -4.45848608e-01 -4.44352046e-01 -4.42803366e-01 -4.40796757e-01
 -4.28675494e-01 -4.15674039e-01 -4.06285882e-01 -4.01122651e-01
 -3.97471179e-01 -3.94537038e-01 -3.90704741e-01 -3.84412789e-01
 -3.78258844e-01 -3.75389328e-01 -3.71890990e-01 -3.64054376e-01
 -3.60067834e-01 -3.47235825e-01 -3.24534250e-01 -3.08271569e-01
 -2.98843206e-01 -2.88477463e-01 -2.85546722e-01 -2.84432258e-01
 -2.78672339e-01 -2.74646128e-01 -2.74367386e-01 -2.72963183e-01
 -2.43943146e-01 -2.03950051e-01 -8.09757025e-02 -3.89378528e-02
 -3.49434021e-02 -3.03267555e-02 -1.89948594e-02 -1.36489533e-02
 -1.10763480e-02  5.41461608e-04  8.53246477e-03  2.80296535e-02
  4.32497857e-02  4.98403659e-02  5.40970793e-02  5.62507435e-02
  6.37337794e-02  7.34831636e-02  7.61689511e-02  7.89872889e-02
  8.29200892e-02  8.94681093e-02  9.06145340e-02  9.37156513e-02
  9.53800277e-02  9.87512706e-02  1.05054087e-01  1.09330763e-01
  1.10497060e-01  1.17345941e-01  1.22795672e-01  1.27354131e-01
  1.27813098e-01  1.30218871e-01  1.31206335e-01  1.39280821e-01
  1.41463395e-01  1.44452617e-01  1.52585184e-01  1.60702362e-01
  1.70985641e-01  1.72831299e-01  1.81421633e-01  1.82623629e-01
  1.86786815e-01  1.91603049e-01  1.93334285e-01  1.95139578e-01
  2.02389951e-01  2.05874001e-01  2.08451242e-01  2.09812138e-01
  2.13606881e-01  2.16030091e-01  2.17445249e-01  2.20830353e-01
  2.26186026e-01  2.28178445e-01  2.30545446e-01  2.33568446e-01
  2.36389485e-01  2.37734143e-01  2.38940412e-01  2.40439823e-01
  2.42982729e-01  2.46459128e-01  2.51042244e-01  2.52550408e-01
  2.54516064e-01  2.57858547e-01  2.59487161e-01  2.64104359e-01
  2.67289039e-01  2.74630044e-01  2.75344008e-01  2.78291256e-01
  2.81793605e-01  2.83886252e-01  2.89831388e-01  2.96434765e-01
  2.97852306e-01  2.99866122e-01  3.05741967e-01  3.07622595e-01
  3.08880701e-01  3.13668725e-01  3.18391805e-01  3.20235148e-01
  3.22521011e-01  3.30318815e-01  3.31294042e-01  3.36807866e-01
  3.41116728e-01  3.45587352e-01  3.47095280e-01  3.49447564e-01
  3.56930354e-01  3.61267446e-01  3.62735346e-01  3.66461203e-01
  3.67169092e-01  3.70908671e-01  3.72155908e-01  3.75580695e-01
  3.78686153e-01  3.82616324e-01  3.84548595e-01  3.86367675e-01
  3.87251227e-01  3.90443666e-01  3.91726356e-01  3.95915887e-01
  3.99339669e-01  4.01255453e-01  4.07638655e-01  4.10484824e-01
  4.13071888e-01  4.15498120e-01  4.18237768e-01  4.20091382e-01
  4.22400252e-01  4.24444466e-01  4.25321050e-01  4.28771964e-01
  4.32449648e-01  4.33761558e-01  4.39777402e-01  4.42904143e-01
  4.44336171e-01  4.50933460e-01  4.53386636e-01  4.58847138e-01
  4.66938151e-01  4.68281875e-01  4.71698052e-01  4.75175588e-01
  4.78559787e-01  4.81740824e-01  4.83153885e-01  4.84485641e-01
  4.87713448e-01  4.90343229e-01  4.95137790e-01  4.96283231e-01
  5.02364419e-01  5.07570956e-01  5.11587920e-01  5.12661568e-01
  5.20722062e-01  5.22150561e-01  5.26942416e-01  5.29819141e-01
  5.32990987e-01  5.40890266e-01  5.42222739e-01  5.47391351e-01
  5.48873065e-01  5.60963171e-01  5.61573328e-01  5.66973861e-01
  5.72230090e-01  5.77757606e-01  5.80276700e-01  5.87098442e-01
  5.89309288e-01  5.93063690e-01  5.97549143e-01  6.01926165e-01
  6.13846039e-01  6.17297219e-01  6.21494504e-01  6.27988135e-01
  6.32137804e-01  6.36869443e-01  6.45349841e-01  6.47215380e-01
  6.47804237e-01  6.54048847e-01  6.58863240e-01  6.61652076e-01
  6.64281723e-01  6.65689280e-01  6.66904754e-01  6.73321256e-01
  6.73544670e-01  6.78394794e-01  6.82707449e-01  6.84678791e-01
  6.86043643e-01  6.88209739e-01  6.90197905e-01  6.95306514e-01
  6.99575785e-01  7.03671740e-01  7.06079027e-01  7.10002348e-01
  7.15852043e-01  7.17750584e-01  7.28129481e-01  7.32590778e-01
  7.35525679e-01  7.41250364e-01  7.46102776e-01  7.49286939e-01
  7.51915467e-01  7.55039632e-01  7.61019688e-01  7.71074078e-01
  7.72052223e-01  7.75305879e-01  7.78628423e-01  7.79550608e-01
  7.86874407e-01  7.90270797e-01  7.93129376e-01  7.93502349e-01
  7.97021979e-01  8.04997782e-01  8.14641226e-01  8.21598945e-01
  8.21856556e-01  8.25370228e-01  8.27064498e-01  8.33577231e-01
  8.42528460e-01  8.43803091e-01  8.47418011e-01  8.52974886e-01
  8.60812242e-01  8.66036237e-01  8.71159781e-01  8.76522923e-01
  8.80844373e-01  8.86577283e-01  8.88123920e-01  8.96388227e-01
  9.07200647e-01  9.10353232e-01  9.15363009e-01  9.25431389e-01
  9.35756758e-01  9.40790038e-01  9.50559890e-01  9.54733665e-01
  9.56747729e-01  9.57979091e-01  9.66808977e-01  9.71093834e-01
  9.76223544e-01  9.78363729e-01  9.85535939e-01  9.96915899e-01
  1.00149790e+00  1.01150156e+00  1.01699181e+00  1.02099559e+00
  1.03645380e+00  1.03780329e+00  1.04626862e+00  1.04851936e+00
  1.05612177e+00  1.05929858e+00  1.06413367e+00  1.06915677e+00
  1.07234346e+00  1.07963982e+00  1.08400969e+00  1.08476162e+00
  1.09508434e+00  1.10103148e+00  1.10531770e+00  1.11630956e+00
  1.12414890e+00  1.12966983e+00  1.13205226e+00  1.13661782e+00
  1.13757463e+00  1.15138426e+00  1.15856492e+00  1.17342263e+00
  1.17618907e+00  1.18263095e+00  1.18828626e+00  1.19819463e+00
  1.20707057e+00  1.21168452e+00  1.21344237e+00  1.21535020e+00
  1.21825261e+00  1.22544800e+00  1.22872122e+00  1.23263323e+00
  1.23549584e+00  1.23866255e+00  1.24787759e+00  1.24909669e+00
  1.25067579e+00  1.25694962e+00  1.26441772e+00  1.26744109e+00
  1.27252051e+00  1.28010161e+00  1.28371309e+00  1.29006143e+00
  1.29160078e+00  1.29909637e+00  1.30440301e+00  1.30690758e+00
  1.31061337e+00  1.31525939e+00  1.32247334e+00  1.32396339e+00
  1.33400364e+00  1.33921613e+00  1.34335294e+00  1.35289504e+00
  1.35987741e+00  1.37075488e+00  1.38333236e+00  1.39415663e+00
  1.39518463e+00  1.40289678e+00  1.41039749e+00  1.41600607e+00
  1.41798507e+00  1.42306086e+00  1.42590287e+00  1.44124087e+00
  1.45321123e+00  1.45540364e+00  1.45946139e+00  1.46208768e+00
  1.46249000e+00  1.46549389e+00  1.46947224e+00  1.47687891e+00
  1.47887878e+00  1.48306119e+00  1.48666328e+00  1.49219322e+00
  1.49833617e+00  1.50298008e+00  1.50610845e+00  1.51639379e+00
  1.52219855e+00  1.52763815e+00  1.53559131e+00  1.54199583e+00
  1.54675811e+00  1.54923070e+00  1.55201189e+00  1.55329834e+00
  1.55728771e+00  1.56531926e+00  1.57164168e+00  1.57297585e+00
  1.57807252e+00  1.58232654e+00  1.58671023e+00  1.59100031e+00
  1.59758944e+00  1.60031005e+00  1.60262845e+00  1.60706751e+00
  1.61100061e+00  1.61526464e+00  1.62180711e+00  1.62770428e+00
  1.63713152e+00  1.64118123e+00  1.65014757e+00  1.65394973e+00
  1.65751455e+00  1.66093605e+00  1.66312800e+00  1.66401335e+00
  1.67463626e+00  1.67933216e+00  1.68327158e+00  1.68759404e+00
  1.69433108e+00  1.69832128e+00  1.70165918e+00  1.70665852e+00
  1.71143816e+00  1.71275552e+00  1.71672013e+00  1.71883991e+00
  1.72453218e+00  1.72630699e+00  1.74580823e+00  1.74839526e+00
  1.75195458e+00  1.75640651e+00  1.76163891e+00  1.76781195e+00
  1.77174968e+00  1.77648806e+00  1.78351914e+00  1.79110790e+00
  1.79556510e+00  1.80257545e+00  1.80494075e+00  1.81378551e+00
  1.82265700e+00  1.83365833e+00  1.83475452e+00  1.84353974e+00
  1.84538505e+00  1.86326297e+00  1.86760161e+00  1.87303830e+00
  1.88509106e+00  1.88922226e+00  1.89144735e+00  1.90497230e+00
  1.91353716e+00  1.92020088e+00  1.92343960e+00  1.92784106e+00
  1.92960256e+00  1.93298561e+00  1.94248161e+00  1.94810141e+00
  1.95154845e+00  1.95931096e+00  1.96207216e+00  1.96870032e+00
  1.97678271e+00  1.98772236e+00  1.99725050e+00  2.00324965e+00
  2.01516086e+00  2.02783506e+00  2.03095084e+00  2.03806283e+00
  2.04511239e+00  2.04981472e+00  2.05404828e+00  2.05637192e+00
  2.06111067e+00  2.06569003e+00  2.08316246e+00  2.08659171e+00
  2.10184654e+00  2.10217052e+00  2.10321925e+00  2.10764433e+00
  2.11215646e+00  2.11441235e+00  2.12453454e+00  2.14313445e+00
  2.14695418e+00  2.15309514e+00  2.15540332e+00  2.15857974e+00
  2.16880193e+00  2.17743699e+00  2.18464894e+00  2.18766363e+00
  2.19660638e+00  2.20454143e+00  2.21743376e+00  2.22289227e+00
  2.22836123e+00  2.23322827e+00  2.23749461e+00  2.24797070e+00
  2.25357668e+00  2.26623981e+00  2.27382959e+00  2.27660199e+00
  2.28568123e+00  2.28751792e+00  2.29754475e+00  2.30512044e+00
  2.30881630e+00  2.32684985e+00  2.33003878e+00  2.34203240e+00
  2.35246261e+00  2.37182210e+00  2.37774366e+00  2.38065390e+00
  2.38963844e+00  2.40456166e+00  2.40751539e+00  2.41677190e+00
  2.42074511e+00  2.42735627e+00  2.43507082e+00  2.44488063e+00
  2.45757436e+00  2.46341049e+00  2.47559304e+00  2.47957218e+00
  2.49569691e+00  2.51101730e+00  2.51253553e+00  2.52699888e+00
  2.53463988e+00  2.53937939e+00  2.54120478e+00  2.54644784e+00
  2.54918284e+00  2.56271300e+00  2.57205193e+00  2.57606902e+00
  2.57978120e+00  2.58435248e+00  2.58683134e+00  2.59414799e+00
  2.59740683e+00  2.60353359e+00  2.60626923e+00  2.60868607e+00
  2.61494777e+00  2.61835468e+00  2.63356303e+00  2.64238600e+00
  2.64446879e+00  2.64615168e+00  2.65064285e+00  2.65528555e+00
  2.65698502e+00  2.65874625e+00  2.66515245e+00  2.66948301e+00
  2.67529173e+00  2.67678018e+00  2.68178849e+00  2.69475321e+00
  2.69916133e+00  2.70422851e+00  2.70684943e+00  2.71162345e+00
  2.71275720e+00  2.71768493e+00  2.72225693e+00  2.72709474e+00
  2.73260958e+00  2.73277624e+00  2.74295632e+00  2.74755434e+00
  2.75014142e+00  2.75266524e+00  2.75763084e+00  2.76278117e+00
  2.76457748e+00  2.76910236e+00  2.77201883e+00  2.77956797e+00
  2.78693743e+00  2.78951535e+00  2.79429473e+00  2.79708603e+00
  2.80138366e+00  2.80650778e+00  2.81178332e+00  2.81590767e+00
  2.81690778e+00  2.82540422e+00  2.82606046e+00  2.83325427e+00
  2.83597220e+00  2.84283564e+00  2.84523243e+00  2.84814117e+00
  2.85334561e+00  2.85630941e+00  2.85888242e+00  2.86102000e+00
  2.86745343e+00  2.87274620e+00  2.87521129e+00  2.87893101e+00
  2.88258489e+00  2.89704155e+00  2.90111180e+00  2.90583999e+00
  2.90718219e+00  2.91404310e+00  2.91773567e+00  2.92297233e+00
  2.93085301e+00  2.93371823e+00  2.93701417e+00  2.94549110e+00
  2.95356775e+00  2.95574259e+00  2.96773100e+00  2.97052564e+00
  2.97498318e+00  2.98465411e+00  2.98848028e+00  2.99156578e+00
  3.00161078e+00  3.00650910e+00  3.00764992e+00  3.02245851e+00
  3.02949288e+00  3.03243221e+00  3.04242474e+00  3.05145216e+00
  3.05892133e+00  3.06017291e+00  3.06857137e+00  3.07224376e+00
  3.08828240e+00  3.08850894e+00  3.09527342e+00  3.10044952e+00
  3.10702842e+00  3.11138934e+00  3.11512464e+00  3.11758662e+00
  3.12133272e+00  3.12503359e+00  3.13214074e+00  3.13500304e+00
  3.13612595e+00  3.14388759e+00  3.14569040e+00  3.15264775e+00
  3.15492065e+00  3.15631160e+00  3.16023935e+00  3.16077431e+00
  3.16266838e+00  3.16992915e+00  3.17454709e+00  3.17706268e+00
  3.18030434e+00  3.18443366e+00  3.19582379e+00  3.19684962e+00
  3.19973366e+00  3.20825703e+00  3.21055094e+00  3.22588288e+00
  3.23147934e+00  3.23407378e+00  3.24316077e+00  3.24396236e+00
  3.24745861e+00  3.25416804e+00  3.25554218e+00  3.26074091e+00
  3.26918507e+00  3.27571517e+00  3.28145360e+00  3.28711793e+00
  3.28831604e+00  3.29071058e+00  3.29701828e+00  3.29821498e+00
  3.31037803e+00  3.32352442e+00  3.32597167e+00  3.32766597e+00
  3.33300225e+00  3.33492449e+00  3.33819582e+00  3.34204408e+00
  3.34373025e+00  3.34761810e+00  3.35017831e+00  3.35520234e+00
  3.36300418e+00  3.36640965e+00  3.37703830e+00  3.38139592e+00
  3.38413783e+00  3.38682754e+00  3.39247902e+00  3.39365101e+00
  3.39895139e+00  3.40482806e+00  3.40706771e+00  3.41202422e+00
  3.41364369e+00  3.41921267e+00  3.42268692e+00  3.42490574e+00
  3.43013960e+00  3.43551448e+00  3.44160441e+00  3.44425775e+00
  3.44598263e+00  3.44649992e+00  3.45599979e+00  3.45908664e+00
  3.45923196e+00  3.46952382e+00  3.47008735e+00  3.47697005e+00
  3.48686343e+00  3.49271309e+00  3.49551707e+00  3.50038214e+00
  3.50639607e+00  3.51017628e+00  3.51166482e+00  3.51318487e+00
  3.52313769e+00  3.52432506e+00  3.53113192e+00  3.54062170e+00
  3.54256750e+00  3.54790879e+00  3.55664367e+00  3.56360741e+00
  3.56883011e+00  3.57250840e+00  3.57416917e+00  3.58093637e+00
  3.58708494e+00  3.59244177e+00  3.60377331e+00  3.61206338e+00
  3.61591478e+00  3.63326488e+00  3.64908875e+00  3.65587203e+00
  3.66329976e+00  3.66819321e+00  3.66960386e+00  3.67899438e+00
  3.68357987e+00  3.69928671e+00  3.70125894e+00  3.71305820e+00
  3.72491013e+00  3.73574715e+00  3.73784743e+00  3.73951496e+00
  3.75382639e+00  3.75757771e+00  3.76110852e+00  3.77084561e+00
  3.77377907e+00  3.78874987e+00  3.80047137e+00  3.81090876e+00
  3.81995529e+00  3.82333377e+00  3.83826103e+00  3.87083783e+00
  3.88420116e+00  3.89717608e+00  3.90694150e+00  3.91169873e+00
  3.92113949e+00  3.92316858e+00  3.92826293e+00  3.95377011e+00
  3.95959069e+00  3.97168271e+00  3.99250845e+00  3.99433734e+00
  4.00247208e+00  4.00677496e+00  4.00744432e+00  4.01827653e+00
  4.02413054e+00  4.03179542e+00  4.03373454e+00  4.03631438e+00
  4.04044977e+00  4.04611958e+00  4.06476297e+00  4.06978622e+00
  4.07324695e+00  4.08040452e+00  4.08951680e+00  4.09478135e+00
  4.09874783e+00  4.11076237e+00  4.12311639e+00  4.12834980e+00
  4.13062050e+00  4.14243962e+00  4.15838718e+00  4.16518746e+00
  4.16945343e+00  4.17333208e+00  4.18090149e+00  4.18555577e+00
  4.18750277e+00  4.19142179e+00  4.19628886e+00  4.19687065e+00
  4.20798947e+00  4.21392232e+00  4.22908974e+00  4.23535056e+00
  4.24009657e+00  4.24251040e+00  4.25154060e+00  4.26297673e+00
  4.27677834e+00  4.28702181e+00  4.29279460e+00  4.29840593e+00
  4.29934568e+00  4.30605147e+00  4.30752878e+00  4.31300711e+00
  4.32284958e+00  4.33104427e+00  4.34265641e+00  4.35323611e+00
  4.35893644e+00  4.37942930e+00  4.38516231e+00  4.38691441e+00
  4.41575970e+00  4.42204122e+00  4.44898612e+00  4.45974003e+00
  4.49242781e+00  4.50256411e+00  4.51564114e+00  4.51755717e+00
  4.55929552e+00  4.56536386e+00  4.57183347e+00  4.58920439e+00
  4.59502644e+00  4.61027196e+00  4.61468334e+00  4.63682242e+00
  4.65368214e+00  4.66593864e+00  4.68707578e+00  4.69519233e+00
  4.72343960e+00  4.72767796e+00  4.73064837e+00  4.75471733e+00
  4.76277037e+00  4.76444074e+00  4.78549957e+00  4.80514802e+00
  4.81302738e+00  4.82839577e+00  4.83821619e+00  4.85052583e+00
  4.85123022e+00  4.87064026e+00  4.87273397e+00  4.88973168e+00
  4.89285461e+00  4.89428978e+00  4.90258565e+00  4.91568944e+00
  4.92610455e+00  4.93331322e+00  4.93793370e+00  4.96899074e+00
  4.97930805e+00  4.99087133e+00  5.02629278e+00  5.03808754e+00
  5.06273547e+00  5.06607162e+00  5.07394483e+00  5.09966036e+00
  5.10674532e+00  5.12508848e+00  5.13382249e+00  5.14198012e+00
  5.18316055e+00  5.19916854e+00  5.21492612e+00  5.22466891e+00
  5.23527193e+00  5.24362618e+00  5.25471222e+00  5.26928917e+00
  5.27484128e+00  5.28161806e+00  5.30300890e+00  5.31864579e+00
  5.32409709e+00  5.32925919e+00  5.34823032e+00  5.40169710e+00
  5.42666191e+00  5.45217375e+00  5.47732744e+00  5.51288273e+00
  5.54524146e+00  5.56246272e+00  5.56690458e+00  5.57467921e+00
  5.59020356e+00  5.61414868e+00  5.62443320e+00  5.63302227e+00
  5.64874115e+00  5.66088203e+00  5.71783136e+00  5.77578899e+00
  5.79704921e+00  5.82978186e+00  5.83889567e+00  5.94734298e+00
  5.98958724e+00  6.03761496e+00  6.03924110e+00  6.08757404e+00
  6.15699529e+00  8.92455720e+00  9.49186682e+00  9.52909665e+00
  2.03092174e+01  2.22179067e+01  2.22577998e+01  2.23702745e+01
  2.24710539e+01  2.26053287e+01  2.26172301e+01  2.26230172e+01
  2.26237379e+01  2.26783545e+01  2.27103715e+01  2.27599918e+01
  2.27727945e+01  2.27854715e+01  2.27981913e+01  2.28000440e+01
  2.28087350e+01  2.28176063e+01  2.28426367e+01  2.28606415e+01
  2.28976483e+01  2.30181896e+01  2.30465465e+01  2.31889819e+01
  2.32044085e+01  2.32435260e+01  2.33792496e+01  3.24563092e+01
  3.25349565e+01  3.32970074e+01]
nelec by numeric integration = 212.00018487330223
    CPU time for vxc    178.17 sec, wall time     11.41 sec
    CPU time for df vj and vk    836.63 sec, wall time     63.84 sec
E1 = -7291.276149122834  Ecoul = 3323.1977660392317  Exc = -193.04248268674786
cycle= 1 E= -1563.56131225068  delta_E= 5.64e-11  |g|= 1.63e-05  |ddm|= 2.44e-05
    CPU time for cycle= 1   1025.69 sec, wall time     78.02 sec
  HOMO = -0.203950620158577  LUMO = -0.0809751920660498
  mo_energy =
[-8.90675827e+01 -1.44350428e+01 -1.43983880e+01 -1.43844814e+01
 -1.03054065e+01 -1.02886272e+01 -1.02839070e+01 -1.02838869e+01
 -1.02824290e+01 -1.02692129e+01 -1.02671138e+01 -1.02654326e+01
 -1.02635006e+01 -1.02598106e+01 -1.02483124e+01 -1.02480743e+01
 -1.02461969e+01 -1.02428277e+01 -1.02427190e+01 -1.02422095e+01
 -1.02421731e+01 -1.02420227e+01 -1.02419819e+01 -1.02404254e+01
 -1.02402463e+01 -1.02402194e+01 -1.02398646e+01 -1.02398253e+01
 -1.02375522e+01 -1.02375054e+01 -8.04542629e+00 -5.98113409e+00
 -5.97793388e+00 -5.97568109e+00 -1.00895027e+00 -9.98845610e-01
 -9.66730796e-01 -8.99121999e-01 -8.90110640e-01 -8.74968800e-01
 -8.51068113e-01 -8.37606403e-01 -7.95380399e-01 -7.92487330e-01
 -7.84705304e-01 -7.80610508e-01 -7.77483836e-01 -7.76157309e-01
 -7.62427960e-01 -7.36605070e-01 -6.77985884e-01 -6.64591853e-01
 -6.56516445e-01 -6.51785616e-01 -6.35426682e-01 -6.32510745e-01
 -6.29946299e-01 -6.07261159e-01 -5.91827530e-01 -5.81168653e-01
 -5.63547692e-01 -5.59765500e-01 -5.42221114e-01 -5.20320918e-01
 -5.08423204e-01 -5.06808246e-01 -5.01521314e-01 -4.93269210e-01
 -4.85822274e-01 -4.77955707e-01 -4.74913298e-01 -4.70704220e-01
 -4.61911740e-01 -4.53440609e-01 -4.49845518e-01 -4.46626221e-01
 -4.45848444e-01 -4.44352413e-01 -4.42803758e-01 -4.40796911e-01
 -4.28675592e-01 -4.15673918e-01 -4.06286604e-01 -4.01121399e-01
 -3.97471489e-01 -3.94537587e-01 -3.90703675e-01 -3.84412736e-01
 -3.78258880e-01 -3.75389553e-01 -3.71890874e-01 -3.64054844e-01
 -3.60067214e-01 -3.47235589e-01 -3.24534559e-01 -3.08271319e-01
 -2.98843838e-01 -2.88477081e-01 -2.85546652e-01 -2.84432736e-01
 -2.78672591e-01 -2.74646287e-01 -2.74369175e-01 -2.72963449e-01
 -2.43942580e-01 -2.03950620e-01 -8.09751921e-02 -3.89378424e-02
 -3.49435249e-02 -3.03274590e-02 -1.89951948e-02 -1.36489115e-02
 -1.10767467e-02  5.41448295e-04  8.53425044e-03  2.80296030e-02
  4.32498368e-02  4.98407495e-02  5.40971955e-02  5.62511061e-02
  6.37340270e-02  7.34831061e-02  7.61687425e-02  7.89870756e-02
  8.29200214e-02  8.94681429e-02  9.06145286e-02  9.37157996e-02
  9.53803426e-02  9.87514707e-02  1.05054006e-01  1.09330622e-01
  1.10496844e-01  1.17346018e-01  1.22795715e-01  1.27354086e-01
  1.27812968e-01  1.30219280e-01  1.31206710e-01  1.39281339e-01
  1.41463148e-01  1.44452992e-01  1.52584957e-01  1.60701674e-01
  1.70985776e-01  1.72831723e-01  1.81421339e-01  1.82623461e-01
  1.86786547e-01  1.91603145e-01  1.93334105e-01  1.95139762e-01
  2.02389720e-01  2.05873881e-01  2.08451137e-01  2.09812429e-01
  2.13607029e-01  2.16030091e-01  2.17445120e-01  2.20830374e-01
  2.26186216e-01  2.28178699e-01  2.30545418e-01  2.33568221e-01
  2.36389641e-01  2.37734185e-01  2.38940472e-01  2.40439817e-01
  2.42982743e-01  2.46459189e-01  2.51042854e-01  2.52550316e-01
  2.54516100e-01  2.57858305e-01  2.59487114e-01  2.64104048e-01
  2.67288817e-01  2.74630091e-01  2.75343941e-01  2.78291143e-01
  2.81793660e-01  2.83886168e-01  2.89831084e-01  2.96435203e-01
  2.97852380e-01  2.99865991e-01  3.05741644e-01  3.07622588e-01
  3.08880497e-01  3.13668819e-01  3.18391322e-01  3.20235260e-01
  3.22520987e-01  3.30319113e-01  3.31294303e-01  3.36808262e-01
  3.41116748e-01  3.45587734e-01  3.47095487e-01  3.49447534e-01
  3.56930146e-01  3.61267222e-01  3.62735274e-01  3.66461256e-01
  3.67169050e-01  3.70908388e-01  3.72155581e-01  3.75580746e-01
  3.78685967e-01  3.82616609e-01  3.84548627e-01  3.86367417e-01
  3.87250951e-01  3.90443491e-01  3.91726149e-01  3.95915759e-01
  3.99339503e-01  4.01255542e-01  4.07638636e-01  4.10484701e-01
  4.13072054e-01  4.15498463e-01  4.18237672e-01  4.20091594e-01
  4.22400199e-01  4.24444721e-01  4.25321043e-01  4.28771885e-01
  4.32449600e-01  4.33761936e-01  4.39777487e-01  4.42904296e-01
  4.44336358e-01  4.50933447e-01  4.53386629e-01  4.58847238e-01
  4.66938306e-01  4.68281867e-01  4.71698032e-01  4.75175563e-01
  4.78559507e-01  4.81740730e-01  4.83153583e-01  4.84485492e-01
  4.87713258e-01  4.90342924e-01  4.95137624e-01  4.96283308e-01
  5.02364428e-01  5.07570878e-01  5.11587436e-01  5.12661330e-01
  5.20721743e-01  5.22150533e-01  5.26942161e-01  5.29818868e-01
  5.32990922e-01  5.40890307e-01  5.42222611e-01  5.47391291e-01
  5.48872783e-01  5.60963098e-01  5.61573325e-01  5.66974217e-01
  5.72229825e-01  5.77757333e-01  5.80275901e-01  5.87098333e-01
  5.89309531e-01  5.93063408e-01  5.97548824e-01  6.01926239e-01
  6.13845957e-01  6.17297491e-01  6.21494476e-01  6.27988625e-01
  6.32137637e-01  6.36869614e-01  6.45349366e-01  6.47215602e-01
  6.47804334e-01  6.54049102e-01  6.58863025e-01  6.61652016e-01
  6.64281632e-01  6.65689551e-01  6.66904894e-01  6.73320977e-01
  6.73544518e-01  6.78394628e-01  6.82707341e-01  6.84678492e-01
  6.86043441e-01  6.88209907e-01  6.90197793e-01  6.95306776e-01
  6.99575838e-01  7.03671434e-01  7.06079159e-01  7.10002350e-01
  7.15851928e-01  7.17750683e-01  7.28129645e-01  7.32590801e-01
  7.35525967e-01  7.41250201e-01  7.46102910e-01  7.49287126e-01
  7.51915328e-01  7.55039662e-01  7.61019724e-01  7.71074216e-01
  7.72051987e-01  7.75305875e-01  7.78628275e-01  7.79550587e-01
  7.86874085e-01  7.90270823e-01  7.93129268e-01  7.93501901e-01
  7.97021714e-01  8.04997476e-01  8.14641156e-01  8.21598645e-01
  8.21856573e-01  8.25369850e-01  8.27064441e-01  8.33577616e-01
  8.42528530e-01  8.43802822e-01  8.47418457e-01  8.52975159e-01
  8.60812384e-01  8.66035983e-01  8.71159728e-01  8.76522799e-01
  8.80844131e-01  8.86576955e-01  8.88123882e-01  8.96388512e-01
  9.07200872e-01  9.10353474e-01  9.15362858e-01  9.25431740e-01
  9.35756710e-01  9.40789919e-01  9.50559983e-01  9.54733677e-01
  9.56747782e-01  9.57979138e-01  9.66809047e-01  9.71094009e-01
  9.76223655e-01  9.78364434e-01  9.85536070e-01  9.96916115e-01
  1.00149783e+00  1.01150160e+00  1.01699172e+00  1.02099582e+00
  1.03645365e+00  1.03780343e+00  1.04626866e+00  1.04851934e+00
  1.05612163e+00  1.05929871e+00  1.06413390e+00  1.06915697e+00
  1.07234325e+00  1.07963977e+00  1.08400985e+00  1.08476168e+00
  1.09508395e+00  1.10103111e+00  1.10531795e+00  1.11630966e+00
  1.12414895e+00  1.12967011e+00  1.13205222e+00  1.13661799e+00
  1.13757446e+00  1.15138471e+00  1.15856455e+00  1.17342274e+00
  1.17618922e+00  1.18263075e+00  1.18828586e+00  1.19819476e+00
  1.20707032e+00  1.21168453e+00  1.21344241e+00  1.21534990e+00
  1.21825232e+00  1.22544802e+00  1.22872102e+00  1.23263313e+00
  1.23549554e+00  1.23866257e+00  1.24787725e+00  1.24909635e+00
  1.25067570e+00  1.25694985e+00  1.26441751e+00  1.26744072e+00
  1.27252023e+00  1.28010156e+00  1.28371302e+00  1.29006152e+00
  1.29160053e+00  1.29909641e+00  1.30440334e+00  1.30690740e+00
  1.31061327e+00  1.31525937e+00  1.32247396e+00  1.32396308e+00
  1.33400419e+00  1.33921665e+00  1.34335310e+00  1.35289487e+00
  1.35987701e+00  1.37075514e+00  1.38333209e+00  1.39415654e+00
  1.39518421e+00  1.40289588e+00  1.41039742e+00  1.41600569e+00
  1.41798491e+00  1.42306099e+00  1.42590259e+00  1.44124161e+00
  1.45321149e+00  1.45540377e+00  1.45946169e+00  1.46208749e+00
  1.46248976e+00  1.46549410e+00  1.46947196e+00  1.47687845e+00
  1.47887901e+00  1.48306150e+00  1.48666362e+00  1.49219327e+00
  1.49833600e+00  1.50297981e+00  1.50610828e+00  1.51639385e+00
  1.52219893e+00  1.52763886e+00  1.53559140e+00  1.54199594e+00
  1.54675814e+00  1.54923044e+00  1.55201178e+00  1.55329836e+00
  1.55728820e+00  1.56531914e+00  1.57164167e+00  1.57297559e+00
  1.57807248e+00  1.58232647e+00  1.58671037e+00  1.59100033e+00
  1.59758931e+00  1.60030981e+00  1.60262828e+00  1.60706795e+00
  1.61100076e+00  1.61526498e+00  1.62180761e+00  1.62770439e+00
  1.63713184e+00  1.64118172e+00  1.65014735e+00  1.65394949e+00
  1.65751446e+00  1.66093572e+00  1.66312785e+00  1.66401331e+00
  1.67463595e+00  1.67933245e+00  1.68327206e+00  1.68759445e+00
  1.69433086e+00  1.69832106e+00  1.70165893e+00  1.70665820e+00
  1.71143792e+00  1.71275522e+00  1.71671969e+00  1.71883944e+00
  1.72453178e+00  1.72630687e+00  1.74580860e+00  1.74839500e+00
  1.75195434e+00  1.75640641e+00  1.76163946e+00  1.76781238e+00
  1.77174960e+00  1.77648783e+00  1.78351933e+00  1.79110790e+00
  1.79556547e+00  1.80257520e+00  1.80494058e+00  1.81378638e+00
  1.82265772e+00  1.83365889e+00  1.83475422e+00  1.84353968e+00
  1.84538550e+00  1.86326281e+00  1.86760139e+00  1.87303780e+00
  1.88509083e+00  1.88922211e+00  1.89144743e+00  1.90497247e+00
  1.91353705e+00  1.92020129e+00  1.92343946e+00  1.92784073e+00
  1.92960208e+00  1.93298523e+00  1.94248252e+00  1.94810190e+00
  1.95154856e+00  1.95931080e+00  1.96207114e+00  1.96869976e+00
  1.97678238e+00  1.98772181e+00  1.99725109e+00  2.00324973e+00
  2.01516107e+00  2.02783473e+00  2.03095088e+00  2.03806238e+00
  2.04511203e+00  2.04981430e+00  2.05404780e+00  2.05637360e+00
  2.06111084e+00  2.06569030e+00  2.08316291e+00  2.08659145e+00
  2.10184651e+00  2.10217037e+00  2.10321895e+00  2.10764356e+00
  2.11215564e+00  2.11441352e+00  2.12453445e+00  2.14313465e+00
  2.14695446e+00  2.15309563e+00  2.15540337e+00  2.15858017e+00
  2.16880244e+00  2.17743712e+00  2.18464885e+00  2.18766337e+00
  2.19660625e+00  2.20454308e+00  2.21743329e+00  2.22289261e+00
  2.22836068e+00  2.23322903e+00  2.23749411e+00  2.24796997e+00
  2.25357595e+00  2.26623948e+00  2.27382944e+00  2.27660128e+00
  2.28568099e+00  2.28751668e+00  2.29754426e+00  2.30512092e+00
  2.30881606e+00  2.32684970e+00  2.33003845e+00  2.34203188e+00
  2.35246179e+00  2.37182207e+00  2.37774327e+00  2.38065351e+00
  2.38963894e+00  2.40456134e+00  2.40751542e+00  2.41677241e+00
  2.42074536e+00  2.42735509e+00  2.43507034e+00  2.44488064e+00
  2.45757355e+00  2.46340992e+00  2.47559264e+00  2.47957190e+00
  2.49569638e+00  2.51101765e+00  2.51253560e+00  2.52699872e+00
  2.53463978e+00  2.53937946e+00  2.54120474e+00  2.54644767e+00
  2.54918320e+00  2.56271347e+00  2.57205196e+00  2.57606862e+00
  2.57978139e+00  2.58435268e+00  2.58683221e+00  2.59414787e+00
  2.59740675e+00  2.60353355e+00  2.60626948e+00  2.60868648e+00
  2.61494782e+00  2.61835464e+00  2.63356309e+00  2.64238583e+00
  2.64446851e+00  2.64615178e+00  2.65064274e+00  2.65528528e+00
  2.65698476e+00  2.65874606e+00  2.66515224e+00  2.66948258e+00
  2.67529135e+00  2.67677990e+00  2.68178863e+00  2.69475357e+00
  2.69916106e+00  2.70422902e+00  2.70684969e+00  2.71162380e+00
  2.71275742e+00  2.71768542e+00  2.72225733e+00  2.72709548e+00
  2.73261001e+00  2.73277619e+00  2.74295637e+00  2.74755460e+00
  2.75014138e+00  2.75266495e+00  2.75763084e+00  2.76278079e+00
  2.76457731e+00  2.76910208e+00  2.77201904e+00  2.77956787e+00
  2.78693776e+00  2.78951520e+00  2.79429483e+00  2.79708619e+00
  2.80138360e+00  2.80650777e+00  2.81178350e+00  2.81590778e+00
  2.81690753e+00  2.82540401e+00  2.82606016e+00  2.83325423e+00
  2.83597215e+00  2.84283557e+00  2.84523239e+00  2.84814110e+00
  2.85334607e+00  2.85630940e+00  2.85888213e+00  2.86102006e+00
  2.86745392e+00  2.87274651e+00  2.87521087e+00  2.87893037e+00
  2.88258476e+00  2.89704146e+00  2.90111171e+00  2.90583983e+00
  2.90718182e+00  2.91404306e+00  2.91773527e+00  2.92297226e+00
  2.93085291e+00  2.93371808e+00  2.93701378e+00  2.94549038e+00
  2.95356678e+00  2.95574292e+00  2.96773130e+00  2.97052569e+00
  2.97498301e+00  2.98465373e+00  2.98848041e+00  2.99156568e+00
  3.00161079e+00  3.00650920e+00  3.00764961e+00  3.02245856e+00
  3.02949315e+00  3.03243231e+00  3.04242527e+00  3.05145129e+00
  3.05892150e+00  3.06017321e+00  3.06857214e+00  3.07224350e+00
  3.08828305e+00  3.08850959e+00  3.09527428e+00  3.10045068e+00
  3.10702939e+00  3.11138947e+00  3.11512455e+00  3.11758657e+00
  3.12133303e+00  3.12503375e+00  3.13214063e+00  3.13500307e+00
  3.13612586e+00  3.14388771e+00  3.14569037e+00  3.15264794e+00
  3.15492065e+00  3.15631174e+00  3.16023961e+00  3.16077395e+00
  3.16266840e+00  3.16992884e+00  3.17454707e+00  3.17706276e+00
  3.18030449e+00  3.18443370e+00  3.19582418e+00  3.19684977e+00
  3.19973370e+00  3.20825730e+00  3.21055115e+00  3.22588280e+00
  3.23147951e+00  3.23407422e+00  3.24316102e+00  3.24396248e+00
  3.24745850e+00  3.25416823e+00  3.25554199e+00  3.26074138e+00
  3.26918538e+00  3.27571534e+00  3.28145352e+00  3.28711793e+00
  3.28831608e+00  3.29071042e+00  3.29701819e+00  3.29821497e+00
  3.31037804e+00  3.32352433e+00  3.32597139e+00  3.32766574e+00
  3.33300205e+00  3.33492434e+00  3.33819599e+00  3.34204426e+00
  3.34373063e+00  3.34761801e+00  3.35017810e+00  3.35520237e+00
  3.36300430e+00  3.36640935e+00  3.37703789e+00  3.38139581e+00
  3.38413755e+00  3.38682695e+00  3.39247883e+00  3.39365114e+00
  3.39895172e+00  3.40482785e+00  3.40706771e+00  3.41202400e+00
  3.41364347e+00  3.41921284e+00  3.42268653e+00  3.42490584e+00
  3.43013965e+00  3.43551436e+00  3.44160442e+00  3.44425754e+00
  3.44598201e+00  3.44649945e+00  3.45599933e+00  3.45908633e+00
  3.45923205e+00  3.46952432e+00  3.47008724e+00  3.47697050e+00
  3.48686315e+00  3.49271296e+00  3.49551691e+00  3.50038174e+00
  3.50639577e+00  3.51017571e+00  3.51166441e+00  3.51318480e+00
  3.52313732e+00  3.52432485e+00  3.53113084e+00  3.54062192e+00
  3.54256764e+00  3.54790930e+00  3.55664323e+00  3.56360754e+00
  3.56882929e+00  3.57250789e+00  3.57416852e+00  3.58093620e+00
  3.58708480e+00  3.59244260e+00  3.60377366e+00  3.61206349e+00
  3.61591552e+00  3.63326492e+00  3.64908900e+00  3.65587163e+00
  3.66329955e+00  3.66819312e+00  3.66960380e+00  3.67899403e+00
  3.68358009e+00  3.69928652e+00  3.70125845e+00  3.71305781e+00
  3.72491003e+00  3.73574679e+00  3.73784688e+00  3.73951502e+00
  3.75382673e+00  3.75757755e+00  3.76110851e+00  3.77084568e+00
  3.77377977e+00  3.78875052e+00  3.80047120e+00  3.81090869e+00
  3.81995497e+00  3.82333348e+00  3.83826138e+00  3.87083821e+00
  3.88420186e+00  3.89717640e+00  3.90694143e+00  3.91169894e+00
  3.92113972e+00  3.92316967e+00  3.92826264e+00  3.95377001e+00
  3.95959103e+00  3.97168279e+00  3.99250742e+00  3.99433710e+00
  4.00247151e+00  4.00677468e+00  4.00744365e+00  4.01827599e+00
  4.02413029e+00  4.03179481e+00  4.03373447e+00  4.03631395e+00
  4.04044965e+00  4.04611954e+00  4.06476311e+00  4.06978606e+00
  4.07324646e+00  4.08040429e+00  4.08951614e+00  4.09478122e+00
  4.09874764e+00  4.11076198e+00  4.12311558e+00  4.12835048e+00
  4.13062065e+00  4.14243976e+00  4.15838724e+00  4.16518683e+00
  4.16945309e+00  4.17333188e+00  4.18090156e+00  4.18555526e+00
  4.18750263e+00  4.19142189e+00  4.19628888e+00  4.19687066e+00
  4.20798943e+00  4.21392250e+00  4.22908952e+00  4.23535042e+00
  4.24009639e+00  4.24251033e+00  4.25154089e+00  4.26297699e+00
  4.27677805e+00  4.28702168e+00  4.29279443e+00  4.29840504e+00
  4.29934543e+00  4.30605103e+00  4.30752836e+00  4.31300731e+00
  4.32284929e+00  4.33104396e+00  4.34265564e+00  4.35323693e+00
  4.35893652e+00  4.37942881e+00  4.38516336e+00  4.38691370e+00
  4.41575962e+00  4.42204177e+00  4.44898591e+00  4.45973967e+00
  4.49242744e+00  4.50256487e+00  4.51563983e+00  4.51755694e+00
  4.55929623e+00  4.56536316e+00  4.57183363e+00  4.58920410e+00
  4.59502633e+00  4.61027141e+00  4.61468375e+00  4.63682194e+00
  4.65368252e+00  4.66593856e+00  4.68707581e+00  4.69519236e+00
  4.72344011e+00  4.72767768e+00  4.73064828e+00  4.75471740e+00
  4.76277039e+00  4.76444098e+00  4.78549974e+00  4.80514789e+00
  4.81302717e+00  4.82839568e+00  4.83821553e+00  4.85052341e+00
  4.85122975e+00  4.87063963e+00  4.87273247e+00  4.88973046e+00
  4.89285354e+00  4.89428834e+00  4.90258588e+00  4.91568977e+00
  4.92610508e+00  4.93331272e+00  4.93793134e+00  4.96899056e+00
  4.97930714e+00  4.99087087e+00  5.02629219e+00  5.03808701e+00
  5.06273490e+00  5.06607039e+00  5.07394403e+00  5.09966030e+00
  5.10674453e+00  5.12508725e+00  5.13382212e+00  5.14197921e+00
  5.18315902e+00  5.19916822e+00  5.21492580e+00  5.22466713e+00
  5.23527115e+00  5.24362422e+00  5.25471152e+00  5.26928818e+00
  5.27484054e+00  5.28161644e+00  5.30300821e+00  5.31864473e+00
  5.32409585e+00  5.32925786e+00  5.34822929e+00  5.40169695e+00
  5.42666140e+00  5.45217392e+00  5.47732733e+00  5.51288203e+00
  5.54524065e+00  5.56246104e+00  5.56690389e+00  5.57467845e+00
  5.59020184e+00  5.61414703e+00  5.62443185e+00  5.63302045e+00
  5.64874044e+00  5.66088057e+00  5.71782989e+00  5.77578729e+00
  5.79704842e+00  5.82978040e+00  5.83889372e+00  5.94734204e+00
  5.98958398e+00  6.03761167e+00  6.03923780e+00  6.08757292e+00
  6.15699266e+00  8.92455949e+00  9.49186912e+00  9.52909892e+00
  2.03092198e+01  2.22179070e+01  2.22578001e+01  2.23702752e+01
  2.24710539e+01  2.26053290e+01  2.26172308e+01  2.26230180e+01
  2.26237383e+01  2.26783565e+01  2.27103724e+01  2.27599922e+01
  2.27727935e+01  2.27854718e+01  2.27981900e+01  2.28000432e+01
  2.28087348e+01  2.28176066e+01  2.28426369e+01  2.28606405e+01
  2.28976529e+01  2.30181893e+01  2.30465473e+01  2.31889810e+01
  2.32044083e+01  2.32435240e+01  2.33792514e+01  3.24563048e+01
  3.25349526e+01  3.32970028e+01]
nelec by numeric integration = 212.00018487347296
    CPU time for vxc    181.79 sec, wall time     11.83 sec
    CPU time for df vj and vk    836.45 sec, wall time     64.34 sec
E1 = -7291.276224446166  Ecoul = 3323.197845358592  Exc = -193.04248668242144
cycle= 2 E= -1563.56131225033  delta_E= 3.55e-10  |g|= 3.9e-05  |ddm|= 5.84e-05
    CPU time for cycle= 2   1032.86 sec, wall time     77.73 sec
  HOMO = -0.203950051640153  LUMO = -0.0809754774250616
  mo_energy =
[-8.90675844e+01 -1.44350385e+01 -1.43983852e+01 -1.43844786e+01
 -1.03054053e+01 -1.02886228e+01 -1.02839044e+01 -1.02838843e+01
 -1.02824354e+01 -1.02692128e+01 -1.02671146e+01 -1.02654324e+01
 -1.02634999e+01 -1.02598165e+01 -1.02483145e+01 -1.02480771e+01
 -1.02461973e+01 -1.02428255e+01 -1.02427172e+01 -1.02422100e+01
 -1.02421736e+01 -1.02420232e+01 -1.02419825e+01 -1.02404248e+01
 -1.02402451e+01 -1.02402182e+01 -1.02398637e+01 -1.02398245e+01
 -1.02375532e+01 -1.02375066e+01 -8.04542795e+00 -5.98113576e+00
 -5.97793553e+00 -5.97568275e+00 -1.00894740e+00 -9.98845379e-01
 -9.66729838e-01 -8.99122740e-01 -8.90110069e-01 -8.74968933e-01
 -8.51067887e-01 -8.37607314e-01 -7.95380515e-01 -7.92486866e-01
 -7.84705043e-01 -7.80610500e-01 -7.77483688e-01 -7.76156985e-01
 -7.62428044e-01 -7.36604993e-01 -6.77985971e-01 -6.64591770e-01
 -6.56515916e-01 -6.51785219e-01 -6.35426449e-01 -6.32510440e-01
 -6.29945951e-01 -6.07261027e-01 -5.91827732e-01 -5.81168903e-01
 -5.63547174e-01 -5.59764767e-01 -5.42221692e-01 -5.20320703e-01
 -5.08423183e-01 -5.06807914e-01 -5.01521243e-01 -4.93268801e-01
 -4.85821983e-01 -4.77955625e-01 -4.74913280e-01 -4.70703896e-01
 -4.61911522e-01 -4.53440303e-01 -4.49845849e-01 -4.46626277e-01
 -4.45848490e-01 -4.44352084e-01 -4.42803410e-01 -4.40796759e-01
 -4.28675435e-01 -4.15673997e-01 -4.06286004e-01 -4.01122195e-01
 -3.97471176e-01 -3.94537093e-01 -3.90704367e-01 -3.84412707e-01
 -3.78258781e-01 -3.75389358e-01 -3.71890870e-01 -3.64054429e-01
 -3.60067580e-01 -3.47235649e-01 -3.24534242e-01 -3.08271437e-01
 -2.98843357e-01 -2.88477287e-01 -2.85546650e-01 -2.84432293e-01
 -2.78672384e-01 -2.74646111e-01 -2.74368110e-01 -2.72963184e-01
 -2.43942859e-01 -2.03950052e-01 -8.09754774e-02 -3.89377916e-02
 -3.49433750e-02 -3.03268503e-02 -1.89949346e-02 -1.36488940e-02
 -1.10763892e-02  5.41557459e-04  8.53306523e-03  2.80297140e-02
  4.32498412e-02  4.98405281e-02  5.40971483e-02  5.62508985e-02
  6.37338765e-02  7.34831793e-02  7.61689222e-02  7.89872594e-02
  8.29200907e-02  8.94681602e-02  9.06145553e-02  9.37157050e-02
  9.53801710e-02  9.87513702e-02  1.05054082e-01  1.09330753e-01
  1.10497032e-01  1.17345987e-01  1.22795704e-01  1.27354166e-01
  1.27813105e-01  1.30219027e-01  1.31206494e-01  1.39281012e-01
  1.41463350e-01  1.44452769e-01  1.52585188e-01  1.60702244e-01
  1.70985721e-01  1.72831468e-01  1.81421586e-01  1.82623620e-01
  1.86786793e-01  1.91603124e-01  1.93334302e-01  1.95139677e-01
  2.02389952e-01  2.05874014e-01  2.08451254e-01  2.09812267e-01
  2.13606970e-01  2.16030125e-01  2.17445244e-01  2.20830397e-01
  2.26186121e-01  2.28178570e-01  2.30545491e-01  2.33568439e-01
  2.36389577e-01  2.37734202e-01  2.38940478e-01  2.40439876e-01
  2.42982772e-01  2.46459189e-01  2.51042473e-01  2.52550449e-01
  2.54516130e-01  2.57858547e-01  2.59487190e-01  2.64104341e-01
  2.67289031e-01  2.74630114e-01  2.75344034e-01  2.78291278e-01
  2.81793671e-01  2.83886251e-01  2.89831358e-01  2.96434951e-01
  2.97852382e-01  2.99866131e-01  3.05741934e-01  3.07622649e-01
  3.08880682e-01  3.13668794e-01  3.18391740e-01  3.20235228e-01
  3.22521041e-01  3.30318962e-01  3.31294170e-01  3.36808059e-01
  3.41116771e-01  3.45587516e-01  3.47095385e-01  3.49447615e-01
  3.56930344e-01  3.61267446e-01  3.62735384e-01  3.66461273e-01
  3.67169138e-01  3.70908646e-01  3.72155891e-01  3.75580765e-01
  3.78686152e-01  3.82616466e-01  3.84548654e-01  3.86367650e-01
  3.87251197e-01  3.90443636e-01  3.91726345e-01  3.95915912e-01
  3.99339660e-01  4.01255527e-01  4.07638712e-01  4.10484831e-01
  4.13071975e-01  4.15498266e-01  4.18237784e-01  4.20091481e-01
  4.22400267e-01  4.24444586e-01  4.25321080e-01  4.28771968e-01
  4.32449679e-01  4.33761710e-01  4.39777470e-01  4.42904223e-01
  4.44336251e-01  4.50933487e-01  4.53386675e-01  4.58847205e-01
  4.66938242e-01  4.68281920e-01  4.71698092e-01  4.75175628e-01
  4.78559749e-01  4.81740846e-01  4.83153850e-01  4.84485635e-01
  4.87713436e-01  4.90343201e-01  4.95137796e-01  4.96283307e-01
  5.02364466e-01  5.07570973e-01  5.11587858e-01  5.12661565e-01
  5.20722033e-01  5.22150592e-01  5.26942375e-01  5.29819050e-01
  5.32991023e-01  5.40890323e-01  5.42222757e-01  5.47391353e-01
  5.48873041e-01  5.60963208e-01  5.61573365e-01  5.66974029e-01
  5.72230072e-01  5.77757588e-01  5.80276546e-01  5.87098471e-01
  5.89309423e-01  5.93063672e-01  5.97549129e-01  6.01926245e-01
  6.13846080e-01  6.17297345e-01  6.21494553e-01  6.27988317e-01
  6.32137775e-01  6.36869541e-01  6.45349772e-01  6.47215512e-01
  6.47804318e-01  6.54048977e-01  6.58863234e-01  6.61652106e-01
  6.64281766e-01  6.65689428e-01  6.66904853e-01  6.73321246e-01
  6.73544682e-01  6.78394765e-01  6.82707489e-01  6.84678767e-01
  6.86043644e-01  6.88209844e-01  6.90197931e-01  6.95306628e-01
  6.99575861e-01  7.03671650e-01  7.06079115e-01  7.10002417e-01
  7.15852077e-01  7.17750667e-01  7.28129575e-01  7.32590803e-01
  7.35525832e-01  7.41250390e-01  7.46102895e-01  7.49287051e-01
  7.51915455e-01  7.55039710e-01  7.61019770e-01  7.71074171e-01
  7.72052217e-01  7.75305920e-01  7.78628421e-01  7.79550676e-01
  7.86874384e-01  7.90270859e-01  7.93129400e-01  7.93502301e-01
  7.97021973e-01  8.04997781e-01  8.14641278e-01  8.21598910e-01
  8.21856625e-01  8.25370204e-01  8.27064541e-01  8.33577415e-01
  8.42528544e-01  8.43803092e-01  8.47418195e-01  8.52975018e-01
  8.60812349e-01  8.66036226e-01  8.71159828e-01  8.76522936e-01
  8.80844369e-01  8.86577251e-01  8.88123977e-01  8.96388365e-01
  9.07200773e-01  9.10353368e-01  9.15363025e-01  9.25431545e-01
  9.35756811e-01  9.40790063e-01  9.50559981e-01  9.54733733e-01
  9.56747803e-01  9.57979168e-01  9.66809055e-01  9.71093949e-01
  9.76223646e-01  9.78364003e-01  9.85536039e-01  9.96916026e-01
  1.00149794e+00  1.01150164e+00  1.01699184e+00  1.02099573e+00
  1.03645382e+00  1.03780340e+00  1.04626870e+00  1.04851942e+00
  1.05612179e+00  1.05929868e+00  1.06413380e+00  1.06915688e+00
  1.07234343e+00  1.07963985e+00  1.08400979e+00  1.08476170e+00
  1.09508430e+00  1.10103145e+00  1.10531783e+00  1.11630964e+00
  1.12414898e+00  1.12966997e+00  1.13205231e+00  1.13661793e+00
  1.13757465e+00  1.15138446e+00  1.15856489e+00  1.17342271e+00
  1.17618918e+00  1.18263096e+00  1.18828621e+00  1.19819472e+00
  1.20707053e+00  1.21168459e+00  1.21344243e+00  1.21535014e+00
  1.21825260e+00  1.22544806e+00  1.22872121e+00  1.23263326e+00
  1.23549582e+00  1.23866264e+00  1.24787755e+00  1.24909666e+00
  1.25067582e+00  1.25694975e+00  1.26441771e+00  1.26744106e+00
  1.27252050e+00  1.28010167e+00  1.28371313e+00  1.29006151e+00
  1.29160079e+00  1.29909645e+00  1.30440318e+00  1.30690759e+00
  1.31061340e+00  1.31525944e+00  1.32247359e+00  1.32396337e+00
  1.33400387e+00  1.33921633e+00  1.34335304e+00  1.35289502e+00
  1.35987730e+00  1.37075502e+00  1.38333235e+00  1.39415668e+00
  1.39518460e+00  1.40289664e+00  1.41039755e+00  1.41600603e+00
  1.41798510e+00  1.42306095e+00  1.42590285e+00  1.44124115e+00
  1.45321139e+00  1.45540374e+00  1.45946153e+00  1.46208769e+00
  1.46248999e+00  1.46549400e+00  1.46947221e+00  1.47687883e+00
  1.47887890e+00  1.48306134e+00  1.48666344e+00  1.49219330e+00
  1.49833618e+00  1.50298004e+00  1.50610845e+00  1.51639390e+00
  1.52219872e+00  1.52763842e+00  1.53559139e+00  1.54199590e+00
  1.54675818e+00  1.54923069e+00  1.55201192e+00  1.55329838e+00
  1.55728791e+00  1.56531928e+00  1.57164174e+00  1.57297580e+00
  1.57807258e+00  1.58232657e+00  1.58671030e+00  1.59100037e+00
  1.59758946e+00  1.60031005e+00  1.60262847e+00  1.60706769e+00
  1.61100071e+00  1.61526480e+00  1.62180732e+00  1.62770433e+00
  1.63713163e+00  1.64118140e+00  1.65014758e+00  1.65394974e+00
  1.65751458e+00  1.66093600e+00  1.66312803e+00  1.66401340e+00
  1.67463624e+00  1.67933231e+00  1.68327177e+00  1.68759423e+00
  1.69433106e+00  1.69832129e+00  1.70165920e+00  1.70665850e+00
  1.71143818e+00  1.71275550e+00  1.71672008e+00  1.71883986e+00
  1.72453214e+00  1.72630703e+00  1.74580839e+00  1.74839526e+00
  1.75195459e+00  1.75640651e+00  1.76163915e+00  1.76781215e+00
  1.77174971e+00  1.77648804e+00  1.78351927e+00  1.79110796e+00
  1.79556528e+00  1.80257547e+00  1.80494075e+00  1.81378584e+00
  1.82265728e+00  1.83365856e+00  1.83475451e+00  1.84353979e+00
  1.84538525e+00  1.86326300e+00  1.86760161e+00  1.87303823e+00
  1.88509104e+00  1.88922230e+00  1.89144741e+00  1.90497241e+00
  1.91353713e+00  1.92020106e+00  1.92343963e+00  1.92784103e+00
  1.92960250e+00  1.93298557e+00  1.94248195e+00  1.94810162e+00
  1.95154858e+00  1.95931094e+00  1.96207200e+00  1.96870026e+00
  1.97678270e+00  1.98772228e+00  1.99725075e+00  2.00324972e+00
  2.01516100e+00  2.02783502e+00  2.03095090e+00  2.03806276e+00
  2.04511237e+00  2.04981467e+00  2.05404821e+00  2.05637251e+00
  2.06111080e+00  2.06569021e+00  2.08316267e+00  2.08659172e+00
  2.10184660e+00  2.10217054e+00  2.10321923e+00  2.10764408e+00
  2.11215631e+00  2.11441278e+00  2.12453459e+00  2.14313459e+00
  2.14695433e+00  2.15309536e+00  2.15540343e+00  2.15857995e+00
  2.16880216e+00  2.17743713e+00  2.18464898e+00  2.18766363e+00
  2.19660638e+00  2.20454200e+00  2.21743371e+00  2.22289245e+00
  2.22836108e+00  2.23322858e+00  2.23749445e+00  2.24797057e+00
  2.25357656e+00  2.26623979e+00  2.27382963e+00  2.27660189e+00
  2.28568122e+00  2.28751768e+00  2.29754471e+00  2.30512064e+00
  2.30881627e+00  2.32684986e+00  2.33003872e+00  2.34203231e+00
  2.35246246e+00  2.37182217e+00  2.37774359e+00  2.38065385e+00
  2.38963866e+00  2.40456166e+00  2.40751548e+00  2.41677211e+00
  2.42074524e+00  2.42735581e+00  2.43507074e+00  2.44488068e+00
  2.45757422e+00  2.46341041e+00  2.47559297e+00  2.47957217e+00
  2.49569686e+00  2.51101749e+00  2.51253560e+00  2.52699891e+00
  2.53463992e+00  2.53937949e+00  2.54120485e+00  2.54644787e+00
  2.54918303e+00  2.56271319e+00  2.57205200e+00  2.57606897e+00
  2.57978133e+00  2.58435261e+00  2.58683166e+00  2.59414804e+00
  2.59740685e+00  2.60353367e+00  2.60626936e+00  2.60868627e+00
  2.61494786e+00  2.61835472e+00  2.63356312e+00  2.64238601e+00
  2.64446878e+00  2.64615178e+00  2.65064289e+00  2.65528555e+00
  2.65698501e+00  2.65874624e+00  2.66515244e+00  2.66948297e+00
  2.67529171e+00  2.67678018e+00  2.68178860e+00  2.69475338e+00
  2.69916132e+00  2.70422872e+00  2.70684959e+00  2.71162364e+00
  2.71275735e+00  2.71768513e+00  2.72225712e+00  2.72709502e+00
  2.73260976e+00  2.73277628e+00  2.74295642e+00  2.74755451e+00
  2.75014149e+00  2.75266524e+00  2.75763092e+00  2.76278113e+00
  2.76457752e+00  2.76910236e+00  2.77201896e+00  2.77956799e+00
  2.78693758e+00  2.78951538e+00  2.79429483e+00  2.79708614e+00
  2.80138373e+00  2.80650784e+00  2.81178343e+00  2.81590775e+00
  2.81690777e+00  2.82540422e+00  2.82606044e+00  2.83325433e+00
  2.83597224e+00  2.84283568e+00  2.84523249e+00  2.84814123e+00
  2.85334582e+00  2.85630947e+00  2.85888238e+00  2.86102007e+00
  2.86745363e+00  2.87274638e+00  2.87521120e+00  2.87893091e+00
  2.88258494e+00  2.89704161e+00  2.90111185e+00  2.90584002e+00
  2.90718217e+00  2.91404317e+00  2.91773565e+00  2.92297238e+00
  2.93085302e+00  2.93371828e+00  2.93701415e+00  2.94549101e+00
  2.95356760e+00  2.95574279e+00  2.96773117e+00  2.97052571e+00
  2.97498322e+00  2.98465407e+00  2.98848039e+00  2.99156583e+00
  3.00161088e+00  3.00650923e+00  3.00764990e+00  3.02245861e+00
  3.02949306e+00  3.03243234e+00  3.04242498e+00  3.05145186e+00
  3.05892145e+00  3.06017307e+00  3.06857167e+00  3.07224372e+00
  3.08828266e+00  3.08850923e+00  3.09527375e+00  3.10044995e+00
  3.10702878e+00  3.11138945e+00  3.11512470e+00  3.11758667e+00
  3.12133289e+00  3.12503371e+00  3.13214079e+00  3.13500310e+00
  3.13612597e+00  3.14388768e+00  3.14569047e+00  3.15264789e+00
  3.15492072e+00  3.15631173e+00  3.16023951e+00  3.16077428e+00
  3.16266846e+00  3.16992914e+00  3.17454715e+00  3.17706277e+00
  3.18030445e+00  3.18443373e+00  3.19582399e+00  3.19684974e+00
  3.19973376e+00  3.20825720e+00  3.21055109e+00  3.22588295e+00
  3.23147950e+00  3.23407399e+00  3.24316094e+00  3.24396249e+00
  3.24745867e+00  3.25416819e+00  3.25554221e+00  3.26074114e+00
  3.26918526e+00  3.27571531e+00  3.28145368e+00  3.28711802e+00
  3.28831615e+00  3.29071063e+00  3.29701835e+00  3.29821506e+00
  3.31037811e+00  3.32352446e+00  3.32597163e+00  3.32766596e+00
  3.33300225e+00  3.33492454e+00  3.33819595e+00  3.34204421e+00
  3.34373046e+00  3.34761814e+00  3.35017831e+00  3.35520241e+00
  3.36300430e+00  3.36640965e+00  3.37703827e+00  3.38139597e+00
  3.38413781e+00  3.38682748e+00  3.39247906e+00  3.39365114e+00
  3.39895157e+00  3.40482810e+00  3.40706778e+00  3.41202423e+00
  3.41364370e+00  3.41921277e+00  3.42268690e+00  3.42490583e+00
  3.43013969e+00  3.43551452e+00  3.44160449e+00  3.44425776e+00
  3.44598256e+00  3.44649987e+00  3.45599975e+00  3.45908666e+00
  3.45923206e+00  3.46952404e+00  3.47008740e+00  3.47697027e+00
  3.48686344e+00  3.49271315e+00  3.49551708e+00  3.50038213e+00
  3.50639609e+00  3.51017620e+00  3.51166479e+00  3.51318495e+00
  3.52313762e+00  3.52432507e+00  3.53113171e+00  3.54062186e+00
  3.54256763e+00  3.54790903e+00  3.55664365e+00  3.56360754e+00
  3.56882998e+00  3.57250831e+00  3.57416907e+00  3.58093641e+00
  3.58708497e+00  3.59244210e+00  3.60377350e+00  3.61206349e+00
  3.61591509e+00  3.63326501e+00  3.64908894e+00  3.65587202e+00
  3.66329981e+00  3.66819328e+00  3.66960394e+00  3.67899437e+00
  3.68358004e+00  3.69928669e+00  3.70125889e+00  3.71305818e+00
  3.72491015e+00  3.73574715e+00  3.73784737e+00  3.73951507e+00
  3.75382658e+00  3.75757776e+00  3.76110861e+00  3.77084570e+00
  3.77377937e+00  3.78875015e+00  3.80047141e+00  3.81090880e+00
  3.81995527e+00  3.82333375e+00  3.83826121e+00  3.87083800e+00
  3.88420146e+00  3.89717622e+00  3.90694157e+00  3.91169887e+00
  3.92113961e+00  3.92316897e+00  3.92826293e+00  3.95377016e+00
  3.95959087e+00  3.97168281e+00  3.99250830e+00  3.99433733e+00
  4.00247199e+00  4.00677496e+00  4.00744424e+00  4.01827640e+00
  4.02413056e+00  4.03179534e+00  4.03373455e+00  4.03631432e+00
  4.04044981e+00  4.04611965e+00  4.06476311e+00  4.06978624e+00
  4.07324692e+00  4.08040453e+00  4.08951662e+00  4.09478136e+00
  4.09874789e+00  4.11076235e+00  4.12311628e+00  4.12835010e+00
  4.13062065e+00  4.14243975e+00  4.15838730e+00  4.16518738e+00
  4.16945345e+00  4.17333212e+00  4.18090159e+00  4.18555564e+00
  4.18750279e+00  4.19142190e+00  4.19628893e+00  4.19687072e+00
  4.20798956e+00  4.21392247e+00  4.22908977e+00  4.23535061e+00
  4.24009661e+00  4.24251047e+00  4.25154075e+00  4.26297690e+00
  4.27677835e+00  4.28702187e+00  4.29279464e+00  4.29840581e+00
  4.29934571e+00  4.30605142e+00  4.30752876e+00  4.31300725e+00
  4.32284953e+00  4.33104426e+00  4.34265631e+00  4.35323645e+00
  4.35893658e+00  4.37942929e+00  4.38516274e+00  4.38691433e+00
  4.41575976e+00  4.42204147e+00  4.44898619e+00  4.45974005e+00
  4.49242771e+00  4.50256440e+00  4.51564066e+00  4.51755714e+00
  4.55929586e+00  4.56536378e+00  4.57183362e+00  4.58920439e+00
  4.59502646e+00  4.61027189e+00  4.61468354e+00  4.63682237e+00
  4.65368233e+00  4.66593873e+00  4.68707589e+00  4.69519244e+00
  4.72343985e+00  4.72767799e+00  4.73064844e+00  4.75471745e+00
  4.76277049e+00  4.76444092e+00  4.78549969e+00  4.80514806e+00
  4.81302738e+00  4.82839582e+00  4.83821611e+00  4.85052486e+00
  4.85123015e+00  4.87064015e+00  4.87273357e+00  4.88973145e+00
  4.89285445e+00  4.89428944e+00  4.90258582e+00  4.91568964e+00
  4.92610477e+00  4.93331318e+00  4.93793274e+00  4.96899079e+00
  4.97930791e+00  4.99087132e+00  5.02629275e+00  5.03808746e+00
  5.06273543e+00  5.06607118e+00  5.07394475e+00  5.09966044e+00
  5.10674520e+00  5.12508816e+00  5.13382245e+00  5.14197988e+00
  5.18316031e+00  5.19916859e+00  5.21492612e+00  5.22466820e+00
  5.23527180e+00  5.24362588e+00  5.25471215e+00  5.26928890e+00
  5.27484119e+00  5.28161751e+00  5.30300877e+00  5.31864554e+00
  5.32409685e+00  5.32925881e+00  5.34823015e+00  5.40169713e+00
  5.42666188e+00  5.45217393e+00  5.47732756e+00  5.51288265e+00
  5.54524130e+00  5.56246248e+00  5.56690454e+00  5.57467915e+00
  5.59020325e+00  5.61414818e+00  5.62443275e+00  5.63302161e+00
  5.64874103e+00  5.66088179e+00  5.71783095e+00  5.77578834e+00
  5.79704904e+00  5.82978162e+00  5.83889533e+00  5.94734269e+00
  5.98958667e+00  6.03761441e+00  6.03924048e+00  6.08757371e+00
  6.15699480e+00  8.92455791e+00  9.49186753e+00  9.52909736e+00
  2.03092182e+01  2.22179068e+01  2.22577999e+01  2.23702747e+01
  2.24710540e+01  2.26053289e+01  2.26172304e+01  2.26230175e+01
  2.26237381e+01  2.26783553e+01  2.27103719e+01  2.27599920e+01
  2.27727943e+01  2.27854717e+01  2.27981910e+01  2.28000439e+01
  2.28087350e+01  2.28176064e+01  2.28426369e+01  2.28606413e+01
  2.28976498e+01  2.30181898e+01  2.30465469e+01  2.31889819e+01
  2.32044087e+01  2.32435257e+01  2.33792503e+01  3.24563074e+01
  3.25349552e+01  3.32970068e+01]
nelec by numeric integration = 212.00018487336914
    CPU time for vxc    172.00 sec, wall time     11.02 sec
    CPU time for df vj and vk    838.88 sec, wall time     63.19 sec
E1 = -7291.276143228977  Ecoul = 3323.197760795738  Exc = -193.0424833371791
cycle= 3 E= -1563.56131225075  delta_E= -4.23e-10  |g|= 2.2e-06  |ddm|= 4.18e-05
    CPU time for cycle= 3   1025.64 sec, wall time     76.02 sec
  HOMO = -0.203950148756598  LUMO = -0.0809755228059011
  mo_energy =
[-8.90675844e+01 -1.44350391e+01 -1.43983851e+01 -1.43844782e+01
 -1.03054056e+01 -1.02886228e+01 -1.02839046e+01 -1.02838846e+01
 -1.02824356e+01 -1.02692131e+01 -1.02671147e+01 -1.02654324e+01
 -1.02634999e+01 -1.02598165e+01 -1.02483145e+01 -1.02480771e+01
 -1.02461974e+01 -1.02428254e+01 -1.02427172e+01 -1.02422100e+01
 -1.02421735e+01 -1.02420232e+01 -1.02419826e+01 -1.02404249e+01
 -1.02402452e+01 -1.02402182e+01 -1.02398638e+01 -1.02398246e+01
 -1.02375532e+01 -1.02375066e+01 -8.04542797e+00 -5.98113578e+00
 -5.97793555e+00 -5.97568278e+00 -1.00894763e+00 -9.98845449e-01
 -9.66729725e-01 -8.99122779e-01 -8.90110133e-01 -8.74968987e-01
 -8.51067960e-01 -8.37607379e-01 -7.95380575e-01 -7.92486926e-01
 -7.84705052e-01 -7.80610532e-01 -7.77483723e-01 -7.76157029e-01
 -7.62428111e-01 -7.36605057e-01 -6.77986039e-01 -6.64591826e-01
 -6.56515975e-01 -6.51785232e-01 -6.35426494e-01 -6.32510483e-01
 -6.29946000e-01 -6.07261075e-01 -5.91827765e-01 -5.81168954e-01
 -5.63547240e-01 -5.59764846e-01 -5.42221747e-01 -5.20320738e-01
 -5.08423221e-01 -5.06807944e-01 -5.01521276e-01 -4.93268859e-01
 -4.85822022e-01 -4.77955649e-01 -4.74913308e-01 -4.70703933e-01
 -4.61911554e-01 -4.53440361e-01 -4.49845891e-01 -4.46626315e-01
 -4.45848527e-01 -4.44352116e-01 -4.42803442e-01 -4.40796786e-01
 -4.28675488e-01 -4.15673992e-01 -4.06286052e-01 -4.01122245e-01
 -3.97471224e-01 -3.94537145e-01 -3.90704402e-01 -3.84412734e-01
 -3.78258814e-01 -3.75389379e-01 -3.71890915e-01 -3.64054471e-01
 -3.60067620e-01 -3.47235710e-01 -3.24534296e-01 -3.08271470e-01
 -2.98843375e-01 -2.88477322e-01 -2.85546674e-01 -2.84432345e-01
 -2.78672399e-01 -2.74646139e-01 -2.74367965e-01 -2.72963218e-01
 -2.43942929e-01 -2.03950149e-01 -8.09755228e-02 -3.89378215e-02
 -3.49434072e-02 -3.03269100e-02 -1.89949467e-02 -1.36489159e-02
 -1.10764240e-02  5.41503371e-04  8.53301311e-03  2.80296720e-02
  4.32498177e-02  4.98405001e-02  5.40971308e-02  5.62508723e-02
  6.37338601e-02  7.34831611e-02  7.61689047e-02  7.89872416e-02
  8.29200788e-02  8.94681362e-02  9.06145426e-02  9.37156987e-02
  9.53801401e-02  9.87513456e-02  1.05054074e-01  1.09330736e-01
  1.10497012e-01  1.17345973e-01  1.22795694e-01  1.27354142e-01
  1.27813082e-01  1.30219005e-01  1.31206468e-01  1.39280988e-01
  1.41463333e-01  1.44452744e-01  1.52585147e-01  1.60702193e-01
  1.70985697e-01  1.72831442e-01  1.81421565e-01  1.82623597e-01
  1.86786759e-01  1.91603098e-01  1.93334263e-01  1.95139652e-01
  2.02389915e-01  2.05873987e-01  2.08451228e-01  2.09812240e-01
  2.13606943e-01  2.16030107e-01  2.17445228e-01  2.20830377e-01
  2.26186099e-01  2.28178544e-01  2.30545463e-01  2.33568407e-01
  2.36389553e-01  2.37734176e-01  2.38940451e-01  2.40439844e-01
  2.42982751e-01  2.46459163e-01  2.51042445e-01  2.52550411e-01
  2.54516099e-01  2.57858505e-01  2.59487166e-01  2.64104298e-01
  2.67289000e-01  2.74630081e-01  2.75344010e-01  2.78291246e-01
  2.81793644e-01  2.83886239e-01  2.89831324e-01  2.96434918e-01
  2.97852352e-01  2.99866105e-01  3.05741899e-01  3.07622619e-01
  3.08880659e-01  3.13668772e-01  3.18391698e-01  3.20235202e-01
  3.22521020e-01  3.30318928e-01  3.31294143e-01  3.36808013e-01
  3.41116750e-01  3.45587487e-01  3.47095362e-01  3.49447582e-01
  3.56930315e-01  3.61267410e-01  3.62735349e-01  3.66461241e-01
  3.67169106e-01  3.70908610e-01  3.72155846e-01  3.75580730e-01
  3.78686122e-01  3.82616429e-01  3.84548628e-01  3.86367624e-01
  3.87251170e-01  3.90443628e-01  3.91726319e-01  3.95915878e-01
  3.99339638e-01  4.01255501e-01  4.07638677e-01  4.10484811e-01
  4.13071953e-01  4.15498241e-01  4.18237762e-01  4.20091462e-01
  4.22400253e-01  4.24444563e-01  4.25321067e-01  4.28771955e-01
  4.32449656e-01  4.33761686e-01  4.39777445e-01  4.42904201e-01
  4.44336236e-01  4.50933472e-01  4.53386655e-01  4.58847185e-01
  4.66938215e-01  4.68281893e-01  4.71698068e-01  4.75175602e-01
  4.78559724e-01  4.81740822e-01  4.83153822e-01  4.84485614e-01
  4.87713412e-01  4.90343169e-01  4.95137770e-01  4.96283277e-01
  5.02364444e-01  5.07570952e-01  5.11587812e-01  5.12661530e-01
  5.20721998e-01  5.22150572e-01  5.26942359e-01  5.29819063e-01
  5.32990993e-01  5.40890298e-01  5.42222728e-01  5.47391342e-01
  5.48873007e-01  5.60963174e-01  5.61573343e-01  5.66973992e-01
  5.72230037e-01  5.77757550e-01  5.80276498e-01  5.87098435e-01
  5.89309385e-01  5.93063634e-01  5.97549084e-01  6.01926210e-01
  6.13846042e-01  6.17297317e-01  6.21494518e-01  6.27988295e-01
  6.32137767e-01  6.36869513e-01  6.45349732e-01  6.47215472e-01
  6.47804288e-01  6.54048943e-01  6.58863203e-01  6.61652079e-01
  6.64281729e-01  6.65689391e-01  6.66904823e-01  6.73321209e-01
  6.73544653e-01  6.78394755e-01  6.82707454e-01  6.84678733e-01
  6.86043613e-01  6.88209815e-01  6.90197901e-01  6.95306608e-01
  6.99575829e-01  7.03671654e-01  7.06079091e-01  7.10002380e-01
  7.15852041e-01  7.17750639e-01  7.28129550e-01  7.32590794e-01
  7.35525793e-01  7.41250351e-01  7.46102850e-01  7.49287019e-01
  7.51915438e-01  7.55039671e-01  7.61019729e-01  7.71074142e-01
  7.72052180e-01  7.75305898e-01  7.78628398e-01  7.79550637e-01
  7.86874347e-01  7.90270828e-01  7.93129370e-01  7.93502257e-01
  7.97021931e-01  8.04997730e-01  8.14641236e-01  8.21598879e-01
  8.21856590e-01  8.25370160e-01  8.27064508e-01  8.33577374e-01
  8.42528508e-01  8.43803044e-01  8.47418166e-01  8.52974990e-01
  8.60812310e-01  8.66036190e-01  8.71159794e-01  8.76522908e-01
  8.80844330e-01  8.86577216e-01  8.88123938e-01  8.96388333e-01
  9.07200736e-01  9.10353334e-01  9.15362993e-01  9.25431516e-01
  9.35756776e-01  9.40790031e-01  9.50559945e-01  9.54733697e-01
  9.56747773e-01  9.57979137e-01  9.66809023e-01  9.71093911e-01
  9.76223609e-01  9.78363964e-01  9.85536005e-01  9.96915994e-01
  1.00149791e+00  1.01150160e+00  1.01699181e+00  1.02099569e+00
  1.03645378e+00  1.03780336e+00  1.04626866e+00  1.04851938e+00
  1.05612176e+00  1.05929865e+00  1.06413376e+00  1.06915685e+00
  1.07234341e+00  1.07963983e+00  1.08400976e+00  1.08476167e+00
  1.09508426e+00  1.10103140e+00  1.10531780e+00  1.11630961e+00
  1.12414895e+00  1.12966994e+00  1.13205228e+00  1.13661790e+00
  1.13757461e+00  1.15138442e+00  1.15856484e+00  1.17342268e+00
  1.17618914e+00  1.18263093e+00  1.18828617e+00  1.19819469e+00
  1.20707051e+00  1.21168454e+00  1.21344241e+00  1.21535013e+00
  1.21825256e+00  1.22544803e+00  1.22872119e+00  1.23263323e+00
  1.23549578e+00  1.23866259e+00  1.24787752e+00  1.24909662e+00
  1.25067579e+00  1.25694971e+00  1.26441768e+00  1.26744101e+00
  1.27252046e+00  1.28010163e+00  1.28371310e+00  1.29006149e+00
  1.29160074e+00  1.29909641e+00  1.30440314e+00  1.30690755e+00
  1.31061337e+00  1.31525941e+00  1.32247355e+00  1.32396333e+00
  1.33400383e+00  1.33921630e+00  1.34335301e+00  1.35289500e+00
  1.35987730e+00  1.37075498e+00  1.38333231e+00  1.39415663e+00
  1.39518454e+00  1.40289657e+00  1.41039750e+00  1.41600599e+00
  1.41798505e+00  1.42306092e+00  1.42590282e+00  1.44124111e+00
  1.45321135e+00  1.45540372e+00  1.45946151e+00  1.46208766e+00
  1.46248996e+00  1.46549398e+00  1.46947219e+00  1.47687880e+00
  1.47887887e+00  1.48306131e+00  1.48666341e+00  1.49219326e+00
  1.49833615e+00  1.50298002e+00  1.50610842e+00  1.51639384e+00
  1.52219870e+00  1.52763838e+00  1.53559136e+00  1.54199588e+00
  1.54675815e+00  1.54923066e+00  1.55201189e+00  1.55329837e+00
  1.55728788e+00  1.56531925e+00  1.57164171e+00  1.57297579e+00
  1.57807254e+00  1.58232654e+00  1.58671028e+00  1.59100034e+00
  1.59758943e+00  1.60031001e+00  1.60262843e+00  1.60706766e+00
  1.61100068e+00  1.61526477e+00  1.62180728e+00  1.62770432e+00
  1.63713163e+00  1.64118139e+00  1.65014754e+00  1.65394970e+00
  1.65751455e+00  1.66093598e+00  1.66312799e+00  1.66401336e+00
  1.67463621e+00  1.67933227e+00  1.68327175e+00  1.68759419e+00
  1.69433103e+00  1.69832125e+00  1.70165915e+00  1.70665846e+00
  1.71143813e+00  1.71275546e+00  1.71672004e+00  1.71883981e+00
  1.72453210e+00  1.72630699e+00  1.74580836e+00  1.74839522e+00
  1.75195455e+00  1.75640649e+00  1.76163911e+00  1.76781211e+00
  1.77174968e+00  1.77648801e+00  1.78351923e+00  1.79110793e+00
  1.79556524e+00  1.80257542e+00  1.80494072e+00  1.81378580e+00
  1.82265723e+00  1.83365852e+00  1.83475446e+00  1.84353975e+00
  1.84538521e+00  1.86326295e+00  1.86760158e+00  1.87303819e+00
  1.88509101e+00  1.88922225e+00  1.89144739e+00  1.90497238e+00
  1.91353713e+00  1.92020103e+00  1.92343959e+00  1.92784099e+00
  1.92960245e+00  1.93298553e+00  1.94248190e+00  1.94810158e+00
  1.95154852e+00  1.95931093e+00  1.96207192e+00  1.96870020e+00
  1.97678265e+00  1.98772223e+00  1.99725071e+00  2.00324970e+00
  2.01516096e+00  2.02783499e+00  2.03095087e+00  2.03806273e+00
  2.04511232e+00  2.04981463e+00  2.05404817e+00  2.05637245e+00
  2.06111076e+00  2.06569015e+00  2.08316263e+00  2.08659167e+00
  2.10184656e+00  2.10217051e+00  2.10321920e+00  2.10764410e+00
  2.11215626e+00  2.11441274e+00  2.12453455e+00  2.14313454e+00
  2.14695429e+00  2.15309532e+00  2.15540338e+00  2.15857991e+00
  2.16880212e+00  2.17743708e+00  2.18464894e+00  2.18766360e+00
  2.19660636e+00  2.20454195e+00  2.21743366e+00  2.22289241e+00
  2.22836108e+00  2.23322853e+00  2.23749447e+00  2.24797052e+00
  2.25357651e+00  2.26623975e+00  2.27382958e+00  2.27660183e+00
  2.28568119e+00  2.28751761e+00  2.29754465e+00  2.30512061e+00
  2.30881625e+00  2.32684983e+00  2.33003870e+00  2.34203228e+00
  2.35246241e+00  2.37182213e+00  2.37774357e+00  2.38065381e+00
  2.38963862e+00  2.40456161e+00  2.40751544e+00  2.41677208e+00
  2.42074521e+00  2.42735589e+00  2.43507071e+00  2.44488065e+00
  2.45757417e+00  2.46341036e+00  2.47559295e+00  2.47957213e+00
  2.49569680e+00  2.51101744e+00  2.51253557e+00  2.52699887e+00
  2.53463989e+00  2.53937945e+00  2.54120480e+00  2.54644783e+00
  2.54918298e+00  2.56271316e+00  2.57205197e+00  2.57606894e+00
  2.57978129e+00  2.58435257e+00  2.58683162e+00  2.59414800e+00
  2.59740682e+00  2.60353362e+00  2.60626933e+00  2.60868623e+00
  2.61494782e+00  2.61835470e+00  2.63356309e+00  2.64238598e+00
  2.64446874e+00  2.64615174e+00  2.65064285e+00  2.65528551e+00
  2.65698498e+00  2.65874622e+00  2.66515241e+00  2.66948293e+00
  2.67529166e+00  2.67678014e+00  2.68178857e+00  2.69475336e+00
  2.69916128e+00  2.70422869e+00  2.70684955e+00  2.71162359e+00
  2.71275730e+00  2.71768510e+00  2.72225708e+00  2.72709498e+00
  2.73260973e+00  2.73277625e+00  2.74295636e+00  2.74755445e+00
  2.75014145e+00  2.75266520e+00  2.75763088e+00  2.76278109e+00
  2.76457747e+00  2.76910232e+00  2.77201892e+00  2.77956796e+00
  2.78693755e+00  2.78951534e+00  2.79429479e+00  2.79708611e+00
  2.80138369e+00  2.80650781e+00  2.81178340e+00  2.81590773e+00
  2.81690774e+00  2.82540419e+00  2.82606041e+00  2.83325429e+00
  2.83597221e+00  2.84283565e+00  2.84523245e+00  2.84814119e+00
  2.85334578e+00  2.85630944e+00  2.85888235e+00  2.86102005e+00
  2.86745360e+00  2.87274633e+00  2.87521119e+00  2.87893087e+00
  2.88258488e+00  2.89704156e+00  2.90111181e+00  2.90583998e+00
  2.90718212e+00  2.91404313e+00  2.91773560e+00  2.92297235e+00
  2.93085300e+00  2.93371823e+00  2.93701410e+00  2.94549094e+00
  2.95356752e+00  2.95574273e+00  2.96773112e+00  2.97052568e+00
  2.97498317e+00  2.98465404e+00  2.98848035e+00  2.99156579e+00
  3.00161082e+00  3.00650917e+00  3.00764986e+00  3.02245856e+00
  3.02949300e+00  3.03243228e+00  3.04242494e+00  3.05145190e+00
  3.05892142e+00  3.06017304e+00  3.06857163e+00  3.07224370e+00
  3.08828263e+00  3.08850918e+00  3.09527371e+00  3.10044990e+00
  3.10702874e+00  3.11138941e+00  3.11512466e+00  3.11758664e+00
  3.12133285e+00  3.12503367e+00  3.13214075e+00  3.13500307e+00
  3.13612595e+00  3.14388766e+00  3.14569043e+00  3.15264785e+00
  3.15492068e+00  3.15631168e+00  3.16023947e+00  3.16077425e+00
  3.16266842e+00  3.16992909e+00  3.17454712e+00  3.17706274e+00
  3.18030442e+00  3.18443370e+00  3.19582394e+00  3.19684970e+00
  3.19973371e+00  3.20825715e+00  3.21055105e+00  3.22588290e+00
  3.23147944e+00  3.23407394e+00  3.24316089e+00  3.24396244e+00
  3.24745862e+00  3.25416814e+00  3.25554217e+00  3.26074109e+00
  3.26918520e+00  3.27571526e+00  3.28145362e+00  3.28711797e+00
  3.28831609e+00  3.29071058e+00  3.29701830e+00  3.29821502e+00
  3.31037807e+00  3.32352442e+00  3.32597161e+00  3.32766593e+00
  3.33300222e+00  3.33492449e+00  3.33819590e+00  3.34204417e+00
  3.34373040e+00  3.34761810e+00  3.35017828e+00  3.35520237e+00
  3.36300425e+00  3.36640961e+00  3.37703822e+00  3.38139592e+00
  3.38413777e+00  3.38682742e+00  3.39247901e+00  3.39365108e+00
  3.39895152e+00  3.40482804e+00  3.40706774e+00  3.41202419e+00
  3.41364366e+00  3.41921274e+00  3.42268685e+00  3.42490579e+00
  3.43013965e+00  3.43551448e+00  3.44160445e+00  3.44425772e+00
  3.44598250e+00  3.44649982e+00  3.45599970e+00  3.45908660e+00
  3.45923202e+00  3.46952400e+00  3.47008736e+00  3.47697022e+00
  3.48686339e+00  3.49271310e+00  3.49551705e+00  3.50038207e+00
  3.50639603e+00  3.51017615e+00  3.51166474e+00  3.51318489e+00
  3.52313760e+00  3.52432503e+00  3.53113165e+00  3.54062181e+00
  3.54256758e+00  3.54790898e+00  3.55664359e+00  3.56360749e+00
  3.56882992e+00  3.57250827e+00  3.57416902e+00  3.58093635e+00
  3.58708493e+00  3.59244205e+00  3.60377345e+00  3.61206345e+00
  3.61591503e+00  3.63326494e+00  3.64908887e+00  3.65587196e+00
  3.66329975e+00  3.66819323e+00  3.66960389e+00  3.67899432e+00
  3.68357998e+00  3.69928667e+00  3.70125884e+00  3.71305813e+00
  3.72491012e+00  3.73574709e+00  3.73784732e+00  3.73951502e+00
  3.75382653e+00  3.75757771e+00  3.76110856e+00  3.77084567e+00
  3.77377932e+00  3.78875010e+00  3.80047136e+00  3.81090878e+00
  3.81995523e+00  3.82333371e+00  3.83826116e+00  3.87083797e+00
  3.88420141e+00  3.89717620e+00  3.90694153e+00  3.91169883e+00
  3.92113959e+00  3.92316893e+00  3.92826289e+00  3.95377012e+00
  3.95959083e+00  3.97168276e+00  3.99250821e+00  3.99433730e+00
  4.00247195e+00  4.00677492e+00  4.00744418e+00  4.01827639e+00
  4.02413051e+00  4.03179529e+00  4.03373454e+00  4.03631428e+00
  4.04044978e+00  4.04611960e+00  4.06476306e+00  4.06978621e+00
  4.07324686e+00  4.08040449e+00  4.08951662e+00  4.09478133e+00
  4.09874783e+00  4.11076230e+00  4.12311621e+00  4.12835004e+00
  4.13062059e+00  4.14243970e+00  4.15838724e+00  4.16518732e+00
  4.16945338e+00  4.17333206e+00  4.18090155e+00  4.18555564e+00
  4.18750276e+00  4.19142187e+00  4.19628889e+00  4.19687068e+00
  4.20798951e+00  4.21392242e+00  4.22908973e+00  4.23535056e+00
  4.24009656e+00  4.24251042e+00  4.25154073e+00  4.26297685e+00
  4.27677831e+00  4.28702182e+00  4.29279459e+00  4.29840573e+00
  4.29934566e+00  4.30605138e+00  4.30752871e+00  4.31300720e+00
  4.32284951e+00  4.33104421e+00  4.34265624e+00  4.35323639e+00
  4.35893652e+00  4.37942921e+00  4.38516267e+00  4.38691426e+00
  4.41575970e+00  4.42204142e+00  4.44898612e+00  4.45973998e+00
  4.49242771e+00  4.50256437e+00  4.51564074e+00  4.51755713e+00
  4.55929579e+00  4.56536372e+00  4.57183356e+00  4.58920435e+00
  4.59502643e+00  4.61027184e+00  4.61468350e+00  4.63682232e+00
  4.65368229e+00  4.66593867e+00  4.68707583e+00  4.69519239e+00
  4.72343980e+00  4.72767794e+00  4.73064840e+00  4.75471741e+00
  4.76277043e+00  4.76444086e+00  4.78549966e+00  4.80514801e+00
  4.81302734e+00  4.82839578e+00  4.83821605e+00  4.85052506e+00
  4.85123012e+00  4.87064012e+00  4.87273355e+00  4.88973138e+00
  4.89285436e+00  4.89428940e+00  4.90258577e+00  4.91568958e+00
  4.92610474e+00  4.93331313e+00  4.93793293e+00  4.96899073e+00
  4.97930784e+00  4.99087125e+00  5.02629267e+00  5.03808741e+00
  5.06273536e+00  5.06607125e+00  5.07394467e+00  5.09966039e+00
  5.10674512e+00  5.12508814e+00  5.13382241e+00  5.14197987e+00
  5.18316019e+00  5.19916851e+00  5.21492608e+00  5.22466834e+00
  5.23527175e+00  5.24362572e+00  5.25471208e+00  5.26928890e+00
  5.27484112e+00  5.28161757e+00  5.30300874e+00  5.31864552e+00
  5.32409678e+00  5.32925882e+00  5.34823008e+00  5.40169709e+00
  5.42666181e+00  5.45217386e+00  5.47732747e+00  5.51288258e+00
  5.54524125e+00  5.56246232e+00  5.56690444e+00  5.57467905e+00
  5.59020313e+00  5.61414821e+00  5.62443280e+00  5.63302171e+00
  5.64874098e+00  5.66088168e+00  5.71783095e+00  5.77578846e+00
  5.79704901e+00  5.82978151e+00  5.83889519e+00  5.94734271e+00
  5.98958643e+00  6.03761415e+00  6.03924026e+00  6.08757372e+00
  6.15699463e+00  8.92455788e+00  9.49186750e+00  9.52909732e+00
  2.03092181e+01  2.22179068e+01  2.22577999e+01  2.23702747e+01
  2.24710540e+01  2.26053288e+01  2.26172303e+01  2.26230175e+01
  2.26237381e+01  2.26783552e+01  2.27103718e+01  2.27599919e+01
  2.27727942e+01  2.27854716e+01  2.27981910e+01  2.28000439e+01
  2.28087350e+01  2.28176064e+01  2.28426368e+01  2.28606413e+01
  2.28976497e+01  2.30181896e+01  2.30465468e+01  2.31889817e+01
  2.32044085e+01  2.32435255e+01  2.33792502e+01  3.24563077e+01
  3.25349553e+01  3.32970063e+01]
nelec by numeric integration = 212.00018487335686
    CPU time for vxc    171.90 sec, wall time     11.03 sec
    CPU time for df vj and vk    837.07 sec, wall time     64.18 sec
E1 = -7291.276159687627  Ecoul = 3323.1977774056677  Exc = -193.04248348845422
cycle= 4 E= -1563.56131225074  delta_E= 4.55e-12  |g|= 2.15e-07  |ddm|= 2.34e-06
    CPU time for cycle= 4   1023.89 sec, wall time     76.49 sec
  HOMO = -0.203950157897824  LUMO = -0.0809755219909249
  mo_energy =
[-8.90675844e+01 -1.44350391e+01 -1.43983852e+01 -1.43844783e+01
 -1.03054056e+01 -1.02886228e+01 -1.02839046e+01 -1.02838845e+01
 -1.02824355e+01 -1.02692130e+01 -1.02671147e+01 -1.02654324e+01
 -1.02635000e+01 -1.02598165e+01 -1.02483145e+01 -1.02480771e+01
 -1.02461974e+01 -1.02428254e+01 -1.02427172e+01 -1.02422100e+01
 -1.02421736e+01 -1.02420233e+01 -1.02419826e+01 -1.02404249e+01
 -1.02402452e+01 -1.02402183e+01 -1.02398638e+01 -1.02398246e+01
 -1.02375533e+01 -1.02375067e+01 -8.04542794e+00 -5.98113575e+00
 -5.97793552e+00 -5.97568274e+00 -1.00894763e+00 -9.98845467e-01
 -9.66729770e-01 -8.99122781e-01 -8.90110156e-01 -8.74969010e-01
 -8.51067952e-01 -8.37607379e-01 -7.95380577e-01 -7.92486938e-01
 -7.84705062e-01 -7.80610542e-01 -7.77483736e-01 -7.76157047e-01
 -7.62428122e-01 -7.36605070e-01 -6.77986041e-01 -6.64591831e-01
 -6.56515985e-01 -6.51785242e-01 -6.35426500e-01 -6.32510493e-01
 -6.29946011e-01 -6.07261086e-01 -5.91827771e-01 -5.81168955e-01
 -5.63547246e-01 -5.59764856e-01 -5.42221753e-01 -5.20320750e-01
 -5.08423229e-01 -5.06807954e-01 -5.01521284e-01 -4.93268863e-01
 -4.85822028e-01 -4.77955655e-01 -4.74913317e-01 -4.70703945e-01
 -4.61911566e-01 -4.53440373e-01 -4.49845891e-01 -4.46626318e-01
 -4.45848535e-01 -4.44352128e-01 -4.42803455e-01 -4.40796787e-01
 -4.28675491e-01 -4.15674004e-01 -4.06286061e-01 -4.01122247e-01
 -3.97471235e-01 -3.94537162e-01 -3.90704400e-01 -3.84412752e-01
 -3.78258831e-01 -3.75389382e-01 -3.71890925e-01 -3.64054484e-01
 -3.60067621e-01 -3.47235714e-01 -3.24534306e-01 -3.08271472e-01
 -2.98843383e-01 -2.88477323e-01 -2.85546679e-01 -2.84432362e-01
 -2.78672405e-01 -2.74646150e-01 -2.74368004e-01 -2.72963234e-01
 -2.43942936e-01 -2.03950158e-01 -8.09755220e-02 -3.89378274e-02
 -3.49434148e-02 -3.03269227e-02 -1.89949526e-02 -1.36489208e-02
 -1.10764385e-02  5.41492776e-04  8.53302790e-03  2.80296660e-02
  4.32498181e-02  4.98404981e-02  5.40971264e-02  5.62508679e-02
  6.37338629e-02  7.34831601e-02  7.61689037e-02  7.89872390e-02
  8.29200782e-02  8.94681351e-02  9.06145415e-02  9.37156971e-02
  9.53801410e-02  9.87513457e-02  1.05054070e-01  1.09330734e-01
  1.10497010e-01  1.17345972e-01  1.22795692e-01  1.27354134e-01
  1.27813076e-01  1.30219008e-01  1.31206465e-01  1.39280989e-01
  1.41463332e-01  1.44452743e-01  1.52585146e-01  1.60702192e-01
  1.70985696e-01  1.72831441e-01  1.81421561e-01  1.82623595e-01
  1.86786758e-01  1.91603096e-01  1.93334258e-01  1.95139650e-01
  2.02389908e-01  2.05873985e-01  2.08451227e-01  2.09812242e-01
  2.13606943e-01  2.16030105e-01  2.17445223e-01  2.20830373e-01
  2.26186096e-01  2.28178539e-01  2.30545458e-01  2.33568402e-01
  2.36389549e-01  2.37734173e-01  2.38940449e-01  2.40439842e-01
  2.42982748e-01  2.46459163e-01  2.51042443e-01  2.52550406e-01
  2.54516095e-01  2.57858503e-01  2.59487163e-01  2.64104296e-01
  2.67288995e-01  2.74630079e-01  2.75344005e-01  2.78291244e-01
  2.81793640e-01  2.83886234e-01  2.89831320e-01  2.96434917e-01
  2.97852349e-01  2.99866101e-01  3.05741896e-01  3.07622615e-01
  3.08880656e-01  3.13668769e-01  3.18391691e-01  3.20235199e-01
  3.22521017e-01  3.30318927e-01  3.31294139e-01  3.36808012e-01
  3.41116748e-01  3.45587485e-01  3.47095358e-01  3.49447579e-01
  3.56930313e-01  3.61267405e-01  3.62735349e-01  3.66461241e-01
  3.67169102e-01  3.70908612e-01  3.72155842e-01  3.75580732e-01
  3.78686119e-01  3.82616432e-01  3.84548623e-01  3.86367618e-01
  3.87251165e-01  3.90443620e-01  3.91726314e-01  3.95915874e-01
  3.99339634e-01  4.01255497e-01  4.07638674e-01  4.10484803e-01
  4.13071951e-01  4.15498240e-01  4.18237757e-01  4.20091458e-01
  4.22400247e-01  4.24444556e-01  4.25321059e-01  4.28771949e-01
  4.32449651e-01  4.33761687e-01  4.39777445e-01  4.42904202e-01
  4.44336235e-01  4.50933468e-01  4.53386648e-01  4.58847182e-01
  4.66938214e-01  4.68281891e-01  4.71698063e-01  4.75175598e-01
  4.78559721e-01  4.81740815e-01  4.83153816e-01  4.84485611e-01
  4.87713407e-01  4.90343162e-01  4.95137760e-01  4.96283276e-01
  5.02364437e-01  5.07570948e-01  5.11587808e-01  5.12661522e-01
  5.20721991e-01  5.22150567e-01  5.26942352e-01  5.29819053e-01
  5.32990989e-01  5.40890295e-01  5.42222723e-01  5.47391339e-01
  5.48873005e-01  5.60963173e-01  5.61573340e-01  5.66973992e-01
  5.72230036e-01  5.77757551e-01  5.80276496e-01  5.87098434e-01
  5.89309384e-01  5.93063633e-01  5.97549079e-01  6.01926211e-01
  6.13846041e-01  6.17297317e-01  6.21494518e-01  6.27988296e-01
  6.32137761e-01  6.36869512e-01  6.45349729e-01  6.47215472e-01
  6.47804288e-01  6.54048943e-01  6.58863198e-01  6.61652076e-01
  6.64281723e-01  6.65689385e-01  6.66904817e-01  6.73321201e-01
  6.73544646e-01  6.78394750e-01  6.82707444e-01  6.84678727e-01
  6.86043607e-01  6.88209808e-01  6.90197894e-01  6.95306605e-01
  6.99575823e-01  7.03671647e-01  7.06079084e-01  7.10002375e-01
  7.15852036e-01  7.17750634e-01  7.28129548e-01  7.32590790e-01
  7.35525791e-01  7.41250344e-01  7.46102846e-01  7.49287017e-01
  7.51915436e-01  7.55039668e-01  7.61019728e-01  7.71074139e-01
  7.72052177e-01  7.75305894e-01  7.78628395e-01  7.79550631e-01
  7.86874339e-01  7.90270825e-01  7.93129365e-01  7.93502248e-01
  7.97021928e-01  8.04997726e-01  8.14641233e-01  8.21598877e-01
  8.21856587e-01  8.25370148e-01  8.27064504e-01  8.33577372e-01
  8.42528506e-01  8.43803043e-01  8.47418164e-01  8.52974987e-01
  8.60812310e-01  8.66036186e-01  8.71159789e-01  8.76522904e-01
  8.80844326e-01  8.86577211e-01  8.88123936e-01  8.96388334e-01
  9.07200737e-01  9.10353328e-01  9.15362988e-01  9.25431513e-01
  9.35756769e-01  9.40790025e-01  9.50559942e-01  9.54733693e-01
  9.56747766e-01  9.57979127e-01  9.66809020e-01  9.71093909e-01
  9.76223603e-01  9.78363963e-01  9.85536001e-01  9.96915986e-01
  1.00149790e+00  1.01150160e+00  1.01699180e+00  1.02099568e+00
  1.03645378e+00  1.03780336e+00  1.04626866e+00  1.04851938e+00
  1.05612175e+00  1.05929864e+00  1.06413376e+00  1.06915685e+00
  1.07234341e+00  1.07963982e+00  1.08400976e+00  1.08476166e+00
  1.09508425e+00  1.10103140e+00  1.10531779e+00  1.11630961e+00
  1.12414894e+00  1.12966993e+00  1.13205227e+00  1.13661789e+00
  1.13757461e+00  1.15138442e+00  1.15856484e+00  1.17342268e+00
  1.17618914e+00  1.18263092e+00  1.18828617e+00  1.19819469e+00
  1.20707050e+00  1.21168454e+00  1.21344240e+00  1.21535012e+00
  1.21825255e+00  1.22544803e+00  1.22872118e+00  1.23263322e+00
  1.23549577e+00  1.23866259e+00  1.24787751e+00  1.24909662e+00
  1.25067578e+00  1.25694971e+00  1.26441768e+00  1.26744101e+00
  1.27252046e+00  1.28010162e+00  1.28371309e+00  1.29006148e+00
  1.29160074e+00  1.29909641e+00  1.30440314e+00  1.30690755e+00
  1.31061337e+00  1.31525941e+00  1.32247355e+00  1.32396332e+00
  1.33400383e+00  1.33921630e+00  1.34335301e+00  1.35289500e+00
  1.35987729e+00  1.37075498e+00  1.38333230e+00  1.39415663e+00
  1.39518454e+00  1.40289657e+00  1.41039750e+00  1.41600598e+00
  1.41798505e+00  1.42306092e+00  1.42590281e+00  1.44124111e+00
  1.45321134e+00  1.45540370e+00  1.45946150e+00  1.46208765e+00
  1.46248995e+00  1.46549397e+00  1.46947218e+00  1.47687879e+00
  1.47887887e+00  1.48306130e+00  1.48666340e+00  1.49219326e+00
  1.49833614e+00  1.50298001e+00  1.50610842e+00  1.51639384e+00
  1.52219869e+00  1.52763839e+00  1.53559135e+00  1.54199587e+00
  1.54675814e+00  1.54923065e+00  1.55201188e+00  1.55329836e+00
  1.55728788e+00  1.56531925e+00  1.57164170e+00  1.57297578e+00
  1.57807254e+00  1.58232654e+00  1.58671028e+00  1.59100034e+00
  1.59758943e+00  1.60031001e+00  1.60262843e+00  1.60706766e+00
  1.61100068e+00  1.61526477e+00  1.62180728e+00  1.62770431e+00
  1.63713162e+00  1.64118139e+00  1.65014753e+00  1.65394969e+00
  1.65751455e+00  1.66093597e+00  1.66312798e+00  1.66401336e+00
  1.67463619e+00  1.67933227e+00  1.68327174e+00  1.68759419e+00
  1.69433103e+00  1.69832125e+00  1.70165914e+00  1.70665845e+00
  1.71143812e+00  1.71275546e+00  1.71672003e+00  1.71883980e+00
  1.72453209e+00  1.72630698e+00  1.74580836e+00  1.74839521e+00
  1.75195454e+00  1.75640649e+00  1.76163910e+00  1.76781211e+00
  1.77174968e+00  1.77648801e+00  1.78351922e+00  1.79110793e+00
  1.79556524e+00  1.80257541e+00  1.80494072e+00  1.81378580e+00
  1.82265724e+00  1.83365852e+00  1.83475446e+00  1.84353975e+00
  1.84538521e+00  1.86326295e+00  1.86760157e+00  1.87303818e+00
  1.88509101e+00  1.88922225e+00  1.89144739e+00  1.90497238e+00
  1.91353713e+00  1.92020103e+00  1.92343959e+00  1.92784099e+00
  1.92960245e+00  1.93298552e+00  1.94248191e+00  1.94810158e+00
  1.95154852e+00  1.95931092e+00  1.96207191e+00  1.96870019e+00
  1.97678264e+00  1.98772223e+00  1.99725070e+00  2.00324969e+00
  2.01516095e+00  2.02783499e+00  2.03095087e+00  2.03806272e+00
  2.04511232e+00  2.04981462e+00  2.05404817e+00  2.05637245e+00
  2.06111075e+00  2.06569015e+00  2.08316262e+00  2.08659166e+00
  2.10184655e+00  2.10217050e+00  2.10321919e+00  2.10764409e+00
  2.11215625e+00  2.11441273e+00  2.12453455e+00  2.14313454e+00
  2.14695429e+00  2.15309531e+00  2.15540337e+00  2.15857990e+00
  2.16880211e+00  2.17743707e+00  2.18464894e+00  2.18766358e+00
  2.19660635e+00  2.20454195e+00  2.21743365e+00  2.22289240e+00
  2.22836106e+00  2.23322853e+00  2.23749445e+00  2.24797052e+00
  2.25357650e+00  2.26623974e+00  2.27382958e+00  2.27660182e+00
  2.28568118e+00  2.28751760e+00  2.29754465e+00  2.30512060e+00
  2.30881624e+00  2.32684983e+00  2.33003869e+00  2.34203227e+00
  2.35246240e+00  2.37182212e+00  2.37774356e+00  2.38065381e+00
  2.38963862e+00  2.40456160e+00  2.40751543e+00  2.41677207e+00
  2.42074521e+00  2.42735587e+00  2.43507070e+00  2.44488065e+00
  2.45757416e+00  2.46341036e+00  2.47559294e+00  2.47957212e+00
  2.49569679e+00  2.51101743e+00  2.51253557e+00  2.52699886e+00
  2.53463987e+00  2.53937944e+00  2.54120480e+00  2.54644782e+00
  2.54918298e+00  2.56271316e+00  2.57205196e+00  2.57606893e+00
  2.57978128e+00  2.58435257e+00  2.58683162e+00  2.59414799e+00
  2.59740682e+00  2.60353361e+00  2.60626932e+00  2.60868622e+00
  2.61494781e+00  2.61835469e+00  2.63356307e+00  2.64238598e+00
  2.64446873e+00  2.64615174e+00  2.65064284e+00  2.65528550e+00
  2.65698497e+00  2.65874621e+00  2.66515241e+00  2.66948292e+00
  2.67529165e+00  2.67678013e+00  2.68178856e+00  2.69475334e+00
  2.69916127e+00  2.70422869e+00  2.70684954e+00  2.71162358e+00
  2.71275730e+00  2.71768510e+00  2.72225707e+00  2.72709498e+00
  2.73260973e+00  2.73277624e+00  2.74295637e+00  2.74755445e+00
  2.75014144e+00  2.75266519e+00  2.75763087e+00  2.76278108e+00
  2.76457747e+00  2.76910231e+00  2.77201892e+00  2.77956795e+00
  2.78693754e+00  2.78951534e+00  2.79429478e+00  2.79708610e+00
  2.80138368e+00  2.80650780e+00  2.81178339e+00  2.81590772e+00
  2.81690773e+00  2.82540418e+00  2.82606040e+00  2.83325428e+00
  2.83597220e+00  2.84283564e+00  2.84523244e+00  2.84814118e+00
  2.85334577e+00  2.85630943e+00  2.85888235e+00  2.86102003e+00
  2.86745359e+00  2.87274632e+00  2.87521117e+00  2.87893086e+00
  2.88258488e+00  2.89704156e+00  2.90111180e+00  2.90583997e+00
  2.90718211e+00  2.91404312e+00  2.91773559e+00  2.92297234e+00
  2.93085299e+00  2.93371822e+00  2.93701409e+00  2.94549093e+00
  2.95356752e+00  2.95574273e+00  2.96773112e+00  2.97052567e+00
  2.97498316e+00  2.98465402e+00  2.98848034e+00  2.99156578e+00
  3.00161082e+00  3.00650917e+00  3.00764986e+00  3.02245855e+00
  3.02949300e+00  3.03243228e+00  3.04242493e+00  3.05145187e+00
  3.05892140e+00  3.06017302e+00  3.06857163e+00  3.07224369e+00
  3.08828262e+00  3.08850917e+00  3.09527370e+00  3.10044989e+00
  3.10702874e+00  3.11138940e+00  3.11512465e+00  3.11758663e+00
  3.12133284e+00  3.12503366e+00  3.13214074e+00  3.13500307e+00
  3.13612594e+00  3.14388764e+00  3.14569042e+00  3.15264784e+00
  3.15492068e+00  3.15631167e+00  3.16023946e+00  3.16077423e+00
  3.16266841e+00  3.16992909e+00  3.17454711e+00  3.17706273e+00
  3.18030441e+00  3.18443369e+00  3.19582394e+00  3.19684969e+00
  3.19973370e+00  3.20825715e+00  3.21055104e+00  3.22588289e+00
  3.23147943e+00  3.23407394e+00  3.24316088e+00  3.24396243e+00
  3.24745861e+00  3.25416813e+00  3.25554216e+00  3.26074108e+00
  3.26918520e+00  3.27571525e+00  3.28145361e+00  3.28711796e+00
  3.28831609e+00  3.29071057e+00  3.29701829e+00  3.29821501e+00
  3.31037806e+00  3.32352442e+00  3.32597160e+00  3.32766592e+00
  3.33300221e+00  3.33492448e+00  3.33819590e+00  3.34204416e+00
  3.34373040e+00  3.34761810e+00  3.35017827e+00  3.35520237e+00
  3.36300425e+00  3.36640959e+00  3.37703821e+00  3.38139592e+00
  3.38413777e+00  3.38682741e+00  3.39247900e+00  3.39365108e+00
  3.39895152e+00  3.40482803e+00  3.40706773e+00  3.41202418e+00
  3.41364365e+00  3.41921274e+00  3.42268684e+00  3.42490579e+00
  3.43013964e+00  3.43551447e+00  3.44160445e+00  3.44425772e+00
  3.44598249e+00  3.44649982e+00  3.45599969e+00  3.45908659e+00
  3.45923201e+00  3.46952399e+00  3.47008735e+00  3.47697021e+00
  3.48686338e+00  3.49271309e+00  3.49551705e+00  3.50038206e+00
  3.50639602e+00  3.51017614e+00  3.51166473e+00  3.51318489e+00
  3.52313759e+00  3.52432502e+00  3.53113164e+00  3.54062180e+00
  3.54256757e+00  3.54790897e+00  3.55664358e+00  3.56360748e+00
  3.56882991e+00  3.57250827e+00  3.57416902e+00  3.58093635e+00
  3.58708492e+00  3.59244205e+00  3.60377345e+00  3.61206344e+00
  3.61591503e+00  3.63326494e+00  3.64908887e+00  3.65587195e+00
  3.66329974e+00  3.66819322e+00  3.66960388e+00  3.67899431e+00
  3.68357997e+00  3.69928666e+00  3.70125883e+00  3.71305812e+00
  3.72491012e+00  3.73574708e+00  3.73784730e+00  3.73951501e+00
  3.75382653e+00  3.75757770e+00  3.76110855e+00  3.77084566e+00
  3.77377931e+00  3.78875009e+00  3.80047135e+00  3.81090876e+00
  3.81995522e+00  3.82333371e+00  3.83826116e+00  3.87083796e+00
  3.88420140e+00  3.89717618e+00  3.90694151e+00  3.91169883e+00
  3.92113957e+00  3.92316893e+00  3.92826288e+00  3.95377011e+00
  3.95959082e+00  3.97168276e+00  3.99250820e+00  3.99433729e+00
  4.00247194e+00  4.00677491e+00  4.00744416e+00  4.01827638e+00
  4.02413050e+00  4.03179528e+00  4.03373453e+00  4.03631428e+00
  4.04044976e+00  4.04611960e+00  4.06476305e+00  4.06978620e+00
  4.07324685e+00  4.08040448e+00  4.08951661e+00  4.09478132e+00
  4.09874782e+00  4.11076229e+00  4.12311620e+00  4.12835004e+00
  4.13062058e+00  4.14243970e+00  4.15838724e+00  4.16518731e+00
  4.16945338e+00  4.17333206e+00  4.18090154e+00  4.18555562e+00
  4.18750274e+00  4.19142185e+00  4.19628889e+00  4.19687068e+00
  4.20798949e+00  4.21392241e+00  4.22908971e+00  4.23535055e+00
  4.24009655e+00  4.24251041e+00  4.25154071e+00  4.26297684e+00
  4.27677829e+00  4.28702181e+00  4.29279458e+00  4.29840572e+00
  4.29934564e+00  4.30605137e+00  4.30752869e+00  4.31300720e+00
  4.32284950e+00  4.33104421e+00  4.34265623e+00  4.35323639e+00
  4.35893651e+00  4.37942921e+00  4.38516267e+00  4.38691425e+00
  4.41575971e+00  4.42204142e+00  4.44898611e+00  4.45973997e+00
  4.49242770e+00  4.50256436e+00  4.51564071e+00  4.51755711e+00
  4.55929578e+00  4.56536370e+00  4.57183356e+00  4.58920434e+00
  4.59502642e+00  4.61027183e+00  4.61468349e+00  4.63682231e+00
  4.65368228e+00  4.66593866e+00  4.68707583e+00  4.69519238e+00
  4.72343978e+00  4.72767792e+00  4.73064837e+00  4.75471739e+00
  4.76277041e+00  4.76444085e+00  4.78549965e+00  4.80514801e+00
  4.81302734e+00  4.82839577e+00  4.83821604e+00  4.85052500e+00
  4.85123011e+00  4.87064010e+00  4.87273354e+00  4.88973137e+00
  4.89285436e+00  4.89428938e+00  4.90258576e+00  4.91568958e+00
  4.92610474e+00  4.93331311e+00  4.93793288e+00  4.96899073e+00
  4.97930783e+00  4.99087124e+00  5.02629266e+00  5.03808741e+00
  5.06273535e+00  5.06607122e+00  5.07394465e+00  5.09966038e+00
  5.10674513e+00  5.12508813e+00  5.13382241e+00  5.14197986e+00
  5.18316017e+00  5.19916850e+00  5.21492606e+00  5.22466830e+00
  5.23527173e+00  5.24362570e+00  5.25471206e+00  5.26928888e+00
  5.27484110e+00  5.28161754e+00  5.30300872e+00  5.31864549e+00
  5.32409676e+00  5.32925880e+00  5.34823006e+00  5.40169708e+00
  5.42666180e+00  5.45217385e+00  5.47732746e+00  5.51288257e+00
  5.54524125e+00  5.56246231e+00  5.56690443e+00  5.57467905e+00
  5.59020312e+00  5.61414818e+00  5.62443277e+00  5.63302167e+00
  5.64874097e+00  5.66088167e+00  5.71783093e+00  5.77578842e+00
  5.79704899e+00  5.82978150e+00  5.83889518e+00  5.94734269e+00
  5.98958642e+00  6.03761414e+00  6.03924026e+00  6.08757370e+00
  6.15699462e+00  8.92455791e+00  9.49186753e+00  9.52909735e+00
  2.03092182e+01  2.22179068e+01  2.22577999e+01  2.23702747e+01
  2.24710540e+01  2.26053288e+01  2.26172303e+01  2.26230174e+01
  2.26237380e+01  2.26783552e+01  2.27103718e+01  2.27599919e+01
  2.27727942e+01  2.27854716e+01  2.27981909e+01  2.28000438e+01
  2.28087350e+01  2.28176064e+01  2.28426368e+01  2.28606413e+01
  2.28976497e+01  2.30181896e+01  2.30465468e+01  2.31889817e+01
  2.32044086e+01  2.32435255e+01  2.33792502e+01  3.24563076e+01
  3.25349553e+01  3.32970063e+01]
nelec by numeric integration = 212.00018487335765
    CPU time for vxc    177.32 sec, wall time     11.50 sec
    CPU time for df vj and vk    834.10 sec, wall time     63.64 sec
E1 = -7291.276160447268  Ecoul = 3323.1977784103497  Exc = -193.04248373350129
Extra cycle  E= -1563.56131225075  delta_E= -5.46e-12  |g|= 3.8e-07  |ddm|= 5.66e-07
    CPU time for scf_cycle   6766.44 sec, wall time    540.96 sec
    CPU time for SCF   6766.44 sec, wall time    540.96 sec
converged SCF energy = -1563.56131225075
SCF Done after 541.00 seconds
after SCF memory used: 12.01 GB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
hdiag shape (100064,)
n_occ =  106
n_vir =  944
max_vir =  297
A_size =  100064
A_reduced_size = 31482
a_x = 0.25
beta = 0.6575
alpha = 1.54
Q-Gamma tensors building time = 0.78
after Q matrix memory used: 12.20 GB
TDDFT
|-------- In-house Developed TDDFT Starts ---------|
Residual conv = 1e-05

Number of excited states = 20
Initial guess:   sTDDFT
Preconditioner:  sTDDFT
A matrix size =  100064
setting initial guess
sTDDFT Convergence tol = 1.00e-03
sTDDFT diagonalization Converged
after  5 iterations; 49.8119 seconds
final subspace 121
max_norm =  8.84e-04
MVcost     15.9602s 32.04%
GScost     29.1952s 58.61%
subgencost 3.1973s 6.42%
subcost    0.2088s 0.42%
sTDDFT excitation energy:
[2.61596107 3.45195244 3.63957838 3.7706436  3.77722247 3.91366449
 4.09856498 4.1823258  4.21372934 4.39512871 4.43155523 4.46326076
 4.4676322  4.60953803 4.65815904 4.72566842 4.73676131 4.77032569
 4.80252979 4.81530409 4.95422962 5.21438045 5.21589803 5.25179004
 5.27864791 5.30596963 5.36915017 5.45321866]
new_m = 28
initial guess done

iteration 0
beginning of step 0 memory used: 14.18 GB
    CPU time for df vj and vk  23415.10 sec, wall time   1650.71 sec
subspace size: 28
Maximum residual norm:  8.24e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 7 steps; 46.4174 s
final subspace 107
max_norm =  6.78e-03
initial_cost 1.8230s  3.93%
MVcost     14.6177s  31.49%
GScost     23.9903s  51.68%
subgencost 4.7845s  10.31%
subcost    0.2286s  0.49%
m & new_m 28 48

iteration 1
beginning of step 1 memory used: 14.32 GB
    CPU time for df vj and vk  16740.48 sec, wall time   1174.20 sec
subspace size: 48
Maximum residual norm:  2.11e-02
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 8 steps; 28.2000 s
final subspace 120
max_norm =  8.62e-03
initial_cost 0.8607s  3.05%
MVcost     7.3006s  25.89%
GScost     16.0811s  57.03%
subgencost 2.6800s  9.50%
subcost    0.2631s  0.93%
m & new_m 48 68

iteration 2
beginning of step 2 memory used: 14.35 GB
    CPU time for df vj and vk  16696.97 sec, wall time   1167.09 sec
subspace size: 68
Maximum residual norm:  7.44e-03
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 8 steps; 33.3795 s
final subspace 114
max_norm =  8.93e-03
initial_cost 1.0171s  3.05%
MVcost     10.0545s  30.12%
GScost     17.6364s  52.84%
subgencost 3.3629s  10.07%
subcost    0.2199s  0.66%
m & new_m 68 88

iteration 3
beginning of step 3 memory used: 14.38 GB
    CPU time for df vj and vk  16717.95 sec, wall time   1173.80 sec
subspace size: 88
Maximum residual norm:  2.22e-03
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 8 steps; 26.7480 s
final subspace 116
max_norm =  7.04e-03
initial_cost 0.7592s  2.84%
MVcost     7.6934s  28.76%
GScost     14.5755s  54.49%
subgencost 2.5555s  9.55%
subcost    0.2383s  0.89%
m & new_m 88 108

iteration 4
beginning of step 4 memory used: 14.41 GB
    CPU time for df vj and vk  16667.48 sec, wall time   1166.60 sec
subspace size: 108
Maximum residual norm:  5.51e-04
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 9 steps; 26.5779 s
final subspace 112
max_norm =  6.98e-03
initial_cost 0.8606s  3.24%
MVcost     7.4867s  28.17%
GScost     13.8875s  52.25%
subgencost 2.9890s  11.25%
subcost    0.2872s  1.08%
m & new_m 108 128

iteration 5
beginning of step 5 memory used: 14.43 GB
    CPU time for df vj and vk  16718.60 sec, wall time   1167.90 sec
subspace size: 128
Maximum residual norm:  1.26e-04
unconverged states [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 9 steps; 34.2358 s
final subspace 115
max_norm =  6.49e-03
initial_cost 0.6942s  2.03%
MVcost     14.7524s  43.09%
GScost     14.0325s  40.99%
subgencost 3.2728s  9.56%
subcost    0.3960s  1.16%
m & new_m 128 148

iteration 6
beginning of step 6 memory used: 14.42 GB
    CPU time for df vj and vk  16686.77 sec, wall time   1167.53 sec
subspace size: 148
Maximum residual norm:  2.10e-05
unconverged states [0, 2, 3, 4, 7, 13, 14, 15, 16, 17, 18, 19]
sTDDFT_preconditioner conv 0.01
sTDDFT preconditioning Done
after 10 steps; 16.6896 s
final subspace 86
max_norm =  7.72e-03
initial_cost 0.3034s  1.82%
MVcost     5.3795s  32.23%
GScost     7.8115s  46.80%
subgencost 2.2799s  13.66%
subcost    0.1947s  1.17%
m & new_m 148 160

iteration 7
beginning of step 7 memory used: 14.34 GB
    CPU time for df vj and vk  10054.31 sec, wall time    709.15 sec
subspace size: 160
Maximum residual norm:  7.21e-06
TDDFT precedure Done

============= TDDFT Calculation Done ==============
after 8 iterations 11929.25 s
Final subspace  160
preconditioning cost 213.3420 0.02 %
max_norm =  7.21e-06
Total TDDFT memory used: 14.38 GB
Excited State energies (eV) =
 [2.85016945 3.63286604 3.8820385  3.92784942 3.94279577 4.13217992
 4.28855177 4.39382413 4.43452378 4.55690135 4.66005375 4.70181993
 4.76074229 4.84856175 4.8624639  4.9465329  4.95520253 4.99849109
 5.059587   5.08464702]
xyzfile = 49_Triphenylamino_5.xyz
checkfile = True
method = RKS
functional = pbe0
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 20
pytd = False
TDA = False
TDDFT = True
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
ip_options = [0]
conv_tolerance = 1e-05
initial_TOL = 0.001
precond_TOL = 0.01
extrainitial = 8
max = 30
eigensolver_tol = 1e-05
memory = 50000
verbose = 5
beta = []
alpha = []
|-------- In-house Developed TDDFT Ends ----------|
