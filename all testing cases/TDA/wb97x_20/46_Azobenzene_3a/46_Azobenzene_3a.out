curpath /scratch/pbsjobs/job.15983092.hpc
lib.num_threads() =  16
at beginning memory used: 51.84765625 MB
mol.max_memory 50000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul6_GS.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
#from einsum2 import einsum2 as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

# from pyscf.tools import molden
# from pyscf.dft import xcfun

# wb97x methanol, sTDA[ 6.46739329  8.18181719  8.38358186  9.45195086  9.52132657  9.98634407
#  10.57628203 11.22108803 11.23872459 11.57456576]

# wb97x methanol, sTDDFT [6.46636223 8.18031038 8.38140358 9.45010938 9.50610109]
# truncate 40 eV         [6.46748128 8.18219018 8.38315179 9.45216734 9.51268853]
#
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA',  help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=bool,  default=False, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default='NA',  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='NA',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=bool,  default=True,  help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default='3',   help='0-9, 9 is best')

parser.add_argument('-n',  '--nstates',                     type=int,   default = 4,      help='number of excited states')
parser.add_argument('-pytd',  '--pytd',                     type=bool,  default = False , help='whether to compare with PySCF TDDFT')

parser.add_argument('-TDA','--TDA',                         type=bool,  default = False, help='perform TDA')
parser.add_argument('-TDDFT','--TDDFT',                     type=bool,  default = False, help='perform TDDFT')
parser.add_argument('-dynpol','--dynpol',                   type=bool,  default = False, help='perform dynamic polarizability')
parser.add_argument('-omega','--dynpol_omega',              type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
parser.add_argument('-stapol','--stapol',                   type=bool,  default = False, help='perform static polarizability')

parser.add_argument('-sTDA','--sTDA',                       type=bool,  default = False, help='perform sTDA calculation')
parser.add_argument('-sTDDFT','--sTDDFT',                   type=bool,  default = False, help='perform sTDDFT calculation')
parser.add_argument('-TT','--Truncate_test',                type=bool,  default = False, help='test the wall time for different virtual truncation')

parser.add_argument('-TV','--truncate_virtual',             type=float, default = 0, help='the threshold to truncate virtual orbitals, in eV')

parser.add_argument('-o1', '--TDA_options',                 type=int,   default = [0], nargs='+', help='0-7')
parser.add_argument('-o2', '--TDDFT_options',               type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o3', '--dynpol_options',              type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o4', '--stapol_options',              type=int,   default = [0], nargs='+', help='0-3')

parser.add_argument('-t1',  '--TDA_tolerance',              type=float, default= 1e-5, help='residual norm conv for TDA')
parser.add_argument('-t2',  '--TDDFT_tolerance',            type=float, default= 1e-5, help='residual norm conv for TDDFT')
parser.add_argument('-t3',  '--dynpol_tolerance',           type=float, default= 1e-5, help='residual norm conv for dynamic polarizability')
parser.add_argument('-t4',  '--stapol_tolerance',           type=float, default= 1e-5, help='residual norm conv for static polarizability')

parser.add_argument('-max',  '--max',                       type=int,   default= 30,   help='max iterations')

parser.add_argument('-it1', '--TDA_initialTOL',             type=float, default= 1e-3, help='conv for sTDA inital guess')
parser.add_argument('-it2', '--TDDFT_initialTOL',           type=float, default= 1e-3, help='conv for sTDDFT inital guess')
parser.add_argument('-it3', '--dynpol_initprecTOL',         type=float, default= 1e-2, help='conv for s-dynamic polarizability inital guess and precond')
parser.add_argument('-it4', '--stapol_initprecTOL',         type=float, default= 1e-2, help='conv for s-static polarizability inital guess and precond')

parser.add_argument('-pt1', '--TDA_precondTOL',             type=float, default= 1e-2, help='conv for TDA preconditioner')
parser.add_argument('-pt2', '--TDDFT_precondTOL',           type=float, default= 1e-2, help='conv for TDDFT preconditioner')

parser.add_argument('-ei1', '--TDA_extrainitial',           type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
parser.add_argument('-ei2', '--TDDFT_extrainitial',         type=int,   default= 8,    help='number of extral TDDFT initial guess vectors, 0-8')
parser.add_argument('-ei3n','--TDDFT_extrainitial_3n',      type=bool,  default= False,help='number of extral TDDFT initial guess vectors, 3state')

parser.add_argument('-et', '--eigensolver_tol',             type=float, default= 1e-5, help='conv for new guess generator in new_ES')
parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')

parser.add_argument('-be', '--beta',                        type=float, default= [],    nargs='+', help='beta = 0.83')
parser.add_argument('-al', '--alpha',                       type=float, default= [],    nargs='+', help='alpha = 0.83')

args = parser.parse_args()
################################################


########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

# info = psutil.virtual_memory()
# print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

f = open(args.xyzfile)
atom_coordinates = f.readlines()
del atom_coordinates[:2]
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile == True:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'
    # to use the chk file as scf input


mf.conv_tol = 1e-10

print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
kernel_t = kernel_1 - kernel_0
print ('SCF Done after ', round(kernel_t, 4), 'seconds')

show_memory_info('after SCF')

#################################################################
# Collect everything needed from PySCF
Qstart = time.time()
Natm = mol.natm
mo_occ = mf.mo_occ
n_occ = len(np.where(mo_occ > 0)[0])
#mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
n_vir = len(np.where(mo_occ == 0)[0])
#################################################
# generate matrix vector multiplication function
td = tddft.TDA(mf)
TDA_vind, hdiag = td.gen_vind(mf)

TD = tddft.TDDFT(mf)
TDDFT_vind, Hdiag = TD.gen_vind(mf)

A_size = n_occ * n_vir

# return AV
def TDA_matrix_vector(V):
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1
#################################################

##################################################################################################
# create a function for dictionary of chemical hardness, by mappig two iteratable subject, list
# list of elements
elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', 'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb','Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
#list of chemical hardness, they are floats, containing elements 1-94, in Hartree
hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
HARDNESS = dict(zip(elements,hardness))
#function to return chemical hardness from dictionary HARDNESS
def Hardness(atom_id):
    atom = mol.atom_pure_symbol(atom_id)
    return HARDNESS[atom]

################################################################################
# This block is the function to produce orthonormalized coefficient matrix C
def matrix_power(S,a):
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    #X == S^a
    return X

def matrix_power2(S):
    s,ket = np.linalg.eigh(S)
    s_sqrt = s**0.5
    s_inv = 1/s_sqrt

    S1 = np.dot(ket*s_sqrt,ket.T)
    S2 = np.dot(ket*s_inv,ket.T)

    #S1 == S^1/2
    #S2 == S^-1/2
    return S1, S2

def orthonormalize(C):
    X = matrix_power(mf.get_ovlp(), 0.5)
    # S = mf.get_ovlp() #.get_ovlp() is basis overlap matrix
    # S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
    C = np.dot(X,C)
    return C

################################################################################
def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']# NA is for Hartree-Fork
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    DF_ax = dict(zip(hybride_F, hybride_paramt))
    #Zhao, Y. and Truhlar, D.G., 2006. Density functional for spectroscopy: no long-range self-interaction error, good performance for Rydberg and charge-transfer states, and better performance on average than B3LYP for ground states. The Journal of Physical Chemistry A, 110(49), pp.13126-13130.

    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]

    elif args.functional in hybride_F:
        beta1 = 0.2
        beta2 = 1.83
        alpha1 = 1.42
        alpha2 = 0.48

        a_x = DF_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)
    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

# creat \eta matrix

def gen_gammaJK():
    Natm = mol.natm
    a = [Hardness(atom_id) for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2

    #Inter-particle distance array
    # unit == ’Bohr’, Its value is 5.29177210903(80)×10^(−11) m
    R = pyscf.gto.mole.inter_distance(mol, coords=None)
    # creat GammaK and GammaK matrix
    GammaJ = (R**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

GammaJ, GammaK = gen_gammaJK()

def generateQ():
    N_bf = len(mo_occ)
    C = mf.mo_coeff
    # mf.mo_coeff is the coefficient matrix
    C = orthonormalize(C)
    # C is orthonormalized coefficient matrix, N_bf * N_bf
    # np.dot(C.T,C) is a an identity matrix
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    #N_bf is number Atomic orbitals = n_occ+n_vir
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

q_tensors = generateQ()

''' if no truncation, max_vir = n_vir and n_occ + max_vir = N_bf '''
print('hdiag', hdiag.shape)
delta_diag_A = hdiag.reshape(n_occ, n_vir)

def gen_maxvir(tol_eV = args.truncate_virtual):
    if tol_eV != 0:
        homo_vir = delta_diag_A[-1,:].tolist()
        # print(delta_diag_A[-1,:]*27.211386245988)
        tol = tol_eV/27.211386245988
        for i in range(len(homo_vir)):
            if homo_vir[i] >= tol:
                max_vir = i
                break
            else:
                max_vir = n_vir
    else:
        max_vir = n_vir
    return max_vir

max_vir = gen_maxvir()
print('n_occ = ', n_occ)
print('n_vir = ', n_vir)
print('max_vir = ', max_vir)

A_reduced_size = n_occ * max_vir

def gen_QJK(max_vir=max_vir):

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)


    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()
# pre-calculate and store the Q-Gamma rank 3 tensor
Qend = time.time()

Q_time = Qend - Qstart
print('Q-Gamma tensors building time =', round(Q_time, 4))
################################################################################

show_memory_info('after Q matrix')


################################################################################
# This block is to define on-the-fly two electron intergeral (pq|rs)
# A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v

# iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
# ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)

max_vir_hdiag = delta_diag_A[:,:max_vir]

def gen_iajb_ijab_ibja_delta_fly(max_vir=max_vir, \
                                q_ij=q_ij, \
                                q_ab=q_ab, \
                                q_ia=q_ia , \
                                GK_q_jb=GK_q_jb, \
                                GJ_q_ab=GJ_q_ab):

    def iajb_fly(V):
        start = time.time()
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        end = time.time()
        # print('iajb =', round(end - start,4))
        return iajb_V


    def ijab_fly(V):
        start = time.time()
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        end = time.time()
        # print('ijab =', round(end - start,4))
        return ijab_V

    def ibja_fly(V):
        start = time.time()
        # the Forck exchange energy in B matrix
        ''' (ib|ja) '''
        # GK_q_jb_V = einsum("Aja,jbm->Abam", GK_q_jb, V)
        # ibja_V = einsum("Aib,Abam->iam", q_ia, GK_q_jb_V)
        # [ 6.46636595  8.18031516  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]

        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        #[ 6.46636595  8.18031515  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]
        end = time.time()
        # print('ibja =', round(end - start,4))
        return ibja_V

    def delta_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_diag_A, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir=max_vir, \
                            iajb_fly = iajb_fly, \
                            ijab_fly = ijab_fly, \
                            ibja_fly = ibja_fly, \
                            delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        # sTDA_A * V
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''''return AX+BY and AY+BX'''''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        '''sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        '''sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)'''

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        ''' return (A+B)X '''
        ''' sTDA_A = delta_fly(V) + 4*iajb_fly(V) \
                    - ijab_fly(V) - a_x*ibja_fly(V)'''
        X = X.reshape(n_occ, max_vir, -1)

        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)

        U = U.reshape(n_occ*max_vir, -1)
        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

################################################################################

################################################################################
# orthonormalization of guess_vectors
def Gram_Schmidt_bvec(A, bvec):
    ''' orthonormalize vector b against all A vectors'''
    ''' b = b - A*(A.T*b)'''
    if A.shape[1] != 0:
        # suppose A is orthonormalized
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)

    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    # V is a vectors holder
    # count is the amount of vectors that already sit in the holder
    nvec = np.shape(vecs)[1]
    # amount of new vectors intended to fill in the V
    # count will be final amount of vectors in V
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize

        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count

    return V, new_count


def S_symmetry_orthogonal(x,y):

    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    # print('x.Ty', np.dot(new_x.T,new_y))
    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A


################################################################################
# define the orthonormality of a matrix A as the norm of (A.T*A - I)
def check_orthonormal(A):
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c
################################################################################

################################################################################
def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    # put X_new into V, and Y_new into W
    # m is the amount of vectors that already on V or W
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]
    # amount of new vectors intended to fill in the V_holder and W_holder
    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):

        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)

        # x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m
################################################################################



################################################################################
def solve_AX_Xla_B(A, omega, Q):
    ''' AX - XΩ  = Q '''

    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)

    X *= Qnorm
    return X
################################################################################
def TDA_A_diag_initial_guess(m, V, hdiag = hdiag):
    # m is the amount of initial guesses
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V

def sTDA_initial_guess(m, V):
    sTDA_A_eigenkets = Davidson0(m)
    # print('sTDA_A_eigenkets', sTDA_A_eigenkets.shape)
    #diagonalize sTDA_A amtrix
    V[:, :m] = sTDA_A_eigenkets[:,:m]
    return V
################################################################################

################################################################################
def TDA_A_diag_preconditioner(arg1, arg2, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None, arg8=None, hdiag = hdiag):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    # preconditioners for each corresponding residual
    residual = arg1
    sub_eigenvalue = arg2
    current_dic = arg3

    k = np.shape(residual)[1]
    t = 1e-14

    # print('hdiag in preconditioner', hdiag.reshape(-1,1).shape)
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    D = np.where( abs(D) < t, np.sign(D)*t, D) # force all values not in domain (-t, t)

    new_guess = residual/D

    return new_guess, current_dic
################################################################################


################################################################################
# sTDA preconditioner
def sTDA_preconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """ (sTDA_A - λ*I)^-1 B = X """
    """ AX - Xλ = B """
    """ columns in B are residuals (in Davidson's loop) to be preconditioned, """
    residuals = arg1
    eigen_lambda = arg2
    current_dic = arg3

    precondition_start = time.time()

    # N_rows = np.shape(B)[0]
    A_reduced_size = n_occ*max_vir
    residuals = residuals.reshape(n_occ,n_vir,-1)
    B = residuals[:,:max_vir,:]


    B = B.reshape(A_reduced_size,-1)
    # B = B.reshape(A_reduced_size, -1)
    N_vectors = B.shape[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = args.TDA_precondTOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors

    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    hdiag_m_lambda = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    hdiag_m_lambda = np.where( abs(hdiag_m_lambda) < t, np.sign(hdiag_m_lambda)*t, hdiag_m_lambda) # <t: returns np.sign(D)*t; else: D

    hdiag_m_lambda = hdiag_m_lambda.reshape(n_occ, n_vir, -1)
    D = hdiag_m_lambda[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count

    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0
    ####################################################################################
    for i in range(max):
        substart = time.time()
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        subend = time.time()
        subgencost += subend - substart
        #project sTDA_A matrix and vector B into subspace
        sub_A = symmetrize(sub_A)
        # size of subspace
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append({'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        GSstart = time.time()
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart


        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________')
        print('sTDA preconditioning failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('sTDA Preconditioning Done after ', i, 'steps; ', \
                round(precondition_time, 4), 'seconds')
        print('subgencost',round(subgencost,4),round(subgencost/precondition_time *100, 2),"%")
        print('mvcost',round(mvcost,4),round(mvcost/precondition_time *100, 2),"%")
        print('GScost', round(GScost,4), round(GScost/precondition_time *100, 2),"%")
        print('subcost', round(subcost,4), round(subcost/precondition_time *100, 2),"%")
    full_guess *= bnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = B2'''
        B2 = residuals[:,max_vir:,:]
        B2 = B2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = hdiag_m_lambda[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (B2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)
    return U, current_dic
################################################################################

################################################################################
# K_inv # exacty the same function with sTDA_preconditioner, just no dic
# used in Jacobi_precodnitioner
def K_inv(B, eigen_lambda):
    # to solve K^(-1)y and K^(-1)u
    # K = A-λ*I
    # (sTDA_A - eigen_lambda*I)^-1 B = X
    # AX - Xλ = B
    # columns in B are residuals or current guess
    precondition_start = time.time()

    N_rows = np.shape(B)[0]
    B = B.reshape(N_rows, -1)
    N_vectors = np.shape(B)[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = 1e-2    # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((N_rows, (max+1)*N_vectors))
    W = np.zeros_like(V)
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors
    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    D = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    D= np.where( abs(D) < t, np.sign(D)*t, D) # <t: returns np.sign(D)*t; else: D
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count
    ############################################################################
    for i in range(0, max):
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        #project sTDA_A matrix and vector B into subspace
        # size of subspace
        m = np.shape(sub_A)[0]
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ K inverse Failed Due to Iteration Limit _________________')
        print('K inverse  failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('K inverse Done after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
    return full_guess*bnorm
################################################################################

################################################################################
def Jacobi_preconditioner(arg1, arg2, arg3, arg4, arg5=None, arg6=None, arg7=None, arg8=None):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """    (1-uu*)(A-λ*I)(1-uu*)t = -B"""
    """    B is residual, we want to solve t """
    """    z approximates t """
    """    z = (A-λ*I)^(-1)*(-B) + α(A-λ*I)^(-1) * u"""
    """    where α = [u*(A-λ*I)^(-1)y]/[u*(A-λ*I)^(-1)u] """
    """    first is to solve (A-λ*I)^(-1)y and (A-λ*I)^(-1)u """

    B = arg1
    eigen_lambda = arg2
    current_dic = arg3
    current_guess = arg4

    u = current_guess
    K_inv_y = K_inv(-B, eigen_lambda)
    K_inv_u = K_inv(current_guess, eigen_lambda)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d

    z = K_inv_y -  Alpha*K_inv_u
    return z, current_dic
################################################################################

################################################################################
# original simple Davidson, to solve eigenvalues and eigenkets of sTDA_A matrix
def Davidson0(k):
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    tol = args.TDA_initialTOL # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    V = TDA_A_diag_initial_guess(m, V, hdiag = max_vir_hdiag)
    W[:, :m] = sTDA_mv(V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ############################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index], hdiag = max_vir_hdiag)
        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        m = new_m
    ############################################################################


    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 4), 'seconds' )
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*27.211386245988)

    # U = np.zeros((n_occ * n_vir, k))
    # U[:n_occ * max_vir,:] = full_guess

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    return U
################################################################################


################################################################################
def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    ''' [ a b ] x - [ σ   π] x  Ω = p '''
    ''' [ b a ] y   [-π  -σ] y    = q '''

    ##############################
    ''' normalize the RHS '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)
    # print('pqnorm', pqnorm)
    p /= pqnorm
    q /= pqnorm
    ##############################
    d = abs(np.diag(sigma))
    # d is an one-dimension matrix
    d_mh = d**(-0.5)
    # d_h = d**0.5

    ''' LU = d^−1/2 (σ − π) d^−1/2 '''
    ''' A = PLU '''
    ''' P is identity matrix only when A is diagonally dominant '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True) # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T '''
    ''' M = G^T (a ̃+ b ̃) G '''
    a_p_b_tilde = np.linalg.multi_dot([L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde) + np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    ''' (x ̃+ y ̃) = GZ '''
    ''' x + y = d^-1/2 L^-T (x ̃+ y ̃) '''
    ''' x - y = d^-1/2 U^-1 (x ̃- y ̃) '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)
    # x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z])
    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    x *= pqnorm
    y *= pqnorm

    return x, y
################################################################################

################################################################################
def Qx(V, x):
    """ Qx = (1 - V*V.T)*x = x - V*V.T*x  """
    return x - einsum('ij, jk, kl -> il', V, V.T, x)
################################################################################

################################################################################
def on_the_fly_Hx(W, V, sub_A, x):
    """ on-the-fly compute H'x """
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q"""
    """ K approximates H, here K = sTDA_A"""
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)"""
    """ H′x ≡ a + b − c + d """
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx
################################################################################

################################################################################
# to diagonalize the H'
def new_ES(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    current_dic = arg3
    return_index = arg5
    W_H = arg6
    V_H = arg7
    sub_A_H = arg8

    """ new eigenvalue solver """
    """ the traditional Davidson to diagonalize the H' matrix """
    """ W_H, V_H, sub_A_H are from the exact H """

    sTDA_D_start = time.time()
    tol = args.eigensolver_tol # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    k = args.nstates
    m = min([k+8, 2*k, A_size])
    # m is the amount of initial guesses
    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    # sTDA as initial guess
    V = sTDA_initial_guess(m, V)

    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ###########################################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
#             print(sub_eigenvalue[:k]*27.211386245988)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
#             print(r_norms)
        # largest residual norm
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals

        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index])
        # Y doesn't matter

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
#             print(check_orthonormal(V[:,:new_m]))
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m
    ###########################################################################################
    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('H_app diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 2), 'seconds' )
#         print('H_app', sub_eigenvalue[:k]*27.211386245988)

    return full_guess[:,return_index], current_dic
################################################################################

################################################################################
# a dictionary for TDA initial guess and precodnitioner
TDA_i_key = ['sTDA', 'Adiag']
TDA_i_func = [sTDA_initial_guess, TDA_A_diag_initial_guess]
TDA_i_lib = dict(zip(TDA_i_key, TDA_i_func))

TDA_p_key = ['sTDA', 'Adiag', 'Jacobi', 'new_ES']
TDA_p_func = [sTDA_preconditioner, TDA_A_diag_preconditioner, \
Jacobi_preconditioner, new_ES]
TDA_p_lib = dict(zip(TDA_p_key, TDA_p_func))
################################################################################

################################################################################
#Davidson frame, where we can choose different initial guess and preconditioner
def Davidson(k, tol, init,prec):
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)
    max = args.max
    # Maximum number of iterations

    m = min([k + args.TDA_extrainitial, 2*k, A_size])
    # amount of initila guess
    #################################################
    # generate initial guess

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    init_start = time.time()
    V = initial_guess(m, V)
    init_end = time.time()
    init_time = init_end - init_start

    print('Intial guess time:', round(init_time, 4), 'seconds')
    #generate initial guess and put in holders V and W
    # m is size of subspace

    # W = Av, create transformed guess vectors
    W[:, :m] = TDA_matrix_vector(V[:, :m])

    # time cost for preconditioning
    Pcost = 0
    ###########################################################################################
    for ii in range(max):
        print('Iteration ', ii)

        # sub_A is subspace A matrix
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # print(sub_eigenvalue[:k])
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        # largest residual norm
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm', max_norm)
        if max_norm < tol or ii == (max-1):
            print('Davidson procedure aborted')
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        ########################################
        # generate new guess
        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                    arg1 = residual[:,index],
                                    arg2 = sub_eigenvalue[:k][index],
                                    arg3 = current_dic,
                                    arg4 = full_guess[:,index],
                                    arg5 = index,
                                    arg6 = W[:,:m],
                                    arg7 = V[:,:m],
                                    arg8 = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('m,new_m',m,new_m)
        W[:, m:new_m] = TDA_matrix_vector(V[:, m:new_m])
        print('new generated guesses:', new_m - m)
        m = new_m

    energies = sub_eigenvalue[:k]*27.211386245988


    D_end = time.time()
    Dcost = D_end - D_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDA_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDA_precondTOL
    Davidson_dic['total time'] = Dcost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sub_A)[0]
    Davidson_dic['excitation energy(eV)'] = energies.tolist()
    # Davidson_dic['semiempirical_difference'] = difference
    # Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    ###########################################################################################
    if ii == max-1:
        print('============ Davidson Failed Due to Iteration Limit ==============')
        print('Davidson failed after ', round(Dcost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Davidson done after ', round(Dcost, 4), 'seconds')
        print('Total steps =', ii+1)
        print('Final subspace shape = ', np.shape(sub_A))
        print('Preconditioning time:', round(Pcost, 4), round(Pcost/Dcost*100,2), '%')
    return energies, full_guess, Davidson_dic
################################################################################



def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder = TDA_A_diag_initial_guess(new_m, V_holder, hdiag = hdiag)
    energies = hdiag[Dsort][:new_m]*27.211386245988
    return V_holder, W_holder, new_m, energies, V_holder[:,:new_m], W_holder[:,:new_m]

################################################################################
def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag = hdiag):
    # preconditioners for each corresponding residual
    hdiag = hdiag.reshape(-1,1)
    # print('hdiag', hdiag.shape)
    k = R_x.shape[1]
#     print('omega.shape',omega.shape)
    t = 1e-14

    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    # force all values not in domain (-t, t)
    D_y_inv = D_y**-1

#     print('R_x.shape, D_x.shape',R_x.shape, D_x.shape)
    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new
################################################################################

################################################################################
def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  w = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    # print(d)
    # d is an one-dimension matrix
    d_mh = d**(-0.5)


    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    M = np.linalg.multi_dot([G.T, L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    # print(omega*27.211386245988)
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([L_inv.T, G, Z])     * (np.array(omega)**-0.5).reshape(1,-1)
    x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z]) * (np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    # norm = np.linalg.multi_dot([x.T, sigma, x])
    # norm += np.linalg.multi_dot([x.T, pi, y])
    # norm -= np.linalg.multi_dot([y.T, pi, x])
    # norm -= np.linalg.multi_dot([y.T, sigma, y])
    # print(norm)

    return omega, x, y
################################################################################

################################################################################
def sTDDFT_eigen_solver(k):
    ''' [ A' B' ] x - [ σ   π] x  w = 0'''
    ''' [ B' A' ] y   [-π  -σ] y    = 0'''
    tol=args.TDDFT_initialTOL
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    # new_m = min([3*k, A_size])
    # print('initial new_m = ', new_m)
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)
#     print('initial guess done')
    ##############################

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        ###############################################################
        # print('ii = ', ii)
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        # show_memory_info('before sTDDFT_mv')
        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start
        # show_memory_info('after sTDDFT_mv')

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)
        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        ########################################################################
        # preconditioning step
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTD-DFT Failed Due to Iteration Limit==================')
        print('sTD-DFT failed after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Converged after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('final subspace', sigma.shape)
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_cost * 100,2),'%')

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*27.211386245988
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y
################################################################################

################################################################################
def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    # energies, X_new, Y_new = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup
################################################################################

################################################################################
def sTDDFT_preconditioner(Rx, Ry, omega):
    ''' [ A B ] - [1  0]X  w = P'''
    ''' [ B A ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''
    tol = args.TDDFT_precondTOL
    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    # print('pqnorm', pqnorm)
    P /= pqnorm
    Q /= pqnorm

    ##############################

    ##############################
    # setting up initial guess
    X_new, Y_new  = TDDFT_A_diag_preconditioner(P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = \
            VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start
    print('new_m =', new_m)
    print('diagonal initial guess done')
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    symmetrycost = 0
    for ii in range(max):
#         print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        symmetrystart = time.time()
        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
        # solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                                  a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        # U1x = np.dot(U1,x)
        # U2x = np.dot(U2,x)
        # Vx = np.dot(V,x)
        # Wx = np.dot(W,x)
        #
        # U1y = np.dot(U1,y)
        # U2y = np.dot(U2,y)
        # Vy = np.dot(V,y)
        # Wy = np.dot(W,y)
        #
        # X_full = Vx + Wy
        # Y_full = Wx + Vy
        #
        # R_x = U1x + U2y - X_full*omega - P
        # R_y = U2x + U1y + Y_full*omega - Q

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################

        ########################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index], \
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_precond_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit==========')
        print('sTDDFT_precond failed after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT_precond Converged after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sTDDFT_precond_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_precond_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_precond_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_precond_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_precond_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_precond_cost * 100,2),'%')
        print('symmetrycost', round(symmetrycost,4), round(symmetrycost/sTDDFT_precond_cost * 100,2),'%')
        print('final subspace', sigma.shape)

    show_memory_info('preconditioner at end')
    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_diag_A[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)
    print(X.shape, Y.shape)
    return X, Y
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
TDDFT_i_key = ['sTDDFT', 'Adiag']
TDDFT_i_func = [sTDDFT_initial_guess, TDDFT_A_diag_initial_guess]
TDDFT_i_lib = dict(zip(TDDFT_i_key, TDDFT_i_func))

TDDFT_p_key = ['sTDDFT', 'Adiag']
TDDFT_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
TDDFT_p_lib = dict(zip(TDDFT_p_key, TDDFT_p_func))
################################################################################

################################################################################
def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.TDDFT_tolerance):

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    if args.TDDFT_extrainitial_3n == True:
        new_m = min([k + args.TDDFT_extrainitial, 3*k, A_size])
    else:
        new_m = min([k + args.TDDFT_extrainitial, 2*k, A_size])

    # new_m = k

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    ##############################
    # setting up initial guess
    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig = initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')
    ##############################
    Pcost = 0
    VWGScost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '____________________||||')
        show_memory_info('beginning of step '+ str(ii))
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        print('Maximum residual norm: ', np.max(r_norms))
        # print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        P_start = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        VWGScost_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        VWGScost_end = time.time()
        VWGScost += VWGScost_end - VWGScost_start
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################



    omega *= 27.211386245988

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['initial_energies'] = initial_energies
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDDFT_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDDFT_precondTOL
    Davidson_dic['total time'] = TDDFT_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['excitation energy(eV)'] = omega.tolist()
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    if ii == (max -1):
        print('============================ TDDFT Failed Due to Iteration Limit============================')
        print('TDDFT failed after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('================================== TDDFT Calculation Done ==================================')
        print('TDDFT Converged after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('Initial guess',init)
        print('preconditioner', prec)
        print('Final subspace ', sigma.shape)
        print('preconditioning cost', round(Pcost,4), round(Pcost/TDDFT_cost * 100, 2), "%")
        print('VWGScost',round(VWGScost,4))
        # print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))

    # need normalize
    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic
# end of TDDFT module
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
dynpol_i_key = ['sTDDFT', 'Adiag']
dynpol_i_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_i_lib = dict(zip(dynpol_i_key, dynpol_i_func))

dynpol_p_key = ['sTDDFT', 'Adiag']
dynpol_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_p_lib = dict(zip(dynpol_p_key, dynpol_p_func))
################################################################################

################################################################################
def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P
################################################################################

################################################################################
def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        # 0,1,2   3,4,5   6,7,8
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]
        # convert nm to Hartree

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P
    #P, Q, omega

    max = args.max
    tol = args.dynpol_tolerance

    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P) + np.dot(W.T, Q)
        q = np.dot(W.T, P) + np.dot(V.T, Q)
        subgenend = time.time()
        subgencost += subgenend - subgenstart
        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R_x = U1x + U2y - (Vx + Wy)omega - P
#         R_y = U2x + U1y + (Wx + Vy)omega - Q
#         R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
#         R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega + P
        R_y = U2x + U1y + Y_full*omega + Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)
        print('maximum residual norm: ', np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        Pend = time.time()
        Pcost += Pend - Pstart
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('============================ Dynamic polarizability Failed Due to Iteration Limit============================')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

     # np.dot(-P.T, X_full) + np.dot(-P.T, Y_full)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)


    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.dynpol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.dynpol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.dynpol_initprecTOL
    Davidson_dic['total time'] = dp_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    Davidson_dic['Dynamic polarizability tensor alpha'] = [i.tolist() for i in alpha_omega]
    Davidson_dic['Dynamic polarizability tensor alpha initial guess '] = [i.tolist() for i in alpha_omega_ig]
    Davidson_dic['overlap'] = overlap
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    show_memory_info('Total Dynamic polarizability')

    return alpha_omega, Davidson_dic
################################################################################

###############################################################################
def stapol_A_diag_initprec(P):
    d = hdiag.reshape(-1,1)
    return -P/d
###############################################################################

###############################################################################
def stapol_sTDDFT_initprec(P):
    '''(A* + B*)X = -P'''
    '''residual = (A* + B*)X + P'''
    '''X_ig = -P/d'''
    '''X_new = (residual - P)/D = Ux/D'''
    ssp_start = time.time()
    max = 30
    tol = args.stapol_initprecTOL
    m = 0
    npvec = P.shape[1]

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]
    pnorm = np.linalg.norm(P_origin, axis=0, keepdims = True)
    # print('pnorm', pnorm)
    P /= pnorm

    # print('vectors to be preconditioned', npvec)
    V_holder = np.zeros((A_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

    X_ig = stapol_A_diag_initprec(P)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    # V_holder[:,0] = X_new[:,0]/np.linalg.norm(X_new[:,0])
    # if npvec >= 2:
    #     V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 1, X_new[:, 1:])
    # else:
    #     new_m = 1
    # print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        # creating the subspace
        MV_start = time.time()
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ###############################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = stapol_A_diag_initprec(-residual[:,index])

        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    X_full = np.dot(V,x)
    # alpha = np.dot(X_full.T, P)*-4

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('============================ sTDDFT Static polarizability Failed Due to Iteration Limit============================')
        print('sTDDFT Static polarizability failed after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Static polarizability Converged after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        # print('initial_cost', round(initial_cost,4), round(initial_cost/ssp_cost * 100,2),'%')
        # print('Pcost', round(Pcost,4), round(Pcost/ssp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/ssp_cost * 100,2),'%')
        # print('GScost', round(GScost,4), round(GScost/ssp_cost * 100,2),'%')
        # print('subcost', round(subcost,4), round(subcost/ssp_cost * 100,2),'%')
        # print('subgencost', round(subgencost,4), round(subgencost/ssp_cost * 100,2),'%')

    X_full *= pnorm
    return X_full
################################################################################

################################################################################
# a dictionary for static_polarizability initial guess and precodnitioner
stapol_i_key = ['sTDDFT', 'Adiag']
stapol_i_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_i_lib = dict(zip(stapol_i_key, stapol_i_func))

stapol_p_key = ['sTDDFT', 'Adiag']
stapol_p_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_p_lib = dict(zip(stapol_p_key, stapol_p_func))
################################################################################

################################################################################
# Static polarizability
def static_polarizability(init, prec):
    '''(A+B)X = -P'''
    '''residual = (A+B)X + P'''
    '''X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    # pnorm is constant
    print('pnorm', pnorm)

    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.stapol_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

#     X_new = -P/d3
    X_ig = initial_guess(P)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ########################################################################
        # creating the subspace

        MV_start = time.time()
        U_holder[:, m:new_m] = static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # print('check_orthonormal(V)',check_orthonormal(V))
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()
        subgencost += subgenend - subgenstart

        # print('a_p_b.shape', a_p_b.shape)
        ########################################################################

        ########################################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        # print('x.shape', x.shape)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ########################################################################

        ########################################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index])
        # X_new = X_new/np.linalg.norm(X_new, axis=0)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    print('V.shape', V.shape)
    X_full = np.dot(V,x)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start



    if ii == (max -1):
        print('============================ Static polarizability Failed Due to Iteration Limit============================')
        print('Static polarizability failed after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Static polarizability Converged after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sp_cost * 100,2),'%')

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.stapol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.stapol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.stapol_initprecTOL
    Davidson_dic['total time'] = sp_cost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(a_p_b)[0]
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    return tensor_alpha, Davidson_dic
################################################################################

TDA_combo = [            # option
['sTDA','sTDA'],     # 0
['Adiag','Adiag'],   # 1
['Adiag','sTDA'],    # 2
['sTDA','Adiag'],    # 3
['sTDA','Jacobi'],   # 4
['Adiag','Jacobi'],  # 5
['Adiag','new_ES'],  # 6
['sTDA','new_ES']]   # 7

TDDFT_combo = [         # option
['sTDDFT','sTDDFT'],     # 0
['Adiag','Adiag'],       # 1
['Adiag','sTDDFT'],      # 2
['sTDDFT','Adiag']]      # 3

dynpol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

stapol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

if args.TDA == True:
    for option in args.TDA_options:
        init, prec = TDA_combo[option]
        print('-------------------------------------------------------------------')
        print('|---------------   In-house Developed Davidson Starts   -----------|')
        print('Residual conv =', args.TDA_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, eigenkets, Davidson_dic = Davidson(args.nstates, args.TDA_tolerance, init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Davidson time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDA_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Davidson Done   -----------|')

if args.TDDFT == True:
    for option in args.TDDFT_options:
        init, prec = TDDFT_combo[option]
        print('----------------------------------------------------------------------------')
        print('|---------------   In-house Developed TDDFT Eigensolver Starts   -----------|')
        print('Residual conv =', args.TDDFT_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, X, Y, Davidson_dic = TDDFT_eigen_solver(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house TDDFT Eigensolver time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDDFT_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed TDDFT Eigensolver Done   -----------|')

if args.dynpol == True:
    args.TDDFT_precondTOL = args.dynpol_initprecTOL
    print('args.TDDFT_precondTOL', args.TDDFT_precondTOL)
    for option in args.dynpol_options:
        init,prec = dynpol_combo[option]
        print('---------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Dynamic Polarizability Starts   -----------|')
        print('Residual conv =', args.dynpol_tolerance)
        print('Perturbation wavelength omega (nm) =', args.dynpol_omega)

        total_start = time.time()
        alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Dynamic Polarizability time:', round(total_time, 4), 'seconds')
        print('Dynamic polarizability tensor alpha')
        for i in range(len(args.dynpol_omega)):
            print(args.dynpol_omega[i],'nm')
            print(alpha_omega[i])

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Dynamic_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Dynamic Polarizability Done   -----------|')

if args.stapol == True:
    for option in args.stapol_options:
        init,prec = stapol_combo[option]
        print('--------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Static Polarizability Starts   -----------|')
        print('Residual conv =', args.stapol_tolerance)

        total_start = time.time()
        tensor_alpha, Davidson_dic = static_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Static Polarizability time:', round(total_time, 4), 'seconds')
        print('Static polarizability tensor alpha')
        print(tensor_alpha)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Static_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Static Polarizability Done   -----------|')


if args.sTDA == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDA   --------------------|')
    print('Convergence =', args.TDA_initialTOL)

    total_start = time.time()
    X = Davidson0(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDA time:', round(total_time, 4), 'seconds')
    print('|---------------------------   In-house Developed sTDA done  ----------------|')

if args.sTDDFT == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDDFT   --------------------|')
    print('Convergence =', args.TDDFT_initialTOL)

    total_start = time.time()
    energies, X, Y = sTDDFT_eigen_solver(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDDFT time:', round(total_time, 4), 'seconds')

    print('|---------------------------   In-house Developed sTDDFT done  ----------------|')


if args.Truncate_test == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   Test the Truncation efficiency  ----------------|')

    n_state = 40
    X = np.random.rand(A_size,n_state)
    Y = np.random.rand(A_size,n_state)
    print('n_vir = ', n_vir)
    print('A_size =', A_size)
    print('n_state =', n_state)
    print("virtual tuning: -------------------------------------------- ")
    print("{:<8} {:<8} {:<8} {:<8}".format(\
            'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
    for vir_trunc in [40, 50, 60, 70, 10000000]:
        del max_vir, sTDA_mv, sTDDFT_mv
        max_vir = gen_maxvir(tol_eV = vir_trunc)
        q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
        # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
        iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                        max_vir=max_vir, \
                                        q_ij = q_ij, \
                                        q_ab = q_ab, \
                                        q_ia = q_ia , \
                                        GK_q_jb = GK_q_jb, \
                                        GJ_q_ab = GJ_q_ab)


        sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                        max_vir=max_vir, \
                                        iajb_fly = iajb_fly, \
                                        ijab_fly = ijab_fly, \
                                        ibja_fly = ibja_fly, \
                                        delta_fly = delta_fly)


        sTDA_start = time.time()
        sTDA_X = sTDA_mv(X)
        sTDA_end = time.time()
        sTDA_mv_time = sTDA_end - sTDA_start

        sTDDFT_start = time.time()
        sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
        sTDDFT_end = time.time()
        sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

        print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))

    print('|-------------------------------------   Test done  --------------------------|')

if args.pytd == True:
    print('-----------------------------------------------------------------')
    print('|----------------------    PySCF TTDDFT    ----------------------|')
    TD.nstates = args.nstates
    TD.conv_tol = 1e-10
    start = time.time()
    TD.kernel()
    end = time.time()
    pyscf_time = end-start
    print('Built-in TDDFT time:', round(pyscf_time, 4), 'seconds')
    print('|---------------------------------------------------------------|')

if args.verbose > 3:
    for key in vars(args):
        print(key,'=', vars(args)[key])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt194', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Sat Jul 10 15:41:47 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 50000 
[INPUT] num. atoms = 46
[INPUT] num. electrons = 262
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.075469006356   2.698376776999  -1.393666497568 AA   -0.142615752907   5.099193089414  -2.633647989385 Bohr
[INPUT]  2 C     -0.243298869070   1.339130002559  -1.773001231282 AA   -0.459768228958   2.530588950025  -3.350486745640 Bohr
[INPUT]  3 C     -0.581397769078   1.067556398519  -3.100771230899 AA   -1.098682552990   2.017389215728  -5.859608401330 Bohr
[INPUT]  4 C     -0.722513045051   2.134027920314  -4.008683736391 AA   -1.365351776571   4.032728311569  -7.575314381777 Bohr
[INPUT]  5 C     -0.546676365965   3.476619725330  -3.609111638462 AA   -1.033068610445   6.569859120135  -6.820232549674 Bohr
[INPUT]  6 C     -0.219696838125   3.779396497934  -2.285942218596 AA   -0.415166854489   7.142024297236  -4.319804729728 Bohr
[INPUT]  7 H     -0.727393876974   0.036476447009  -3.437743559736 AA   -1.374575212166   0.068930494844  -6.496393814389 Bohr
[INPUT]  8 H     -0.972393071025   1.919951938348  -5.053707957650 AA   -1.837556589661   3.628183335806  -9.550123953494 Bohr
[INPUT]  9 H     -0.667670889471   4.280170027435  -4.342195719787 AA   -1.261715122445   8.088349118424  -8.205560689655 Bohr
[INPUT] 10 H     -0.079154559920   4.806941716354  -1.938906169259 AA   -0.149580439760   9.083803340655  -3.664001641130 Bohr
[INPUT] 11 C     -1.501385475034  -0.193978218011  -0.083072884688 AA   -2.837207355214  -0.366565706171  -0.156985000438 Bohr
[INPUT] 12 C     -2.454832448400   0.324527631847   0.802388094915 AA   -4.638961009171   0.613268344044   1.516293745001 Bohr
[INPUT] 13 C     -1.916516186861  -1.313516530775  -0.821252237094 AA   -3.621690706462  -2.482186503253  -1.551941807293 Bohr
[INPUT] 14 C     -3.719221941997  -0.254042184561   0.992369635089 AA   -7.028310866847  -0.480070152907   1.875306824652 Bohr
[INPUT] 15 C     -3.163054747926  -1.926440837911  -0.665552129418 AA   -5.977307190585  -3.640445578830  -1.257711246221 Bohr
[INPUT] 16 C     -4.075220156154  -1.387138542175   0.252808321537 AA   -7.701049992439  -2.621311941539   0.477738489716 Bohr
[INPUT] 17 C      1.239291118887  -0.527919093658  -0.406791892771 AA    2.341920803302  -0.997622502942  -0.768725267031 Bohr
[INPUT] 18 C      1.279206104242  -1.799029833736   0.186071912272 AA    2.417349193890  -3.399673675684   0.351624953668 Bohr
[INPUT] 19 C      2.442317917060  -0.113025947348  -1.000601717395 AA    4.615311972361  -0.213588085458  -1.890863205646 Bohr
[INPUT] 20 C      2.410526415881  -2.625456464178   0.165257350044 AA    4.555234742044  -4.961393669266   0.312291131655 Bohr
[INPUT] 21 C      3.598897234193  -0.901541318298  -1.046425674679 AA    6.800930123080  -1.703666181563  -1.977457934856 Bohr
[INPUT] 22 C      3.579211485031  -2.172915403737  -0.459084327226 AA    6.763729448606  -4.106215004911  -0.867543646538 Bohr
[INPUT] 23 F      2.528699032192   1.115767834894  -1.552341557859 AA    4.778548622295   2.108495626549  -2.933500396134 Bohr
[INPUT] 24 F      4.716085796355  -0.451288614488  -1.631346116257 AA    8.912110535061  -0.852811884517  -3.082797374099 Bohr
[INPUT] 25 F      4.670139111472  -2.944507330844  -0.486005078167 AA    8.825283884301  -5.564312427069  -0.918416492884 Bohr
[INPUT] 26 F      2.386323015299  -3.833318615508   0.742853115617 AA    4.509496943661  -7.243922331507   1.403788939295 Bohr
[INPUT] 27 F      0.203182360921  -2.291179484923   0.840958506349 AA    0.383959015483  -4.329701728726   1.589181259124 Bohr
[INPUT] 28 F     -3.496469584535  -3.005205961026  -1.385270643217 AA   -6.607369917643  -5.679016214249  -2.617782124081 Bohr
[INPUT] 29 F     -5.277207132854  -1.949574791279   0.416309506639 AA   -9.972476183696  -3.684162414872   0.786710950601 Bohr
[INPUT] 30 F     -4.588265816508   0.278247511902   1.861588861171 AA   -8.670565779905   0.525811592336   3.517893104154 Bohr
[INPUT] 31 F     -2.196195287835   1.438174708322   1.522747766407 AA   -4.150207610069   2.717756318005   2.877576235302 Bohr
[INPUT] 32 N      0.297967247280   1.727086300334   0.530807698346 AA    0.563076491450   3.263720101120   1.003081174684 Bohr
[INPUT] 33 N      0.272079425819   2.868107138384  -0.061745706326 AA    0.514155598927   5.419936987455  -0.116682474323 Bohr
[INPUT] 34 B     -0.051230384812   0.467455771212  -0.433377605076 AA   -0.096811396550   0.883363382938  -0.818964982113 Bohr
[INPUT] 35 F     -1.077423037270  -1.853547320000  -1.734390775345 AA   -2.036034460737  -3.502696793721  -3.277523558374 Bohr
[INPUT] 36 C      0.711355117210   1.669559263790   1.883646814586 AA    1.344266348834   3.155009757293   3.559576594976 Bohr
[INPUT] 37 C      1.292176720873   2.792519192826   2.506894891910 AA    2.441860106989   5.277096472033   4.737344768780 Bohr
[INPUT] 38 C      0.536736230535   0.465078217253   2.592344045846 AA    1.014284476843   0.878870457109   4.898820267296 Bohr
[INPUT] 39 C      1.694514226636   2.701633534719   3.840456233204 AA    3.202167802521   5.105347469559   7.257410474135 Bohr
[INPUT] 40 H      1.419405961195   3.711032488041   1.929980774298 AA    2.682288526234   7.012835041761   3.647135089099 Bohr
[INPUT] 41 C      0.943640971462   0.390374954235   3.927539978634 AA    1.783222995981   0.737701749394   7.421974902898 Bohr
[INPUT] 42 H      0.074416146111  -0.397762513751   2.109297259604 AA    0.140626135395  -0.751662213609   3.985994135947 Bohr
[INPUT] 43 C      1.523843128887   1.502954690130   4.554994286886 AA    2.879646170396   2.840172741975   8.607691701173 Bohr
[INPUT] 44 H      2.150363934408   3.569720418816   4.327141840932 AA    4.063598904174   6.745793932829   8.177112981508 Bohr
[INPUT] 45 H      0.804208640589  -0.543903122036   4.480050750810 AA    1.519734077722  -1.027827938944   8.466068943183 Bohr
[INPUT] 46 H      1.844942148683   1.437570020738   5.599449660054 AA    3.486435376678   2.716613624080  10.581426305792 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] B
[INPUT] 0    0    [6    /1   ]  8564.8660687      0.00022837198155
                                1284.1516263      0.0017682576447
                                292.27871604      0.0091407080516
                                82.775469176      0.036342638989
                                27.017939269      0.11063458441
                                9.814961966       0.23367344321
[INPUT] 0    0    [2    /1   ]  3.9318559059      0.41818777978
                                1.6595599712      0.22325473798
[INPUT] 0    0    [1    /1   ]  0.35762965239        1
[INPUT] 0    0    [1    /1   ]  0.14246277496        1
[INPUT] 0    0    [1    /1   ]  0.060560594768       1
[INPUT] 1    0    [4    /1   ]  22.453875803      0.0050265575179
                                5.104505833       0.032801738965
                                1.4986081344      0.13151230768
                                0.50927831315     0.33197167769
[INPUT] 1    0    [1    /1   ]  0.18147077798        1
[INPUT] 1    0    [1    /1   ]  0.064621893904       1
[INPUT] 2    0    [1    /1   ]  0.661                1
[INPUT] 2    0    [1    /1   ]  0.199                1
[INPUT] 3    0    [1    /1   ]  0.49                 1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] F
[INPUT] 0    0    [6    /1   ]  35479.100441      0.00021545014888
                                5318.4728983      0.0016700686527
                                1210.4810975      0.0086733211476
                                342.8551814       0.035049933175
                                112.01943181      0.11165320133
                                40.714740248      0.25988506647
[INPUT] 0    0    [2    /1   ]  16.039678111      0.3942296688
                                6.503818674       0.24998238551
[INPUT] 0    0    [1    /1   ]  1.5440477509         1
[INPUT] 0    0    [1    /1   ]  0.61223452862        1
[INPUT] 0    0    [1    /1   ]  0.24027979698        1
[INPUT] 1    0    [4    /1   ]  80.233900483      0.0063685999134
                                18.594010743      0.04430314353
                                5.6867902653      0.16867248708
                                1.9511006294      0.36166346255
[INPUT] 1    0    [1    /1   ]  0.66970211298        1
[INPUT] 1    0    [1    /1   ]  0.2165130041         1
[INPUT] 2    0    [1    /1   ]  3.107                1
[INPUT] 2    0    [1    /1   ]  0.855                1
[INPUT] 3    0    [1    /1   ]  1.917                1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1

nuclear repulsion = 4280.84137352411
number of shells = 443
number of NR pGTOs = 1774
number of NR cGTOs = 1201
basis = def2-tzvp
ecp = {}
CPU time:         2.12
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 46_Azobenzene_3a_wb97x.chk
max_memory 50000 MB (current use 55 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7febcf651048>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7febcf63df28>
Set gradient conv threshold to 1e-05
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
atom F rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266 266
 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom B rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266
 266 266 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266
 266 266 266]
tot grids = 609882
Drop grids 109282
    CPU time for setting up grids    123.13 sec, wall time      8.56 sec
nelec by numeric integration = 261.99993852084344
    CPU time for vxc    213.04 sec, wall time     14.81 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15983092.hpc/tmpfqd_uk0l
Default auxbasis def2-tzvp-jkfit is used for B def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for F def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
num shells = 979, num cGTOs = 2961
size of aux basis 2961
int3c2e [1/2], AO [0:343], nrow = 439453
int3c2e [2/2], AO [343:443], nrow = 282348
    CPU time for cholesky_eri    388.84 sec, wall time     57.57 sec
    CPU time for df vj and vk   1178.47 sec, wall time    118.55 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7fec07300e80> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15983092.hpc/tmp5tsdz_ix
Default auxbasis def2-tzvp-jkfit is used for B def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for F def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
num shells = 979, num cGTOs = 2961
size of aux basis 2142
int3c2e [1/3], AO [0:266], nrow = 259560
int3c2e [2/3], AO [266:372], nrow = 261150
int3c2e [3/3], AO [372:443], nrow = 201091
    CPU time for cholesky_eri    511.46 sec, wall time     46.38 sec
    CPU time for df vj and vk   1056.67 sec, wall time     82.85 sec
E1 = -11347.056892624598  Ecoul = 5268.985011568253  Exc = -255.76021598102832
init E= -2052.99072351327
cond(S) = 1712291.2060505964
    CPU time for initialize scf   2581.11 sec, wall time    225.84 sec
  HOMO = -0.337271284195125  LUMO = -0.0649197425487275
  mo_energy =
[-2.47826825e+01 -2.47804215e+01 -2.47781884e+01 -2.47780259e+01
 -2.47767559e+01 -2.47767338e+01 -2.47766199e+01 -2.47740695e+01
 -2.47736627e+01 -2.47736365e+01 -1.45252848e+01 -1.45027725e+01
 -1.03850004e+01 -1.03822521e+01 -1.03785855e+01 -1.03779883e+01
 -1.03777392e+01 -1.03773037e+01 -1.03770098e+01 -1.03765891e+01
 -1.03764503e+01 -1.03745981e+01 -1.03344879e+01 -1.03156543e+01
 -1.03000727e+01 -1.02971519e+01 -1.02957186e+01 -1.02948674e+01
 -1.02927634e+01 -1.02915835e+01 -1.02913595e+01 -1.02907890e+01
 -1.02905538e+01 -1.02893011e+01 -1.02852514e+01 -1.02806000e+01
 -6.85366432e+00 -1.39241262e+00 -1.39036404e+00 -1.38423664e+00
 -1.38230224e+00 -1.37850119e+00 -1.37607914e+00 -1.36927492e+00
 -1.36728655e+00 -1.36661073e+00 -1.36490884e+00 -1.22852853e+00
 -1.04039087e+00 -1.02906045e+00 -1.02753099e+00 -1.00741900e+00
 -9.66144008e-01 -9.24517778e-01 -9.09815041e-01 -9.06280643e-01
 -9.05167902e-01 -9.03596221e-01 -9.02539910e-01 -8.89059242e-01
 -8.48483354e-01 -8.03018478e-01 -7.89576341e-01 -7.84682067e-01
 -7.83476081e-01 -7.74802508e-01 -7.68939670e-01 -7.44452806e-01
 -7.19994715e-01 -7.15717509e-01 -7.13282422e-01 -7.09116681e-01
 -7.06464098e-01 -7.00641823e-01 -6.93223298e-01 -6.84504527e-01
 -6.70978590e-01 -6.58728857e-01 -6.57214932e-01 -6.55151447e-01
 -6.53427597e-01 -6.48767006e-01 -6.45742119e-01 -6.34973739e-01
 -6.31739988e-01 -6.30742759e-01 -6.19559430e-01 -6.18689440e-01
 -6.13506227e-01 -6.09150528e-01 -6.06559023e-01 -6.01837130e-01
 -5.97496859e-01 -5.88707623e-01 -5.83360709e-01 -5.81995945e-01
 -5.81718695e-01 -5.78895400e-01 -5.73649640e-01 -5.63922660e-01
 -5.61454418e-01 -5.58233997e-01 -5.57371687e-01 -5.56309829e-01
 -5.54590403e-01 -5.50710591e-01 -5.48143814e-01 -5.31593890e-01
 -5.27210384e-01 -5.25083034e-01 -5.17703183e-01 -5.04737834e-01
 -4.97275450e-01 -4.94820684e-01 -4.93061066e-01 -4.89340442e-01
 -4.86547277e-01 -4.78890040e-01 -4.71129013e-01 -4.70492666e-01
 -4.58109863e-01 -4.37334331e-01 -4.27048148e-01 -3.99563772e-01
 -3.76489744e-01 -3.70358824e-01 -3.56422105e-01 -3.51893170e-01
 -3.50355933e-01 -3.46982348e-01 -3.37271284e-01 -6.49197425e-02
  3.15659611e-02  3.71724495e-02  4.48808987e-02  4.95648626e-02
  5.84292010e-02  6.05511841e-02  6.26887534e-02  7.37832593e-02
  8.44671883e-02  9.14992911e-02  1.22416185e-01  1.25397707e-01
  1.34418770e-01  1.44702922e-01  1.47146671e-01  1.52763655e-01
  1.54580065e-01  1.64001839e-01  1.70022540e-01  1.77621213e-01
  1.83183674e-01  1.93875412e-01  1.95126050e-01  1.99021849e-01
  1.99313460e-01  2.09542935e-01  2.11292536e-01  2.17458991e-01
  2.24923280e-01  2.31768316e-01  2.35296894e-01  2.38722360e-01
  2.43881111e-01  2.53017118e-01  2.59501053e-01  2.61771214e-01
  2.62499071e-01  2.66914760e-01  2.69935266e-01  2.70714205e-01
  2.72274329e-01  2.74707050e-01  2.75780399e-01  2.83072585e-01
  2.84997279e-01  2.86621112e-01  2.88661147e-01  2.92130714e-01
  2.95841707e-01  3.00739616e-01  3.03793263e-01  3.06767451e-01
  3.12517013e-01  3.13662322e-01  3.19602348e-01  3.24533767e-01
  3.30061610e-01  3.33859557e-01  3.40173894e-01  3.43000028e-01
  3.49338481e-01  3.49692569e-01  3.51408079e-01  3.60466526e-01
  3.63062146e-01  3.67523307e-01  3.68512076e-01  3.69577940e-01
  3.72871369e-01  3.78821910e-01  3.80602752e-01  3.84999259e-01
  3.85736013e-01  3.90269167e-01  3.94025672e-01  3.97747673e-01
  4.01369982e-01  4.07158932e-01  4.09986025e-01  4.16910528e-01
  4.20263068e-01  4.25837973e-01  4.26690692e-01  4.28071397e-01
  4.33329654e-01  4.36293804e-01  4.38957408e-01  4.42163184e-01
  4.44265577e-01  4.46043631e-01  4.53843253e-01  4.57956739e-01
  4.61190019e-01  4.63070645e-01  4.66598814e-01  4.67674413e-01
  4.72143547e-01  4.75285608e-01  4.79909917e-01  4.81069090e-01
  4.85907950e-01  4.87791576e-01  4.94130028e-01  4.95347168e-01
  4.97655500e-01  4.99736474e-01  5.02272528e-01  5.03557992e-01
  5.06426336e-01  5.10879443e-01  5.12175189e-01  5.15706238e-01
  5.17981329e-01  5.19898485e-01  5.21698231e-01  5.24047728e-01
  5.29868398e-01  5.30729657e-01  5.36464738e-01  5.40149830e-01
  5.41658248e-01  5.45723782e-01  5.49003114e-01  5.52086593e-01
  5.56142716e-01  5.59575061e-01  5.64455477e-01  5.66528699e-01
  5.69145018e-01  5.69907153e-01  5.73265231e-01  5.76611587e-01
  5.83149680e-01  5.86151531e-01  5.89399548e-01  5.95534679e-01
  6.01237590e-01  6.05389539e-01  6.08293347e-01  6.13829825e-01
  6.19888788e-01  6.26095129e-01  6.37512593e-01  6.42530709e-01
  6.48644416e-01  6.51886478e-01  6.58080390e-01  6.65800941e-01
  6.73316044e-01  6.77049169e-01  6.86597695e-01  6.95687127e-01
  6.96517179e-01  7.05782719e-01  7.08494721e-01  7.16020493e-01
  7.17337514e-01  7.20011568e-01  7.23407979e-01  7.24120790e-01
  7.28364389e-01  7.34538285e-01  7.39207033e-01  7.46966035e-01
  7.51182577e-01  7.52750009e-01  7.54752124e-01  7.57415705e-01
  7.62591908e-01  7.65513413e-01  7.66539772e-01  7.71947140e-01
  7.76010739e-01  7.81320613e-01  7.84542104e-01  7.87691061e-01
  7.94446098e-01  7.96924878e-01  8.00940182e-01  8.07035929e-01
  8.08667479e-01  8.09547387e-01  8.17022551e-01  8.22039507e-01
  8.25102617e-01  8.32007903e-01  8.35935973e-01  8.38691748e-01
  8.41193694e-01  8.48287745e-01  8.52246308e-01  8.54765886e-01
  8.57144819e-01  8.62052048e-01  8.69485845e-01  8.70624915e-01
  8.82294473e-01  8.88185142e-01  8.92000205e-01  8.94923928e-01
  8.96087292e-01  9.00615569e-01  9.04419035e-01  9.13058456e-01
  9.14723094e-01  9.20730935e-01  9.24801115e-01  9.29076811e-01
  9.30721188e-01  9.38921890e-01  9.43273248e-01  9.44520533e-01
  9.55886276e-01  9.58698859e-01  9.62719213e-01  9.67481393e-01
  9.71488246e-01  9.73540472e-01  9.77781684e-01  9.82683090e-01
  9.86763910e-01  9.89570521e-01  9.94260999e-01  9.98898398e-01
  1.00494442e+00  1.01214552e+00  1.01597412e+00  1.01934559e+00
  1.02303868e+00  1.02697451e+00  1.03250165e+00  1.03858431e+00
  1.04005660e+00  1.04565611e+00  1.04910056e+00  1.05317072e+00
  1.06075025e+00  1.06253562e+00  1.06953759e+00  1.07269539e+00
  1.07861756e+00  1.08187266e+00  1.08340761e+00  1.08732079e+00
  1.09432738e+00  1.09858005e+00  1.10574348e+00  1.11265275e+00
  1.12197114e+00  1.12603168e+00  1.13125907e+00  1.13352098e+00
  1.14341715e+00  1.15084736e+00  1.15851971e+00  1.16179497e+00
  1.16299398e+00  1.17182800e+00  1.17225117e+00  1.18347510e+00
  1.19291801e+00  1.19607791e+00  1.19675713e+00  1.19868641e+00
  1.20492760e+00  1.20959745e+00  1.21206082e+00  1.21873924e+00
  1.22199667e+00  1.22703326e+00  1.23404125e+00  1.23818447e+00
  1.25174964e+00  1.25808802e+00  1.26060782e+00  1.26855551e+00
  1.27317108e+00  1.27925698e+00  1.28357205e+00  1.28827352e+00
  1.28993572e+00  1.29480703e+00  1.29876453e+00  1.30632931e+00
  1.31418669e+00  1.31831350e+00  1.32210957e+00  1.32370669e+00
  1.32940281e+00  1.33433453e+00  1.34290060e+00  1.34679878e+00
  1.34960686e+00  1.35425275e+00  1.35926855e+00  1.36267688e+00
  1.37008135e+00  1.37744203e+00  1.38312382e+00  1.39539118e+00
  1.40485207e+00  1.40644868e+00  1.41103192e+00  1.42072639e+00
  1.42369120e+00  1.43042074e+00  1.43240889e+00  1.44156589e+00
  1.45147796e+00  1.46121541e+00  1.46376115e+00  1.47118004e+00
  1.47881817e+00  1.48839645e+00  1.49298852e+00  1.49831556e+00
  1.50329296e+00  1.51582850e+00  1.51842651e+00  1.52633130e+00
  1.52900580e+00  1.53188703e+00  1.53403787e+00  1.53965241e+00
  1.54146998e+00  1.54843909e+00  1.54942528e+00  1.55788364e+00
  1.56207654e+00  1.56595967e+00  1.57471814e+00  1.57893963e+00
  1.58610335e+00  1.58628757e+00  1.59720805e+00  1.60234168e+00
  1.60530353e+00  1.61649291e+00  1.61906458e+00  1.62689608e+00
  1.63374020e+00  1.63859294e+00  1.64008042e+00  1.64889480e+00
  1.66150760e+00  1.66992282e+00  1.67518581e+00  1.68114326e+00
  1.68595613e+00  1.69621575e+00  1.70258202e+00  1.70906862e+00
  1.71569964e+00  1.71891831e+00  1.72715496e+00  1.72942958e+00
  1.74054160e+00  1.74784185e+00  1.75476078e+00  1.76405737e+00
  1.76475923e+00  1.76999717e+00  1.77702348e+00  1.77795236e+00
  1.78490864e+00  1.78812459e+00  1.79441797e+00  1.80518321e+00
  1.81048077e+00  1.81551648e+00  1.81921674e+00  1.82238578e+00
  1.82767834e+00  1.83828312e+00  1.84262308e+00  1.84785643e+00
  1.85069662e+00  1.85826592e+00  1.86358566e+00  1.87016504e+00
  1.87520229e+00  1.88436978e+00  1.88989181e+00  1.90228272e+00
  1.91049839e+00  1.91325034e+00  1.92718012e+00  1.92885058e+00
  1.93433847e+00  1.94415127e+00  1.94819209e+00  1.95229208e+00
  1.96685289e+00  1.98302260e+00  1.98530125e+00  1.99150572e+00
  2.00905450e+00  2.01539014e+00  2.02341684e+00  2.02556983e+00
  2.02897069e+00  2.03407357e+00  2.04094663e+00  2.05002772e+00
  2.05564041e+00  2.05826422e+00  2.06548247e+00  2.07479114e+00
  2.07980942e+00  2.08762284e+00  2.09866027e+00  2.09940931e+00
  2.10569125e+00  2.11267935e+00  2.11694381e+00  2.12362288e+00
  2.12436129e+00  2.12686086e+00  2.13103925e+00  2.13465507e+00
  2.14465389e+00  2.15045699e+00  2.15826228e+00  2.15900905e+00
  2.16095759e+00  2.17068425e+00  2.17232099e+00  2.18241620e+00
  2.18392625e+00  2.18910721e+00  2.19012664e+00  2.19592475e+00
  2.20208166e+00  2.21115591e+00  2.21633628e+00  2.21859483e+00
  2.22419150e+00  2.23599937e+00  2.24059810e+00  2.24235957e+00
  2.25110624e+00  2.26081326e+00  2.26994707e+00  2.27094570e+00
  2.27383192e+00  2.28271456e+00  2.29040759e+00  2.29569621e+00
  2.29977657e+00  2.30577589e+00  2.30634798e+00  2.31075681e+00
  2.31767706e+00  2.32484292e+00  2.32828519e+00  2.33361669e+00
  2.34128631e+00  2.34716284e+00  2.35223573e+00  2.35752795e+00
  2.36586910e+00  2.37321624e+00  2.38122696e+00  2.38954786e+00
  2.40012991e+00  2.40778390e+00  2.41779089e+00  2.42462837e+00
  2.43078071e+00  2.43448970e+00  2.44117440e+00  2.45735039e+00
  2.45845116e+00  2.46919956e+00  2.47283467e+00  2.49557538e+00
  2.50435276e+00  2.51762041e+00  2.52363802e+00  2.53339625e+00
  2.53759826e+00  2.55257974e+00  2.56191373e+00  2.56694410e+00
  2.57603229e+00  2.58519252e+00  2.59130428e+00  2.59768143e+00
  2.60085618e+00  2.60785012e+00  2.60931006e+00  2.61887335e+00
  2.61979083e+00  2.62757133e+00  2.63682137e+00  2.64067998e+00
  2.64388937e+00  2.65016199e+00  2.65363884e+00  2.66198008e+00
  2.67186514e+00  2.67354222e+00  2.67924670e+00  2.68579401e+00
  2.68931562e+00  2.69752472e+00  2.70040344e+00  2.70788056e+00
  2.71628101e+00  2.71747980e+00  2.72235172e+00  2.72839046e+00
  2.73104210e+00  2.73335254e+00  2.73545000e+00  2.74128183e+00
  2.74568524e+00  2.74688725e+00  2.75398076e+00  2.75764026e+00
  2.75896833e+00  2.76674608e+00  2.77143524e+00  2.77506861e+00
  2.78083935e+00  2.78326559e+00  2.79128243e+00  2.79691260e+00
  2.80513395e+00  2.80652445e+00  2.81140267e+00  2.81615470e+00
  2.82142934e+00  2.82376688e+00  2.83063626e+00  2.83503254e+00
  2.84227006e+00  2.84512710e+00  2.85835991e+00  2.86145828e+00
  2.87063960e+00  2.87368563e+00  2.87842143e+00  2.88168895e+00
  2.88772495e+00  2.89269023e+00  2.90152155e+00  2.90382781e+00
  2.90854820e+00  2.91282917e+00  2.91771079e+00  2.91903708e+00
  2.92175323e+00  2.92648406e+00  2.93045236e+00  2.93668993e+00
  2.94284326e+00  2.95181105e+00  2.95371088e+00  2.95753643e+00
  2.96338748e+00  2.96508571e+00  2.96603801e+00  2.96900667e+00
  2.97572305e+00  2.98102527e+00  2.98476664e+00  2.99015046e+00
  2.99655096e+00  3.00460395e+00  3.00464753e+00  3.00821345e+00
  3.01367815e+00  3.02031619e+00  3.02139055e+00  3.02665675e+00
  3.03466955e+00  3.04074185e+00  3.04676980e+00  3.04990848e+00
  3.05075241e+00  3.06029350e+00  3.06230631e+00  3.06706633e+00
  3.07108520e+00  3.07295135e+00  3.07704446e+00  3.08077106e+00
  3.09007841e+00  3.09441323e+00  3.09943065e+00  3.10300517e+00
  3.10413224e+00  3.12127463e+00  3.12463888e+00  3.13286291e+00
  3.13554662e+00  3.13898483e+00  3.14039123e+00  3.14328664e+00
  3.14951557e+00  3.15757374e+00  3.16105511e+00  3.16888385e+00
  3.16934259e+00  3.18287956e+00  3.19305309e+00  3.19758240e+00
  3.19936893e+00  3.20835149e+00  3.21164992e+00  3.21340529e+00
  3.21683962e+00  3.22365064e+00  3.22622692e+00  3.22974675e+00
  3.23331993e+00  3.23725634e+00  3.24148202e+00  3.24441414e+00
  3.24847767e+00  3.25175572e+00  3.25681828e+00  3.26030712e+00
  3.26357111e+00  3.26544309e+00  3.27463286e+00  3.27924578e+00
  3.28459210e+00  3.28853687e+00  3.29188325e+00  3.29916053e+00
  3.30563784e+00  3.30787840e+00  3.31129901e+00  3.31569745e+00
  3.31785816e+00  3.32481890e+00  3.33379493e+00  3.33679645e+00
  3.34651447e+00  3.35059692e+00  3.35473785e+00  3.35711682e+00
  3.36307220e+00  3.36895240e+00  3.37120880e+00  3.37577672e+00
  3.37929135e+00  3.39361787e+00  3.39506967e+00  3.40010691e+00
  3.40373990e+00  3.41223930e+00  3.41655394e+00  3.42271890e+00
  3.42596930e+00  3.43205259e+00  3.43929914e+00  3.43939507e+00
  3.44600444e+00  3.44829615e+00  3.45392382e+00  3.45957648e+00
  3.47137625e+00  3.47164363e+00  3.47768951e+00  3.47987173e+00
  3.48703742e+00  3.48850047e+00  3.49411364e+00  3.49490565e+00
  3.50525972e+00  3.51197370e+00  3.51724206e+00  3.51972565e+00
  3.52631073e+00  3.53310214e+00  3.53493168e+00  3.54573185e+00
  3.54666455e+00  3.54961782e+00  3.55437037e+00  3.55800028e+00
  3.56025674e+00  3.56231038e+00  3.56390945e+00  3.56860243e+00
  3.57140090e+00  3.57249141e+00  3.58038933e+00  3.58434133e+00
  3.58532416e+00  3.58802935e+00  3.59040912e+00  3.59826058e+00
  3.60226778e+00  3.60411926e+00  3.60986343e+00  3.61408852e+00
  3.61754340e+00  3.62497587e+00  3.63179887e+00  3.63597268e+00
  3.63735227e+00  3.64459810e+00  3.65837189e+00  3.66932049e+00
  3.67260528e+00  3.68293022e+00  3.68637917e+00  3.69398932e+00
  3.69838501e+00  3.70515121e+00  3.70990486e+00  3.71764979e+00
  3.72617862e+00  3.72999594e+00  3.73732333e+00  3.73969934e+00
  3.75932826e+00  3.76177371e+00  3.76396750e+00  3.77048686e+00
  3.77480911e+00  3.78071731e+00  3.78591108e+00  3.79709380e+00
  3.80571058e+00  3.81255204e+00  3.82689821e+00  3.83220694e+00
  3.83570354e+00  3.85137722e+00  3.85539776e+00  3.86334532e+00
  3.87414631e+00  3.88534201e+00  3.89555796e+00  3.90284421e+00
  3.91068534e+00  3.91644221e+00  3.92842061e+00  3.94595086e+00
  3.95273631e+00  3.96177066e+00  3.96427331e+00  3.96681391e+00
  3.97541014e+00  3.98083194e+00  3.99047608e+00  4.00529533e+00
  4.01281245e+00  4.02059641e+00  4.03177315e+00  4.04085987e+00
  4.04905471e+00  4.04988497e+00  4.05619662e+00  4.07507997e+00
  4.09100611e+00  4.10052763e+00  4.10895684e+00  4.12070734e+00
  4.13315138e+00  4.14183488e+00  4.14570865e+00  4.15408403e+00
  4.15551500e+00  4.16471215e+00  4.17128938e+00  4.17797900e+00
  4.18579114e+00  4.19347786e+00  4.19948416e+00  4.20278771e+00
  4.21169914e+00  4.21282623e+00  4.22710450e+00  4.23291056e+00
  4.23537209e+00  4.24515548e+00  4.24674804e+00  4.25508484e+00
  4.25612862e+00  4.25885182e+00  4.26401556e+00  4.26649031e+00
  4.26850450e+00  4.27328004e+00  4.28502820e+00  4.28894575e+00
  4.29337468e+00  4.29891610e+00  4.30264958e+00  4.31032746e+00
  4.31284607e+00  4.31712355e+00  4.33060457e+00  4.33580363e+00
  4.34352250e+00  4.34596573e+00  4.35097258e+00  4.35820403e+00
  4.36269807e+00  4.36647910e+00  4.36923404e+00  4.38141111e+00
  4.38683018e+00  4.40299540e+00  4.40966302e+00  4.41684855e+00
  4.42972253e+00  4.43619911e+00  4.44565407e+00  4.44991944e+00
  4.45918194e+00  4.46669481e+00  4.48372275e+00  4.49005681e+00
  4.49794024e+00  4.50124472e+00  4.50915832e+00  4.52852232e+00
  4.53761396e+00  4.55212813e+00  4.58187500e+00  4.61684954e+00
  4.62815030e+00  4.63914815e+00  4.64957470e+00  4.65465839e+00
  4.66442301e+00  4.67728082e+00  4.68741082e+00  4.69401541e+00
  4.71568305e+00  4.71874621e+00  4.74159892e+00  4.75918770e+00
  4.77234868e+00  4.80720731e+00  4.82727944e+00  4.83887942e+00
  4.85247800e+00  4.85988197e+00  4.86859004e+00  4.87913625e+00
  4.88650814e+00  4.89246000e+00  4.89866158e+00  4.90954416e+00
  4.91696237e+00  4.92808185e+00  4.93612393e+00  4.95177274e+00
  4.96509185e+00  4.97351131e+00  4.97967395e+00  4.99070103e+00
  5.00995078e+00  5.02734161e+00  5.03184086e+00  5.04360318e+00
  5.06842583e+00  5.07895507e+00  5.10067708e+00  5.10546024e+00
  5.12003137e+00  5.13133890e+00  5.16817020e+00  5.17613776e+00
  5.20486782e+00  5.21196764e+00  5.23151712e+00  5.24142817e+00
  5.25501223e+00  5.26758870e+00  5.28555208e+00  5.31295282e+00
  5.31932050e+00  5.34084374e+00  5.38059947e+00  5.41564263e+00
  5.42632764e+00  5.45020933e+00  5.47595620e+00  5.48760408e+00
  5.49394893e+00  5.50706768e+00  5.52654682e+00  5.54116874e+00
  5.54701164e+00  5.55186290e+00  5.57197216e+00  5.63986013e+00
  5.65406132e+00  5.66528894e+00  5.70526524e+00  5.70612078e+00
  5.78481726e+00  5.78508648e+00  5.79296778e+00  5.83061793e+00
  5.90939346e+00  5.94031340e+00  5.95090740e+00  5.95663677e+00
  6.10874307e+00  6.34493687e+00  6.42494929e+00  6.94358986e+00
  6.94550885e+00  6.94907650e+00  6.95069382e+00  6.95263286e+00
  6.95450968e+00  6.95617447e+00  6.95759492e+00  6.95893110e+00
  6.95982483e+00  6.96144489e+00  6.96373451e+00  6.96513759e+00
  6.96542494e+00  6.96648039e+00  6.97116013e+00  6.97695688e+00
  6.97770706e+00  6.97986790e+00  6.98749141e+00  7.00467532e+00
  7.00627353e+00  7.02762753e+00  7.02860186e+00  7.04590127e+00
  7.04765482e+00  7.06022038e+00  7.06204184e+00  7.08915600e+00
  7.09195190e+00  7.10941332e+00  7.11582896e+00  7.14009969e+00
  7.14208098e+00  7.15138704e+00  7.15399564e+00  7.19254229e+00
  7.19495343e+00  7.22793951e+00  7.22963797e+00  7.24527498e+00
  7.24962517e+00  7.25137656e+00  7.27222148e+00  7.27631826e+00
  7.30825827e+00  7.31058761e+00  7.34528114e+00  7.34645044e+00
  7.35446139e+00  7.35655402e+00  7.35701804e+00  7.35771995e+00
  7.42380371e+00  7.42469256e+00  7.45657264e+00  7.46074979e+00
  7.47619071e+00  7.47844815e+00  7.50452991e+00  7.50695205e+00
  7.55896155e+00  7.56216580e+00  7.65394857e+00  7.65658046e+00
  7.69892242e+00  7.70167327e+00  7.77895769e+00  7.78147470e+00
  8.05306099e+00  8.05727080e+00  8.38452540e+00  8.38696202e+00
  8.41356250e+00  8.41659886e+00  8.45065826e+00  8.45482460e+00
  8.46665100e+00  8.49715731e+00  8.50868843e+00  8.53276847e+00
  8.54227686e+00  8.54782787e+00  8.61762318e+00  8.61897092e+00
  8.65278351e+00  8.66200285e+00  8.66843843e+00  8.67267363e+00
  8.76283571e+00  8.76509958e+00  8.79629809e+00  8.79860551e+00
  8.80400709e+00  8.81188149e+00  8.83925528e+00  8.84284030e+00
  8.87183831e+00  8.87447826e+00  8.87869621e+00  8.88223536e+00
  8.93123004e+00  8.93594331e+00  8.96810973e+00  8.97092704e+00
  9.01326793e+00  9.01865922e+00  9.02685872e+00  9.02967005e+00
  9.11848632e+00  9.12284140e+00  9.12422203e+00  9.12802423e+00
  9.15742173e+00  9.15900096e+00  9.16534975e+00  9.18224130e+00
  9.21130310e+00  9.22087134e+00  9.40507217e+00  9.41567355e+00
  1.57663605e+01  2.22342020e+01  2.23667165e+01  2.23987034e+01
  2.24610142e+01  2.26000469e+01  2.26111861e+01  2.26373591e+01
  2.26679190e+01  2.27797080e+01  2.28553917e+01  2.28848512e+01
  2.28927759e+01  2.29074054e+01  2.29140723e+01  2.29211037e+01
  2.30229865e+01  2.30316396e+01  2.30580997e+01  2.30880658e+01
  2.31629569e+01  2.32442915e+01  2.34828028e+01  2.35729409e+01
  2.36448854e+01  3.24758122e+01  3.30473662e+01  5.71341604e+01
  5.71466166e+01  5.73217149e+01  5.73278503e+01  5.74065601e+01
  5.74171843e+01  5.75525738e+01  5.75712185e+01  5.75850790e+01
  5.76279756e+01]
nelec by numeric integration = 261.99993852077034
    CPU time for vxc    177.39 sec, wall time     13.12 sec
    CPU time for df vj and vk    816.39 sec, wall time     63.53 sec
    CPU time for df vj and vk    598.68 sec, wall time     41.67 sec
E1 = -11347.056825668828  Ecoul = 5268.984929934377  Exc = -255.7602013029021
cycle= 1 E= -2052.99072351325  delta_E= 2.09e-11  |g|= 9.51e-06  |ddm|= 1.83e-05
    CPU time for cycle= 1   1600.06 sec, wall time    119.26 sec
  HOMO = -0.337271036590346  LUMO = -0.0649193194450686
  mo_energy =
[-2.47826855e+01 -2.47804250e+01 -2.47781908e+01 -2.47780289e+01
 -2.47767602e+01 -2.47767363e+01 -2.47766228e+01 -2.47740704e+01
 -2.47736673e+01 -2.47736375e+01 -1.45252837e+01 -1.45027709e+01
 -1.03849989e+01 -1.03822501e+01 -1.03785858e+01 -1.03779869e+01
 -1.03777390e+01 -1.03773026e+01 -1.03770076e+01 -1.03765888e+01
 -1.03764479e+01 -1.03745990e+01 -1.03344862e+01 -1.03156542e+01
 -1.03000718e+01 -1.02971523e+01 -1.02957184e+01 -1.02948658e+01
 -1.02927640e+01 -1.02915830e+01 -1.02913593e+01 -1.02907901e+01
 -1.02905535e+01 -1.02893003e+01 -1.02852530e+01 -1.02806015e+01
 -6.85366501e+00 -1.39241346e+00 -1.39036499e+00 -1.38423754e+00
 -1.38230321e+00 -1.37850197e+00 -1.37608021e+00 -1.36927591e+00
 -1.36728737e+00 -1.36661145e+00 -1.36491020e+00 -1.22852760e+00
 -1.04039034e+00 -1.02905997e+00 -1.02753037e+00 -1.00741894e+00
 -9.66143780e-01 -9.24517554e-01 -9.09814715e-01 -9.06280392e-01
 -9.05167695e-01 -9.03595908e-01 -9.02539904e-01 -8.89059118e-01
 -8.48483121e-01 -8.03018465e-01 -7.89576428e-01 -7.84682169e-01
 -7.83476162e-01 -7.74802502e-01 -7.68939404e-01 -7.44452657e-01
 -7.19994790e-01 -7.15717789e-01 -7.13282961e-01 -7.09116896e-01
 -7.06464355e-01 -7.00642333e-01 -6.93223935e-01 -6.84504742e-01
 -6.70978331e-01 -6.58729348e-01 -6.57215462e-01 -6.55151843e-01
 -6.53428119e-01 -6.48767428e-01 -6.45742424e-01 -6.34974003e-01
 -6.31740400e-01 -6.30742816e-01 -6.19559752e-01 -6.18689790e-01
 -6.13506850e-01 -6.09150902e-01 -6.06559336e-01 -6.01837447e-01
 -5.97497268e-01 -5.88708487e-01 -5.83361453e-01 -5.81996339e-01
 -5.81719396e-01 -5.78896161e-01 -5.73649674e-01 -5.63922989e-01
 -5.61455014e-01 -5.58234575e-01 -5.57372632e-01 -5.56310520e-01
 -5.54591339e-01 -5.50710796e-01 -5.48144280e-01 -5.31594097e-01
 -5.27210855e-01 -5.25083706e-01 -5.17703062e-01 -5.04737890e-01
 -4.97275817e-01 -4.94821102e-01 -4.93061106e-01 -4.89340395e-01
 -4.86547279e-01 -4.78890063e-01 -4.71128945e-01 -4.70492811e-01
 -4.58109871e-01 -4.37334238e-01 -4.27048004e-01 -3.99563627e-01
 -3.76489502e-01 -3.70358878e-01 -3.56421968e-01 -3.51893070e-01
 -3.50355732e-01 -3.46982292e-01 -3.37271037e-01 -6.49193194e-02
  3.15660511e-02  3.71726672e-02  4.48811129e-02  4.95649862e-02
  5.84294286e-02  6.05513857e-02  6.26890291e-02  7.37832728e-02
  8.44672877e-02  9.14994449e-02  1.22416304e-01  1.25397751e-01
  1.34418852e-01  1.44702955e-01  1.47146648e-01  1.52763685e-01
  1.54580197e-01  1.64001901e-01  1.70022620e-01  1.77621277e-01
  1.83183672e-01  1.93875490e-01  1.95126035e-01  1.99022052e-01
  1.99313496e-01  2.09542973e-01  2.11292489e-01  2.17459035e-01
  2.24923482e-01  2.31768437e-01  2.35296978e-01  2.38722432e-01
  2.43881212e-01  2.53017308e-01  2.59501188e-01  2.61771371e-01
  2.62499262e-01  2.66914954e-01  2.69935167e-01  2.70714288e-01
  2.72274426e-01  2.74707053e-01  2.75780520e-01  2.83072562e-01
  2.84997330e-01  2.86621211e-01  2.88661171e-01  2.92130807e-01
  2.95841838e-01  3.00739756e-01  3.03793343e-01  3.06767510e-01
  3.12517143e-01  3.13662457e-01  3.19602434e-01  3.24533809e-01
  3.30061708e-01  3.33859675e-01  3.40173987e-01  3.43000095e-01
  3.49338555e-01  3.49692684e-01  3.51408228e-01  3.60466616e-01
  3.63062167e-01  3.67523374e-01  3.68512080e-01  3.69577962e-01
  3.72871453e-01  3.78821988e-01  3.80602877e-01  3.84999250e-01
  3.85736085e-01  3.90269284e-01  3.94025786e-01  3.97747666e-01
  4.01370047e-01  4.07159046e-01  4.09986053e-01  4.16910580e-01
  4.20263149e-01  4.25838003e-01  4.26690724e-01  4.28071460e-01
  4.33329718e-01  4.36293923e-01  4.38957540e-01  4.42163228e-01
  4.44265620e-01  4.46043636e-01  4.53843310e-01  4.57956663e-01
  4.61190028e-01  4.63070711e-01  4.66598919e-01  4.67674523e-01
  4.72143650e-01  4.75285681e-01  4.79909977e-01  4.81069226e-01
  4.85907981e-01  4.87791649e-01  4.94130065e-01  4.95347235e-01
  4.97655612e-01  4.99736425e-01  5.02272645e-01  5.03558004e-01
  5.06426351e-01  5.10879529e-01  5.12175287e-01  5.15706290e-01
  5.17981369e-01  5.19898479e-01  5.21698303e-01  5.24047760e-01
  5.29868479e-01  5.30729719e-01  5.36464879e-01  5.40149893e-01
  5.41658336e-01  5.45723866e-01  5.49003156e-01  5.52086639e-01
  5.56142775e-01  5.59575088e-01  5.64455590e-01  5.66528739e-01
  5.69145095e-01  5.69907230e-01  5.73265223e-01  5.76611667e-01
  5.83149685e-01  5.86151622e-01  5.89399568e-01  5.95534785e-01
  6.01237581e-01  6.05389594e-01  6.08293305e-01  6.13829881e-01
  6.19888861e-01  6.26095189e-01  6.37512593e-01  6.42530857e-01
  6.48644474e-01  6.51886556e-01  6.58080474e-01  6.65800917e-01
  6.73316104e-01  6.77049337e-01  6.86597754e-01  6.95687236e-01
  6.96517299e-01  7.05782720e-01  7.08494879e-01  7.16020551e-01
  7.17337332e-01  7.20011647e-01  7.23408124e-01  7.24120899e-01
  7.28364381e-01  7.34538407e-01  7.39206952e-01  7.46965928e-01
  7.51182692e-01  7.52750049e-01  7.54752224e-01  7.57415698e-01
  7.62591930e-01  7.65513467e-01  7.66539925e-01  7.71947053e-01
  7.76010924e-01  7.81320621e-01  7.84542256e-01  7.87691296e-01
  7.94446159e-01  7.96924896e-01  8.00940273e-01  8.07036003e-01
  8.08667499e-01  8.09547426e-01  8.17022570e-01  8.22039593e-01
  8.25102674e-01  8.32007992e-01  8.35936002e-01  8.38691830e-01
  8.41193742e-01  8.48287808e-01  8.52246348e-01  8.54765963e-01
  8.57144869e-01  8.62052082e-01  8.69485869e-01  8.70624923e-01
  8.82294513e-01  8.88185070e-01  8.92000203e-01  8.94923973e-01
  8.96087374e-01  9.00615636e-01  9.04419080e-01  9.13058560e-01
  9.14723238e-01  9.20731026e-01  9.24801223e-01  9.29076885e-01
  9.30721248e-01  9.38922084e-01  9.43273382e-01  9.44520654e-01
  9.55886291e-01  9.58699003e-01  9.62719305e-01  9.67481465e-01
  9.71488297e-01  9.73540609e-01  9.77781701e-01  9.82683149e-01
  9.86763972e-01  9.89570565e-01  9.94261045e-01  9.98898492e-01
  1.00494447e+00  1.01214556e+00  1.01597404e+00  1.01934568e+00
  1.02303862e+00  1.02697460e+00  1.03250174e+00  1.03858431e+00
  1.04005665e+00  1.04565609e+00  1.04910053e+00  1.05317064e+00
  1.06075025e+00  1.06253558e+00  1.06953758e+00  1.07269529e+00
  1.07861755e+00  1.08187259e+00  1.08340765e+00  1.08732080e+00
  1.09432734e+00  1.09858011e+00  1.10574351e+00  1.11265271e+00
  1.12197122e+00  1.12603152e+00  1.13125900e+00  1.13352094e+00
  1.14341712e+00  1.15084734e+00  1.15851976e+00  1.16179499e+00
  1.16299402e+00  1.17182801e+00  1.17225110e+00  1.18347516e+00
  1.19291798e+00  1.19607777e+00  1.19675720e+00  1.19868630e+00
  1.20492756e+00  1.20959742e+00  1.21206082e+00  1.21873948e+00
  1.22199667e+00  1.22703328e+00  1.23404123e+00  1.23818454e+00
  1.25174970e+00  1.25808802e+00  1.26060789e+00  1.26855556e+00
  1.27317115e+00  1.27925705e+00  1.28357220e+00  1.28827351e+00
  1.28993577e+00  1.29480710e+00  1.29876458e+00  1.30632940e+00
  1.31418669e+00  1.31831358e+00  1.32210966e+00  1.32370671e+00
  1.32940297e+00  1.33433460e+00  1.34290072e+00  1.34679881e+00
  1.34960693e+00  1.35425277e+00  1.35926861e+00  1.36267693e+00
  1.37008148e+00  1.37744209e+00  1.38312385e+00  1.39539118e+00
  1.40485215e+00  1.40644875e+00  1.41103201e+00  1.42072641e+00
  1.42369129e+00  1.43042085e+00  1.43240903e+00  1.44156603e+00
  1.45147801e+00  1.46121559e+00  1.46376130e+00  1.47118022e+00
  1.47881819e+00  1.48839661e+00  1.49298873e+00  1.49831568e+00
  1.50329308e+00  1.51582866e+00  1.51842670e+00  1.52633149e+00
  1.52900605e+00  1.53188714e+00  1.53403796e+00  1.53965260e+00
  1.54147024e+00  1.54843909e+00  1.54942550e+00  1.55788379e+00
  1.56207667e+00  1.56595985e+00  1.57471832e+00  1.57893988e+00
  1.58610339e+00  1.58628782e+00  1.59720819e+00  1.60234182e+00
  1.60530372e+00  1.61649303e+00  1.61906467e+00  1.62689619e+00
  1.63374031e+00  1.63859310e+00  1.64008063e+00  1.64889500e+00
  1.66150768e+00  1.66992291e+00  1.67518594e+00  1.68114347e+00
  1.68595617e+00  1.69621587e+00  1.70258218e+00  1.70906872e+00
  1.71569980e+00  1.71891844e+00  1.72715516e+00  1.72942970e+00
  1.74054194e+00  1.74784195e+00  1.75476086e+00  1.76405752e+00
  1.76475942e+00  1.76999735e+00  1.77702365e+00  1.77795247e+00
  1.78490878e+00  1.78812474e+00  1.79441801e+00  1.80518329e+00
  1.81048077e+00  1.81551655e+00  1.81921678e+00  1.82238583e+00
  1.82767845e+00  1.83828310e+00  1.84262316e+00  1.84785657e+00
  1.85069654e+00  1.85826597e+00  1.86358574e+00  1.87016507e+00
  1.87520236e+00  1.88436978e+00  1.88989175e+00  1.90228272e+00
  1.91049845e+00  1.91325047e+00  1.92718037e+00  1.92885070e+00
  1.93433854e+00  1.94415148e+00  1.94819215e+00  1.95229222e+00
  1.96685299e+00  1.98302264e+00  1.98530134e+00  1.99150581e+00
  2.00905462e+00  2.01539025e+00  2.02341694e+00  2.02557003e+00
  2.02897074e+00  2.03407359e+00  2.04094682e+00  2.05002788e+00
  2.05564038e+00  2.05826419e+00  2.06548259e+00  2.07479131e+00
  2.07980947e+00  2.08762287e+00  2.09866031e+00  2.09940945e+00
  2.10569135e+00  2.11267930e+00  2.11694380e+00  2.12362283e+00
  2.12436136e+00  2.12686083e+00  2.13103917e+00  2.13465497e+00
  2.14465400e+00  2.15045708e+00  2.15826224e+00  2.15900900e+00
  2.16095759e+00  2.17068419e+00  2.17232110e+00  2.18241622e+00
  2.18392617e+00  2.18910718e+00  2.19012654e+00  2.19592476e+00
  2.20208165e+00  2.21115604e+00  2.21633633e+00  2.21859485e+00
  2.22419162e+00  2.23599946e+00  2.24059825e+00  2.24235960e+00
  2.25110637e+00  2.26081325e+00  2.26994724e+00  2.27094590e+00
  2.27383208e+00  2.28271468e+00  2.29040760e+00  2.29569626e+00
  2.29977666e+00  2.30577581e+00  2.30634811e+00  2.31075686e+00
  2.31767709e+00  2.32484312e+00  2.32828513e+00  2.33361674e+00
  2.34128639e+00  2.34716278e+00  2.35223573e+00  2.35752788e+00
  2.36586914e+00  2.37321629e+00  2.38122703e+00  2.38954778e+00
  2.40013002e+00  2.40778398e+00  2.41779085e+00  2.42462827e+00
  2.43078051e+00  2.43448967e+00  2.44117428e+00  2.45735028e+00
  2.45845107e+00  2.46919954e+00  2.47283465e+00  2.49557561e+00
  2.50435289e+00  2.51762051e+00  2.52363808e+00  2.53339632e+00
  2.53759826e+00  2.55257961e+00  2.56191332e+00  2.56694403e+00
  2.57603213e+00  2.58519245e+00  2.59130434e+00  2.59768114e+00
  2.60085595e+00  2.60785009e+00  2.60931003e+00  2.61887332e+00
  2.61979078e+00  2.62757125e+00  2.63682127e+00  2.64067983e+00
  2.64388933e+00  2.65016200e+00  2.65363893e+00  2.66198008e+00
  2.67186502e+00  2.67354223e+00  2.67924664e+00  2.68579407e+00
  2.68931564e+00  2.69752469e+00  2.70040352e+00  2.70788052e+00
  2.71628107e+00  2.71747987e+00  2.72235179e+00  2.72839049e+00
  2.73104223e+00  2.73335260e+00  2.73544999e+00  2.74128198e+00
  2.74568533e+00  2.74688732e+00  2.75398078e+00  2.75764023e+00
  2.75896835e+00  2.76674596e+00  2.77143524e+00  2.77506864e+00
  2.78083940e+00  2.78326560e+00  2.79128251e+00  2.79691270e+00
  2.80513411e+00  2.80652453e+00  2.81140276e+00  2.81615471e+00
  2.82142938e+00  2.82376684e+00  2.83063658e+00  2.83503259e+00
  2.84227010e+00  2.84512709e+00  2.85835999e+00  2.86145848e+00
  2.87063965e+00  2.87368569e+00  2.87842151e+00  2.88168897e+00
  2.88772507e+00  2.89269025e+00  2.90152156e+00  2.90382789e+00
  2.90854828e+00  2.91282925e+00  2.91771098e+00  2.91903710e+00
  2.92175336e+00  2.92648412e+00  2.93045246e+00  2.93668997e+00
  2.94284337e+00  2.95181122e+00  2.95371105e+00  2.95753662e+00
  2.96338763e+00  2.96508572e+00  2.96603804e+00  2.96900681e+00
  2.97572336e+00  2.98102545e+00  2.98476667e+00  2.99015065e+00
  2.99655113e+00  3.00460410e+00  3.00464760e+00  3.00821357e+00
  3.01367841e+00  3.02031639e+00  3.02139070e+00  3.02665680e+00
  3.03466963e+00  3.04074200e+00  3.04677004e+00  3.04990868e+00
  3.05075252e+00  3.06029350e+00  3.06230642e+00  3.06706646e+00
  3.07108505e+00  3.07295141e+00  3.07704444e+00  3.08077102e+00
  3.09007855e+00  3.09441333e+00  3.09943061e+00  3.10300520e+00
  3.10413229e+00  3.12127471e+00  3.12463903e+00  3.13286263e+00
  3.13554673e+00  3.13898493e+00  3.14039124e+00  3.14328681e+00
  3.14951559e+00  3.15757381e+00  3.16105526e+00  3.16888395e+00
  3.16934259e+00  3.18287966e+00  3.19305315e+00  3.19758246e+00
  3.19936906e+00  3.20835159e+00  3.21164992e+00  3.21340538e+00
  3.21683982e+00  3.22365075e+00  3.22622711e+00  3.22974682e+00
  3.23332020e+00  3.23725640e+00  3.24148210e+00  3.24441425e+00
  3.24847779e+00  3.25175581e+00  3.25681849e+00  3.26030713e+00
  3.26357105e+00  3.26544319e+00  3.27463285e+00  3.27924582e+00
  3.28459225e+00  3.28853695e+00  3.29188337e+00  3.29916060e+00
  3.30563784e+00  3.30787844e+00  3.31129916e+00  3.31569753e+00
  3.31785835e+00  3.32481894e+00  3.33379502e+00  3.33679658e+00
  3.34651461e+00  3.35059682e+00  3.35473777e+00  3.35711694e+00
  3.36307235e+00  3.36895258e+00  3.37120897e+00  3.37577685e+00
  3.37929154e+00  3.39361791e+00  3.39506978e+00  3.40010709e+00
  3.40374006e+00  3.41223936e+00  3.41655409e+00  3.42271899e+00
  3.42596948e+00  3.43205268e+00  3.43929935e+00  3.43939517e+00
  3.44600462e+00  3.44829631e+00  3.45392388e+00  3.45957668e+00
  3.47137633e+00  3.47164382e+00  3.47768964e+00  3.47987186e+00
  3.48703755e+00  3.48850056e+00  3.49411381e+00  3.49490571e+00
  3.50525974e+00  3.51197393e+00  3.51724222e+00  3.51972600e+00
  3.52631092e+00  3.53310234e+00  3.53493194e+00  3.54573201e+00
  3.54666462e+00  3.54961801e+00  3.55437042e+00  3.55800035e+00
  3.56025676e+00  3.56231053e+00  3.56390956e+00  3.56860253e+00
  3.57140104e+00  3.57249142e+00  3.58038936e+00  3.58434142e+00
  3.58532427e+00  3.58802927e+00  3.59040909e+00  3.59826056e+00
  3.60226781e+00  3.60411940e+00  3.60986350e+00  3.61408860e+00
  3.61754353e+00  3.62497586e+00  3.63179884e+00  3.63597260e+00
  3.63735219e+00  3.64459811e+00  3.65837165e+00  3.66932029e+00
  3.67260530e+00  3.68293016e+00  3.68637912e+00  3.69398931e+00
  3.69838495e+00  3.70515120e+00  3.70990472e+00  3.71764959e+00
  3.72617869e+00  3.72999606e+00  3.73732311e+00  3.73969910e+00
  3.75932819e+00  3.76177361e+00  3.76396758e+00  3.77048704e+00
  3.77480918e+00  3.78071735e+00  3.78591112e+00  3.79709384e+00
  3.80571063e+00  3.81255204e+00  3.82689805e+00  3.83220687e+00
  3.83570348e+00  3.85137730e+00  3.85539761e+00  3.86334534e+00
  3.87414645e+00  3.88534178e+00  3.89555795e+00  3.90284406e+00
  3.91068508e+00  3.91644207e+00  3.92842026e+00  3.94595057e+00
  3.95273644e+00  3.96177020e+00  3.96427288e+00  3.96681361e+00
  3.97540988e+00  3.98083200e+00  3.99047583e+00  4.00529536e+00
  4.01281243e+00  4.02059642e+00  4.03177323e+00  4.04085990e+00
  4.04905473e+00  4.04988504e+00  4.05619684e+00  4.07508002e+00
  4.09100640e+00  4.10052750e+00  4.10895703e+00  4.12070748e+00
  4.13315150e+00  4.14183485e+00  4.14570858e+00  4.15408363e+00
  4.15551497e+00  4.16471183e+00  4.17128905e+00  4.17797892e+00
  4.18579108e+00  4.19347787e+00  4.19948420e+00  4.20278786e+00
  4.21169916e+00  4.21282622e+00  4.22710444e+00  4.23291059e+00
  4.23537208e+00  4.24515575e+00  4.24674831e+00  4.25508518e+00
  4.25612874e+00  4.25885204e+00  4.26401581e+00  4.26649059e+00
  4.26850457e+00  4.27328009e+00  4.28502823e+00  4.28894598e+00
  4.29337475e+00  4.29891620e+00  4.30264973e+00  4.31032774e+00
  4.31284616e+00  4.31712363e+00  4.33060461e+00  4.33580376e+00
  4.34352274e+00  4.34596579e+00  4.35097279e+00  4.35820416e+00
  4.36269804e+00  4.36647926e+00  4.36923413e+00  4.38141096e+00
  4.38682993e+00  4.40299533e+00  4.40966315e+00  4.41684880e+00
  4.42972251e+00  4.43619914e+00  4.44565413e+00  4.44991951e+00
  4.45918208e+00  4.46669495e+00  4.48372279e+00  4.49005704e+00
  4.49794033e+00  4.50124468e+00  4.50915863e+00  4.52852249e+00
  4.53761393e+00  4.55212823e+00  4.58187503e+00  4.61684978e+00
  4.62815049e+00  4.63914835e+00  4.64957473e+00  4.65465856e+00
  4.66442315e+00  4.67728098e+00  4.68741109e+00  4.69401558e+00
  4.71568316e+00  4.71874633e+00  4.74159906e+00  4.75918785e+00
  4.77234880e+00  4.80720766e+00  4.82727959e+00  4.83887964e+00
  4.85247820e+00  4.85988208e+00  4.86859025e+00  4.87913659e+00
  4.88650856e+00  4.89246014e+00  4.89866190e+00  4.90954450e+00
  4.91696257e+00  4.92808234e+00  4.93612421e+00  4.95177283e+00
  4.96509205e+00  4.97351127e+00  4.97967424e+00  4.99070105e+00
  5.00995115e+00  5.02734174e+00  5.03184121e+00  5.04360356e+00
  5.06842611e+00  5.07895538e+00  5.10067740e+00  5.10546063e+00
  5.12003168e+00  5.13133953e+00  5.16817052e+00  5.17613793e+00
  5.20486779e+00  5.21196802e+00  5.23151738e+00  5.24142819e+00
  5.25501229e+00  5.26758906e+00  5.28555241e+00  5.31295318e+00
  5.31932073e+00  5.34084440e+00  5.38059964e+00  5.41564250e+00
  5.42632746e+00  5.45020958e+00  5.47595641e+00  5.48760442e+00
  5.49394926e+00  5.50706792e+00  5.52654709e+00  5.54116897e+00
  5.54701150e+00  5.55186264e+00  5.57197244e+00  5.63985984e+00
  5.65406095e+00  5.66528915e+00  5.70526551e+00  5.70612098e+00
  5.78481769e+00  5.78508679e+00  5.79296795e+00  5.83061871e+00
  5.90939399e+00  5.94031383e+00  5.95090732e+00  5.95663661e+00
  6.10874380e+00  6.34493775e+00  6.42495009e+00  6.94358888e+00
  6.94550771e+00  6.94907556e+00  6.95069271e+00  6.95263190e+00
  6.95450869e+00  6.95617345e+00  6.95759382e+00  6.95893024e+00
  6.95982387e+00  6.96144376e+00  6.96373360e+00  6.96513684e+00
  6.96542379e+00  6.96647954e+00  6.97115876e+00  6.97695665e+00
  6.97770549e+00  6.97986757e+00  6.98748984e+00  7.00467441e+00
  7.00627244e+00  7.02762669e+00  7.02860075e+00  7.04590022e+00
  7.04765386e+00  7.06021949e+00  7.06204086e+00  7.08915511e+00
  7.09195096e+00  7.10941235e+00  7.11582801e+00  7.14009880e+00
  7.14207998e+00  7.15138605e+00  7.15399476e+00  7.19254152e+00
  7.19495249e+00  7.22793864e+00  7.22963696e+00  7.24527539e+00
  7.24962423e+00  7.25137582e+00  7.27222056e+00  7.27631755e+00
  7.30825750e+00  7.31058663e+00  7.34528025e+00  7.34644944e+00
  7.35446055e+00  7.35655320e+00  7.35701702e+00  7.35771908e+00
  7.42380290e+00  7.42469158e+00  7.45657190e+00  7.46074896e+00
  7.47618988e+00  7.47844719e+00  7.50452909e+00  7.50695115e+00
  7.55896075e+00  7.56216495e+00  7.65394777e+00  7.65657968e+00
  7.69892171e+00  7.70167239e+00  7.77895687e+00  7.78147390e+00
  8.05306023e+00  8.05727001e+00  8.38452397e+00  8.38696034e+00
  8.41356105e+00  8.41659724e+00  8.45065697e+00  8.45482298e+00
  8.46664959e+00  8.49715645e+00  8.50868725e+00  8.53276665e+00
  8.54227530e+00  8.54782634e+00  8.61762163e+00  8.61896942e+00
  8.65278167e+00  8.66200158e+00  8.66843772e+00  8.67267223e+00
  8.76283442e+00  8.76509802e+00  8.79629685e+00  8.79860399e+00
  8.80400573e+00  8.81188020e+00  8.83925406e+00  8.84283888e+00
  8.87183697e+00  8.87447677e+00  8.87869495e+00  8.88223394e+00
  8.93122873e+00  8.93594175e+00  8.96810849e+00  8.97092552e+00
  9.01326652e+00  9.01865795e+00  9.02685725e+00  9.02966852e+00
  9.11848571e+00  9.12284036e+00  9.12422035e+00  9.12802261e+00
  9.15742052e+00  9.15899948e+00  9.16534836e+00  9.18224027e+00
  9.21130186e+00  9.22086987e+00  9.40507085e+00  9.41567224e+00
  1.57663599e+01  2.22342020e+01  2.23667167e+01  2.23987042e+01
  2.24610151e+01  2.26000466e+01  2.26111862e+01  2.26373593e+01
  2.26679188e+01  2.27797088e+01  2.28553919e+01  2.28848513e+01
  2.28927766e+01  2.29074063e+01  2.29140732e+01  2.29211045e+01
  2.30229870e+01  2.30316398e+01  2.30581003e+01  2.30880662e+01
  2.31629574e+01  2.32442925e+01  2.34828023e+01  2.35729416e+01
  2.36448859e+01  3.24758137e+01  3.30473673e+01  5.71341579e+01
  5.71466136e+01  5.73217124e+01  5.73278474e+01  5.74065577e+01
  5.74171813e+01  5.75525724e+01  5.75712171e+01  5.75850756e+01
  5.76279722e+01]
nelec by numeric integration = 261.9999385207655
    CPU time for vxc    190.69 sec, wall time     14.52 sec
    CPU time for df vj and vk    830.27 sec, wall time     68.04 sec
    CPU time for df vj and vk    577.66 sec, wall time     39.38 sec
E1 = -11347.056892746983  Ecoul = 5268.985014206758  Exc = -255.76021849713015
Extra cycle  E= -2052.99072351325  delta_E= -2.73e-12  |g|= 1.15e-05  |ddm|= 2.22e-05
    CPU time for scf_cycle   5787.60 sec, wall time    467.95 sec
    CPU time for SCF   5787.60 sec, wall time    467.95 sec
converged SCF energy = -2052.99072351325
SCF Done after  467.9494 seconds
after SCF memory used: 29339.3359375 MB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
a_x = 0.56
beta = 8.0
alpha = 4.58
hdiag (140170,)
n_occ =  131
n_vir =  1070
max_vir =  252
Q-Gamma tensors building time = 19.4356
after Q matrix memory used: 29985.69140625 MB
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   sTDA
Preconditioner:  sTDA
A matrix size =  140170 * 140170
sTDA nstate = 28
sTDA A diagonalization: threshold = 0.001 ; in 10 steps  30.6676 seconds
sTDA excitation energies:
[3.30472502 3.75305819 3.87749732 4.31132854 4.33868003 4.57015821
 4.6281911  4.77032806 5.05392043 5.41697001 5.43208225 5.48138324
 5.54000894 5.57398963 5.74795875 5.81689132 5.8676474  5.92165518
 6.04971031 6.06259385 6.24030926 6.31775994 6.56996225 6.69028562
 6.86163956 6.96863839 6.99575552 7.06048139]
Intial guess time: 30.9934 seconds
    CPU time for df vj and vk  25690.45 sec, wall time   1887.55 sec
    CPU time for df vj and vk  17092.63 sec, wall time   1153.23 sec
Iteration  0
subspace size:  28
maximum residual norm 0.1190193586999814
sTDA Preconditioning Done after  14 steps;  19.1845 seconds
subgencost 1.8751 9.77 %
mvcost 4.6376 24.17 %
GScost 10.8826 56.73 %
subcost 0.0658 0.34 %
m,new_m 28 48
    CPU time for df vj and vk  18561.58 sec, wall time   1395.92 sec
    CPU time for df vj and vk  12460.67 sec, wall time    863.36 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.0475038893112438
sTDA Preconditioning Done after  12 steps;  10.1386 seconds
subgencost 0.7751 7.64 %
mvcost 2.6723 26.36 %
GScost 5.5781 55.02 %
subcost 0.0549 0.54 %
m,new_m 48 68
    CPU time for df vj and vk  16611.58 sec, wall time   1211.92 sec
    CPU time for df vj and vk  11991.75 sec, wall time    791.65 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.029734992552824187
sTDA Preconditioning Done after  10 steps;  8.9381 seconds
subgencost 0.5874 6.57 %
mvcost 2.4053 26.91 %
GScost 4.9669 55.57 %
subcost 0.0393 0.44 %
m,new_m 68 88
    CPU time for df vj and vk  16849.88 sec, wall time   1226.90 sec
    CPU time for df vj and vk  12092.60 sec, wall time    824.04 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.0120546369585413
sTDA Preconditioning Done after  10 steps;  17.5507 seconds
subgencost 1.2459 7.1 %
mvcost 4.503 25.66 %
GScost 9.743 55.51 %
subcost 0.1242 0.71 %
m,new_m 88 108
    CPU time for df vj and vk  16762.33 sec, wall time   1225.57 sec
    CPU time for df vj and vk  12204.50 sec, wall time    830.67 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.0038258579153557016
sTDA Preconditioning Done after  10 steps;  8.9145 seconds
subgencost 0.5888 6.6 %
mvcost 2.498 28.02 %
GScost 4.8264 54.14 %
subcost 0.0418 0.47 %
m,new_m 108 128
    CPU time for df vj and vk  16520.62 sec, wall time   1178.19 sec
    CPU time for df vj and vk  11741.79 sec, wall time    775.37 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.0008852060822823335
sTDA Preconditioning Done after  11 steps;  8.8921 seconds
subgencost 0.6437 7.24 %
mvcost 2.445 27.5 %
GScost 4.8039 54.02 %
subcost 0.0411 0.46 %
m,new_m 128 147
    CPU time for df vj and vk  15588.01 sec, wall time   1118.50 sec
    CPU time for df vj and vk  11105.98 sec, wall time    745.91 sec
new generated guesses: 19
Iteration  6
subspace size:  147
maximum residual norm 0.00016772838197262531
sTDA Preconditioning Done after  16 steps;  4.0555 seconds
subgencost 0.4646 11.46 %
mvcost 1.6952 41.8 %
GScost 1.4662 36.15 %
subcost 0.0214 0.53 %
m,new_m 147 153
    CPU time for df vj and vk   5021.27 sec, wall time    371.37 sec
    CPU time for df vj and vk   3589.07 sec, wall time    240.57 sec
new generated guesses: 6
Iteration  7
subspace size:  153
maximum residual norm 3.3739304729115344e-05
sTDA Preconditioning Done after  18 steps;  1.3714 seconds
subgencost 0.173 12.61 %
mvcost 0.8161 59.5 %
GScost 0.2061 15.03 %
subcost 0.008 0.58 %
m,new_m 153 155
    CPU time for df vj and vk   1671.85 sec, wall time    127.19 sec
    CPU time for df vj and vk   1158.09 sec, wall time     78.53 sec
new generated guesses: 2
Iteration  8
subspace size:  155
maximum residual norm 7.3218540365100865e-06
Davidson procedure aborted
Davidson done after  18846.9154 seconds
Total steps = 9
Final subspace shape =  (155, 155)
Preconditioning time: 79.5757 0.42 %
In-house Davidson time: 18847.0517 seconds
Excited State energies (eV) =
[3.50065308 3.76394374 4.05444073 4.31005142 4.51649699 4.62276854
 4.69220135 4.87759835 5.33863868 5.39540678 5.40517404 5.50364676
 5.95000789 6.00961993 6.18066595 6.22269901 6.23001471 6.27903783
 6.3544067  6.44013017]
|---------------   In-house Developed Davidson Done   -----------|
xyzfile = 46_Azobenzene_3a.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 20
pytd = False
TDA = True
TDDFT = False
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
TDA_options = [0]
TDDFT_options = [0]
dynpol_options = [0]
stapol_options = [0]
TDA_tolerance = 1e-05
TDDFT_tolerance = 1e-05
dynpol_tolerance = 1e-05
stapol_tolerance = 1e-05
max = 35
TDA_initialTOL = 0.001
TDDFT_initialTOL = 0.001
dynpol_initprecTOL = 0.01
stapol_initprecTOL = 0.01
TDA_precondTOL = 0.01
TDDFT_precondTOL = 0.01
TDA_extrainitial = 8
TDDFT_extrainitial = 8
TDDFT_extrainitial_3n = False
eigensolver_tol = 1e-05
memory = 50000
verbose = 5
beta = []
alpha = []
