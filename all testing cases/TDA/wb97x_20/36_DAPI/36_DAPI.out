curpath /scratch/pbsjobs/job.15971925.hpc
lib.num_threads() =  16
at beginning memory used: 51.8671875 MB
mol.max_memory 50000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul6_GS.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
#from einsum2 import einsum2 as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

# from pyscf.tools import molden
# from pyscf.dft import xcfun

# wb97x methanol, sTDA[ 6.46739329  8.18181719  8.38358186  9.45195086  9.52132657  9.98634407
#  10.57628203 11.22108803 11.23872459 11.57456576]

# wb97x methanol, sTDDFT [6.46636223 8.18031038 8.38140358 9.45010938 9.50610109]
# truncate 40 eV         [6.46748128 8.18219018 8.38315179 9.45216734 9.51268853]
#
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA',  help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=bool,  default=False, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default='NA',  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='NA',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=bool,  default=True,  help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default='3',   help='0-9, 9 is best')

parser.add_argument('-n',  '--nstates',                     type=int,   default = 4,      help='number of excited states')
parser.add_argument('-pytd',  '--pytd',                     type=bool,  default = False , help='whether to compare with PySCF TDDFT')

parser.add_argument('-TDA','--TDA',                         type=bool,  default = False, help='perform TDA')
parser.add_argument('-TDDFT','--TDDFT',                     type=bool,  default = False, help='perform TDDFT')
parser.add_argument('-dynpol','--dynpol',                   type=bool,  default = False, help='perform dynamic polarizability')
parser.add_argument('-omega','--dynpol_omega',              type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
parser.add_argument('-stapol','--stapol',                   type=bool,  default = False, help='perform static polarizability')

parser.add_argument('-sTDA','--sTDA',                       type=bool,  default = False, help='perform sTDA calculation')
parser.add_argument('-sTDDFT','--sTDDFT',                   type=bool,  default = False, help='perform sTDDFT calculation')
parser.add_argument('-TT','--Truncate_test',                type=bool,  default = False, help='test the wall time for different virtual truncation')

parser.add_argument('-TV','--truncate_virtual',             type=float, default = 0, help='the threshold to truncate virtual orbitals, in eV')

parser.add_argument('-o1', '--TDA_options',                 type=int,   default = [0], nargs='+', help='0-7')
parser.add_argument('-o2', '--TDDFT_options',               type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o3', '--dynpol_options',              type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o4', '--stapol_options',              type=int,   default = [0], nargs='+', help='0-3')

parser.add_argument('-t1',  '--TDA_tolerance',              type=float, default= 1e-5, help='residual norm conv for TDA')
parser.add_argument('-t2',  '--TDDFT_tolerance',            type=float, default= 1e-5, help='residual norm conv for TDDFT')
parser.add_argument('-t3',  '--dynpol_tolerance',           type=float, default= 1e-5, help='residual norm conv for dynamic polarizability')
parser.add_argument('-t4',  '--stapol_tolerance',           type=float, default= 1e-5, help='residual norm conv for static polarizability')

parser.add_argument('-max',  '--max',                       type=int,   default= 30,   help='max iterations')

parser.add_argument('-it1', '--TDA_initialTOL',             type=float, default= 1e-3, help='conv for sTDA inital guess')
parser.add_argument('-it2', '--TDDFT_initialTOL',           type=float, default= 1e-3, help='conv for sTDDFT inital guess')
parser.add_argument('-it3', '--dynpol_initprecTOL',         type=float, default= 1e-2, help='conv for s-dynamic polarizability inital guess and precond')
parser.add_argument('-it4', '--stapol_initprecTOL',         type=float, default= 1e-2, help='conv for s-static polarizability inital guess and precond')

parser.add_argument('-pt1', '--TDA_precondTOL',             type=float, default= 1e-2, help='conv for TDA preconditioner')
parser.add_argument('-pt2', '--TDDFT_precondTOL',           type=float, default= 1e-2, help='conv for TDDFT preconditioner')

parser.add_argument('-ei1', '--TDA_extrainitial',           type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
parser.add_argument('-ei2', '--TDDFT_extrainitial',         type=int,   default= 8,    help='number of extral TDDFT initial guess vectors, 0-8')
parser.add_argument('-ei3n','--TDDFT_extrainitial_3n',      type=bool,  default= False,help='number of extral TDDFT initial guess vectors, 3state')

parser.add_argument('-et', '--eigensolver_tol',             type=float, default= 1e-5, help='conv for new guess generator in new_ES')
parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')

parser.add_argument('-be', '--beta',                        type=float, default= [],    nargs='+', help='beta = 0.83')
parser.add_argument('-al', '--alpha',                       type=float, default= [],    nargs='+', help='alpha = 0.83')

args = parser.parse_args()
################################################


########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

# info = psutil.virtual_memory()
# print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

f = open(args.xyzfile)
atom_coordinates = f.readlines()
del atom_coordinates[:2]
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile == True:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'
    # to use the chk file as scf input


mf.conv_tol = 1e-10

print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
kernel_t = kernel_1 - kernel_0
print ('SCF Done after ', round(kernel_t, 4), 'seconds')

show_memory_info('after SCF')

#################################################################
# Collect everything needed from PySCF
Qstart = time.time()
Natm = mol.natm
mo_occ = mf.mo_occ
n_occ = len(np.where(mo_occ > 0)[0])
#mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
n_vir = len(np.where(mo_occ == 0)[0])
#################################################
# generate matrix vector multiplication function
td = tddft.TDA(mf)
TDA_vind, hdiag = td.gen_vind(mf)

TD = tddft.TDDFT(mf)
TDDFT_vind, Hdiag = TD.gen_vind(mf)

A_size = n_occ * n_vir

# return AV
def TDA_matrix_vector(V):
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1
#################################################

##################################################################################################
# create a function for dictionary of chemical hardness, by mappig two iteratable subject, list
# list of elements
elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', 'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb','Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
#list of chemical hardness, they are floats, containing elements 1-94, in Hartree
hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
HARDNESS = dict(zip(elements,hardness))
#function to return chemical hardness from dictionary HARDNESS
def Hardness(atom_id):
    atom = mol.atom_pure_symbol(atom_id)
    return HARDNESS[atom]

################################################################################
# This block is the function to produce orthonormalized coefficient matrix C
def matrix_power(S,a):
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    #X == S^a
    return X

def matrix_power2(S):
    s,ket = np.linalg.eigh(S)
    s_sqrt = s**0.5
    s_inv = 1/s_sqrt

    S1 = np.dot(ket*s_sqrt,ket.T)
    S2 = np.dot(ket*s_inv,ket.T)

    #S1 == S^1/2
    #S2 == S^-1/2
    return S1, S2

def orthonormalize(C):
    X = matrix_power(mf.get_ovlp(), 0.5)
    # S = mf.get_ovlp() #.get_ovlp() is basis overlap matrix
    # S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
    C = np.dot(X,C)
    return C

################################################################################
def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']# NA is for Hartree-Fork
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    DF_ax = dict(zip(hybride_F, hybride_paramt))
    #Zhao, Y. and Truhlar, D.G., 2006. Density functional for spectroscopy: no long-range self-interaction error, good performance for Rydberg and charge-transfer states, and better performance on average than B3LYP for ground states. The Journal of Physical Chemistry A, 110(49), pp.13126-13130.

    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]

    elif args.functional in hybride_F:
        beta1 = 0.2
        beta2 = 1.83
        alpha1 = 1.42
        alpha2 = 0.48

        a_x = DF_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)
    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

# creat \eta matrix

def gen_gammaJK():
    Natm = mol.natm
    a = [Hardness(atom_id) for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2

    #Inter-particle distance array
    # unit == ’Bohr’, Its value is 5.29177210903(80)×10^(−11) m
    R = pyscf.gto.mole.inter_distance(mol, coords=None)
    # creat GammaK and GammaK matrix
    GammaJ = (R**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

GammaJ, GammaK = gen_gammaJK()

def generateQ():
    N_bf = len(mo_occ)
    C = mf.mo_coeff
    # mf.mo_coeff is the coefficient matrix
    C = orthonormalize(C)
    # C is orthonormalized coefficient matrix, N_bf * N_bf
    # np.dot(C.T,C) is a an identity matrix
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    #N_bf is number Atomic orbitals = n_occ+n_vir
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

q_tensors = generateQ()

''' if no truncation, max_vir = n_vir and n_occ + max_vir = N_bf '''
print('hdiag', hdiag.shape)
delta_diag_A = hdiag.reshape(n_occ, n_vir)

def gen_maxvir(tol_eV = args.truncate_virtual):
    if tol_eV != 0:
        homo_vir = delta_diag_A[-1,:].tolist()
        # print(delta_diag_A[-1,:]*27.211386245988)
        tol = tol_eV/27.211386245988
        for i in range(len(homo_vir)):
            if homo_vir[i] >= tol:
                max_vir = i
                break
            else:
                max_vir = n_vir
    else:
        max_vir = n_vir
    return max_vir

max_vir = gen_maxvir()
print('n_occ = ', n_occ)
print('n_vir = ', n_vir)
print('max_vir = ', max_vir)

A_reduced_size = n_occ * max_vir

def gen_QJK(max_vir=max_vir):

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)


    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()
# pre-calculate and store the Q-Gamma rank 3 tensor
Qend = time.time()

Q_time = Qend - Qstart
print('Q-Gamma tensors building time =', round(Q_time, 4))
################################################################################

show_memory_info('after Q matrix')


################################################################################
# This block is to define on-the-fly two electron intergeral (pq|rs)
# A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v

# iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
# ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)

max_vir_hdiag = delta_diag_A[:,:max_vir]

def gen_iajb_ijab_ibja_delta_fly(max_vir=max_vir, \
                                q_ij=q_ij, \
                                q_ab=q_ab, \
                                q_ia=q_ia , \
                                GK_q_jb=GK_q_jb, \
                                GJ_q_ab=GJ_q_ab):

    def iajb_fly(V):
        start = time.time()
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        end = time.time()
        # print('iajb =', round(end - start,4))
        return iajb_V


    def ijab_fly(V):
        start = time.time()
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        end = time.time()
        # print('ijab =', round(end - start,4))
        return ijab_V

    def ibja_fly(V):
        start = time.time()
        # the Forck exchange energy in B matrix
        ''' (ib|ja) '''
        # GK_q_jb_V = einsum("Aja,jbm->Abam", GK_q_jb, V)
        # ibja_V = einsum("Aib,Abam->iam", q_ia, GK_q_jb_V)
        # [ 6.46636595  8.18031516  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]

        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        #[ 6.46636595  8.18031515  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]
        end = time.time()
        # print('ibja =', round(end - start,4))
        return ibja_V

    def delta_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_diag_A, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir=max_vir, \
                            iajb_fly = iajb_fly, \
                            ijab_fly = ijab_fly, \
                            ibja_fly = ibja_fly, \
                            delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        # sTDA_A * V
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''''return AX+BY and AY+BX'''''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        '''sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        '''sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)'''

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        ''' return (A+B)X '''
        ''' sTDA_A = delta_fly(V) + 4*iajb_fly(V) \
                    - ijab_fly(V) - a_x*ibja_fly(V)'''
        X = X.reshape(n_occ, max_vir, -1)

        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)

        U = U.reshape(n_occ*max_vir, -1)
        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

################################################################################

################################################################################
# orthonormalization of guess_vectors
def Gram_Schmidt_bvec(A, bvec):
    ''' orthonormalize vector b against all A vectors'''
    ''' b = b - A*(A.T*b)'''
    if A.shape[1] != 0:
        # suppose A is orthonormalized
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)

    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    # V is a vectors holder
    # count is the amount of vectors that already sit in the holder
    nvec = np.shape(vecs)[1]
    # amount of new vectors intended to fill in the V
    # count will be final amount of vectors in V
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize

        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count

    return V, new_count


def S_symmetry_orthogonal(x,y):

    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    # print('x.Ty', np.dot(new_x.T,new_y))
    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A


################################################################################
# define the orthonormality of a matrix A as the norm of (A.T*A - I)
def check_orthonormal(A):
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c
################################################################################

################################################################################
def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    # put X_new into V, and Y_new into W
    # m is the amount of vectors that already on V or W
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]
    # amount of new vectors intended to fill in the V_holder and W_holder
    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):

        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)

        # x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m
################################################################################



################################################################################
def solve_AX_Xla_B(A, omega, Q):
    ''' AX - XΩ  = Q '''

    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)

    X *= Qnorm
    return X
################################################################################
def TDA_A_diag_initial_guess(m, V, hdiag = hdiag):
    # m is the amount of initial guesses
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V

def sTDA_initial_guess(m, V):
    sTDA_A_eigenkets = Davidson0(m)
    # print('sTDA_A_eigenkets', sTDA_A_eigenkets.shape)
    #diagonalize sTDA_A amtrix
    V[:, :m] = sTDA_A_eigenkets[:,:m]
    return V
################################################################################

################################################################################
def TDA_A_diag_preconditioner(arg1, arg2, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None, arg8=None, hdiag = hdiag):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    # preconditioners for each corresponding residual
    residual = arg1
    sub_eigenvalue = arg2
    current_dic = arg3

    k = np.shape(residual)[1]
    t = 1e-14

    # print('hdiag in preconditioner', hdiag.reshape(-1,1).shape)
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    D = np.where( abs(D) < t, np.sign(D)*t, D) # force all values not in domain (-t, t)

    new_guess = residual/D

    return new_guess, current_dic
################################################################################


################################################################################
# sTDA preconditioner
def sTDA_preconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """ (sTDA_A - λ*I)^-1 B = X """
    """ AX - Xλ = B """
    """ columns in B are residuals (in Davidson's loop) to be preconditioned, """
    residuals = arg1
    eigen_lambda = arg2
    current_dic = arg3

    precondition_start = time.time()

    # N_rows = np.shape(B)[0]
    A_reduced_size = n_occ*max_vir
    residuals = residuals.reshape(n_occ,n_vir,-1)
    B = residuals[:,:max_vir,:]


    B = B.reshape(A_reduced_size,-1)
    # B = B.reshape(A_reduced_size, -1)
    N_vectors = B.shape[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = args.TDA_precondTOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors

    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    hdiag_m_lambda = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    hdiag_m_lambda = np.where( abs(hdiag_m_lambda) < t, np.sign(hdiag_m_lambda)*t, hdiag_m_lambda) # <t: returns np.sign(D)*t; else: D

    hdiag_m_lambda = hdiag_m_lambda.reshape(n_occ, n_vir, -1)
    D = hdiag_m_lambda[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count

    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0
    ####################################################################################
    for i in range(max):
        substart = time.time()
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        subend = time.time()
        subgencost += subend - substart
        #project sTDA_A matrix and vector B into subspace
        sub_A = symmetrize(sub_A)
        # size of subspace
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append({'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        GSstart = time.time()
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart


        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________')
        print('sTDA preconditioning failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('sTDA Preconditioning Done after ', i, 'steps; ', \
                round(precondition_time, 4), 'seconds')
        print('subgencost',round(subgencost,4),round(subgencost/precondition_time *100, 2),"%")
        print('mvcost',round(mvcost,4),round(mvcost/precondition_time *100, 2),"%")
        print('GScost', round(GScost,4), round(GScost/precondition_time *100, 2),"%")
        print('subcost', round(subcost,4), round(subcost/precondition_time *100, 2),"%")
    full_guess *= bnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = B2'''
        B2 = residuals[:,max_vir:,:]
        B2 = B2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = hdiag_m_lambda[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (B2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)
    return U, current_dic
################################################################################

################################################################################
# K_inv # exacty the same function with sTDA_preconditioner, just no dic
# used in Jacobi_precodnitioner
def K_inv(B, eigen_lambda):
    # to solve K^(-1)y and K^(-1)u
    # K = A-λ*I
    # (sTDA_A - eigen_lambda*I)^-1 B = X
    # AX - Xλ = B
    # columns in B are residuals or current guess
    precondition_start = time.time()

    N_rows = np.shape(B)[0]
    B = B.reshape(N_rows, -1)
    N_vectors = np.shape(B)[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = 1e-2    # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((N_rows, (max+1)*N_vectors))
    W = np.zeros_like(V)
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors
    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    D = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    D= np.where( abs(D) < t, np.sign(D)*t, D) # <t: returns np.sign(D)*t; else: D
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count
    ############################################################################
    for i in range(0, max):
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        #project sTDA_A matrix and vector B into subspace
        # size of subspace
        m = np.shape(sub_A)[0]
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ K inverse Failed Due to Iteration Limit _________________')
        print('K inverse  failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('K inverse Done after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
    return full_guess*bnorm
################################################################################

################################################################################
def Jacobi_preconditioner(arg1, arg2, arg3, arg4, arg5=None, arg6=None, arg7=None, arg8=None):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """    (1-uu*)(A-λ*I)(1-uu*)t = -B"""
    """    B is residual, we want to solve t """
    """    z approximates t """
    """    z = (A-λ*I)^(-1)*(-B) + α(A-λ*I)^(-1) * u"""
    """    where α = [u*(A-λ*I)^(-1)y]/[u*(A-λ*I)^(-1)u] """
    """    first is to solve (A-λ*I)^(-1)y and (A-λ*I)^(-1)u """

    B = arg1
    eigen_lambda = arg2
    current_dic = arg3
    current_guess = arg4

    u = current_guess
    K_inv_y = K_inv(-B, eigen_lambda)
    K_inv_u = K_inv(current_guess, eigen_lambda)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d

    z = K_inv_y -  Alpha*K_inv_u
    return z, current_dic
################################################################################

################################################################################
# original simple Davidson, to solve eigenvalues and eigenkets of sTDA_A matrix
def Davidson0(k):
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    tol = args.TDA_initialTOL # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    V = TDA_A_diag_initial_guess(m, V, hdiag = max_vir_hdiag)
    W[:, :m] = sTDA_mv(V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ############################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index], hdiag = max_vir_hdiag)
        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        m = new_m
    ############################################################################


    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 4), 'seconds' )
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*27.211386245988)

    # U = np.zeros((n_occ * n_vir, k))
    # U[:n_occ * max_vir,:] = full_guess

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    return U
################################################################################


################################################################################
def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    ''' [ a b ] x - [ σ   π] x  Ω = p '''
    ''' [ b a ] y   [-π  -σ] y    = q '''

    ##############################
    ''' normalize the RHS '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)
    # print('pqnorm', pqnorm)
    p /= pqnorm
    q /= pqnorm
    ##############################
    d = abs(np.diag(sigma))
    # d is an one-dimension matrix
    d_mh = d**(-0.5)
    # d_h = d**0.5

    ''' LU = d^−1/2 (σ − π) d^−1/2 '''
    ''' A = PLU '''
    ''' P is identity matrix only when A is diagonally dominant '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True) # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T '''
    ''' M = G^T (a ̃+ b ̃) G '''
    a_p_b_tilde = np.linalg.multi_dot([L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde) + np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    ''' (x ̃+ y ̃) = GZ '''
    ''' x + y = d^-1/2 L^-T (x ̃+ y ̃) '''
    ''' x - y = d^-1/2 U^-1 (x ̃- y ̃) '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)
    # x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z])
    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    x *= pqnorm
    y *= pqnorm

    return x, y
################################################################################

################################################################################
def Qx(V, x):
    """ Qx = (1 - V*V.T)*x = x - V*V.T*x  """
    return x - einsum('ij, jk, kl -> il', V, V.T, x)
################################################################################

################################################################################
def on_the_fly_Hx(W, V, sub_A, x):
    """ on-the-fly compute H'x """
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q"""
    """ K approximates H, here K = sTDA_A"""
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)"""
    """ H′x ≡ a + b − c + d """
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx
################################################################################

################################################################################
# to diagonalize the H'
def new_ES(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    current_dic = arg3
    return_index = arg5
    W_H = arg6
    V_H = arg7
    sub_A_H = arg8

    """ new eigenvalue solver """
    """ the traditional Davidson to diagonalize the H' matrix """
    """ W_H, V_H, sub_A_H are from the exact H """

    sTDA_D_start = time.time()
    tol = args.eigensolver_tol # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    k = args.nstates
    m = min([k+8, 2*k, A_size])
    # m is the amount of initial guesses
    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    # sTDA as initial guess
    V = sTDA_initial_guess(m, V)

    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ###########################################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
#             print(sub_eigenvalue[:k]*27.211386245988)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
#             print(r_norms)
        # largest residual norm
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals

        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index])
        # Y doesn't matter

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
#             print(check_orthonormal(V[:,:new_m]))
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m
    ###########################################################################################
    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('H_app diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 2), 'seconds' )
#         print('H_app', sub_eigenvalue[:k]*27.211386245988)

    return full_guess[:,return_index], current_dic
################################################################################

################################################################################
# a dictionary for TDA initial guess and precodnitioner
TDA_i_key = ['sTDA', 'Adiag']
TDA_i_func = [sTDA_initial_guess, TDA_A_diag_initial_guess]
TDA_i_lib = dict(zip(TDA_i_key, TDA_i_func))

TDA_p_key = ['sTDA', 'Adiag', 'Jacobi', 'new_ES']
TDA_p_func = [sTDA_preconditioner, TDA_A_diag_preconditioner, \
Jacobi_preconditioner, new_ES]
TDA_p_lib = dict(zip(TDA_p_key, TDA_p_func))
################################################################################

################################################################################
#Davidson frame, where we can choose different initial guess and preconditioner
def Davidson(k, tol, init,prec):
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)
    max = args.max
    # Maximum number of iterations

    m = min([k + args.TDA_extrainitial, 2*k, A_size])
    # amount of initila guess
    #################################################
    # generate initial guess

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    init_start = time.time()
    V = initial_guess(m, V)
    init_end = time.time()
    init_time = init_end - init_start

    print('Intial guess time:', round(init_time, 4), 'seconds')
    #generate initial guess and put in holders V and W
    # m is size of subspace

    # W = Av, create transformed guess vectors
    W[:, :m] = TDA_matrix_vector(V[:, :m])

    # time cost for preconditioning
    Pcost = 0
    ###########################################################################################
    for ii in range(max):
        print('Iteration ', ii)

        # sub_A is subspace A matrix
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # print(sub_eigenvalue[:k])
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        # largest residual norm
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm', max_norm)
        if max_norm < tol or ii == (max-1):
            print('Davidson procedure aborted')
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        ########################################
        # generate new guess
        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                    arg1 = residual[:,index],
                                    arg2 = sub_eigenvalue[:k][index],
                                    arg3 = current_dic,
                                    arg4 = full_guess[:,index],
                                    arg5 = index,
                                    arg6 = W[:,:m],
                                    arg7 = V[:,:m],
                                    arg8 = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('m,new_m',m,new_m)
        W[:, m:new_m] = TDA_matrix_vector(V[:, m:new_m])
        print('new generated guesses:', new_m - m)
        m = new_m

    energies = sub_eigenvalue[:k]*27.211386245988


    D_end = time.time()
    Dcost = D_end - D_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDA_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDA_precondTOL
    Davidson_dic['total time'] = Dcost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sub_A)[0]
    Davidson_dic['excitation energy(eV)'] = energies.tolist()
    # Davidson_dic['semiempirical_difference'] = difference
    # Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    ###########################################################################################
    if ii == max-1:
        print('============ Davidson Failed Due to Iteration Limit ==============')
        print('Davidson failed after ', round(Dcost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Davidson done after ', round(Dcost, 4), 'seconds')
        print('Total steps =', ii+1)
        print('Final subspace shape = ', np.shape(sub_A))
        print('Preconditioning time:', round(Pcost, 4), round(Pcost/Dcost*100,2), '%')
    return energies, full_guess, Davidson_dic
################################################################################



def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder = TDA_A_diag_initial_guess(new_m, V_holder, hdiag = hdiag)
    energies = hdiag[Dsort][:new_m]*27.211386245988
    return V_holder, W_holder, new_m, energies, V_holder[:,:new_m], W_holder[:,:new_m]

################################################################################
def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag = hdiag):
    # preconditioners for each corresponding residual
    hdiag = hdiag.reshape(-1,1)
    # print('hdiag', hdiag.shape)
    k = R_x.shape[1]
#     print('omega.shape',omega.shape)
    t = 1e-14

    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    # force all values not in domain (-t, t)
    D_y_inv = D_y**-1

#     print('R_x.shape, D_x.shape',R_x.shape, D_x.shape)
    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new
################################################################################

################################################################################
def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  w = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    # print(d)
    # d is an one-dimension matrix
    d_mh = d**(-0.5)


    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    M = np.linalg.multi_dot([G.T, L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    # print(omega*27.211386245988)
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([L_inv.T, G, Z])     * (np.array(omega)**-0.5).reshape(1,-1)
    x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z]) * (np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    # norm = np.linalg.multi_dot([x.T, sigma, x])
    # norm += np.linalg.multi_dot([x.T, pi, y])
    # norm -= np.linalg.multi_dot([y.T, pi, x])
    # norm -= np.linalg.multi_dot([y.T, sigma, y])
    # print(norm)

    return omega, x, y
################################################################################

################################################################################
def sTDDFT_eigen_solver(k):
    ''' [ A' B' ] x - [ σ   π] x  w = 0'''
    ''' [ B' A' ] y   [-π  -σ] y    = 0'''
    tol=args.TDDFT_initialTOL
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    # new_m = min([3*k, A_size])
    # print('initial new_m = ', new_m)
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)
#     print('initial guess done')
    ##############################

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        ###############################################################
        # print('ii = ', ii)
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        # show_memory_info('before sTDDFT_mv')
        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start
        # show_memory_info('after sTDDFT_mv')

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)
        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        ########################################################################
        # preconditioning step
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTD-DFT Failed Due to Iteration Limit==================')
        print('sTD-DFT failed after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Converged after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('final subspace', sigma.shape)
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_cost * 100,2),'%')

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*27.211386245988
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y
################################################################################

################################################################################
def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    # energies, X_new, Y_new = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup
################################################################################

################################################################################
def sTDDFT_preconditioner(Rx, Ry, omega):
    ''' [ A B ] - [1  0]X  w = P'''
    ''' [ B A ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''
    tol = args.TDDFT_precondTOL
    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    # print('pqnorm', pqnorm)
    P /= pqnorm
    Q /= pqnorm

    ##############################

    ##############################
    # setting up initial guess
    X_new, Y_new  = TDDFT_A_diag_preconditioner(P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = \
            VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start
    print('new_m =', new_m)
    print('diagonal initial guess done')
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    symmetrycost = 0
    for ii in range(max):
#         print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        symmetrystart = time.time()
        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
        # solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                                  a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        # U1x = np.dot(U1,x)
        # U2x = np.dot(U2,x)
        # Vx = np.dot(V,x)
        # Wx = np.dot(W,x)
        #
        # U1y = np.dot(U1,y)
        # U2y = np.dot(U2,y)
        # Vy = np.dot(V,y)
        # Wy = np.dot(W,y)
        #
        # X_full = Vx + Wy
        # Y_full = Wx + Vy
        #
        # R_x = U1x + U2y - X_full*omega - P
        # R_y = U2x + U1y + Y_full*omega - Q

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################

        ########################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index], \
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_precond_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit==========')
        print('sTDDFT_precond failed after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT_precond Converged after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sTDDFT_precond_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_precond_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_precond_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_precond_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_precond_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_precond_cost * 100,2),'%')
        print('symmetrycost', round(symmetrycost,4), round(symmetrycost/sTDDFT_precond_cost * 100,2),'%')
        print('final subspace', sigma.shape)

    show_memory_info('preconditioner at end')
    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_diag_A[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)
    print(X.shape, Y.shape)
    return X, Y
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
TDDFT_i_key = ['sTDDFT', 'Adiag']
TDDFT_i_func = [sTDDFT_initial_guess, TDDFT_A_diag_initial_guess]
TDDFT_i_lib = dict(zip(TDDFT_i_key, TDDFT_i_func))

TDDFT_p_key = ['sTDDFT', 'Adiag']
TDDFT_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
TDDFT_p_lib = dict(zip(TDDFT_p_key, TDDFT_p_func))
################################################################################

################################################################################
def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.TDDFT_tolerance):

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    if args.TDDFT_extrainitial_3n == True:
        new_m = min([k + args.TDDFT_extrainitial, 3*k, A_size])
    else:
        new_m = min([k + args.TDDFT_extrainitial, 2*k, A_size])

    # new_m = k

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    ##############################
    # setting up initial guess
    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig = initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')
    ##############################
    Pcost = 0
    VWGScost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '____________________||||')
        show_memory_info('beginning of step '+ str(ii))
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        print('Maximum residual norm: ', np.max(r_norms))
        # print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        P_start = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        VWGScost_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        VWGScost_end = time.time()
        VWGScost += VWGScost_end - VWGScost_start
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################



    omega *= 27.211386245988

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['initial_energies'] = initial_energies
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDDFT_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDDFT_precondTOL
    Davidson_dic['total time'] = TDDFT_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['excitation energy(eV)'] = omega.tolist()
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    if ii == (max -1):
        print('============================ TDDFT Failed Due to Iteration Limit============================')
        print('TDDFT failed after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('================================== TDDFT Calculation Done ==================================')
        print('TDDFT Converged after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('Initial guess',init)
        print('preconditioner', prec)
        print('Final subspace ', sigma.shape)
        print('preconditioning cost', round(Pcost,4), round(Pcost/TDDFT_cost * 100, 2), "%")
        print('VWGScost',round(VWGScost,4))
        # print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))

    # need normalize
    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic
# end of TDDFT module
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
dynpol_i_key = ['sTDDFT', 'Adiag']
dynpol_i_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_i_lib = dict(zip(dynpol_i_key, dynpol_i_func))

dynpol_p_key = ['sTDDFT', 'Adiag']
dynpol_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_p_lib = dict(zip(dynpol_p_key, dynpol_p_func))
################################################################################

################################################################################
def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P
################################################################################

################################################################################
def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        # 0,1,2   3,4,5   6,7,8
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]
        # convert nm to Hartree

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P
    #P, Q, omega

    max = args.max
    tol = args.dynpol_tolerance

    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P) + np.dot(W.T, Q)
        q = np.dot(W.T, P) + np.dot(V.T, Q)
        subgenend = time.time()
        subgencost += subgenend - subgenstart
        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R_x = U1x + U2y - (Vx + Wy)omega - P
#         R_y = U2x + U1y + (Wx + Vy)omega - Q
#         R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
#         R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega + P
        R_y = U2x + U1y + Y_full*omega + Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)
        print('maximum residual norm: ', np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        Pend = time.time()
        Pcost += Pend - Pstart
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('============================ Dynamic polarizability Failed Due to Iteration Limit============================')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

     # np.dot(-P.T, X_full) + np.dot(-P.T, Y_full)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)


    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.dynpol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.dynpol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.dynpol_initprecTOL
    Davidson_dic['total time'] = dp_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    Davidson_dic['Dynamic polarizability tensor alpha'] = [i.tolist() for i in alpha_omega]
    Davidson_dic['Dynamic polarizability tensor alpha initial guess '] = [i.tolist() for i in alpha_omega_ig]
    Davidson_dic['overlap'] = overlap
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    show_memory_info('Total Dynamic polarizability')

    return alpha_omega, Davidson_dic
################################################################################

###############################################################################
def stapol_A_diag_initprec(P):
    d = hdiag.reshape(-1,1)
    return -P/d
###############################################################################

###############################################################################
def stapol_sTDDFT_initprec(P):
    '''(A* + B*)X = -P'''
    '''residual = (A* + B*)X + P'''
    '''X_ig = -P/d'''
    '''X_new = (residual - P)/D = Ux/D'''
    ssp_start = time.time()
    max = 30
    tol = args.stapol_initprecTOL
    m = 0
    npvec = P.shape[1]

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]
    pnorm = np.linalg.norm(P_origin, axis=0, keepdims = True)
    # print('pnorm', pnorm)
    P /= pnorm

    # print('vectors to be preconditioned', npvec)
    V_holder = np.zeros((A_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

    X_ig = stapol_A_diag_initprec(P)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    # V_holder[:,0] = X_new[:,0]/np.linalg.norm(X_new[:,0])
    # if npvec >= 2:
    #     V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 1, X_new[:, 1:])
    # else:
    #     new_m = 1
    # print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        # creating the subspace
        MV_start = time.time()
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ###############################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = stapol_A_diag_initprec(-residual[:,index])

        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    X_full = np.dot(V,x)
    # alpha = np.dot(X_full.T, P)*-4

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('============================ sTDDFT Static polarizability Failed Due to Iteration Limit============================')
        print('sTDDFT Static polarizability failed after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Static polarizability Converged after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        # print('initial_cost', round(initial_cost,4), round(initial_cost/ssp_cost * 100,2),'%')
        # print('Pcost', round(Pcost,4), round(Pcost/ssp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/ssp_cost * 100,2),'%')
        # print('GScost', round(GScost,4), round(GScost/ssp_cost * 100,2),'%')
        # print('subcost', round(subcost,4), round(subcost/ssp_cost * 100,2),'%')
        # print('subgencost', round(subgencost,4), round(subgencost/ssp_cost * 100,2),'%')

    X_full *= pnorm
    return X_full
################################################################################

################################################################################
# a dictionary for static_polarizability initial guess and precodnitioner
stapol_i_key = ['sTDDFT', 'Adiag']
stapol_i_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_i_lib = dict(zip(stapol_i_key, stapol_i_func))

stapol_p_key = ['sTDDFT', 'Adiag']
stapol_p_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_p_lib = dict(zip(stapol_p_key, stapol_p_func))
################################################################################

################################################################################
# Static polarizability
def static_polarizability(init, prec):
    '''(A+B)X = -P'''
    '''residual = (A+B)X + P'''
    '''X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    # pnorm is constant
    print('pnorm', pnorm)

    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.stapol_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

#     X_new = -P/d3
    X_ig = initial_guess(P)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ########################################################################
        # creating the subspace

        MV_start = time.time()
        U_holder[:, m:new_m] = static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # print('check_orthonormal(V)',check_orthonormal(V))
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()
        subgencost += subgenend - subgenstart

        # print('a_p_b.shape', a_p_b.shape)
        ########################################################################

        ########################################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        # print('x.shape', x.shape)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ########################################################################

        ########################################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index])
        # X_new = X_new/np.linalg.norm(X_new, axis=0)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    print('V.shape', V.shape)
    X_full = np.dot(V,x)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start



    if ii == (max -1):
        print('============================ Static polarizability Failed Due to Iteration Limit============================')
        print('Static polarizability failed after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Static polarizability Converged after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sp_cost * 100,2),'%')

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.stapol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.stapol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.stapol_initprecTOL
    Davidson_dic['total time'] = sp_cost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(a_p_b)[0]
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    return tensor_alpha, Davidson_dic
################################################################################

TDA_combo = [            # option
['sTDA','sTDA'],     # 0
['Adiag','Adiag'],   # 1
['Adiag','sTDA'],    # 2
['sTDA','Adiag'],    # 3
['sTDA','Jacobi'],   # 4
['Adiag','Jacobi'],  # 5
['Adiag','new_ES'],  # 6
['sTDA','new_ES']]   # 7

TDDFT_combo = [         # option
['sTDDFT','sTDDFT'],     # 0
['Adiag','Adiag'],       # 1
['Adiag','sTDDFT'],      # 2
['sTDDFT','Adiag']]      # 3

dynpol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

stapol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

if args.TDA == True:
    for option in args.TDA_options:
        init, prec = TDA_combo[option]
        print('-------------------------------------------------------------------')
        print('|---------------   In-house Developed Davidson Starts   -----------|')
        print('Residual conv =', args.TDA_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, eigenkets, Davidson_dic = Davidson(args.nstates, args.TDA_tolerance, init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Davidson time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDA_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Davidson Done   -----------|')

if args.TDDFT == True:
    for option in args.TDDFT_options:
        init, prec = TDDFT_combo[option]
        print('----------------------------------------------------------------------------')
        print('|---------------   In-house Developed TDDFT Eigensolver Starts   -----------|')
        print('Residual conv =', args.TDDFT_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, X, Y, Davidson_dic = TDDFT_eigen_solver(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house TDDFT Eigensolver time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDDFT_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed TDDFT Eigensolver Done   -----------|')

if args.dynpol == True:
    args.TDDFT_precondTOL = args.dynpol_initprecTOL
    print('args.TDDFT_precondTOL', args.TDDFT_precondTOL)
    for option in args.dynpol_options:
        init,prec = dynpol_combo[option]
        print('---------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Dynamic Polarizability Starts   -----------|')
        print('Residual conv =', args.dynpol_tolerance)
        print('Perturbation wavelength omega (nm) =', args.dynpol_omega)

        total_start = time.time()
        alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Dynamic Polarizability time:', round(total_time, 4), 'seconds')
        print('Dynamic polarizability tensor alpha')
        for i in range(len(args.dynpol_omega)):
            print(args.dynpol_omega[i],'nm')
            print(alpha_omega[i])

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Dynamic_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Dynamic Polarizability Done   -----------|')

if args.stapol == True:
    for option in args.stapol_options:
        init,prec = stapol_combo[option]
        print('--------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Static Polarizability Starts   -----------|')
        print('Residual conv =', args.stapol_tolerance)

        total_start = time.time()
        tensor_alpha, Davidson_dic = static_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Static Polarizability time:', round(total_time, 4), 'seconds')
        print('Static polarizability tensor alpha')
        print(tensor_alpha)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Static_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Static Polarizability Done   -----------|')


if args.sTDA == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDA   --------------------|')
    print('Convergence =', args.TDA_initialTOL)

    total_start = time.time()
    X = Davidson0(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDA time:', round(total_time, 4), 'seconds')
    print('|---------------------------   In-house Developed sTDA done  ----------------|')

if args.sTDDFT == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDDFT   --------------------|')
    print('Convergence =', args.TDDFT_initialTOL)

    total_start = time.time()
    energies, X, Y = sTDDFT_eigen_solver(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDDFT time:', round(total_time, 4), 'seconds')

    print('|---------------------------   In-house Developed sTDDFT done  ----------------|')


if args.Truncate_test == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   Test the Truncation efficiency  ----------------|')

    n_state = 40
    X = np.random.rand(A_size,n_state)
    Y = np.random.rand(A_size,n_state)
    print('n_vir = ', n_vir)
    print('A_size =', A_size)
    print('n_state =', n_state)
    print("virtual tuning: -------------------------------------------- ")
    print("{:<8} {:<8} {:<8} {:<8}".format(\
            'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
    for vir_trunc in [40, 50, 60, 70, 10000000]:
        del max_vir, sTDA_mv, sTDDFT_mv
        max_vir = gen_maxvir(tol_eV = vir_trunc)
        q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
        # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
        iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                        max_vir=max_vir, \
                                        q_ij = q_ij, \
                                        q_ab = q_ab, \
                                        q_ia = q_ia , \
                                        GK_q_jb = GK_q_jb, \
                                        GJ_q_ab = GJ_q_ab)


        sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                        max_vir=max_vir, \
                                        iajb_fly = iajb_fly, \
                                        ijab_fly = ijab_fly, \
                                        ibja_fly = ibja_fly, \
                                        delta_fly = delta_fly)


        sTDA_start = time.time()
        sTDA_X = sTDA_mv(X)
        sTDA_end = time.time()
        sTDA_mv_time = sTDA_end - sTDA_start

        sTDDFT_start = time.time()
        sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
        sTDDFT_end = time.time()
        sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

        print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))

    print('|-------------------------------------   Test done  --------------------------|')

if args.pytd == True:
    print('-----------------------------------------------------------------')
    print('|----------------------    PySCF TTDDFT    ----------------------|')
    TD.nstates = args.nstates
    TD.conv_tol = 1e-10
    start = time.time()
    TD.kernel()
    end = time.time()
    pyscf_time = end-start
    print('Built-in TDDFT time:', round(pyscf_time, 4), 'seconds')
    print('|---------------------------------------------------------------|')

if args.verbose > 3:
    for key in vars(args):
        print(key,'=', vars(args)[key])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt218', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Wed Jul  7 17:20:27 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 50000 
[INPUT] num. atoms = 36
[INPUT] num. electrons = 146
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.770776205221  -0.810934812406   6.910435180694 AA   -1.456555931199  -1.532444700322  13.058829893071 Bohr
[INPUT]  2 C      0.274362451006  -0.114946085476   6.215462603653 AA    0.518469891266  -0.217216620640  11.745522058381 Bohr
[INPUT]  3 C      0.953194199126   0.974831137340   6.767514665989 AA    1.801275979871   1.842163867271  12.788749262696 Bohr
[INPUT]  4 C      0.597320635556   1.383154759756   8.062251651777 AA    1.128772409753   2.613783683828  15.235447569181 Bohr
[INPUT]  5 C     -0.438119660860   0.705287818263   8.767318137668 AA   -0.827926168813   1.332800815508  16.567830127123 Bohr
[INPUT]  6 C     -1.116093460692  -0.377875129474   8.210852076749 AA   -2.109110970125  -0.714080503989  15.516261674373 Bohr
[INPUT]  7 C     -1.238528027404  -1.841090150700   6.033949970660 AA   -2.340478769392  -3.479156155458  11.402512893876 Bohr
[INPUT]  8 C     -0.494293577861  -1.767636860477   4.856584245874 AA   -0.934079487288  -3.340349553988   9.177614125580 Bohr
[INPUT]  9 H      1.741376098672   1.522122130924   6.242893110315 AA    3.290723906353   2.876393955585  11.797358203429 Bohr
[INPUT] 10 H     -0.737252165038   1.067406223183   9.756113344475 AA   -1.393204676665   2.017105425471  18.436382261273 Bohr
[INPUT] 11 H     -1.917285415333  -0.875283817922   8.767163092853 AA   -3.623144337602  -1.654046697135  16.567537134887 Bohr
[INPUT] 12 H     -2.008079330955  -2.581709970213   6.249569119350 AA   -3.794719971906  -4.878724776762  11.809974032110 Bohr
[INPUT] 13 H      1.014056592313  -0.384191685626   4.236615719315 AA    1.916289234282  -0.726017065168   8.006043404533 Bohr
[INPUT] 14 C     -0.557752125446  -2.589895543981   3.649761569464 AA   -1.053998762488  -4.894193269355   6.897049786250 Bohr
[INPUT] 15 C      0.522808420425  -2.655925730991   2.741216161162 AA    0.987964730219  -5.018972238758   5.180147792827 Bohr
[INPUT] 16 C     -1.712728821248  -3.357824366907   3.361182303837 AA   -3.236588397808  -6.345368427845   6.351714008986 Bohr
[INPUT] 17 C      0.446385021821  -3.440781206494   1.586526814519 AA    0.843545437349  -6.502134134825   2.998101168719 Bohr
[INPUT] 18 H      1.453921720129  -2.119965640114   2.955536368338 AA    2.747513857600  -4.006154453304   5.585154287351 Bohr
[INPUT] 19 C     -1.783952934725  -4.145675429109   2.215566968501 AA   -3.371182465744  -7.834191162354   4.186814781100 Bohr
[INPUT] 20 H     -2.568709461173  -3.313409414253   4.041307802486 AA   -4.854157375195  -6.261436331494   7.636964931766 Bohr
[INPUT] 21 C     -0.710978769575  -4.190627729472   1.300522221802 AA   -1.343555154877  -7.919138698710   2.457630818116 Bohr
[INPUT] 22 H      1.317061131045  -3.500458017908   0.925181666946 AA    2.488884826984  -6.614906964384   1.748339965996 Bohr
[INPUT] 23 H     -2.671871176187  -4.742554801358   1.988979804092 AA   -5.049104763113  -8.962129705307   3.758627097025 Bohr
[INPUT] 24 N      0.425862906199  -0.730853282480   4.988072814994 AA    0.804764259328  -1.381112541126   9.426091509727 Bohr
[INPUT] 25 C      1.327700893572   2.546624539085   8.651818501414 AA    2.508991064192   4.812422920967  16.349567447117 Bohr
[INPUT] 26 N      1.182728397575   2.701831835728  10.029389761089 AA    2.235032751163   5.105722204156  18.952799844974 Bohr
[INPUT] 27 H      1.810584042570   3.373755406828  10.468612514296 AA    3.421507965966   6.375473730176  19.782810556213 Bohr
[INPUT] 28 H      1.059263901314   1.849625840311  10.575466067506 AA    2.001718667122   3.495286271106  19.984734507216 Bohr
[INPUT] 29 C     -0.836524172675  -5.045477146531   0.081581634857 AA   -1.580801582935  -9.534569974696   0.154166946675 Bohr
[INPUT] 30 N      0.098568638362  -4.790435984601  -0.919936674349 AA    0.186267730975  -9.052612028157  -1.738428366463 Bohr
[INPUT] 31 H     -0.074365914399  -5.245987413739  -1.815177570792 AA   -0.140531211217  -9.913479464882  -3.430188476251 Bohr
[INPUT] 32 H      0.416113085246  -3.826182945097  -1.016573952345 AA    0.786339767963  -7.230437868716  -1.921046355298 Bohr
[INPUT] 33 N      1.986640477268   3.335372576619   7.866707649649 AA    3.754206410012   6.302940693196  14.865922959858 Bohr
[INPUT] 34 H      2.469865074736   4.069338196547   8.407255436847 AA    4.667368555879   7.689934699705  15.887410234902 Bohr
[INPUT] 35 N     -1.740344179887  -5.968771427162   0.063861947201 AA   -3.288773862467 -11.279343297466   0.120681589992 Bohr
[INPUT] 36 H     -1.740732288256  -6.466875872094  -0.839626730885 AA   -3.289507280992 -12.220624279815  -1.586664568236 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1

nuclear repulsion = 1437.09149164036
number of shells = 291
number of NR pGTOs = 1086
number of NR cGTOs = 741
basis = def2-tzvp
ecp = {}
CPU time:         2.22
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 36_DAPI_wb97x.chk
max_memory 50000 MB (current use 55 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f4b5fd22048>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f4b5fd0ef28>
Set gradient conv threshold to 1e-05
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
tot grids = 443022
Drop grids 74924
    CPU time for setting up grids     46.91 sec, wall time      3.47 sec
nelec by numeric integration = 145.9999718554465
    CPU time for vxc     72.05 sec, wall time      5.81 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15971925.hpc/tmp3t6p8vwf
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
num shells = 615, num cGTOs = 1855
size of aux basis 1855
int3c2e [1/1], AO [0:291], nrow = 274911
    CPU time for cholesky_eri     70.23 sec, wall time     12.56 sec
    CPU time for df vj and vk    186.65 sec, wall time     22.48 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7f4b5de595c0> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15971925.hpc/tmp855vwouj
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
num shells = 615, num cGTOs = 1855
size of aux basis 1478
int3c2e [1/1], AO [0:291], nrow = 274911
    CPU time for cholesky_eri     92.54 sec, wall time      8.34 sec
    CPU time for df vj and vk    182.25 sec, wall time     15.36 sec
E1 = -4061.6232230310134  Ecoul = 1858.7580262704184  Exc = -126.81580342312971
init E= -892.589508543363
cond(S) = 1356611.8260568238
    CPU time for initialize scf    492.43 sec, wall time     47.69 sec
  HOMO = -0.282973478627743  LUMO = 0.00346281414437545
  mo_energy =
[-1.44429155e+01 -1.44189007e+01 -1.44094781e+01 -1.43626133e+01
 -1.43520306e+01 -1.03438763e+01 -1.03340771e+01 -1.03101642e+01
 -1.02975728e+01 -1.02940659e+01 -1.02833231e+01 -1.02814903e+01
 -1.02803158e+01 -1.02745477e+01 -1.02714033e+01 -1.02703251e+01
 -1.02664937e+01 -1.02642613e+01 -1.02632277e+01 -1.02616211e+01
 -1.02557017e+01 -1.11573043e+00 -1.08551686e+00 -1.07549992e+00
 -1.00198698e+00 -9.80218979e-01 -9.76403526e-01 -9.67166383e-01
 -9.24300407e-01 -9.06739289e-01 -8.86728802e-01 -8.64647702e-01
 -8.50746031e-01 -7.89495084e-01 -7.47247567e-01 -7.42638214e-01
 -7.34979394e-01 -7.09219563e-01 -6.94490546e-01 -6.78923404e-01
 -6.66692847e-01 -6.51523328e-01 -6.36529039e-01 -6.29789183e-01
 -6.10974264e-01 -5.93368538e-01 -5.86862602e-01 -5.77726090e-01
 -5.66080974e-01 -5.52270955e-01 -5.47537361e-01 -5.41561543e-01
 -5.35183322e-01 -5.33425134e-01 -5.21934083e-01 -5.15365495e-01
 -5.02985260e-01 -4.98232586e-01 -4.79689150e-01 -4.71947865e-01
 -4.64531481e-01 -4.51696818e-01 -4.41550314e-01 -4.39682134e-01
 -3.92758276e-01 -3.82272752e-01 -3.73737212e-01 -3.70156240e-01
 -3.61103516e-01 -3.49971984e-01 -3.41332271e-01 -3.12758407e-01
 -2.82973479e-01  3.46281414e-03  4.99595526e-02  5.74711194e-02
  7.57938385e-02  1.00709160e-01  1.10340001e-01  1.11415294e-01
  1.19515812e-01  1.41108067e-01  1.44918664e-01  1.47741606e-01
  1.55148104e-01  1.63848488e-01  1.64905312e-01  1.70605229e-01
  1.79491192e-01  1.82247602e-01  1.84657055e-01  1.93664929e-01
  2.00217288e-01  2.04505089e-01  2.12019721e-01  2.21080408e-01
  2.33603580e-01  2.36432227e-01  2.41382910e-01  2.50240741e-01
  2.58804761e-01  2.60234536e-01  2.68691378e-01  2.71460788e-01
  2.76805665e-01  2.88624441e-01  2.95514742e-01  2.96869738e-01
  2.97539010e-01  3.04405215e-01  3.12314323e-01  3.14947805e-01
  3.16615676e-01  3.22945151e-01  3.30195894e-01  3.37109165e-01
  3.38254038e-01  3.40304528e-01  3.42193685e-01  3.44285409e-01
  3.51883446e-01  3.63175322e-01  3.65866658e-01  3.71928469e-01
  3.75212630e-01  3.81280615e-01  3.85291463e-01  3.91929187e-01
  3.99745820e-01  4.02310121e-01  4.11680816e-01  4.12402044e-01
  4.20248483e-01  4.21742491e-01  4.29823966e-01  4.30523286e-01
  4.36044346e-01  4.36922026e-01  4.45163287e-01  4.46895179e-01
  4.51517991e-01  4.54049328e-01  4.60950804e-01  4.65093437e-01
  4.67240216e-01  4.72607845e-01  4.77912368e-01  4.79747094e-01
  4.89033565e-01  4.93707630e-01  4.97961547e-01  4.99732693e-01
  5.06032625e-01  5.08159029e-01  5.08888431e-01  5.19306133e-01
  5.24849906e-01  5.29748288e-01  5.34433437e-01  5.36909820e-01
  5.47177533e-01  5.49432686e-01  5.51247673e-01  5.53384809e-01
  5.59329972e-01  5.65122489e-01  5.72345587e-01  5.75619382e-01
  5.78870591e-01  5.84129765e-01  5.86646524e-01  5.93894172e-01
  5.99992327e-01  6.09217852e-01  6.10766979e-01  6.17905094e-01
  6.22539014e-01  6.28896015e-01  6.33160713e-01  6.39732274e-01
  6.47929379e-01  6.54608225e-01  6.67596062e-01  6.72263802e-01
  6.75940752e-01  6.86603616e-01  6.91983167e-01  6.99604311e-01
  7.03548983e-01  7.07990289e-01  7.14878940e-01  7.15853399e-01
  7.28692673e-01  7.29860174e-01  7.40649017e-01  7.45767359e-01
  7.49583079e-01  7.54174847e-01  7.59655175e-01  7.66250889e-01
  7.71420013e-01  7.79170619e-01  7.84562487e-01  7.92469472e-01
  7.93630592e-01  7.97549857e-01  8.04844805e-01  8.10593254e-01
  8.14154798e-01  8.25387425e-01  8.28651361e-01  8.36228856e-01
  8.43898942e-01  8.47363048e-01  8.51310638e-01  8.56084258e-01
  8.60802638e-01  8.63415223e-01  8.79654219e-01  8.85208789e-01
  8.92336847e-01  9.03666992e-01  9.07262961e-01  9.17178303e-01
  9.26559062e-01  9.30633997e-01  9.35433282e-01  9.50003504e-01
  9.51075421e-01  9.60969837e-01  9.68189111e-01  9.75870279e-01
  9.83948684e-01  1.00456180e+00  1.00991482e+00  1.01288599e+00
  1.01470429e+00  1.03670588e+00  1.04320268e+00  1.04762347e+00
  1.05314269e+00  1.07006876e+00  1.07125932e+00  1.08497695e+00
  1.09948543e+00  1.11199980e+00  1.12701639e+00  1.13527435e+00
  1.14772887e+00  1.15165429e+00  1.16011571e+00  1.17096007e+00
  1.17303183e+00  1.18436454e+00  1.19255735e+00  1.19839194e+00
  1.20621333e+00  1.21531802e+00  1.22093575e+00  1.23656028e+00
  1.24439491e+00  1.25474373e+00  1.26535120e+00  1.27352502e+00
  1.29737803e+00  1.30313586e+00  1.31027490e+00  1.31198001e+00
  1.32700140e+00  1.33097531e+00  1.33611818e+00  1.34757697e+00
  1.35161132e+00  1.36068779e+00  1.36823742e+00  1.37600825e+00
  1.38120396e+00  1.38644880e+00  1.39668473e+00  1.39840852e+00
  1.40257908e+00  1.41216533e+00  1.41436742e+00  1.41748865e+00
  1.43081705e+00  1.44025428e+00  1.45440664e+00  1.46109828e+00
  1.46658865e+00  1.47773555e+00  1.48137819e+00  1.49599773e+00
  1.50624448e+00  1.51185391e+00  1.52577270e+00  1.53950614e+00
  1.55101842e+00  1.55427393e+00  1.56220988e+00  1.56719281e+00
  1.58363105e+00  1.58641139e+00  1.58841691e+00  1.59904902e+00
  1.60608263e+00  1.60887674e+00  1.61243012e+00  1.62283752e+00
  1.62726755e+00  1.62966845e+00  1.64123805e+00  1.64759440e+00
  1.65327570e+00  1.66494468e+00  1.66721651e+00  1.67788924e+00
  1.68731837e+00  1.69555714e+00  1.69896008e+00  1.70082467e+00
  1.70712569e+00  1.71007486e+00  1.71755456e+00  1.73321301e+00
  1.73716163e+00  1.75016765e+00  1.75107305e+00  1.75821305e+00
  1.77057826e+00  1.77905044e+00  1.79238210e+00  1.79756946e+00
  1.80268382e+00  1.80749548e+00  1.81684343e+00  1.82596063e+00
  1.83183785e+00  1.83479338e+00  1.85168375e+00  1.86140290e+00
  1.88163915e+00  1.88972363e+00  1.89094892e+00  1.90014931e+00
  1.90523187e+00  1.91434010e+00  1.92480480e+00  1.93553618e+00
  1.94480267e+00  1.95874524e+00  1.96740669e+00  1.97489504e+00
  1.98377477e+00  1.98656627e+00  1.99507180e+00  2.00442093e+00
  2.01398132e+00  2.01998445e+00  2.03891342e+00  2.05359476e+00
  2.05844922e+00  2.07564242e+00  2.08455664e+00  2.09595256e+00
  2.10155268e+00  2.10950743e+00  2.11598021e+00  2.12040850e+00
  2.12220419e+00  2.12789008e+00  2.13449499e+00  2.14716523e+00
  2.15160339e+00  2.15800506e+00  2.16253504e+00  2.16851517e+00
  2.17962457e+00  2.18990660e+00  2.19698407e+00  2.20233320e+00
  2.22230302e+00  2.23271114e+00  2.24216367e+00  2.24812867e+00
  2.25906279e+00  2.26612398e+00  2.27791949e+00  2.29389016e+00
  2.30427003e+00  2.32043216e+00  2.33262313e+00  2.34998492e+00
  2.36729244e+00  2.36950864e+00  2.38310668e+00  2.38525369e+00
  2.39135547e+00  2.40066713e+00  2.40881622e+00  2.41836119e+00
  2.43046355e+00  2.43773839e+00  2.44874310e+00  2.45699216e+00
  2.47349357e+00  2.47630931e+00  2.48915998e+00  2.49680460e+00
  2.50825493e+00  2.51502288e+00  2.52888574e+00  2.55383728e+00
  2.55925580e+00  2.56752977e+00  2.58036636e+00  2.59301956e+00
  2.60303256e+00  2.61157078e+00  2.63454861e+00  2.63725897e+00
  2.65768557e+00  2.65987765e+00  2.66373775e+00  2.67503146e+00
  2.67936103e+00  2.68818750e+00  2.69709590e+00  2.70455835e+00
  2.70743063e+00  2.71257109e+00  2.73376273e+00  2.74352217e+00
  2.74952745e+00  2.75868864e+00  2.76689892e+00  2.77754919e+00
  2.78042031e+00  2.78823617e+00  2.79676917e+00  2.80790361e+00
  2.81940414e+00  2.82673968e+00  2.83097612e+00  2.83438299e+00
  2.84526739e+00  2.85037157e+00  2.86537189e+00  2.86626994e+00
  2.87463198e+00  2.87969440e+00  2.89311442e+00  2.90739844e+00
  2.91035127e+00  2.91520543e+00  2.92185491e+00  2.92826075e+00
  2.93190103e+00  2.93393491e+00  2.94863378e+00  2.95592640e+00
  2.96103390e+00  2.97108902e+00  2.97196852e+00  2.98174364e+00
  2.98801479e+00  2.99460790e+00  3.00083973e+00  3.01223244e+00
  3.02598535e+00  3.03206030e+00  3.03922190e+00  3.04162541e+00
  3.05026269e+00  3.05306251e+00  3.06542033e+00  3.07090948e+00
  3.08544183e+00  3.08867112e+00  3.10231087e+00  3.10527072e+00
  3.11368367e+00  3.12597207e+00  3.13247579e+00  3.13655962e+00
  3.14430135e+00  3.15189300e+00  3.15882669e+00  3.16410302e+00
  3.17756109e+00  3.19051817e+00  3.19594738e+00  3.20651654e+00
  3.21785237e+00  3.22862089e+00  3.23248745e+00  3.23553425e+00
  3.24259422e+00  3.24764594e+00  3.25303811e+00  3.25501225e+00
  3.26329667e+00  3.27063403e+00  3.27253934e+00  3.28267064e+00
  3.28378122e+00  3.29031456e+00  3.29339728e+00  3.29434332e+00
  3.30758056e+00  3.30975776e+00  3.32622492e+00  3.33459767e+00
  3.33938519e+00  3.34580431e+00  3.35153036e+00  3.35563130e+00
  3.36359544e+00  3.36901001e+00  3.38165611e+00  3.38702955e+00
  3.39353660e+00  3.39783506e+00  3.40463943e+00  3.41944369e+00
  3.42093205e+00  3.43615314e+00  3.44600180e+00  3.44926648e+00
  3.45781475e+00  3.46426454e+00  3.47224306e+00  3.47390823e+00
  3.48422493e+00  3.49150286e+00  3.49666950e+00  3.50609376e+00
  3.51380801e+00  3.52041361e+00  3.53050636e+00  3.53400329e+00
  3.54070537e+00  3.54662299e+00  3.55354972e+00  3.55963793e+00
  3.56584850e+00  3.57088557e+00  3.57707079e+00  3.58243376e+00
  3.58962385e+00  3.59862306e+00  3.60786212e+00  3.61393312e+00
  3.62944064e+00  3.63666619e+00  3.64271173e+00  3.65160448e+00
  3.66177087e+00  3.67301383e+00  3.67934830e+00  3.69435944e+00
  3.70304572e+00  3.70810128e+00  3.71853642e+00  3.72601755e+00
  3.74053214e+00  3.76009238e+00  3.78915364e+00  3.80418038e+00
  3.81226554e+00  3.82027782e+00  3.84010936e+00  3.84972525e+00
  3.85174191e+00  3.86358011e+00  3.87458202e+00  3.89079478e+00
  3.89874544e+00  3.91793942e+00  3.92076305e+00  3.92629166e+00
  3.94559021e+00  3.95463252e+00  3.95925181e+00  3.97191027e+00
  3.97658331e+00  3.99655926e+00  4.01883008e+00  4.03309617e+00
  4.06167007e+00  4.06996262e+00  4.08236065e+00  4.08882338e+00
  4.11061907e+00  4.12466947e+00  4.13702189e+00  4.14135802e+00
  4.17341809e+00  4.19446292e+00  4.20497752e+00  4.21308893e+00
  4.22567258e+00  4.22593648e+00  4.24953474e+00  4.26827879e+00
  4.27519034e+00  4.28295596e+00  4.29326211e+00  4.30170248e+00
  4.31589667e+00  4.32537889e+00  4.33088982e+00  4.34184127e+00
  4.35418523e+00  4.35878712e+00  4.36196316e+00  4.38237058e+00
  4.39680660e+00  4.40054652e+00  4.41421362e+00  4.41915708e+00
  4.43250557e+00  4.43936293e+00  4.45633140e+00  4.46156248e+00
  4.47282434e+00  4.49601687e+00  4.50450083e+00  4.50818109e+00
  4.51625802e+00  4.56925071e+00  4.58928311e+00  4.59607912e+00
  4.62338924e+00  4.64611007e+00  4.65598459e+00  4.66036993e+00
  4.67225657e+00  4.69024526e+00  4.69726038e+00  4.70442757e+00
  4.72878852e+00  4.75360953e+00  4.76674523e+00  4.78008382e+00
  4.79179859e+00  4.81001922e+00  4.81502933e+00  4.82253621e+00
  4.83653902e+00  4.85483581e+00  4.86182415e+00  4.88963234e+00
  4.89916346e+00  4.91841682e+00  4.92240730e+00  4.92966186e+00
  4.94663577e+00  4.94911859e+00  4.95743811e+00  4.96006341e+00
  4.99036988e+00  4.99658410e+00  5.00647013e+00  5.01233601e+00
  5.02095636e+00  5.04015153e+00  5.05022451e+00  5.07259977e+00
  5.09158731e+00  5.09257095e+00  5.13190532e+00  5.14073045e+00
  5.15144336e+00  5.16245333e+00  5.17817419e+00  5.19162397e+00
  5.20872420e+00  5.22384497e+00  5.24033938e+00  5.25276536e+00
  5.25520698e+00  5.26481441e+00  5.29596542e+00  5.29604788e+00
  5.31192948e+00  5.32735828e+00  5.33111377e+00  5.34214112e+00
  5.36413466e+00  5.36955116e+00  5.41338344e+00  5.42166586e+00
  5.44490526e+00  5.45900202e+00  5.47713892e+00  5.48191192e+00
  5.50465085e+00  5.52486946e+00  5.53887487e+00  5.57268188e+00
  5.59692371e+00  5.60961571e+00  5.62116007e+00  5.63402239e+00
  5.66265072e+00  5.67611469e+00  5.71065976e+00  5.73724390e+00
  5.80205368e+00  5.82336934e+00  5.83128981e+00  5.85483474e+00
  5.88727240e+00  5.98596356e+00  6.03126470e+00  6.03678637e+00
  6.13774660e+00  6.24273143e+00  6.30192861e+00  6.36276120e+00
  2.23808177e+01  2.25063684e+01  2.26507923e+01  2.27238668e+01
  2.27400619e+01  2.27770335e+01  2.27851086e+01  2.28668746e+01
  2.28927740e+01  2.29590464e+01  2.30629780e+01  2.31656982e+01
  2.32192982e+01  2.32816719e+01  2.34588147e+01  2.37092423e+01
  3.20098498e+01  3.20193692e+01  3.21128773e+01  3.21284399e+01
  3.25461168e+01]
nelec by numeric integration = 145.99997185545877
    CPU time for vxc     62.40 sec, wall time      4.89 sec
    CPU time for df vj and vk    115.82 sec, wall time      9.67 sec
    CPU time for df vj and vk     96.96 sec, wall time      6.69 sec
E1 = -4061.6232290247676  Ecoul = 1858.7580336324804  Exc = -126.81580479143932
cycle= 1 E= -892.589508543364  delta_E= -1.82e-12  |g|= 4.59e-06  |ddm|= 2.15e-05
    CPU time for cycle= 1    278.03 sec, wall time     21.67 sec
  HOMO = -0.282973558521374  LUMO = 0.00346268507804753
  mo_energy =
[-1.44429166e+01 -1.44188994e+01 -1.44094753e+01 -1.43626129e+01
 -1.43520334e+01 -1.03438771e+01 -1.03340767e+01 -1.03101657e+01
 -1.02975738e+01 -1.02940669e+01 -1.02833236e+01 -1.02814893e+01
 -1.02803152e+01 -1.02745476e+01 -1.02714035e+01 -1.02703249e+01
 -1.02664928e+01 -1.02642594e+01 -1.02632289e+01 -1.02616192e+01
 -1.02557010e+01 -1.11573113e+00 -1.08551674e+00 -1.07549948e+00
 -1.00198702e+00 -9.80218841e-01 -9.76403275e-01 -9.67166507e-01
 -9.24300652e-01 -9.06739337e-01 -8.86728679e-01 -8.64647514e-01
 -8.50746023e-01 -7.89495192e-01 -7.47247494e-01 -7.42638286e-01
 -7.34979337e-01 -7.09219550e-01 -6.94490581e-01 -6.78923195e-01
 -6.66692825e-01 -6.51523050e-01 -6.36528487e-01 -6.29789043e-01
 -6.10974422e-01 -5.93368390e-01 -5.86862687e-01 -5.77726041e-01
 -5.66081120e-01 -5.52270984e-01 -5.47537304e-01 -5.41561433e-01
 -5.35183314e-01 -5.33425246e-01 -5.21934115e-01 -5.15365512e-01
 -5.02985110e-01 -4.98232519e-01 -4.79689107e-01 -4.71947843e-01
 -4.64531288e-01 -4.51696875e-01 -4.41550044e-01 -4.39681896e-01
 -3.92758309e-01 -3.82272671e-01 -3.73737911e-01 -3.70156312e-01
 -3.61103378e-01 -3.49971897e-01 -3.41332377e-01 -3.12758337e-01
 -2.82973559e-01  3.46268508e-03  4.99595755e-02  5.74710576e-02
  7.57941410e-02  1.00709223e-01  1.10339892e-01  1.11415374e-01
  1.19515686e-01  1.41108136e-01  1.44918724e-01  1.47741804e-01
  1.55148076e-01  1.63848583e-01  1.64905291e-01  1.70605155e-01
  1.79491131e-01  1.82247638e-01  1.84656900e-01  1.93665044e-01
  2.00217268e-01  2.04505103e-01  2.12019790e-01  2.21080274e-01
  2.33603610e-01  2.36432248e-01  2.41382880e-01  2.50240779e-01
  2.58804857e-01  2.60234581e-01  2.68691394e-01  2.71460764e-01
  2.76805684e-01  2.88624445e-01  2.95514634e-01  2.96869740e-01
  2.97538969e-01  3.04405199e-01  3.12314283e-01  3.14947931e-01
  3.16615643e-01  3.22945158e-01  3.30195958e-01  3.37109173e-01
  3.38254000e-01  3.40304607e-01  3.42193678e-01  3.44285371e-01
  3.51883490e-01  3.63175329e-01  3.65866616e-01  3.71928508e-01
  3.75212612e-01  3.81280620e-01  3.85291474e-01  3.91929247e-01
  3.99745891e-01  4.02310093e-01  4.11680864e-01  4.12401984e-01
  4.20248466e-01  4.21742436e-01  4.29823906e-01  4.30523295e-01
  4.36044360e-01  4.36922057e-01  4.45163207e-01  4.46895155e-01
  4.51517994e-01  4.54049338e-01  4.60950916e-01  4.65093535e-01
  4.67240241e-01  4.72607796e-01  4.77912416e-01  4.79747240e-01
  4.89033627e-01  4.93707614e-01  4.97961546e-01  4.99732601e-01
  5.06032730e-01  5.08159013e-01  5.08888366e-01  5.19306179e-01
  5.24849902e-01  5.29748268e-01  5.34433511e-01  5.36909821e-01
  5.47177553e-01  5.49432690e-01  5.51247666e-01  5.53384884e-01
  5.59330077e-01  5.65122418e-01  5.72345675e-01  5.75619341e-01
  5.78870523e-01  5.84129835e-01  5.86646578e-01  5.93894091e-01
  5.99992441e-01  6.09217752e-01  6.10766961e-01  6.17905210e-01
  6.22539090e-01  6.28896077e-01  6.33160852e-01  6.39732334e-01
  6.47929399e-01  6.54608154e-01  6.67596080e-01  6.72263827e-01
  6.75940637e-01  6.86603488e-01  6.91983130e-01  6.99604321e-01
  7.03548911e-01  7.07990242e-01  7.14878978e-01  7.15853285e-01
  7.28692763e-01  7.29860120e-01  7.40648967e-01  7.45767305e-01
  7.49583035e-01  7.54174845e-01  7.59655261e-01  7.66250779e-01
  7.71419950e-01  7.79170503e-01  7.84562453e-01  7.92469404e-01
  7.93630492e-01  7.97550008e-01  8.04844725e-01  8.10593309e-01
  8.14154877e-01  8.25387538e-01  8.28651345e-01  8.36228901e-01
  8.43898979e-01  8.47363054e-01  8.51310577e-01  8.56084269e-01
  8.60802626e-01  8.63415195e-01  8.79654266e-01  8.85208751e-01
  8.92336839e-01  9.03667011e-01  9.07262973e-01  9.17178223e-01
  9.26558984e-01  9.30634032e-01  9.35433243e-01  9.50003539e-01
  9.51075586e-01  9.60969754e-01  9.68189141e-01  9.75870323e-01
  9.83948642e-01  1.00456167e+00  1.00991478e+00  1.01288597e+00
  1.01470427e+00  1.03670589e+00  1.04320277e+00  1.04762352e+00
  1.05314263e+00  1.07006889e+00  1.07125938e+00  1.08497697e+00
  1.09948558e+00  1.11199986e+00  1.12701635e+00  1.13527438e+00
  1.14772895e+00  1.15165434e+00  1.16011565e+00  1.17096005e+00
  1.17303199e+00  1.18436441e+00  1.19255739e+00  1.19839201e+00
  1.20621331e+00  1.21531802e+00  1.22093564e+00  1.23656033e+00
  1.24439486e+00  1.25474362e+00  1.26535118e+00  1.27352516e+00
  1.29737813e+00  1.30313578e+00  1.31027488e+00  1.31198000e+00
  1.32700139e+00  1.33097527e+00  1.33611819e+00  1.34757702e+00
  1.35161131e+00  1.36068782e+00  1.36823747e+00  1.37600833e+00
  1.38120402e+00  1.38644883e+00  1.39668469e+00  1.39840846e+00
  1.40257917e+00  1.41216535e+00  1.41436745e+00  1.41748876e+00
  1.43081710e+00  1.44025426e+00  1.45440669e+00  1.46109832e+00
  1.46658876e+00  1.47773559e+00  1.48137826e+00  1.49599771e+00
  1.50624432e+00  1.51185395e+00  1.52577268e+00  1.53950614e+00
  1.55101845e+00  1.55427404e+00  1.56220987e+00  1.56719294e+00
  1.58363103e+00  1.58641150e+00  1.58841697e+00  1.59904908e+00
  1.60608271e+00  1.60887680e+00  1.61243012e+00  1.62283762e+00
  1.62726757e+00  1.62966831e+00  1.64123826e+00  1.64759440e+00
  1.65327568e+00  1.66494464e+00  1.66721646e+00  1.67788940e+00
  1.68731837e+00  1.69555708e+00  1.69896004e+00  1.70082471e+00
  1.70712578e+00  1.71007485e+00  1.71755458e+00  1.73321290e+00
  1.73716171e+00  1.75016763e+00  1.75107304e+00  1.75821313e+00
  1.77057808e+00  1.77905072e+00  1.79238221e+00  1.79756953e+00
  1.80268373e+00  1.80749547e+00  1.81684335e+00  1.82596072e+00
  1.83183789e+00  1.83479335e+00  1.85168370e+00  1.86140296e+00
  1.88163928e+00  1.88972370e+00  1.89094886e+00  1.90014923e+00
  1.90523186e+00  1.91434014e+00  1.92480479e+00  1.93553607e+00
  1.94480264e+00  1.95874537e+00  1.96740671e+00  1.97489510e+00
  1.98377515e+00  1.98656621e+00  1.99507165e+00  2.00442115e+00
  2.01398138e+00  2.01998447e+00  2.03891343e+00  2.05359469e+00
  2.05844931e+00  2.07564227e+00  2.08455654e+00  2.09595257e+00
  2.10155264e+00  2.10950754e+00  2.11598023e+00  2.12040852e+00
  2.12220409e+00  2.12789015e+00  2.13449498e+00  2.14716514e+00
  2.15160332e+00  2.15800495e+00  2.16253484e+00  2.16851509e+00
  2.17962460e+00  2.18990654e+00  2.19698413e+00  2.20233287e+00
  2.22230300e+00  2.23271119e+00  2.24216367e+00  2.24812871e+00
  2.25906300e+00  2.26612396e+00  2.27791948e+00  2.29389028e+00
  2.30427010e+00  2.32043215e+00  2.33262303e+00  2.34998502e+00
  2.36729248e+00  2.36950868e+00  2.38310671e+00  2.38525353e+00
  2.39135546e+00  2.40066711e+00  2.40881630e+00  2.41836127e+00
  2.43046356e+00  2.43773828e+00  2.44874306e+00  2.45699243e+00
  2.47349379e+00  2.47630931e+00  2.48916003e+00  2.49680429e+00
  2.50825505e+00  2.51502287e+00  2.52888607e+00  2.55383750e+00
  2.55925590e+00  2.56752971e+00  2.58036652e+00  2.59301976e+00
  2.60303267e+00  2.61157073e+00  2.63454880e+00  2.63725912e+00
  2.65768568e+00  2.65987768e+00  2.66373764e+00  2.67503145e+00
  2.67936115e+00  2.68818750e+00  2.69709606e+00  2.70455848e+00
  2.70743086e+00  2.71257104e+00  2.73376259e+00  2.74352218e+00
  2.74952758e+00  2.75868873e+00  2.76689897e+00  2.77754923e+00
  2.78042039e+00  2.78823620e+00  2.79676923e+00  2.80790364e+00
  2.81940418e+00  2.82673964e+00  2.83097618e+00  2.83438291e+00
  2.84526760e+00  2.85037158e+00  2.86537190e+00  2.86627014e+00
  2.87463206e+00  2.87969440e+00  2.89311450e+00  2.90739853e+00
  2.91035129e+00  2.91520548e+00  2.92185499e+00  2.92826070e+00
  2.93190097e+00  2.93393495e+00  2.94863383e+00  2.95592641e+00
  2.96103400e+00  2.97108900e+00  2.97196871e+00  2.98174363e+00
  2.98801487e+00  2.99460784e+00  3.00083981e+00  3.01223248e+00
  3.02598551e+00  3.03206029e+00  3.03922187e+00  3.04162544e+00
  3.05026278e+00  3.05306242e+00  3.06542040e+00  3.07090964e+00
  3.08544184e+00  3.08867109e+00  3.10231090e+00  3.10527082e+00
  3.11368372e+00  3.12597215e+00  3.13247584e+00  3.13655968e+00
  3.14430148e+00  3.15189307e+00  3.15882664e+00  3.16410298e+00
  3.17756115e+00  3.19051801e+00  3.19594730e+00  3.20651647e+00
  3.21785235e+00  3.22862095e+00  3.23248753e+00  3.23553430e+00
  3.24259433e+00  3.24764592e+00  3.25303806e+00  3.25501215e+00
  3.26329668e+00  3.27063407e+00  3.27253935e+00  3.28267061e+00
  3.28378116e+00  3.29031461e+00  3.29339738e+00  3.29434326e+00
  3.30758057e+00  3.30975788e+00  3.32622489e+00  3.33459765e+00
  3.33938519e+00  3.34580432e+00  3.35153037e+00  3.35563126e+00
  3.36359548e+00  3.36901000e+00  3.38165626e+00  3.38702957e+00
  3.39353659e+00  3.39783510e+00  3.40463937e+00  3.41944381e+00
  3.42093215e+00  3.43615321e+00  3.44600181e+00  3.44926646e+00
  3.45781474e+00  3.46426455e+00  3.47224309e+00  3.47390820e+00
  3.48422490e+00  3.49150281e+00  3.49666957e+00  3.50609390e+00
  3.51380801e+00  3.52041359e+00  3.53050640e+00  3.53400335e+00
  3.54070565e+00  3.54662312e+00  3.55354975e+00  3.55963786e+00
  3.56584852e+00  3.57088572e+00  3.57707082e+00  3.58243376e+00
  3.58962390e+00  3.59862304e+00  3.60786210e+00  3.61393312e+00
  3.62944068e+00  3.63666621e+00  3.64271171e+00  3.65160463e+00
  3.66177100e+00  3.67301382e+00  3.67934825e+00  3.69435948e+00
  3.70304576e+00  3.70810129e+00  3.71853641e+00  3.72601755e+00
  3.74053206e+00  3.76009222e+00  3.78915358e+00  3.80418048e+00
  3.81226562e+00  3.82027782e+00  3.84010933e+00  3.84972528e+00
  3.85174181e+00  3.86357994e+00  3.87458199e+00  3.89079467e+00
  3.89874546e+00  3.91793927e+00  3.92076307e+00  3.92629170e+00
  3.94559018e+00  3.95463261e+00  3.95925176e+00  3.97191028e+00
  3.97658352e+00  3.99655933e+00  4.01883000e+00  4.03309634e+00
  4.06167009e+00  4.06996264e+00  4.08236064e+00  4.08882326e+00
  4.11061900e+00  4.12466987e+00  4.13702179e+00  4.14135796e+00
  4.17341793e+00  4.19446285e+00  4.20497774e+00  4.21308868e+00
  4.22567244e+00  4.22593644e+00  4.24953463e+00  4.26827874e+00
  4.27519033e+00  4.28295597e+00  4.29326207e+00  4.30170249e+00
  4.31589690e+00  4.32537892e+00  4.33088990e+00  4.34184129e+00
  4.35418524e+00  4.35878722e+00  4.36196316e+00  4.38237076e+00
  4.39680663e+00  4.40054647e+00  4.41421376e+00  4.41915718e+00
  4.43250581e+00  4.43936291e+00  4.45633145e+00  4.46156223e+00
  4.47282446e+00  4.49601688e+00  4.50450088e+00  4.50818162e+00
  4.51625810e+00  4.56925089e+00  4.58928320e+00  4.59607918e+00
  4.62338954e+00  4.64611010e+00  4.65598459e+00  4.66036994e+00
  4.67225654e+00  4.69024523e+00  4.69726051e+00  4.70442762e+00
  4.72878845e+00  4.75360946e+00  4.76674532e+00  4.78008311e+00
  4.79179874e+00  4.81001938e+00  4.81502932e+00  4.82253659e+00
  4.83653924e+00  4.85483596e+00  4.86182417e+00  4.88963273e+00
  4.89916319e+00  4.91841678e+00  4.92240731e+00  4.92966199e+00
  4.94663583e+00  4.94911880e+00  4.95743836e+00  4.96006362e+00
  4.99036977e+00  4.99658406e+00  5.00647027e+00  5.01233589e+00
  5.02095625e+00  5.04015143e+00  5.05022418e+00  5.07259961e+00
  5.09158733e+00  5.09257101e+00  5.13190544e+00  5.14073020e+00
  5.15144326e+00  5.16245348e+00  5.17817425e+00  5.19162417e+00
  5.20872431e+00  5.22384503e+00  5.24033956e+00  5.25276540e+00
  5.25520695e+00  5.26481453e+00  5.29596559e+00  5.29604783e+00
  5.31192966e+00  5.32735799e+00  5.33111352e+00  5.34214091e+00
  5.36413452e+00  5.36955102e+00  5.41338372e+00  5.42166561e+00
  5.44490522e+00  5.45900196e+00  5.47713887e+00  5.48191175e+00
  5.50465066e+00  5.52486941e+00  5.53887503e+00  5.57268196e+00
  5.59692363e+00  5.60961558e+00  5.62116001e+00  5.63402249e+00
  5.66265073e+00  5.67611471e+00  5.71065958e+00  5.73724372e+00
  5.80205352e+00  5.82336901e+00  5.83128963e+00  5.85483417e+00
  5.88727215e+00  5.98596312e+00  6.03126489e+00  6.03678693e+00
  6.13774595e+00  6.24273117e+00  6.30192846e+00  6.36276093e+00
  2.23808178e+01  2.25063692e+01  2.26507928e+01  2.27238670e+01
  2.27400624e+01  2.27770339e+01  2.27851092e+01  2.28668748e+01
  2.28927737e+01  2.29590464e+01  2.30629780e+01  2.31656976e+01
  2.32192983e+01  2.32816715e+01  2.34588143e+01  2.37092421e+01
  3.20098509e+01  3.20193710e+01  3.21128777e+01  3.21284381e+01
  3.25461157e+01]
nelec by numeric integration = 145.99997185547616
    CPU time for vxc     62.98 sec, wall time      4.75 sec
    CPU time for df vj and vk    115.73 sec, wall time      9.66 sec
    CPU time for df vj and vk     90.26 sec, wall time      6.21 sec
E1 = -4061.6232294947768  Ecoul = 1858.7580332141886  Exc = -126.81580390313914
Extra cycle  E= -892.589508543365  delta_E= -9.09e-13  |g|= 5.61e-06  |ddm|= 1.56e-05
    CPU time for scf_cycle   1042.00 sec, wall time     90.41 sec
    CPU time for SCF   1042.00 sec, wall time     90.41 sec
converged SCF energy = -892.589508543365
SCF Done after  90.409 seconds
after SCF memory used: 7804.3515625 MB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
a_x = 0.56
beta = 8.0
alpha = 4.58
hdiag (48764,)
n_occ =  73
n_vir =  668
max_vir =  181
Q-Gamma tensors building time = 17.4227
after Q matrix memory used: 8121.203125 MB
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   sTDA
Preconditioner:  sTDA
A matrix size =  48764 * 48764
sTDA nstate = 28
sTDA A diagonalization: threshold = 0.001 ; in 10 steps  11.5813 seconds
sTDA excitation energies:
[3.94874171 4.45830908 4.81540617 4.92641061 5.51349561 5.59703889
 5.67873521 5.8039749  5.90767318 5.95199304 6.01976962 6.07394643
 6.12184244 6.20525984 6.23883627 6.31822951 6.57341647 6.80132011
 6.8509184  6.93267381 6.94314091 6.97722648 7.01866576 7.05154324
 7.08101325 7.1226912  7.14708441 7.25022955]
Intial guess time: 11.6974 seconds
    CPU time for df vj and vk   3191.54 sec, wall time    258.21 sec
    CPU time for df vj and vk   2520.39 sec, wall time    180.59 sec
Iteration  0
subspace size:  28
maximum residual norm 0.12077534371501143
sTDA Preconditioning Done after  21 steps;  13.3529 seconds
subgencost 1.4255 10.68 %
mvcost 1.7394 13.03 %
GScost 9.3469 70.0 %
subcost 0.1675 1.25 %
m,new_m 28 48
    CPU time for df vj and vk   2258.05 sec, wall time    182.87 sec
    CPU time for df vj and vk   1786.45 sec, wall time    126.81 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.04290471832704
sTDA Preconditioning Done after  24 steps;  6.8727 seconds
subgencost 0.9408 13.69 %
mvcost 1.4323 20.84 %
GScost 3.7408 54.43 %
subcost 0.1945 2.83 %
m,new_m 48 68
    CPU time for df vj and vk   2291.05 sec, wall time    182.99 sec
    CPU time for df vj and vk   1794.81 sec, wall time    127.85 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.0278325149534257
_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________
sTDA preconditioning failed after  29 steps;  6.1145 seconds
current residual norms [0.0031479435907349426, 0.0024879056027398987, 0.0022480997390241855, 0.0011520597445232933, 0.003825077067684264, 0.0021128920010813094, 0.002235714225288853, 0.0025855413105726893, 0.002557037137015034, 0.0022472751260509886, 0.0014609678119576637, 0.0015165411186170415, 0.0014417692513677167, 0.0072931790587196805, 0.0027746487824494973, 0.0028590072051064884, 0.004708180080090802, 0.007080952012148384, 0.004462083625350188, 0.03292632996794303]
max_norm =  0.03292632996794303
orthonormality of V 6.978130944033545e-15
m,new_m 68 88
    CPU time for df vj and vk   2281.52 sec, wall time    183.38 sec
    CPU time for df vj and vk   1809.54 sec, wall time    126.98 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.010537167524259705
_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________
sTDA preconditioning failed after  29 steps;  6.013 seconds
current residual norms [0.001746228749614324, 0.0016653666360735779, 0.001354139073206424, 0.004052337227030353, 0.0021005127394378878, 0.0014490974369981123, 0.001529286173049139, 0.001862329727873275, 0.002161200179805196, 0.003218311660044969, 0.0012243505567803505, 0.002174856501766355, 0.0034659239885793396, 0.00375421274615084, 0.002375806685631177, 0.0032674774938695745, 0.004145128655945225, 0.005717458540478561, 0.0031297722538856706, 0.008706654996660628]
max_norm =  0.008706654996660628
orthonormality of V 6.883423421114173e-15
m,new_m 88 108
    CPU time for df vj and vk   2304.96 sec, wall time    178.40 sec
    CPU time for df vj and vk   1815.36 sec, wall time    125.06 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.012601817000644252
sTDA Preconditioning Done after  23 steps;  5.6887 seconds
subgencost 0.7651 13.45 %
mvcost 1.0419 18.32 %
GScost 3.21 56.43 %
subcost 0.1624 2.85 %
m,new_m 108 128
    CPU time for df vj and vk   2279.75 sec, wall time    183.69 sec
    CPU time for df vj and vk   1791.17 sec, wall time    126.81 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.008676558039129065
sTDA Preconditioning Done after  23 steps;  10.4104 seconds
subgencost 1.642 15.77 %
mvcost 1.1711 11.25 %
GScost 6.6658 64.03 %
subcost 0.2125 2.04 %
m,new_m 128 147
    CPU time for df vj and vk   2154.37 sec, wall time    173.97 sec
    CPU time for df vj and vk   1701.14 sec, wall time    120.21 sec
new generated guesses: 19
Iteration  6
subspace size:  147
maximum residual norm 0.0029090075875473674
_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________
sTDA preconditioning failed after  29 steps;  3.7347 seconds
current residual norms [0.001867612673989729, 0.004959830202179627, 0.002720785706628709, 0.0041613411204649165, 0.005083345283268123, 0.004358366715459809, 0.004916629046467005, 0.01636775210036667]
max_norm =  0.01636775210036667
orthonormality of V 5.558139461168807e-15
m,new_m 147 155
    CPU time for df vj and vk    909.40 sec, wall time     73.16 sec
    CPU time for df vj and vk    725.60 sec, wall time     51.14 sec
new generated guesses: 8
Iteration  7
subspace size:  155
maximum residual norm 0.000577308795184262
_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________
sTDA preconditioning failed after  29 steps;  0.8961 seconds
current residual norms [0.0075594586159771875, 0.021034851057793832]
max_norm =  0.021034851057793832
orthonormality of V 3.663997361883837e-15
m,new_m 155 157
    CPU time for df vj and vk    228.63 sec, wall time     18.90 sec
    CPU time for df vj and vk    181.42 sec, wall time     12.61 sec
new generated guesses: 2
Iteration  8
subspace size:  157
maximum residual norm 0.00014059319992366763
_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________
sTDA preconditioning failed after  29 steps;  0.3538 seconds
current residual norms [0.044834220711254785]
max_norm =  0.044834220711254785
orthonormality of V 2.4622120507780573e-15
m,new_m 157 158
    CPU time for df vj and vk    116.75 sec, wall time     10.20 sec
    CPU time for df vj and vk     91.14 sec, wall time      6.49 sec
new generated guesses: 1
Iteration  9
subspace size:  158
maximum residual norm 3.5847479982173e-05
_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________
sTDA preconditioning failed after  29 steps;  0.3564 seconds
current residual norms [0.05131998067226515]
max_norm =  0.05131998067226515
orthonormality of V 2.8589982222081014e-15
m,new_m 158 159
    CPU time for df vj and vk    115.83 sec, wall time     10.05 sec
    CPU time for df vj and vk     91.62 sec, wall time      6.16 sec
new generated guesses: 1
Iteration  10
subspace size:  159
maximum residual norm 9.426320097404699e-06
Davidson procedure aborted
Davidson done after  3182.3076 seconds
Total steps = 11
Final subspace shape =  (159, 159)
Preconditioning time: 54.0365 1.7 %
In-house Davidson time: 3182.3621 seconds
Excited State energies (eV) =
[4.22408611 4.6874234  4.94960934 5.37768781 5.68204076 5.78902046
 5.84517334 6.09391497 6.20467163 6.29962735 6.43202886 6.53834795
 6.58825544 6.85225019 6.9009515  6.93854279 6.9876336  7.05655982
 7.11541807 7.24630282]
|---------------   In-house Developed Davidson Done   -----------|
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   Adiag
Preconditioner:  Adiag
A matrix size =  48764 * 48764
Intial guess time: 0.0029 seconds
    CPU time for df vj and vk   3192.46 sec, wall time    255.40 sec
    CPU time for df vj and vk   2509.55 sec, wall time    181.96 sec
Iteration  0
subspace size:  28
maximum residual norm 0.13301950211468339
m,new_m 28 48
    CPU time for df vj and vk   2286.18 sec, wall time    181.29 sec
    CPU time for df vj and vk   1788.55 sec, wall time    128.41 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.04616466965655869
m,new_m 48 68
    CPU time for df vj and vk   2287.87 sec, wall time    184.68 sec
    CPU time for df vj and vk   1792.47 sec, wall time    128.14 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.039813090104224465
m,new_m 68 88
    CPU time for df vj and vk   2263.34 sec, wall time    181.43 sec
    CPU time for df vj and vk   1786.00 sec, wall time    128.97 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.03388273796754066
m,new_m 88 108
    CPU time for df vj and vk   2266.23 sec, wall time    180.39 sec
    CPU time for df vj and vk   1787.76 sec, wall time    127.88 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.04132510425314412
m,new_m 108 128
    CPU time for df vj and vk   2265.86 sec, wall time    183.68 sec
    CPU time for df vj and vk   1780.76 sec, wall time    127.44 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.03394110782974616
m,new_m 128 148
    CPU time for df vj and vk   2265.94 sec, wall time    181.16 sec
    CPU time for df vj and vk   1780.69 sec, wall time    128.15 sec
new generated guesses: 20
Iteration  6
subspace size:  148
maximum residual norm 0.021327145270406824
m,new_m 148 168
    CPU time for df vj and vk   2265.37 sec, wall time    183.58 sec
    CPU time for df vj and vk   1775.43 sec, wall time    129.14 sec
new generated guesses: 20
Iteration  7
subspace size:  168
maximum residual norm 0.014276083571051972
m,new_m 168 188
    CPU time for df vj and vk   2272.93 sec, wall time    182.10 sec
    CPU time for df vj and vk   1786.27 sec, wall time    128.68 sec
new generated guesses: 20
Iteration  8
subspace size:  188
maximum residual norm 0.007415290954011633
m,new_m 188 205
    CPU time for df vj and vk   1932.68 sec, wall time    157.87 sec
    CPU time for df vj and vk   1520.14 sec, wall time    107.94 sec
new generated guesses: 17
Iteration  9
subspace size:  205
maximum residual norm 0.0038887214658813456
m,new_m 205 221
    CPU time for df vj and vk   1828.81 sec, wall time    146.27 sec
    CPU time for df vj and vk   1430.49 sec, wall time    102.70 sec
new generated guesses: 16
Iteration  10
subspace size:  221
maximum residual norm 0.0013830238457842778
m,new_m 221 231
    CPU time for df vj and vk   1131.57 sec, wall time     90.96 sec
    CPU time for df vj and vk    897.00 sec, wall time     63.87 sec
new generated guesses: 10
Iteration  11
subspace size:  231
maximum residual norm 0.0005398599598972806
m,new_m 231 238
    CPU time for df vj and vk    797.64 sec, wall time     64.12 sec
    CPU time for df vj and vk    624.43 sec, wall time     43.46 sec
new generated guesses: 7
Iteration  12
subspace size:  238
maximum residual norm 0.00018293719670580457
m,new_m 238 244
    CPU time for df vj and vk    680.95 sec, wall time     53.94 sec
    CPU time for df vj and vk    537.40 sec, wall time     37.90 sec
new generated guesses: 6
Iteration  13
subspace size:  244
maximum residual norm 6.609313835343992e-05
m,new_m 244 249
    CPU time for df vj and vk    568.77 sec, wall time     46.10 sec
    CPU time for df vj and vk    447.19 sec, wall time     31.70 sec
new generated guesses: 5
Iteration  14
subspace size:  249
maximum residual norm 2.396468465247123e-05
m,new_m 249 250
    CPU time for df vj and vk    115.18 sec, wall time      9.99 sec
    CPU time for df vj and vk     92.35 sec, wall time      6.71 sec
new generated guesses: 1
Iteration  15
subspace size:  250
maximum residual norm 8.230334021776791e-06
Davidson procedure aborted
Davidson done after  4871.9251 seconds
Total steps = 16
Final subspace shape =  (250, 250)
Preconditioning time: 0.2633 0.01 %
In-house Davidson time: 4871.9546 seconds
Excited State energies (eV) =
[4.22408611 4.6874234  4.94960934 5.37768781 5.68204076 5.78902046
 5.84517334 6.09391497 6.20467163 6.29962735 6.43202886 6.53834795
 6.58825544 6.85225019 6.9009515  6.93854279 6.9876336  7.05655982
 7.11541807 7.24630282]
|---------------   In-house Developed Davidson Done   -----------|
xyzfile = 36_DAPI.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 20
pytd = False
TDA = True
TDDFT = False
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
TDA_options = [0, 1]
TDDFT_options = [0]
dynpol_options = [0]
stapol_options = [0]
TDA_tolerance = 1e-05
TDDFT_tolerance = 1e-05
dynpol_tolerance = 1e-05
stapol_tolerance = 1e-05
max = 35
TDA_initialTOL = 0.001
TDDFT_initialTOL = 0.001
dynpol_initprecTOL = 0.01
stapol_initprecTOL = 0.01
TDA_precondTOL = 0.01
TDDFT_precondTOL = 0.01
TDA_extrainitial = 8
TDDFT_extrainitial = 8
TDDFT_extrainitial_3n = False
eigensolver_tol = 1e-05
memory = 50000
verbose = 5
beta = []
alpha = []
