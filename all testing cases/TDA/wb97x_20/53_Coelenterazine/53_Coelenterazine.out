curpath /scratch/pbsjobs/job.15971914.hpc
lib.num_threads() =  16
at beginning memory used: 51.8515625 MB
mol.max_memory 50000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul6_GS.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
#from einsum2 import einsum2 as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

# from pyscf.tools import molden
# from pyscf.dft import xcfun

# wb97x methanol, sTDA[ 6.46739329  8.18181719  8.38358186  9.45195086  9.52132657  9.98634407
#  10.57628203 11.22108803 11.23872459 11.57456576]

# wb97x methanol, sTDDFT [6.46636223 8.18031038 8.38140358 9.45010938 9.50610109]
# truncate 40 eV         [6.46748128 8.18219018 8.38315179 9.45216734 9.51268853]
#
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA',  help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=bool,  default=False, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default='NA',  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='NA',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=bool,  default=True,  help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default='3',   help='0-9, 9 is best')

parser.add_argument('-n',  '--nstates',                     type=int,   default = 4,      help='number of excited states')
parser.add_argument('-pytd',  '--pytd',                     type=bool,  default = False , help='whether to compare with PySCF TDDFT')

parser.add_argument('-TDA','--TDA',                         type=bool,  default = False, help='perform TDA')
parser.add_argument('-TDDFT','--TDDFT',                     type=bool,  default = False, help='perform TDDFT')
parser.add_argument('-dynpol','--dynpol',                   type=bool,  default = False, help='perform dynamic polarizability')
parser.add_argument('-omega','--dynpol_omega',              type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
parser.add_argument('-stapol','--stapol',                   type=bool,  default = False, help='perform static polarizability')

parser.add_argument('-sTDA','--sTDA',                       type=bool,  default = False, help='perform sTDA calculation')
parser.add_argument('-sTDDFT','--sTDDFT',                   type=bool,  default = False, help='perform sTDDFT calculation')
parser.add_argument('-TT','--Truncate_test',                type=bool,  default = False, help='test the wall time for different virtual truncation')

parser.add_argument('-TV','--truncate_virtual',             type=float, default = 0, help='the threshold to truncate virtual orbitals, in eV')

parser.add_argument('-o1', '--TDA_options',                 type=int,   default = [0], nargs='+', help='0-7')
parser.add_argument('-o2', '--TDDFT_options',               type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o3', '--dynpol_options',              type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o4', '--stapol_options',              type=int,   default = [0], nargs='+', help='0-3')

parser.add_argument('-t1',  '--TDA_tolerance',              type=float, default= 1e-5, help='residual norm conv for TDA')
parser.add_argument('-t2',  '--TDDFT_tolerance',            type=float, default= 1e-5, help='residual norm conv for TDDFT')
parser.add_argument('-t3',  '--dynpol_tolerance',           type=float, default= 1e-5, help='residual norm conv for dynamic polarizability')
parser.add_argument('-t4',  '--stapol_tolerance',           type=float, default= 1e-5, help='residual norm conv for static polarizability')

parser.add_argument('-max',  '--max',                       type=int,   default= 30,   help='max iterations')

parser.add_argument('-it1', '--TDA_initialTOL',             type=float, default= 1e-3, help='conv for sTDA inital guess')
parser.add_argument('-it2', '--TDDFT_initialTOL',           type=float, default= 1e-3, help='conv for sTDDFT inital guess')
parser.add_argument('-it3', '--dynpol_initprecTOL',         type=float, default= 1e-2, help='conv for s-dynamic polarizability inital guess and precond')
parser.add_argument('-it4', '--stapol_initprecTOL',         type=float, default= 1e-2, help='conv for s-static polarizability inital guess and precond')

parser.add_argument('-pt1', '--TDA_precondTOL',             type=float, default= 1e-2, help='conv for TDA preconditioner')
parser.add_argument('-pt2', '--TDDFT_precondTOL',           type=float, default= 1e-2, help='conv for TDDFT preconditioner')

parser.add_argument('-ei1', '--TDA_extrainitial',           type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
parser.add_argument('-ei2', '--TDDFT_extrainitial',         type=int,   default= 8,    help='number of extral TDDFT initial guess vectors, 0-8')
parser.add_argument('-ei3n','--TDDFT_extrainitial_3n',      type=bool,  default= False,help='number of extral TDDFT initial guess vectors, 3state')

parser.add_argument('-et', '--eigensolver_tol',             type=float, default= 1e-5, help='conv for new guess generator in new_ES')
parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')

parser.add_argument('-be', '--beta',                        type=float, default= [],    nargs='+', help='beta = 0.83')
parser.add_argument('-al', '--alpha',                       type=float, default= [],    nargs='+', help='alpha = 0.83')

args = parser.parse_args()
################################################


########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

# info = psutil.virtual_memory()
# print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

f = open(args.xyzfile)
atom_coordinates = f.readlines()
del atom_coordinates[:2]
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile == True:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'
    # to use the chk file as scf input


mf.conv_tol = 1e-10

print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
kernel_t = kernel_1 - kernel_0
print ('SCF Done after ', round(kernel_t, 4), 'seconds')

show_memory_info('after SCF')

#################################################################
# Collect everything needed from PySCF
Qstart = time.time()
Natm = mol.natm
mo_occ = mf.mo_occ
n_occ = len(np.where(mo_occ > 0)[0])
#mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
n_vir = len(np.where(mo_occ == 0)[0])
#################################################
# generate matrix vector multiplication function
td = tddft.TDA(mf)
TDA_vind, hdiag = td.gen_vind(mf)

TD = tddft.TDDFT(mf)
TDDFT_vind, Hdiag = TD.gen_vind(mf)

A_size = n_occ * n_vir

# return AV
def TDA_matrix_vector(V):
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1
#################################################

##################################################################################################
# create a function for dictionary of chemical hardness, by mappig two iteratable subject, list
# list of elements
elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', 'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb','Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
#list of chemical hardness, they are floats, containing elements 1-94, in Hartree
hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
HARDNESS = dict(zip(elements,hardness))
#function to return chemical hardness from dictionary HARDNESS
def Hardness(atom_id):
    atom = mol.atom_pure_symbol(atom_id)
    return HARDNESS[atom]

################################################################################
# This block is the function to produce orthonormalized coefficient matrix C
def matrix_power(S,a):
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    #X == S^a
    return X

def matrix_power2(S):
    s,ket = np.linalg.eigh(S)
    s_sqrt = s**0.5
    s_inv = 1/s_sqrt

    S1 = np.dot(ket*s_sqrt,ket.T)
    S2 = np.dot(ket*s_inv,ket.T)

    #S1 == S^1/2
    #S2 == S^-1/2
    return S1, S2

def orthonormalize(C):
    X = matrix_power(mf.get_ovlp(), 0.5)
    # S = mf.get_ovlp() #.get_ovlp() is basis overlap matrix
    # S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
    C = np.dot(X,C)
    return C

################################################################################
def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']# NA is for Hartree-Fork
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    DF_ax = dict(zip(hybride_F, hybride_paramt))
    #Zhao, Y. and Truhlar, D.G., 2006. Density functional for spectroscopy: no long-range self-interaction error, good performance for Rydberg and charge-transfer states, and better performance on average than B3LYP for ground states. The Journal of Physical Chemistry A, 110(49), pp.13126-13130.

    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]

    elif args.functional in hybride_F:
        beta1 = 0.2
        beta2 = 1.83
        alpha1 = 1.42
        alpha2 = 0.48

        a_x = DF_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)
    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

# creat \eta matrix

def gen_gammaJK():
    Natm = mol.natm
    a = [Hardness(atom_id) for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2

    #Inter-particle distance array
    # unit == ’Bohr’, Its value is 5.29177210903(80)×10^(−11) m
    R = pyscf.gto.mole.inter_distance(mol, coords=None)
    # creat GammaK and GammaK matrix
    GammaJ = (R**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

GammaJ, GammaK = gen_gammaJK()

def generateQ():
    N_bf = len(mo_occ)
    C = mf.mo_coeff
    # mf.mo_coeff is the coefficient matrix
    C = orthonormalize(C)
    # C is orthonormalized coefficient matrix, N_bf * N_bf
    # np.dot(C.T,C) is a an identity matrix
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    #N_bf is number Atomic orbitals = n_occ+n_vir
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

q_tensors = generateQ()

''' if no truncation, max_vir = n_vir and n_occ + max_vir = N_bf '''
print('hdiag', hdiag.shape)
delta_diag_A = hdiag.reshape(n_occ, n_vir)

def gen_maxvir(tol_eV = args.truncate_virtual):
    if tol_eV != 0:
        homo_vir = delta_diag_A[-1,:].tolist()
        # print(delta_diag_A[-1,:]*27.211386245988)
        tol = tol_eV/27.211386245988
        for i in range(len(homo_vir)):
            if homo_vir[i] >= tol:
                max_vir = i
                break
            else:
                max_vir = n_vir
    else:
        max_vir = n_vir
    return max_vir

max_vir = gen_maxvir()
print('n_occ = ', n_occ)
print('n_vir = ', n_vir)
print('max_vir = ', max_vir)

A_reduced_size = n_occ * max_vir

def gen_QJK(max_vir=max_vir):

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)


    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()
# pre-calculate and store the Q-Gamma rank 3 tensor
Qend = time.time()

Q_time = Qend - Qstart
print('Q-Gamma tensors building time =', round(Q_time, 4))
################################################################################

show_memory_info('after Q matrix')


################################################################################
# This block is to define on-the-fly two electron intergeral (pq|rs)
# A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v

# iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
# ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)

max_vir_hdiag = delta_diag_A[:,:max_vir]

def gen_iajb_ijab_ibja_delta_fly(max_vir=max_vir, \
                                q_ij=q_ij, \
                                q_ab=q_ab, \
                                q_ia=q_ia , \
                                GK_q_jb=GK_q_jb, \
                                GJ_q_ab=GJ_q_ab):

    def iajb_fly(V):
        start = time.time()
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        end = time.time()
        # print('iajb =', round(end - start,4))
        return iajb_V


    def ijab_fly(V):
        start = time.time()
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        end = time.time()
        # print('ijab =', round(end - start,4))
        return ijab_V

    def ibja_fly(V):
        start = time.time()
        # the Forck exchange energy in B matrix
        ''' (ib|ja) '''
        # GK_q_jb_V = einsum("Aja,jbm->Abam", GK_q_jb, V)
        # ibja_V = einsum("Aib,Abam->iam", q_ia, GK_q_jb_V)
        # [ 6.46636595  8.18031516  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]

        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        #[ 6.46636595  8.18031515  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]
        end = time.time()
        # print('ibja =', round(end - start,4))
        return ibja_V

    def delta_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_diag_A, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir=max_vir, \
                            iajb_fly = iajb_fly, \
                            ijab_fly = ijab_fly, \
                            ibja_fly = ibja_fly, \
                            delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        # sTDA_A * V
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''''return AX+BY and AY+BX'''''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        '''sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        '''sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)'''

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        ''' return (A+B)X '''
        ''' sTDA_A = delta_fly(V) + 4*iajb_fly(V) \
                    - ijab_fly(V) - a_x*ibja_fly(V)'''
        X = X.reshape(n_occ, max_vir, -1)

        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)

        U = U.reshape(n_occ*max_vir, -1)
        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

################################################################################

################################################################################
# orthonormalization of guess_vectors
def Gram_Schmidt_bvec(A, bvec):
    ''' orthonormalize vector b against all A vectors'''
    ''' b = b - A*(A.T*b)'''
    if A.shape[1] != 0:
        # suppose A is orthonormalized
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)

    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    # V is a vectors holder
    # count is the amount of vectors that already sit in the holder
    nvec = np.shape(vecs)[1]
    # amount of new vectors intended to fill in the V
    # count will be final amount of vectors in V
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize

        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count

    return V, new_count


def S_symmetry_orthogonal(x,y):

    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    # print('x.Ty', np.dot(new_x.T,new_y))
    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A


################################################################################
# define the orthonormality of a matrix A as the norm of (A.T*A - I)
def check_orthonormal(A):
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c
################################################################################

################################################################################
def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    # put X_new into V, and Y_new into W
    # m is the amount of vectors that already on V or W
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]
    # amount of new vectors intended to fill in the V_holder and W_holder
    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):

        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)

        # x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m
################################################################################



################################################################################
def solve_AX_Xla_B(A, omega, Q):
    ''' AX - XΩ  = Q '''

    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)

    X *= Qnorm
    return X
################################################################################
def TDA_A_diag_initial_guess(m, V, hdiag = hdiag):
    # m is the amount of initial guesses
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V

def sTDA_initial_guess(m, V):
    sTDA_A_eigenkets = Davidson0(m)
    # print('sTDA_A_eigenkets', sTDA_A_eigenkets.shape)
    #diagonalize sTDA_A amtrix
    V[:, :m] = sTDA_A_eigenkets[:,:m]
    return V
################################################################################

################################################################################
def TDA_A_diag_preconditioner(arg1, arg2, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None, arg8=None, hdiag = hdiag):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    # preconditioners for each corresponding residual
    residual = arg1
    sub_eigenvalue = arg2
    current_dic = arg3

    k = np.shape(residual)[1]
    t = 1e-14

    # print('hdiag in preconditioner', hdiag.reshape(-1,1).shape)
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    D = np.where( abs(D) < t, np.sign(D)*t, D) # force all values not in domain (-t, t)

    new_guess = residual/D

    return new_guess, current_dic
################################################################################


################################################################################
# sTDA preconditioner
def sTDA_preconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """ (sTDA_A - λ*I)^-1 B = X """
    """ AX - Xλ = B """
    """ columns in B are residuals (in Davidson's loop) to be preconditioned, """
    residuals = arg1
    eigen_lambda = arg2
    current_dic = arg3

    precondition_start = time.time()

    # N_rows = np.shape(B)[0]
    A_reduced_size = n_occ*max_vir
    residuals = residuals.reshape(n_occ,n_vir,-1)
    B = residuals[:,:max_vir,:]


    B = B.reshape(A_reduced_size,-1)
    # B = B.reshape(A_reduced_size, -1)
    N_vectors = B.shape[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = args.TDA_precondTOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors

    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    hdiag_m_lambda = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    hdiag_m_lambda = np.where( abs(hdiag_m_lambda) < t, np.sign(hdiag_m_lambda)*t, hdiag_m_lambda) # <t: returns np.sign(D)*t; else: D

    hdiag_m_lambda = hdiag_m_lambda.reshape(n_occ, n_vir, -1)
    D = hdiag_m_lambda[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count

    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0
    ####################################################################################
    for i in range(max):
        substart = time.time()
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        subend = time.time()
        subgencost += subend - substart
        #project sTDA_A matrix and vector B into subspace
        sub_A = symmetrize(sub_A)
        # size of subspace
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append({'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        GSstart = time.time()
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart


        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________')
        print('sTDA preconditioning failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('sTDA Preconditioning Done after ', i, 'steps; ', \
                round(precondition_time, 4), 'seconds')
        print('subgencost',round(subgencost,4),round(subgencost/precondition_time *100, 2),"%")
        print('mvcost',round(mvcost,4),round(mvcost/precondition_time *100, 2),"%")
        print('GScost', round(GScost,4), round(GScost/precondition_time *100, 2),"%")
        print('subcost', round(subcost,4), round(subcost/precondition_time *100, 2),"%")
    full_guess *= bnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = B2'''
        B2 = residuals[:,max_vir:,:]
        B2 = B2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = hdiag_m_lambda[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (B2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)
    return U, current_dic
################################################################################

################################################################################
# K_inv # exacty the same function with sTDA_preconditioner, just no dic
# used in Jacobi_precodnitioner
def K_inv(B, eigen_lambda):
    # to solve K^(-1)y and K^(-1)u
    # K = A-λ*I
    # (sTDA_A - eigen_lambda*I)^-1 B = X
    # AX - Xλ = B
    # columns in B are residuals or current guess
    precondition_start = time.time()

    N_rows = np.shape(B)[0]
    B = B.reshape(N_rows, -1)
    N_vectors = np.shape(B)[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = 1e-2    # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((N_rows, (max+1)*N_vectors))
    W = np.zeros_like(V)
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors
    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    D = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    D= np.where( abs(D) < t, np.sign(D)*t, D) # <t: returns np.sign(D)*t; else: D
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count
    ############################################################################
    for i in range(0, max):
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        #project sTDA_A matrix and vector B into subspace
        # size of subspace
        m = np.shape(sub_A)[0]
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ K inverse Failed Due to Iteration Limit _________________')
        print('K inverse  failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('K inverse Done after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
    return full_guess*bnorm
################################################################################

################################################################################
def Jacobi_preconditioner(arg1, arg2, arg3, arg4, arg5=None, arg6=None, arg7=None, arg8=None):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """    (1-uu*)(A-λ*I)(1-uu*)t = -B"""
    """    B is residual, we want to solve t """
    """    z approximates t """
    """    z = (A-λ*I)^(-1)*(-B) + α(A-λ*I)^(-1) * u"""
    """    where α = [u*(A-λ*I)^(-1)y]/[u*(A-λ*I)^(-1)u] """
    """    first is to solve (A-λ*I)^(-1)y and (A-λ*I)^(-1)u """

    B = arg1
    eigen_lambda = arg2
    current_dic = arg3
    current_guess = arg4

    u = current_guess
    K_inv_y = K_inv(-B, eigen_lambda)
    K_inv_u = K_inv(current_guess, eigen_lambda)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d

    z = K_inv_y -  Alpha*K_inv_u
    return z, current_dic
################################################################################

################################################################################
# original simple Davidson, to solve eigenvalues and eigenkets of sTDA_A matrix
def Davidson0(k):
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    tol = args.TDA_initialTOL # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    V = TDA_A_diag_initial_guess(m, V, hdiag = max_vir_hdiag)
    W[:, :m] = sTDA_mv(V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ############################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index], hdiag = max_vir_hdiag)
        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        m = new_m
    ############################################################################


    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 4), 'seconds' )
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*27.211386245988)

    # U = np.zeros((n_occ * n_vir, k))
    # U[:n_occ * max_vir,:] = full_guess

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    return U
################################################################################


################################################################################
def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    ''' [ a b ] x - [ σ   π] x  Ω = p '''
    ''' [ b a ] y   [-π  -σ] y    = q '''

    ##############################
    ''' normalize the RHS '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)
    # print('pqnorm', pqnorm)
    p /= pqnorm
    q /= pqnorm
    ##############################
    d = abs(np.diag(sigma))
    # d is an one-dimension matrix
    d_mh = d**(-0.5)
    # d_h = d**0.5

    ''' LU = d^−1/2 (σ − π) d^−1/2 '''
    ''' A = PLU '''
    ''' P is identity matrix only when A is diagonally dominant '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True) # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T '''
    ''' M = G^T (a ̃+ b ̃) G '''
    a_p_b_tilde = np.linalg.multi_dot([L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde) + np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    ''' (x ̃+ y ̃) = GZ '''
    ''' x + y = d^-1/2 L^-T (x ̃+ y ̃) '''
    ''' x - y = d^-1/2 U^-1 (x ̃- y ̃) '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)
    # x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z])
    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    x *= pqnorm
    y *= pqnorm

    return x, y
################################################################################

################################################################################
def Qx(V, x):
    """ Qx = (1 - V*V.T)*x = x - V*V.T*x  """
    return x - einsum('ij, jk, kl -> il', V, V.T, x)
################################################################################

################################################################################
def on_the_fly_Hx(W, V, sub_A, x):
    """ on-the-fly compute H'x """
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q"""
    """ K approximates H, here K = sTDA_A"""
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)"""
    """ H′x ≡ a + b − c + d """
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx
################################################################################

################################################################################
# to diagonalize the H'
def new_ES(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    current_dic = arg3
    return_index = arg5
    W_H = arg6
    V_H = arg7
    sub_A_H = arg8

    """ new eigenvalue solver """
    """ the traditional Davidson to diagonalize the H' matrix """
    """ W_H, V_H, sub_A_H are from the exact H """

    sTDA_D_start = time.time()
    tol = args.eigensolver_tol # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    k = args.nstates
    m = min([k+8, 2*k, A_size])
    # m is the amount of initial guesses
    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    # sTDA as initial guess
    V = sTDA_initial_guess(m, V)

    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ###########################################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
#             print(sub_eigenvalue[:k]*27.211386245988)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
#             print(r_norms)
        # largest residual norm
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals

        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index])
        # Y doesn't matter

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
#             print(check_orthonormal(V[:,:new_m]))
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m
    ###########################################################################################
    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('H_app diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 2), 'seconds' )
#         print('H_app', sub_eigenvalue[:k]*27.211386245988)

    return full_guess[:,return_index], current_dic
################################################################################

################################################################################
# a dictionary for TDA initial guess and precodnitioner
TDA_i_key = ['sTDA', 'Adiag']
TDA_i_func = [sTDA_initial_guess, TDA_A_diag_initial_guess]
TDA_i_lib = dict(zip(TDA_i_key, TDA_i_func))

TDA_p_key = ['sTDA', 'Adiag', 'Jacobi', 'new_ES']
TDA_p_func = [sTDA_preconditioner, TDA_A_diag_preconditioner, \
Jacobi_preconditioner, new_ES]
TDA_p_lib = dict(zip(TDA_p_key, TDA_p_func))
################################################################################

################################################################################
#Davidson frame, where we can choose different initial guess and preconditioner
def Davidson(k, tol, init,prec):
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)
    max = args.max
    # Maximum number of iterations

    m = min([k + args.TDA_extrainitial, 2*k, A_size])
    # amount of initila guess
    #################################################
    # generate initial guess

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    init_start = time.time()
    V = initial_guess(m, V)
    init_end = time.time()
    init_time = init_end - init_start

    print('Intial guess time:', round(init_time, 4), 'seconds')
    #generate initial guess and put in holders V and W
    # m is size of subspace

    # W = Av, create transformed guess vectors
    W[:, :m] = TDA_matrix_vector(V[:, :m])

    # time cost for preconditioning
    Pcost = 0
    ###########################################################################################
    for ii in range(max):
        print('Iteration ', ii)

        # sub_A is subspace A matrix
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # print(sub_eigenvalue[:k])
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        # largest residual norm
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm', max_norm)
        if max_norm < tol or ii == (max-1):
            print('Davidson procedure aborted')
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        ########################################
        # generate new guess
        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                    arg1 = residual[:,index],
                                    arg2 = sub_eigenvalue[:k][index],
                                    arg3 = current_dic,
                                    arg4 = full_guess[:,index],
                                    arg5 = index,
                                    arg6 = W[:,:m],
                                    arg7 = V[:,:m],
                                    arg8 = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('m,new_m',m,new_m)
        W[:, m:new_m] = TDA_matrix_vector(V[:, m:new_m])
        print('new generated guesses:', new_m - m)
        m = new_m

    energies = sub_eigenvalue[:k]*27.211386245988


    D_end = time.time()
    Dcost = D_end - D_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDA_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDA_precondTOL
    Davidson_dic['total time'] = Dcost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sub_A)[0]
    Davidson_dic['excitation energy(eV)'] = energies.tolist()
    # Davidson_dic['semiempirical_difference'] = difference
    # Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    ###########################################################################################
    if ii == max-1:
        print('============ Davidson Failed Due to Iteration Limit ==============')
        print('Davidson failed after ', round(Dcost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Davidson done after ', round(Dcost, 4), 'seconds')
        print('Total steps =', ii+1)
        print('Final subspace shape = ', np.shape(sub_A))
        print('Preconditioning time:', round(Pcost, 4), round(Pcost/Dcost*100,2), '%')
    return energies, full_guess, Davidson_dic
################################################################################



def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder = TDA_A_diag_initial_guess(new_m, V_holder, hdiag = hdiag)
    energies = hdiag[Dsort][:new_m]*27.211386245988
    return V_holder, W_holder, new_m, energies, V_holder[:,:new_m], W_holder[:,:new_m]

################################################################################
def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag = hdiag):
    # preconditioners for each corresponding residual
    hdiag = hdiag.reshape(-1,1)
    # print('hdiag', hdiag.shape)
    k = R_x.shape[1]
#     print('omega.shape',omega.shape)
    t = 1e-14

    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    # force all values not in domain (-t, t)
    D_y_inv = D_y**-1

#     print('R_x.shape, D_x.shape',R_x.shape, D_x.shape)
    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new
################################################################################

################################################################################
def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  w = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    # print(d)
    # d is an one-dimension matrix
    d_mh = d**(-0.5)


    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    M = np.linalg.multi_dot([G.T, L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    # print(omega*27.211386245988)
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([L_inv.T, G, Z])     * (np.array(omega)**-0.5).reshape(1,-1)
    x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z]) * (np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    # norm = np.linalg.multi_dot([x.T, sigma, x])
    # norm += np.linalg.multi_dot([x.T, pi, y])
    # norm -= np.linalg.multi_dot([y.T, pi, x])
    # norm -= np.linalg.multi_dot([y.T, sigma, y])
    # print(norm)

    return omega, x, y
################################################################################

################################################################################
def sTDDFT_eigen_solver(k):
    ''' [ A' B' ] x - [ σ   π] x  w = 0'''
    ''' [ B' A' ] y   [-π  -σ] y    = 0'''
    tol=args.TDDFT_initialTOL
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    # new_m = min([3*k, A_size])
    # print('initial new_m = ', new_m)
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)
#     print('initial guess done')
    ##############################

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        ###############################################################
        # print('ii = ', ii)
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        # show_memory_info('before sTDDFT_mv')
        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start
        # show_memory_info('after sTDDFT_mv')

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)
        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        ########################################################################
        # preconditioning step
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTD-DFT Failed Due to Iteration Limit==================')
        print('sTD-DFT failed after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Converged after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('final subspace', sigma.shape)
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_cost * 100,2),'%')

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*27.211386245988
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y
################################################################################

################################################################################
def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    # energies, X_new, Y_new = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup
################################################################################

################################################################################
def sTDDFT_preconditioner(Rx, Ry, omega):
    ''' [ A B ] - [1  0]X  w = P'''
    ''' [ B A ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''
    tol = args.TDDFT_precondTOL
    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    # print('pqnorm', pqnorm)
    P /= pqnorm
    Q /= pqnorm

    ##############################

    ##############################
    # setting up initial guess
    X_new, Y_new  = TDDFT_A_diag_preconditioner(P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = \
            VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start
    print('new_m =', new_m)
    print('diagonal initial guess done')
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    symmetrycost = 0
    for ii in range(max):
#         print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        symmetrystart = time.time()
        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
        # solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                                  a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        # U1x = np.dot(U1,x)
        # U2x = np.dot(U2,x)
        # Vx = np.dot(V,x)
        # Wx = np.dot(W,x)
        #
        # U1y = np.dot(U1,y)
        # U2y = np.dot(U2,y)
        # Vy = np.dot(V,y)
        # Wy = np.dot(W,y)
        #
        # X_full = Vx + Wy
        # Y_full = Wx + Vy
        #
        # R_x = U1x + U2y - X_full*omega - P
        # R_y = U2x + U1y + Y_full*omega - Q

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################

        ########################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index], \
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_precond_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit==========')
        print('sTDDFT_precond failed after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT_precond Converged after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sTDDFT_precond_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_precond_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_precond_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_precond_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_precond_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_precond_cost * 100,2),'%')
        print('symmetrycost', round(symmetrycost,4), round(symmetrycost/sTDDFT_precond_cost * 100,2),'%')
        print('final subspace', sigma.shape)

    show_memory_info('preconditioner at end')
    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_diag_A[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)
    print(X.shape, Y.shape)
    return X, Y
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
TDDFT_i_key = ['sTDDFT', 'Adiag']
TDDFT_i_func = [sTDDFT_initial_guess, TDDFT_A_diag_initial_guess]
TDDFT_i_lib = dict(zip(TDDFT_i_key, TDDFT_i_func))

TDDFT_p_key = ['sTDDFT', 'Adiag']
TDDFT_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
TDDFT_p_lib = dict(zip(TDDFT_p_key, TDDFT_p_func))
################################################################################

################################################################################
def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.TDDFT_tolerance):

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    if args.TDDFT_extrainitial_3n == True:
        new_m = min([k + args.TDDFT_extrainitial, 3*k, A_size])
    else:
        new_m = min([k + args.TDDFT_extrainitial, 2*k, A_size])

    # new_m = k

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    ##############################
    # setting up initial guess
    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig = initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')
    ##############################
    Pcost = 0
    VWGScost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '____________________||||')
        show_memory_info('beginning of step '+ str(ii))
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        print('Maximum residual norm: ', np.max(r_norms))
        # print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        P_start = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        VWGScost_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        VWGScost_end = time.time()
        VWGScost += VWGScost_end - VWGScost_start
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################



    omega *= 27.211386245988

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['initial_energies'] = initial_energies
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDDFT_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDDFT_precondTOL
    Davidson_dic['total time'] = TDDFT_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['excitation energy(eV)'] = omega.tolist()
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    if ii == (max -1):
        print('============================ TDDFT Failed Due to Iteration Limit============================')
        print('TDDFT failed after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('================================== TDDFT Calculation Done ==================================')
        print('TDDFT Converged after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('Initial guess',init)
        print('preconditioner', prec)
        print('Final subspace ', sigma.shape)
        print('preconditioning cost', round(Pcost,4), round(Pcost/TDDFT_cost * 100, 2), "%")
        print('VWGScost',round(VWGScost,4))
        # print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))

    # need normalize
    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic
# end of TDDFT module
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
dynpol_i_key = ['sTDDFT', 'Adiag']
dynpol_i_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_i_lib = dict(zip(dynpol_i_key, dynpol_i_func))

dynpol_p_key = ['sTDDFT', 'Adiag']
dynpol_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_p_lib = dict(zip(dynpol_p_key, dynpol_p_func))
################################################################################

################################################################################
def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P
################################################################################

################################################################################
def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        # 0,1,2   3,4,5   6,7,8
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]
        # convert nm to Hartree

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P
    #P, Q, omega

    max = args.max
    tol = args.dynpol_tolerance

    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P) + np.dot(W.T, Q)
        q = np.dot(W.T, P) + np.dot(V.T, Q)
        subgenend = time.time()
        subgencost += subgenend - subgenstart
        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R_x = U1x + U2y - (Vx + Wy)omega - P
#         R_y = U2x + U1y + (Wx + Vy)omega - Q
#         R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
#         R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega + P
        R_y = U2x + U1y + Y_full*omega + Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)
        print('maximum residual norm: ', np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        Pend = time.time()
        Pcost += Pend - Pstart
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('============================ Dynamic polarizability Failed Due to Iteration Limit============================')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

     # np.dot(-P.T, X_full) + np.dot(-P.T, Y_full)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)


    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.dynpol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.dynpol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.dynpol_initprecTOL
    Davidson_dic['total time'] = dp_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    Davidson_dic['Dynamic polarizability tensor alpha'] = [i.tolist() for i in alpha_omega]
    Davidson_dic['Dynamic polarizability tensor alpha initial guess '] = [i.tolist() for i in alpha_omega_ig]
    Davidson_dic['overlap'] = overlap
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    show_memory_info('Total Dynamic polarizability')

    return alpha_omega, Davidson_dic
################################################################################

###############################################################################
def stapol_A_diag_initprec(P):
    d = hdiag.reshape(-1,1)
    return -P/d
###############################################################################

###############################################################################
def stapol_sTDDFT_initprec(P):
    '''(A* + B*)X = -P'''
    '''residual = (A* + B*)X + P'''
    '''X_ig = -P/d'''
    '''X_new = (residual - P)/D = Ux/D'''
    ssp_start = time.time()
    max = 30
    tol = args.stapol_initprecTOL
    m = 0
    npvec = P.shape[1]

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]
    pnorm = np.linalg.norm(P_origin, axis=0, keepdims = True)
    # print('pnorm', pnorm)
    P /= pnorm

    # print('vectors to be preconditioned', npvec)
    V_holder = np.zeros((A_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

    X_ig = stapol_A_diag_initprec(P)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    # V_holder[:,0] = X_new[:,0]/np.linalg.norm(X_new[:,0])
    # if npvec >= 2:
    #     V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 1, X_new[:, 1:])
    # else:
    #     new_m = 1
    # print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        # creating the subspace
        MV_start = time.time()
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ###############################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = stapol_A_diag_initprec(-residual[:,index])

        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    X_full = np.dot(V,x)
    # alpha = np.dot(X_full.T, P)*-4

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('============================ sTDDFT Static polarizability Failed Due to Iteration Limit============================')
        print('sTDDFT Static polarizability failed after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Static polarizability Converged after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        # print('initial_cost', round(initial_cost,4), round(initial_cost/ssp_cost * 100,2),'%')
        # print('Pcost', round(Pcost,4), round(Pcost/ssp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/ssp_cost * 100,2),'%')
        # print('GScost', round(GScost,4), round(GScost/ssp_cost * 100,2),'%')
        # print('subcost', round(subcost,4), round(subcost/ssp_cost * 100,2),'%')
        # print('subgencost', round(subgencost,4), round(subgencost/ssp_cost * 100,2),'%')

    X_full *= pnorm
    return X_full
################################################################################

################################################################################
# a dictionary for static_polarizability initial guess and precodnitioner
stapol_i_key = ['sTDDFT', 'Adiag']
stapol_i_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_i_lib = dict(zip(stapol_i_key, stapol_i_func))

stapol_p_key = ['sTDDFT', 'Adiag']
stapol_p_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_p_lib = dict(zip(stapol_p_key, stapol_p_func))
################################################################################

################################################################################
# Static polarizability
def static_polarizability(init, prec):
    '''(A+B)X = -P'''
    '''residual = (A+B)X + P'''
    '''X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    # pnorm is constant
    print('pnorm', pnorm)

    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.stapol_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

#     X_new = -P/d3
    X_ig = initial_guess(P)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ########################################################################
        # creating the subspace

        MV_start = time.time()
        U_holder[:, m:new_m] = static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # print('check_orthonormal(V)',check_orthonormal(V))
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()
        subgencost += subgenend - subgenstart

        # print('a_p_b.shape', a_p_b.shape)
        ########################################################################

        ########################################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        # print('x.shape', x.shape)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ########################################################################

        ########################################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index])
        # X_new = X_new/np.linalg.norm(X_new, axis=0)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    print('V.shape', V.shape)
    X_full = np.dot(V,x)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start



    if ii == (max -1):
        print('============================ Static polarizability Failed Due to Iteration Limit============================')
        print('Static polarizability failed after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Static polarizability Converged after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sp_cost * 100,2),'%')

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.stapol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.stapol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.stapol_initprecTOL
    Davidson_dic['total time'] = sp_cost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(a_p_b)[0]
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    return tensor_alpha, Davidson_dic
################################################################################

TDA_combo = [            # option
['sTDA','sTDA'],     # 0
['Adiag','Adiag'],   # 1
['Adiag','sTDA'],    # 2
['sTDA','Adiag'],    # 3
['sTDA','Jacobi'],   # 4
['Adiag','Jacobi'],  # 5
['Adiag','new_ES'],  # 6
['sTDA','new_ES']]   # 7

TDDFT_combo = [         # option
['sTDDFT','sTDDFT'],     # 0
['Adiag','Adiag'],       # 1
['Adiag','sTDDFT'],      # 2
['sTDDFT','Adiag']]      # 3

dynpol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

stapol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

if args.TDA == True:
    for option in args.TDA_options:
        init, prec = TDA_combo[option]
        print('-------------------------------------------------------------------')
        print('|---------------   In-house Developed Davidson Starts   -----------|')
        print('Residual conv =', args.TDA_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, eigenkets, Davidson_dic = Davidson(args.nstates, args.TDA_tolerance, init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Davidson time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDA_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Davidson Done   -----------|')

if args.TDDFT == True:
    for option in args.TDDFT_options:
        init, prec = TDDFT_combo[option]
        print('----------------------------------------------------------------------------')
        print('|---------------   In-house Developed TDDFT Eigensolver Starts   -----------|')
        print('Residual conv =', args.TDDFT_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, X, Y, Davidson_dic = TDDFT_eigen_solver(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house TDDFT Eigensolver time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDDFT_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed TDDFT Eigensolver Done   -----------|')

if args.dynpol == True:
    args.TDDFT_precondTOL = args.dynpol_initprecTOL
    print('args.TDDFT_precondTOL', args.TDDFT_precondTOL)
    for option in args.dynpol_options:
        init,prec = dynpol_combo[option]
        print('---------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Dynamic Polarizability Starts   -----------|')
        print('Residual conv =', args.dynpol_tolerance)
        print('Perturbation wavelength omega (nm) =', args.dynpol_omega)

        total_start = time.time()
        alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Dynamic Polarizability time:', round(total_time, 4), 'seconds')
        print('Dynamic polarizability tensor alpha')
        for i in range(len(args.dynpol_omega)):
            print(args.dynpol_omega[i],'nm')
            print(alpha_omega[i])

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Dynamic_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Dynamic Polarizability Done   -----------|')

if args.stapol == True:
    for option in args.stapol_options:
        init,prec = stapol_combo[option]
        print('--------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Static Polarizability Starts   -----------|')
        print('Residual conv =', args.stapol_tolerance)

        total_start = time.time()
        tensor_alpha, Davidson_dic = static_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Static Polarizability time:', round(total_time, 4), 'seconds')
        print('Static polarizability tensor alpha')
        print(tensor_alpha)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Static_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Static Polarizability Done   -----------|')


if args.sTDA == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDA   --------------------|')
    print('Convergence =', args.TDA_initialTOL)

    total_start = time.time()
    X = Davidson0(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDA time:', round(total_time, 4), 'seconds')
    print('|---------------------------   In-house Developed sTDA done  ----------------|')

if args.sTDDFT == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDDFT   --------------------|')
    print('Convergence =', args.TDDFT_initialTOL)

    total_start = time.time()
    energies, X, Y = sTDDFT_eigen_solver(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDDFT time:', round(total_time, 4), 'seconds')

    print('|---------------------------   In-house Developed sTDDFT done  ----------------|')


if args.Truncate_test == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   Test the Truncation efficiency  ----------------|')

    n_state = 40
    X = np.random.rand(A_size,n_state)
    Y = np.random.rand(A_size,n_state)
    print('n_vir = ', n_vir)
    print('A_size =', A_size)
    print('n_state =', n_state)
    print("virtual tuning: -------------------------------------------- ")
    print("{:<8} {:<8} {:<8} {:<8}".format(\
            'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
    for vir_trunc in [40, 50, 60, 70, 10000000]:
        del max_vir, sTDA_mv, sTDDFT_mv
        max_vir = gen_maxvir(tol_eV = vir_trunc)
        q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
        # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
        iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                        max_vir=max_vir, \
                                        q_ij = q_ij, \
                                        q_ab = q_ab, \
                                        q_ia = q_ia , \
                                        GK_q_jb = GK_q_jb, \
                                        GJ_q_ab = GJ_q_ab)


        sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                        max_vir=max_vir, \
                                        iajb_fly = iajb_fly, \
                                        ijab_fly = ijab_fly, \
                                        ibja_fly = ibja_fly, \
                                        delta_fly = delta_fly)


        sTDA_start = time.time()
        sTDA_X = sTDA_mv(X)
        sTDA_end = time.time()
        sTDA_mv_time = sTDA_end - sTDA_start

        sTDDFT_start = time.time()
        sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
        sTDDFT_end = time.time()
        sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

        print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))

    print('|-------------------------------------   Test done  --------------------------|')

if args.pytd == True:
    print('-----------------------------------------------------------------')
    print('|----------------------    PySCF TTDDFT    ----------------------|')
    TD.nstates = args.nstates
    TD.conv_tol = 1e-10
    start = time.time()
    TD.kernel()
    end = time.time()
    pyscf_time = end-start
    print('Built-in TDDFT time:', round(pyscf_time, 4), 'seconds')
    print('|---------------------------------------------------------------|')

if args.verbose > 3:
    for key in vars(args):
        print(key,'=', vars(args)[key])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt195', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Wed Jul  7 16:19:16 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 50000 
[INPUT] num. atoms = 53
[INPUT] num. electrons = 222
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O     -1.859081069441   2.190820885101  -2.006142183407 AA   -3.513154064606   4.140051460818  -3.791059293577 Bohr
[INPUT]  2 C     -1.699378063641   1.118298663531  -1.413700127590 AA   -3.211359122375   2.113278199542  -2.671506063408 Bohr
[INPUT]  3 C     -2.619671593779   0.000457815232  -1.109163041653 AA   -4.950461848545   0.000865145403  -2.096014376213 Bohr
[INPUT]  4 C     -4.074651159439   0.029068384848  -1.471729472039 AA   -7.699974744481   0.054931286247  -2.781165631605 Bohr
[INPUT]  5 C     -4.869041484895   0.852284863731  -0.463802624104 AA   -9.201154895597   1.610584972565  -0.876459935412 Bohr
[INPUT]  6 C     -5.636936802287   0.228427622732   0.532963840837 AA  -10.652266737804   0.431665646250   1.007155693479 Bohr
[INPUT]  7 C     -6.338719146219   0.982428936072   1.483570940882 AA  -11.978443166890   1.856521626024   2.803542764631 Bohr
[INPUT]  8 C     -6.271633995520   2.386205622181   1.454699769947 AA  -11.851670605045   4.509275102819   2.748984158668 Bohr
[INPUT]  9 O     -6.934690031148   3.175772886775   2.354967248276 AA  -13.104664917621   6.001340989824   4.450243131562 Bohr
[INPUT] 10 C     -5.495893188370   3.023732627096   0.468924049683 AA  -10.385732935882   5.714026539124   0.886138027122 Bohr
[INPUT] 11 C     -4.802955913141   2.261319737795  -0.474864537784 AA   -9.076271264197   4.273274984506  -0.897363922680 Bohr
[INPUT] 12 N     -2.036434887764  -0.991991764850  -0.435882535903 AA   -3.848304208383  -1.874592753391  -0.823698615337 Bohr
[INPUT] 13 C     -0.738250967830  -0.619178243355  -0.262383114370 AA   -1.395092140394  -1.170077302231  -0.495832225870 Bohr
[INPUT] 14 C      0.291640359043  -1.275299264263   0.361391626208 AA    0.551120405462  -2.409966336317   0.682931197244 Bohr
[INPUT] 15 C      0.145558859808  -2.635420244847   0.990327697537 AA    0.275066380040  -4.980222485896   1.871448121917 Bohr
[INPUT] 16 C      1.240506642201  -3.577899977298   0.520512131957 AA    2.344217809463  -6.761251058181   0.983625373913 Bohr
[INPUT] 17 C      2.309299877577  -3.924456379303   1.367513318649 AA    4.363944308112  -7.416147744684   2.584225643941 Bohr
[INPUT] 18 C      3.351628413800  -4.744754955840   0.907051473820 AA    6.333659773392  -8.966287394711   1.714078866404 Bohr
[INPUT] 19 C      3.334821371277  -5.226829313566  -0.408191710236 AA    6.301899066061  -9.877275902489  -0.771370538664 Bohr
[INPUT] 20 C      2.272388042502  -4.885958332558  -1.260901159909 AA    4.294191049065  -9.233123104572  -2.382757862374 Bohr
[INPUT] 21 C      1.235776593792  -4.065019539792  -0.801539757019 AA    2.335279313416  -7.681773621213  -1.514690618717 Bohr
[INPUT] 22 N      1.525791927526  -0.659141380461   0.412750664362 AA    2.883328866096  -1.245596686439   0.779985713377 Bohr
[INPUT] 23 H      2.327670425099  -1.250728787159   0.635134814431 AA    4.398659611687  -2.363534863840   1.200230851451 Bohr
[INPUT] 24 C      1.782140987932   0.599553624830  -0.171846309454 AA    3.367758382552   1.132992147919  -0.324742460386 Bohr
[INPUT] 25 C      3.147468758551   1.130907485919  -0.039637609418 AA    5.947853939286   2.137105420608  -0.074904226033 Bohr
[INPUT] 26 C      3.975276403310   0.757739753187   1.045787103103 AA    7.512183671703   1.431920607219   1.976251209468 Bohr
[INPUT] 27 C      5.271520567767   1.257779306716   1.181097486449 AA    9.961730133092   2.376858414839   2.231950775802 Bohr
[INPUT] 28 C      5.778286133626   2.160369763842   0.228783582553 AA   10.919378261924   4.082507181453   0.432338312821 Bohr
[INPUT] 29 O      7.049256343903   2.621384646795   0.403122758265 AA   13.321163871830   4.953699049583   0.761791607699 Bohr
[INPUT] 30 C      4.968461021865   2.544823243995  -0.857940887736 AA    9.389030591902   4.809018966578  -1.621273308888 Bohr
[INPUT] 31 C      3.677890542413   2.029621686624  -0.991491235644 AA    6.950205841289   3.835429124196  -1.873646890273 Bohr
[INPUT] 32 C      0.747530384802   1.255153356313  -0.781900220261 AA    1.412627697067   2.371896087760  -1.477577273030 Bohr
[INPUT] 33 N     -0.499318387839   0.656365831423  -0.846392567065 AA   -0.943575001975   1.240351658913  -1.599450145621 Bohr
[INPUT] 34 H     -4.176528798679   0.477650405849  -2.475872348474 AA   -7.892495580862   0.902628450342  -4.678720658000 Bohr
[INPUT] 35 H     -4.454923407274  -1.004220738825  -1.502915067265 AA   -8.418585145662  -1.897702164988  -2.840097865614 Bohr
[INPUT] 36 H     -5.692122435355  -0.865429705745   0.569734207454 AA  -10.756552470314  -1.635425123921   1.076641615885 Bohr
[INPUT] 37 H     -6.941174080395   0.479793793518   2.251171817170 AA  -13.116917994877   0.906678866016   4.254098193792 Bohr
[INPUT] 38 H     -7.421501030702   2.597307558642   2.968711622678 AA  -14.024604381204   4.908199947095   5.610051909674 Bohr
[INPUT] 39 H     -5.447198513000   4.116759496375   0.460621756310 AA  -10.293713335707   7.779547968851   0.870448966443 Bohr
[INPUT] 40 H     -4.178995164593   2.757801375371  -1.225974412460 AA   -7.897156336963   5.211489305400  -2.316755875274 Bohr
[INPUT] 41 H     -0.858042019591  -3.006974474001   0.729560642316 AA   -1.621464420396  -5.682358219420   1.378669805238 Bohr
[INPUT] 42 H      0.191958771191  -2.533592775013   2.090966721939 AA    0.362749504760  -4.787796455951   3.951354440044 Bohr
[INPUT] 43 H      2.318429552788  -3.558145990478   2.401351867166 AA    4.381196893867  -6.723921433223   4.537897357657 Bohr
[INPUT] 44 H      4.174529104311  -5.009101360155   1.579643267095 AA    7.888716706174  -9.465829700879   2.985093149322 Bohr
[INPUT] 45 H      4.145739231691  -5.867809435038  -0.769517570445 AA    7.834311731761 -11.088552783361  -1.454177456182 Bohr
[INPUT] 46 H      2.253585872807  -5.261672386322  -2.289456889971 AA    4.258660097794  -9.943119767336  -4.326446496043 Bohr
[INPUT] 47 H      0.412032511475  -3.791304155919  -1.470608704268 AA    0.778628601105  -7.164526509612  -2.779047687468 Bohr
[INPUT] 48 H      3.587441297160   0.087415136268   1.820571540721 AA    6.779281539587   0.165190666689   3.440381602140 Bohr
[INPUT] 49 H      5.903040860449   0.971039615493   2.026752955392 AA   11.155130528366   1.834998929385   3.830008007843 Bohr
[INPUT] 50 H      7.261154149422   3.239869188217  -0.319042890682 AA   13.721592690657   6.122465445148  -0.602903685378 Bohr
[INPUT] 51 H      5.361219408859   3.237013711556  -1.612796892852 AA   10.131236376447   6.117069376304  -3.047744422040 Bohr
[INPUT] 52 H      3.077912258189   2.313084328649  -1.861697905985 AA    5.816411203418   4.371095884170  -3.518099168988 Bohr
[INPUT] 53 H      0.819485465765   2.257977850111  -1.205793129206 AA    1.548603093358   4.266959732043  -2.278618777081 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1

nuclear repulsion = 2867.29919278269
number of shells = 436
number of NR pGTOs = 1640
number of NR cGTOs = 1118
basis = def2-tzvp
ecp = {}
CPU time:         1.86
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 53_Coelenterazine_wb97x.chk
max_memory 50000 MB (current use 56 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7fdc0073d048>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7fdc0cc25f28>
Set gradient conv threshold to 1e-05
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
tot grids = 656880
Drop grids 115787
    CPU time for setting up grids    117.11 sec, wall time      8.22 sec
nelec by numeric integration = 222.0001229023293
    CPU time for vxc    205.00 sec, wall time     14.01 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15971914.hpc/tmpkqjlw8gz
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
num shells = 926, num cGTOs = 2790
size of aux basis 2790
int3c2e [1/2], AO [0:367], nrow = 513591
int3c2e [2/2], AO [367:436], nrow = 111930
    CPU time for cholesky_eri    300.39 sec, wall time     47.53 sec
    CPU time for df vj and vk    906.19 sec, wall time     95.25 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7fdc0003f898> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15971914.hpc/tmpefc0yena
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
num shells = 926, num cGTOs = 2790
size of aux basis 2181
int3c2e [1/2], AO [0:299], nrow = 345696
int3c2e [2/2], AO [299:436], nrow = 279825
    CPU time for cholesky_eri    386.47 sec, wall time     32.04 sec
    CPU time for df vj and vk    864.72 sec, wall time     64.76 sec
E1 = -7592.260429967423  Ecoul = 3526.674330516092  Exc = -195.1882804555079
init E= -1393.47518712415
cond(S) = 1200136.4451868262
    CPU time for initialize scf   2102.81 sec, wall time    183.37 sec
  HOMO = -0.256855706931348  LUMO = 0.00326792810917841
  mo_energy =
[-1.92438551e+01 -1.92201620e+01 -1.91470365e+01 -1.44551242e+01
 -1.44477986e+01 -1.44038483e+01 -1.03496547e+01 -1.03438421e+01
 -1.03404119e+01 -1.03249919e+01 -1.03221844e+01 -1.03164363e+01
 -1.03083635e+01 -1.03026667e+01 -1.02939642e+01 -1.02926984e+01
 -1.02922262e+01 -1.02875602e+01 -1.02868810e+01 -1.02827666e+01
 -1.02820290e+01 -1.02819496e+01 -1.02808684e+01 -1.02793636e+01
 -1.02790419e+01 -1.02768205e+01 -1.02630418e+01 -1.02594741e+01
 -1.02584897e+01 -1.02558771e+01 -1.02511377e+01 -1.02483693e+01
 -1.20622417e+00 -1.18116167e+00 -1.17180561e+00 -1.12523921e+00
 -1.09894522e+00 -1.03656271e+00 -1.00962412e+00 -1.00368410e+00
 -9.77488869e-01 -9.53669917e-01 -9.16697329e-01 -9.08359791e-01
 -8.97594998e-01 -8.90839053e-01 -8.83093979e-01 -8.69244370e-01
 -8.67358658e-01 -8.39186106e-01 -8.16436992e-01 -7.86122340e-01
 -7.66912061e-01 -7.50084218e-01 -7.43669177e-01 -7.35363555e-01
 -7.32798085e-01 -7.20130891e-01 -7.05668695e-01 -6.90762829e-01
 -6.77016987e-01 -6.65540599e-01 -6.52750230e-01 -6.47342544e-01
 -6.42768421e-01 -6.35284279e-01 -6.04618950e-01 -5.99850839e-01
 -5.94367550e-01 -5.86240018e-01 -5.83369794e-01 -5.81893568e-01
 -5.72953796e-01 -5.67918543e-01 -5.60811980e-01 -5.49957107e-01
 -5.44881936e-01 -5.44186993e-01 -5.42856378e-01 -5.40943179e-01
 -5.34554770e-01 -5.26550442e-01 -5.22231135e-01 -5.19220852e-01
 -5.15549589e-01 -5.12445357e-01 -5.11722941e-01 -5.01539410e-01
 -5.01027807e-01 -4.95387489e-01 -4.85883025e-01 -4.74017659e-01
 -4.70942279e-01 -4.63100687e-01 -4.58959102e-01 -4.57812654e-01
 -4.56739979e-01 -4.45369815e-01 -4.33244838e-01 -4.29547799e-01
 -4.23096597e-01 -4.16705966e-01 -3.69696674e-01 -3.68049439e-01
 -3.64163586e-01 -3.56706258e-01 -3.46409859e-01 -3.38992315e-01
 -3.15783443e-01 -3.01181325e-01 -2.56855707e-01  3.26792811e-03
  2.96109351e-02  4.42149594e-02  4.52509100e-02  4.98148100e-02
  7.23556944e-02  9.02396630e-02  9.66367527e-02  1.04369528e-01
  1.07445467e-01  1.21932556e-01  1.26242911e-01  1.31256140e-01
  1.37009124e-01  1.39264203e-01  1.46922358e-01  1.54095174e-01
  1.58994752e-01  1.68255910e-01  1.70287871e-01  1.72324484e-01
  1.74974058e-01  1.77485737e-01  1.80665774e-01  1.85554760e-01
  1.92470019e-01  1.96346522e-01  1.97717351e-01  2.02432450e-01
  2.06716015e-01  2.08468396e-01  2.10535381e-01  2.18773372e-01
  2.25012791e-01  2.29189915e-01  2.30329139e-01  2.34740118e-01
  2.39550095e-01  2.43617154e-01  2.47432176e-01  2.49136737e-01
  2.50551492e-01  2.54024276e-01  2.59708516e-01  2.67361937e-01
  2.70786589e-01  2.73476166e-01  2.76852457e-01  2.79217516e-01
  2.83789555e-01  2.89104933e-01  2.92313434e-01  2.95501138e-01
  2.97675635e-01  3.01834164e-01  3.05757801e-01  3.08947344e-01
  3.10217829e-01  3.13442102e-01  3.13739196e-01  3.16189702e-01
  3.17375256e-01  3.25413542e-01  3.27814067e-01  3.29146686e-01
  3.32970118e-01  3.35471774e-01  3.43618501e-01  3.44765591e-01
  3.50623268e-01  3.53675573e-01  3.55793315e-01  3.59163040e-01
  3.61435020e-01  3.66003245e-01  3.68637090e-01  3.74527312e-01
  3.75788231e-01  3.79549506e-01  3.83977522e-01  3.89227013e-01
  3.92014500e-01  3.92812880e-01  3.94210176e-01  3.97569600e-01
  4.05610893e-01  4.08172518e-01  4.13658441e-01  4.15531672e-01
  4.20488951e-01  4.22031957e-01  4.24198389e-01  4.30081804e-01
  4.30955982e-01  4.33654376e-01  4.35292138e-01  4.39916434e-01
  4.40490317e-01  4.41655802e-01  4.45023955e-01  4.46660955e-01
  4.49654676e-01  4.50778417e-01  4.51779269e-01  4.57117797e-01
  4.60386645e-01  4.62089962e-01  4.67703420e-01  4.70881617e-01
  4.74850139e-01  4.76514936e-01  4.80753293e-01  4.83353526e-01
  4.86895745e-01  4.88349138e-01  4.89735994e-01  4.92362792e-01
  4.96344299e-01  5.01627944e-01  5.05567095e-01  5.09259380e-01
  5.14030076e-01  5.15522071e-01  5.16306549e-01  5.21521973e-01
  5.25784345e-01  5.29049984e-01  5.34430754e-01  5.35507619e-01
  5.36433229e-01  5.40145700e-01  5.41439592e-01  5.42553948e-01
  5.51316518e-01  5.51904766e-01  5.54800733e-01  5.58232309e-01
  5.65758384e-01  5.67416652e-01  5.71604653e-01  5.73533125e-01
  5.75715399e-01  5.78808187e-01  5.79779805e-01  5.84072573e-01
  5.84846197e-01  5.88123285e-01  5.93098323e-01  5.96227080e-01
  6.04365575e-01  6.07961895e-01  6.15102434e-01  6.19661220e-01
  6.21677698e-01  6.26772415e-01  6.31242101e-01  6.35449068e-01
  6.42272448e-01  6.44689280e-01  6.49184407e-01  6.51473251e-01
  6.59009981e-01  6.61748508e-01  6.67443645e-01  6.68856897e-01
  6.71311912e-01  6.76845578e-01  6.83320838e-01  6.89366992e-01
  6.93310580e-01  6.95261997e-01  7.00000220e-01  7.09785564e-01
  7.12564185e-01  7.17871756e-01  7.19681680e-01  7.25530832e-01
  7.28284236e-01  7.32531769e-01  7.34607571e-01  7.36656183e-01
  7.41391507e-01  7.47108964e-01  7.49794897e-01  7.52220743e-01
  7.61303960e-01  7.65364580e-01  7.66813701e-01  7.72580142e-01
  7.74532986e-01  7.79621133e-01  7.79999972e-01  7.85143503e-01
  7.89021096e-01  7.93331126e-01  7.94314312e-01  7.98964198e-01
  8.02077641e-01  8.11515914e-01  8.12213511e-01  8.14571257e-01
  8.19979186e-01  8.21949293e-01  8.26175243e-01  8.31255913e-01
  8.33478548e-01  8.37764680e-01  8.41711513e-01  8.46076412e-01
  8.48589989e-01  8.52221780e-01  8.56495609e-01  8.60193995e-01
  8.70489761e-01  8.71760885e-01  8.76078496e-01  8.81615795e-01
  8.85138452e-01  8.90335875e-01  8.96824118e-01  9.04255749e-01
  9.05464110e-01  9.11364568e-01  9.16648050e-01  9.19772346e-01
  9.23799928e-01  9.28983139e-01  9.30824752e-01  9.37880597e-01
  9.40270366e-01  9.49560837e-01  9.50129397e-01  9.53770694e-01
  9.57815195e-01  9.66398015e-01  9.71639533e-01  9.74972225e-01
  9.77510185e-01  9.81978938e-01  9.86756047e-01  9.92380159e-01
  9.99323562e-01  1.00022739e+00  1.00782941e+00  1.01185107e+00
  1.01542591e+00  1.02425574e+00  1.02869745e+00  1.03444944e+00
  1.04295532e+00  1.05350453e+00  1.06141385e+00  1.06834753e+00
  1.07317999e+00  1.08266938e+00  1.08756701e+00  1.09223197e+00
  1.10139935e+00  1.10916157e+00  1.11657421e+00  1.12201318e+00
  1.12570523e+00  1.13190260e+00  1.13677637e+00  1.14149669e+00
  1.14483235e+00  1.14624739e+00  1.15405287e+00  1.16122450e+00
  1.16324847e+00  1.16923502e+00  1.17099822e+00  1.18000669e+00
  1.18767732e+00  1.19050401e+00  1.20009215e+00  1.20620256e+00
  1.21693883e+00  1.22000801e+00  1.22531415e+00  1.23501142e+00
  1.24074445e+00  1.24987738e+00  1.25416894e+00  1.26598672e+00
  1.27113915e+00  1.28077698e+00  1.28428697e+00  1.29191255e+00
  1.29702052e+00  1.29845635e+00  1.30464140e+00  1.30855420e+00
  1.31182397e+00  1.31481592e+00  1.31652866e+00  1.32526952e+00
  1.33006667e+00  1.33353611e+00  1.34141744e+00  1.34361848e+00
  1.34662990e+00  1.35330164e+00  1.35725654e+00  1.36606588e+00
  1.37106097e+00  1.37605026e+00  1.37731917e+00  1.38085155e+00
  1.39003548e+00  1.39321717e+00  1.40702915e+00  1.40892471e+00
  1.41104594e+00  1.42140360e+00  1.42522522e+00  1.42885815e+00
  1.43182686e+00  1.44485501e+00  1.44740637e+00  1.45146525e+00
  1.45605826e+00  1.45987242e+00  1.47631011e+00  1.48363376e+00
  1.48743496e+00  1.48978872e+00  1.49841057e+00  1.50582747e+00
  1.51748444e+00  1.52342789e+00  1.52753185e+00  1.53506502e+00
  1.53894777e+00  1.54124630e+00  1.54360193e+00  1.55362572e+00
  1.55453727e+00  1.55862334e+00  1.56244357e+00  1.56645174e+00
  1.57097538e+00  1.58116624e+00  1.58498017e+00  1.59421593e+00
  1.59879946e+00  1.60240986e+00  1.60473158e+00  1.60904821e+00
  1.61267358e+00  1.61561222e+00  1.62077160e+00  1.63566251e+00
  1.63719075e+00  1.64368266e+00  1.64658594e+00  1.65733872e+00
  1.66180225e+00  1.66285232e+00  1.66796977e+00  1.67232139e+00
  1.67864941e+00  1.69095390e+00  1.69280942e+00  1.69832708e+00
  1.70292183e+00  1.70913600e+00  1.71196583e+00  1.71381690e+00
  1.72145719e+00  1.72463886e+00  1.73041181e+00  1.73257597e+00
  1.74038076e+00  1.74701748e+00  1.74825142e+00  1.75289644e+00
  1.75706176e+00  1.76002752e+00  1.76704039e+00  1.77374967e+00
  1.77556728e+00  1.77944636e+00  1.78692318e+00  1.78944315e+00
  1.79615646e+00  1.79854504e+00  1.80194848e+00  1.80495633e+00
  1.81100483e+00  1.81297510e+00  1.81643267e+00  1.82565145e+00
  1.82685824e+00  1.83019340e+00  1.83742349e+00  1.84166014e+00
  1.84505170e+00  1.85295486e+00  1.85318722e+00  1.86058374e+00
  1.86491194e+00  1.87060552e+00  1.87746599e+00  1.88338337e+00
  1.89044756e+00  1.90195854e+00  1.91576578e+00  1.92161788e+00
  1.92514315e+00  1.92963458e+00  1.93939216e+00  1.94097995e+00
  1.94724324e+00  1.95361788e+00  1.95839837e+00  1.96418750e+00
  1.97644069e+00  1.97989010e+00  1.99231580e+00  1.99276925e+00
  1.99976556e+00  2.00059629e+00  2.00800023e+00  2.01371858e+00
  2.02059980e+00  2.03466897e+00  2.03947877e+00  2.04403873e+00
  2.04988775e+00  2.05307965e+00  2.05808777e+00  2.07477840e+00
  2.07635334e+00  2.08588005e+00  2.09455103e+00  2.10001751e+00
  2.10283433e+00  2.11700460e+00  2.12277745e+00  2.12659303e+00
  2.13045766e+00  2.13390655e+00  2.14148913e+00  2.14649078e+00
  2.15412318e+00  2.16998542e+00  2.17793563e+00  2.18266740e+00
  2.18702517e+00  2.19745146e+00  2.20805546e+00  2.21041690e+00
  2.21757666e+00  2.22011265e+00  2.22742472e+00  2.22992740e+00
  2.23480585e+00  2.23827919e+00  2.24505668e+00  2.24631474e+00
  2.25323814e+00  2.25723496e+00  2.26277249e+00  2.26396413e+00
  2.26579381e+00  2.27737081e+00  2.28100663e+00  2.28794768e+00
  2.30051447e+00  2.30355478e+00  2.30738309e+00  2.31846489e+00
  2.32064682e+00  2.33654086e+00  2.33871849e+00  2.34465406e+00
  2.35049724e+00  2.35690052e+00  2.35905860e+00  2.37166080e+00
  2.37668731e+00  2.38403615e+00  2.39738364e+00  2.40214499e+00
  2.40743084e+00  2.41381303e+00  2.41665564e+00  2.42775270e+00
  2.43252420e+00  2.44051363e+00  2.45926007e+00  2.46889667e+00
  2.47501997e+00  2.48685761e+00  2.49161398e+00  2.50288552e+00
  2.50677373e+00  2.51676485e+00  2.51914306e+00  2.52793744e+00
  2.53479086e+00  2.54218688e+00  2.54350074e+00  2.55733411e+00
  2.56221669e+00  2.57139626e+00  2.57811008e+00  2.58346433e+00
  2.59518562e+00  2.60202558e+00  2.61186633e+00  2.61912334e+00
  2.62396044e+00  2.62969192e+00  2.63341707e+00  2.64396813e+00
  2.64510370e+00  2.65166052e+00  2.65424494e+00  2.66524711e+00
  2.66802193e+00  2.67393518e+00  2.67874651e+00  2.68170027e+00
  2.68727259e+00  2.69612522e+00  2.69950876e+00  2.70304549e+00
  2.70855771e+00  2.71997752e+00  2.72646105e+00  2.73046320e+00
  2.73145803e+00  2.73766269e+00  2.74075642e+00  2.74156878e+00
  2.74679757e+00  2.74960614e+00  2.75204728e+00  2.75563266e+00
  2.76048688e+00  2.76494575e+00  2.76652695e+00  2.77565948e+00
  2.78060434e+00  2.78462360e+00  2.79203274e+00  2.79223855e+00
  2.79680734e+00  2.79915155e+00  2.80304588e+00  2.80437119e+00
  2.80536119e+00  2.81738680e+00  2.82418402e+00  2.82984847e+00
  2.83422374e+00  2.84776112e+00  2.85233873e+00  2.85634756e+00
  2.85882149e+00  2.86556434e+00  2.87003062e+00  2.87290285e+00
  2.88123311e+00  2.88429590e+00  2.88736697e+00  2.89236085e+00
  2.89860469e+00  2.90110305e+00  2.90613818e+00  2.90860349e+00
  2.91044402e+00  2.91845515e+00  2.92007462e+00  2.92487934e+00
  2.92976368e+00  2.93172872e+00  2.93652862e+00  2.94098292e+00
  2.94519478e+00  2.95022350e+00  2.95306926e+00  2.96469387e+00
  2.96864455e+00  2.97209022e+00  2.97438938e+00  2.98524832e+00
  2.99288783e+00  2.99351583e+00  3.00042213e+00  3.00732129e+00
  3.01495357e+00  3.01815410e+00  3.02548834e+00  3.02757814e+00
  3.03506069e+00  3.03659772e+00  3.04104369e+00  3.04842029e+00
  3.05907213e+00  3.06204578e+00  3.06344035e+00  3.06659583e+00
  3.07602285e+00  3.07933772e+00  3.08538479e+00  3.09267543e+00
  3.09367637e+00  3.09924658e+00  3.10398845e+00  3.11290543e+00
  3.12115064e+00  3.12525784e+00  3.13192110e+00  3.13906209e+00
  3.14581830e+00  3.15216779e+00  3.16364028e+00  3.16437961e+00
  3.17206462e+00  3.17327253e+00  3.17886491e+00  3.18361676e+00
  3.18820521e+00  3.19192720e+00  3.20225233e+00  3.20380622e+00
  3.21091653e+00  3.21367801e+00  3.21560939e+00  3.21822951e+00
  3.21962215e+00  3.22673295e+00  3.22817767e+00  3.22992009e+00
  3.23258399e+00  3.23901750e+00  3.24099703e+00  3.24571924e+00
  3.24796428e+00  3.25371865e+00  3.25555509e+00  3.26328469e+00
  3.26578494e+00  3.27339859e+00  3.27470439e+00  3.28108205e+00
  3.28816382e+00  3.29221688e+00  3.29347825e+00  3.29574927e+00
  3.30208805e+00  3.30766189e+00  3.30886530e+00  3.31451524e+00
  3.32108763e+00  3.32290078e+00  3.33123587e+00  3.33563319e+00
  3.33871311e+00  3.34526500e+00  3.35323023e+00  3.35529403e+00
  3.35910173e+00  3.36393908e+00  3.36814224e+00  3.37400522e+00
  3.37688020e+00  3.38235693e+00  3.38524143e+00  3.38719261e+00
  3.39250177e+00  3.39615949e+00  3.40011743e+00  3.40393615e+00
  3.40909598e+00  3.41031550e+00  3.41940580e+00  3.42175690e+00
  3.42715486e+00  3.42918212e+00  3.43720946e+00  3.43898256e+00
  3.44794251e+00  3.45435048e+00  3.45507738e+00  3.46403054e+00
  3.46582503e+00  3.47062470e+00  3.47452482e+00  3.47946248e+00
  3.48120325e+00  3.48459701e+00  3.48990891e+00  3.49790969e+00
  3.50237664e+00  3.50298369e+00  3.50810921e+00  3.50834162e+00
  3.51891080e+00  3.52147257e+00  3.52463375e+00  3.53332037e+00
  3.53762414e+00  3.54434699e+00  3.55384175e+00  3.55558212e+00
  3.55631117e+00  3.55874146e+00  3.56538466e+00  3.57164257e+00
  3.57701171e+00  3.58190065e+00  3.58738903e+00  3.58814561e+00
  3.59126860e+00  3.59515712e+00  3.59762718e+00  3.60216544e+00
  3.60930032e+00  3.61073390e+00  3.61411616e+00  3.61675224e+00
  3.62340464e+00  3.62717454e+00  3.64249659e+00  3.64406305e+00
  3.64681824e+00  3.66066228e+00  3.66603986e+00  3.67466459e+00
  3.67521133e+00  3.68546895e+00  3.69577778e+00  3.70324624e+00
  3.70984446e+00  3.71122364e+00  3.71722795e+00  3.72499618e+00
  3.74182297e+00  3.74822252e+00  3.75522915e+00  3.76642572e+00
  3.77466177e+00  3.78518676e+00  3.79509399e+00  3.79944101e+00
  3.81542245e+00  3.82027898e+00  3.82603398e+00  3.83937166e+00
  3.84616866e+00  3.84741682e+00  3.85078536e+00  3.86377322e+00
  3.86755292e+00  3.87797931e+00  3.88827839e+00  3.89457594e+00
  3.89827353e+00  3.91290760e+00  3.91855384e+00  3.93089469e+00
  3.93471832e+00  3.95000355e+00  3.95516789e+00  3.96695575e+00
  3.97043137e+00  3.98028190e+00  3.98588172e+00  3.99920785e+00
  4.00582579e+00  4.01257943e+00  4.01552096e+00  4.02357622e+00
  4.03790015e+00  4.04110159e+00  4.04784675e+00  4.05423892e+00
  4.06194327e+00  4.07087994e+00  4.07736885e+00  4.08603061e+00
  4.09489802e+00  4.09670359e+00  4.10402099e+00  4.10661576e+00
  4.11695798e+00  4.12499330e+00  4.13338632e+00  4.13609729e+00
  4.14971484e+00  4.17026581e+00  4.18060878e+00  4.18662744e+00
  4.19563805e+00  4.20849491e+00  4.21764797e+00  4.22111756e+00
  4.23656882e+00  4.23940566e+00  4.24865761e+00  4.25392018e+00
  4.25697765e+00  4.26093227e+00  4.26606994e+00  4.27280992e+00
  4.27906836e+00  4.28474718e+00  4.28932659e+00  4.29173985e+00
  4.29636415e+00  4.30344941e+00  4.30511553e+00  4.31399947e+00
  4.31967057e+00  4.32119130e+00  4.32945409e+00  4.33445729e+00
  4.34556651e+00  4.34903757e+00  4.36219226e+00  4.36437158e+00
  4.37502779e+00  4.37819925e+00  4.38420890e+00  4.39349818e+00
  4.40482536e+00  4.41424113e+00  4.42096002e+00  4.44088679e+00
  4.44624160e+00  4.45989014e+00  4.46973832e+00  4.48712269e+00
  4.50006531e+00  4.51883647e+00  4.52151880e+00  4.53835574e+00
  4.54363838e+00  4.56136593e+00  4.58365814e+00  4.59212783e+00
  4.59670226e+00  4.60647697e+00  4.62911474e+00  4.64257532e+00
  4.66427033e+00  4.67053268e+00  4.68287211e+00  4.68690541e+00
  4.70219874e+00  4.71115410e+00  4.73488111e+00  4.74352852e+00
  4.75267333e+00  4.76492768e+00  4.77135530e+00  4.77836154e+00
  4.79570499e+00  4.80469417e+00  4.81205855e+00  4.82614480e+00
  4.83680337e+00  4.84986971e+00  4.87667322e+00  4.87937463e+00
  4.88555291e+00  4.90538250e+00  4.91704865e+00  4.92400347e+00
  4.93429788e+00  4.94375825e+00  4.95903673e+00  4.96292496e+00
  4.96729294e+00  4.97817717e+00  4.99437124e+00  4.99503549e+00
  5.02162642e+00  5.02881437e+00  5.03475626e+00  5.05039215e+00
  5.05373246e+00  5.06534590e+00  5.07436271e+00  5.09062531e+00
  5.12316945e+00  5.13430323e+00  5.15212457e+00  5.17890658e+00
  5.18439878e+00  5.19030876e+00  5.22215671e+00  5.22415503e+00
  5.23034231e+00  5.24628153e+00  5.25939157e+00  5.26538683e+00
  5.26643742e+00  5.27778941e+00  5.28240755e+00  5.28617184e+00
  5.30920709e+00  5.34955414e+00  5.35118077e+00  5.35651707e+00
  5.37204707e+00  5.37368142e+00  5.40291409e+00  5.40390940e+00
  5.41097343e+00  5.42638795e+00  5.43462117e+00  5.47219750e+00
  5.47692085e+00  5.48338368e+00  5.49082529e+00  5.50110811e+00
  5.52942364e+00  5.54566704e+00  5.55765788e+00  5.57044740e+00
  5.57438946e+00  5.57497777e+00  5.58322503e+00  5.60215876e+00
  5.62226046e+00  5.62991363e+00  5.66718087e+00  5.69347836e+00
  5.71768588e+00  5.72695124e+00  5.75737149e+00  5.76330998e+00
  5.79422910e+00  5.80629478e+00  5.81341161e+00  5.85005914e+00
  5.87292432e+00  5.88621546e+00  5.91381979e+00  5.99506789e+00
  6.03383621e+00  6.07311643e+00  6.08898548e+00  6.14939230e+00
  6.15684865e+00  6.27079926e+00  6.29942821e+00  6.32334001e+00
  6.37368085e+00  6.37940977e+00  6.44950488e+00  6.47456386e+00
  6.48153246e+00  6.50014012e+00  6.52244240e+00  6.53099197e+00
  6.57782562e+00  6.69533970e+00  6.79452873e+00  6.81397123e+00
  6.88146024e+00  6.90353910e+00  6.96247866e+00  6.98408650e+00
  7.07134042e+00  7.09133129e+00  7.22828121e+00  7.26721294e+00
  7.34993559e+00  7.36447109e+00  2.21717630e+01  2.21965180e+01
  2.22601938e+01  2.25493556e+01  2.26031658e+01  2.26070072e+01
  2.26720916e+01  2.26884315e+01  2.26974332e+01  2.27077995e+01
  2.27283835e+01  2.27461657e+01  2.27496275e+01  2.27756548e+01
  2.27880504e+01  2.28039485e+01  2.29211137e+01  2.29357391e+01
  2.30068271e+01  2.31447658e+01  2.31633485e+01  2.32234063e+01
  2.33186875e+01  2.33818425e+01  2.35516036e+01  2.35842576e+01
  3.25577680e+01  3.27086326e+01  3.31673845e+01  4.39451175e+01
  4.39583502e+01  4.41013876e+01]
nelec by numeric integration = 222.00012290200328
    CPU time for vxc    155.76 sec, wall time     10.71 sec
    CPU time for df vj and vk    606.03 sec, wall time     45.81 sec
    CPU time for df vj and vk    474.83 sec, wall time     31.47 sec
E1 = -7592.260430989261  Ecoul = 3526.67432991011  Exc = -195.18827882767488
cycle= 1 E= -1393.47518712414  delta_E= 1.27e-11  |g|= 1.06e-05  |ddm|= 1.75e-05
    CPU time for cycle= 1   1243.53 sec, wall time     88.91 sec
  HOMO = -0.256855681856375  LUMO = 0.00326826926324861
  mo_energy =
[-1.92438520e+01 -1.92201598e+01 -1.91470451e+01 -1.44551263e+01
 -1.44477933e+01 -1.44038478e+01 -1.03496517e+01 -1.03438425e+01
 -1.03404130e+01 -1.03249930e+01 -1.03221827e+01 -1.03164374e+01
 -1.03083624e+01 -1.03026638e+01 -1.02939652e+01 -1.02926992e+01
 -1.02922274e+01 -1.02875608e+01 -1.02868815e+01 -1.02827669e+01
 -1.02820290e+01 -1.02819503e+01 -1.02808682e+01 -1.02793633e+01
 -1.02790421e+01 -1.02768206e+01 -1.02630414e+01 -1.02594738e+01
 -1.02584900e+01 -1.02558783e+01 -1.02511376e+01 -1.02483697e+01
 -1.20622318e+00 -1.18116113e+00 -1.17180457e+00 -1.12524059e+00
 -1.09894563e+00 -1.03656134e+00 -1.00962439e+00 -1.00368448e+00
 -9.77488990e-01 -9.53670139e-01 -9.16697552e-01 -9.08359486e-01
 -8.97595328e-01 -8.90839131e-01 -8.83093783e-01 -8.69244073e-01
 -8.67358922e-01 -8.39185958e-01 -8.16436826e-01 -7.86121805e-01
 -7.66912256e-01 -7.50083886e-01 -7.43669277e-01 -7.35363564e-01
 -7.32798090e-01 -7.20130983e-01 -7.05668496e-01 -6.90762559e-01
 -6.77016765e-01 -6.65540219e-01 -6.52749903e-01 -6.47342493e-01
 -6.42768400e-01 -6.35284146e-01 -6.04618640e-01 -5.99850866e-01
 -5.94367454e-01 -5.86239729e-01 -5.83369713e-01 -5.81893354e-01
 -5.72953868e-01 -5.67918443e-01 -5.60812007e-01 -5.49957381e-01
 -5.44881805e-01 -5.44187117e-01 -5.42857257e-01 -5.40943311e-01
 -5.34554813e-01 -5.26550109e-01 -5.22231512e-01 -5.19220784e-01
 -5.15549837e-01 -5.12445407e-01 -5.11722563e-01 -5.01539418e-01
 -5.01027878e-01 -4.95387628e-01 -4.85883232e-01 -4.74017711e-01
 -4.70942136e-01 -4.63100368e-01 -4.58959287e-01 -4.57812841e-01
 -4.56740130e-01 -4.45369864e-01 -4.33244590e-01 -4.29547862e-01
 -4.23096833e-01 -4.16706002e-01 -3.69696608e-01 -3.68049512e-01
 -3.64163682e-01 -3.56706652e-01 -3.46410955e-01 -3.38992549e-01
 -3.15783392e-01 -3.01181281e-01 -2.56855682e-01  3.26826926e-03
  2.96109076e-02  4.42147616e-02  4.52507162e-02  4.98146724e-02
  7.23555411e-02  9.02396020e-02  9.66365681e-02  1.04369621e-01
  1.07445490e-01  1.21932582e-01  1.26242888e-01  1.31256255e-01
  1.37009080e-01  1.39264096e-01  1.46922397e-01  1.54095156e-01
  1.58994883e-01  1.68256016e-01  1.70287874e-01  1.72324537e-01
  1.74974196e-01  1.77485724e-01  1.80665937e-01  1.85554699e-01
  1.92470173e-01  1.96346507e-01  1.97717365e-01  2.02432389e-01
  2.06716090e-01  2.08468409e-01  2.10535305e-01  2.18773407e-01
  2.25012808e-01  2.29189828e-01  2.30329189e-01  2.34740105e-01
  2.39550147e-01  2.43617148e-01  2.47432105e-01  2.49136716e-01
  2.50551545e-01  2.54024218e-01  2.59708511e-01  2.67362040e-01
  2.70786753e-01  2.73476133e-01  2.76852402e-01  2.79217706e-01
  2.83789611e-01  2.89104811e-01  2.92313381e-01  2.95501146e-01
  2.97675699e-01  3.01834212e-01  3.05757784e-01  3.08947362e-01
  3.10217847e-01  3.13442081e-01  3.13739200e-01  3.16189690e-01
  3.17375266e-01  3.25413531e-01  3.27814047e-01  3.29146676e-01
  3.32970101e-01  3.35471826e-01  3.43618510e-01  3.44765595e-01
  3.50623268e-01  3.53675606e-01  3.55793347e-01  3.59163062e-01
  3.61435092e-01  3.66003219e-01  3.68637095e-01  3.74527411e-01
  3.75788218e-01  3.79549516e-01  3.83977526e-01  3.89227117e-01
  3.92014644e-01  3.92813025e-01  3.94210213e-01  3.97569666e-01
  4.05610922e-01  4.08172596e-01  4.13658420e-01  4.15531605e-01
  4.20488950e-01  4.22031811e-01  4.24198408e-01  4.30081826e-01
  4.30955915e-01  4.33654381e-01  4.35291991e-01  4.39916416e-01
  4.40490276e-01  4.41655853e-01  4.45023990e-01  4.46661128e-01
  4.49654727e-01  4.50778544e-01  4.51779353e-01  4.57117854e-01
  4.60386715e-01  4.62090003e-01  4.67703433e-01  4.70881679e-01
  4.74850180e-01  4.76515103e-01  4.80753257e-01  4.83353486e-01
  4.86895756e-01  4.88349178e-01  4.89735980e-01  4.92362775e-01
  4.96344291e-01  5.01627908e-01  5.05567098e-01  5.09259364e-01
  5.14030065e-01  5.15522092e-01  5.16306539e-01  5.21521916e-01
  5.25784360e-01  5.29050079e-01  5.34430754e-01  5.35507708e-01
  5.36433229e-01  5.40145648e-01  5.41439562e-01  5.42553939e-01
  5.51316506e-01  5.51904778e-01  5.54800765e-01  5.58232327e-01
  5.65758473e-01  5.67416599e-01  5.71604699e-01  5.73533080e-01
  5.75715390e-01  5.78808129e-01  5.79779819e-01  5.84072584e-01
  5.84846143e-01  5.88123314e-01  5.93098323e-01  5.96227043e-01
  6.04365526e-01  6.07961946e-01  6.15102608e-01  6.19661243e-01
  6.21677760e-01  6.26772456e-01  6.31242223e-01  6.35449215e-01
  6.42272579e-01  6.44689426e-01  6.49184502e-01  6.51473338e-01
  6.59010003e-01  6.61748605e-01  6.67443722e-01  6.68856981e-01
  6.71311888e-01  6.76845607e-01  6.83320949e-01  6.89367073e-01
  6.93310830e-01  6.95262126e-01  7.00000212e-01  7.09785558e-01
  7.12564124e-01  7.17871891e-01  7.19681723e-01  7.25530870e-01
  7.28284187e-01  7.32531852e-01  7.34607551e-01  7.36656120e-01
  7.41391610e-01  7.47108947e-01  7.49794877e-01  7.52220839e-01
  7.61303846e-01  7.65364626e-01  7.66813676e-01  7.72580069e-01
  7.74532959e-01  7.79621101e-01  7.79999902e-01  7.85143619e-01
  7.89021011e-01  7.93331130e-01  7.94314343e-01  7.98964078e-01
  8.02077546e-01  8.11515921e-01  8.12213515e-01  8.14571239e-01
  8.19979291e-01  8.21949241e-01  8.26175204e-01  8.31255813e-01
  8.33478532e-01  8.37764730e-01  8.41711529e-01  8.46076441e-01
  8.48590019e-01  8.52221748e-01  8.56495681e-01  8.60194093e-01
  8.70489772e-01  8.71760890e-01  8.76078476e-01  8.81615903e-01
  8.85138315e-01  8.90335793e-01  8.96824083e-01  9.04255784e-01
  9.05464040e-01  9.11364604e-01  9.16648096e-01  9.19772360e-01
  9.23799855e-01  9.28983050e-01  9.30824770e-01  9.37880619e-01
  9.40270357e-01  9.49560752e-01  9.50129298e-01  9.53770759e-01
  9.57815201e-01  9.66398132e-01  9.71639564e-01  9.74972149e-01
  9.77510258e-01  9.81978879e-01  9.86756029e-01  9.92380130e-01
  9.99323587e-01  1.00022742e+00  1.00782936e+00  1.01185120e+00
  1.01542597e+00  1.02425578e+00  1.02869745e+00  1.03444947e+00
  1.04295523e+00  1.05350460e+00  1.06141390e+00  1.06834760e+00
  1.07318004e+00  1.08266942e+00  1.08756674e+00  1.09223183e+00
  1.10139934e+00  1.10916149e+00  1.11657432e+00  1.12201321e+00
  1.12570536e+00  1.13190263e+00  1.13677627e+00  1.14149677e+00
  1.14483229e+00  1.14624738e+00  1.15405284e+00  1.16122463e+00
  1.16324847e+00  1.16923493e+00  1.17099824e+00  1.18000659e+00
  1.18767730e+00  1.19050403e+00  1.20009213e+00  1.20620255e+00
  1.21693886e+00  1.22000822e+00  1.22531422e+00  1.23501134e+00
  1.24074453e+00  1.24987745e+00  1.25416904e+00  1.26598674e+00
  1.27113926e+00  1.28077696e+00  1.28428693e+00  1.29191252e+00
  1.29702055e+00  1.29845630e+00  1.30464142e+00  1.30855426e+00
  1.31182391e+00  1.31481598e+00  1.31652856e+00  1.32526955e+00
  1.33006664e+00  1.33353611e+00  1.34141738e+00  1.34361849e+00
  1.34662987e+00  1.35330162e+00  1.35725666e+00  1.36606586e+00
  1.37106102e+00  1.37605026e+00  1.37731911e+00  1.38085154e+00
  1.39003556e+00  1.39321716e+00  1.40702919e+00  1.40892480e+00
  1.41104605e+00  1.42140364e+00  1.42522520e+00  1.42885815e+00
  1.43182693e+00  1.44485508e+00  1.44740643e+00  1.45146534e+00
  1.45605823e+00  1.45987249e+00  1.47631000e+00  1.48363387e+00
  1.48743517e+00  1.48978883e+00  1.49841053e+00  1.50582743e+00
  1.51748449e+00  1.52342780e+00  1.52753179e+00  1.53506497e+00
  1.53894775e+00  1.54124628e+00  1.54360196e+00  1.55362573e+00
  1.55453717e+00  1.55862332e+00  1.56244359e+00  1.56645174e+00
  1.57097539e+00  1.58116644e+00  1.58498018e+00  1.59421592e+00
  1.59879943e+00  1.60240989e+00  1.60473169e+00  1.60904826e+00
  1.61267350e+00  1.61561217e+00  1.62077157e+00  1.63566249e+00
  1.63719076e+00  1.64368256e+00  1.64658590e+00  1.65733883e+00
  1.66180223e+00  1.66285240e+00  1.66796977e+00  1.67232157e+00
  1.67864952e+00  1.69095390e+00  1.69280952e+00  1.69832707e+00
  1.70292185e+00  1.70913602e+00  1.71196582e+00  1.71381696e+00
  1.72145726e+00  1.72463884e+00  1.73041178e+00  1.73257605e+00
  1.74038076e+00  1.74701749e+00  1.74825149e+00  1.75289643e+00
  1.75706176e+00  1.76002751e+00  1.76704046e+00  1.77374964e+00
  1.77556719e+00  1.77944639e+00  1.78692303e+00  1.78944312e+00
  1.79615645e+00  1.79854498e+00  1.80194842e+00  1.80495631e+00
  1.81100494e+00  1.81297523e+00  1.81643261e+00  1.82565163e+00
  1.82685839e+00  1.83019349e+00  1.83742351e+00  1.84166020e+00
  1.84505174e+00  1.85295495e+00  1.85318730e+00  1.86058370e+00
  1.86491195e+00  1.87060559e+00  1.87746609e+00  1.88338342e+00
  1.89044754e+00  1.90195857e+00  1.91576596e+00  1.92161786e+00
  1.92514335e+00  1.92963469e+00  1.93939231e+00  1.94098000e+00
  1.94724335e+00  1.95361802e+00  1.95839829e+00  1.96418755e+00
  1.97644066e+00  1.97989029e+00  1.99231575e+00  1.99276934e+00
  1.99976565e+00  2.00059622e+00  2.00800019e+00  2.01371874e+00
  2.02059979e+00  2.03466892e+00  2.03947872e+00  2.04403865e+00
  2.04988774e+00  2.05307988e+00  2.05808780e+00  2.07477833e+00
  2.07635337e+00  2.08588019e+00  2.09455092e+00  2.10001740e+00
  2.10283435e+00  2.11700460e+00  2.12277762e+00  2.12659290e+00
  2.13045793e+00  2.13390653e+00  2.14148918e+00  2.14649062e+00
  2.15412319e+00  2.16998533e+00  2.17793555e+00  2.18266727e+00
  2.18702511e+00  2.19745140e+00  2.20805542e+00  2.21041717e+00
  2.21757684e+00  2.22011266e+00  2.22742473e+00  2.22992718e+00
  2.23480571e+00  2.23827914e+00  2.24505660e+00  2.24631460e+00
  2.25323816e+00  2.25723493e+00  2.26277267e+00  2.26396406e+00
  2.26579374e+00  2.27737085e+00  2.28100671e+00  2.28794757e+00
  2.30051438e+00  2.30355481e+00  2.30738315e+00  2.31846476e+00
  2.32064676e+00  2.33654085e+00  2.33871852e+00  2.34465405e+00
  2.35049730e+00  2.35690045e+00  2.35905854e+00  2.37166095e+00
  2.37668735e+00  2.38403617e+00  2.39738383e+00  2.40214540e+00
  2.40743107e+00  2.41381315e+00  2.41665588e+00  2.42775269e+00
  2.43252427e+00  2.44051345e+00  2.45926029e+00  2.46889663e+00
  2.47502003e+00  2.48685755e+00  2.49161426e+00  2.50288541e+00
  2.50677387e+00  2.51676485e+00  2.51914330e+00  2.52793744e+00
  2.53479075e+00  2.54218667e+00  2.54350078e+00  2.55733413e+00
  2.56221673e+00  2.57139649e+00  2.57811003e+00  2.58346441e+00
  2.59518558e+00  2.60202544e+00  2.61186635e+00  2.61912345e+00
  2.62396076e+00  2.62969202e+00  2.63341711e+00  2.64396806e+00
  2.64510370e+00  2.65166056e+00  2.65424491e+00  2.66524706e+00
  2.66802199e+00  2.67393524e+00  2.67874644e+00  2.68170024e+00
  2.68727252e+00  2.69612525e+00  2.69950881e+00  2.70304555e+00
  2.70855760e+00  2.71997742e+00  2.72646109e+00  2.73046319e+00
  2.73145806e+00  2.73766286e+00  2.74075653e+00  2.74156881e+00
  2.74679759e+00  2.74960607e+00  2.75204742e+00  2.75563259e+00
  2.76048670e+00  2.76494561e+00  2.76652684e+00  2.77565936e+00
  2.78060432e+00  2.78462346e+00  2.79203271e+00  2.79223849e+00
  2.79680758e+00  2.79915160e+00  2.80304589e+00  2.80437105e+00
  2.80536120e+00  2.81738673e+00  2.82418405e+00  2.82984847e+00
  2.83422365e+00  2.84776108e+00  2.85233879e+00  2.85634750e+00
  2.85882132e+00  2.86556431e+00  2.87003054e+00  2.87290276e+00
  2.88123300e+00  2.88429601e+00  2.88736690e+00  2.89236061e+00
  2.89860462e+00  2.90110303e+00  2.90613813e+00  2.90860348e+00
  2.91044401e+00  2.91845526e+00  2.92007459e+00  2.92487925e+00
  2.92976353e+00  2.93172854e+00  2.93652866e+00  2.94098281e+00
  2.94519482e+00  2.95022327e+00  2.95306906e+00  2.96469388e+00
  2.96864444e+00  2.97209023e+00  2.97438935e+00  2.98524829e+00
  2.99288771e+00  2.99351569e+00  3.00042210e+00  3.00732130e+00
  3.01495375e+00  3.01815401e+00  3.02548834e+00  3.02757827e+00
  3.03506069e+00  3.03659778e+00  3.04104381e+00  3.04842038e+00
  3.05907235e+00  3.06204584e+00  3.06344043e+00  3.06659593e+00
  3.07602281e+00  3.07933786e+00  3.08538513e+00  3.09267577e+00
  3.09367648e+00  3.09924662e+00  3.10398867e+00  3.11290563e+00
  3.12115079e+00  3.12525793e+00  3.13192120e+00  3.13906224e+00
  3.14581835e+00  3.15216800e+00  3.16364031e+00  3.16437970e+00
  3.17206474e+00  3.17327251e+00  3.17886519e+00  3.18361702e+00
  3.18820531e+00  3.19192743e+00  3.20225256e+00  3.20380618e+00
  3.21091660e+00  3.21367800e+00  3.21560935e+00  3.21822957e+00
  3.21962214e+00  3.22673297e+00  3.22817767e+00  3.22992010e+00
  3.23258409e+00  3.23901773e+00  3.24099691e+00  3.24571919e+00
  3.24796423e+00  3.25371872e+00  3.25555499e+00  3.26328465e+00
  3.26578493e+00  3.27339851e+00  3.27470436e+00  3.28108198e+00
  3.28816396e+00  3.29221686e+00  3.29347839e+00  3.29574934e+00
  3.30208799e+00  3.30766199e+00  3.30886525e+00  3.31451520e+00
  3.32108763e+00  3.32290077e+00  3.33123595e+00  3.33563319e+00
  3.33871314e+00  3.34526482e+00  3.35323009e+00  3.35529399e+00
  3.35910174e+00  3.36393888e+00  3.36814219e+00  3.37400510e+00
  3.37688011e+00  3.38235698e+00  3.38524143e+00  3.38719260e+00
  3.39250176e+00  3.39615942e+00  3.40011740e+00  3.40393586e+00
  3.40909597e+00  3.41031548e+00  3.41940582e+00  3.42175693e+00
  3.42715486e+00  3.42918203e+00  3.43720953e+00  3.43898241e+00
  3.44794231e+00  3.45435042e+00  3.45507727e+00  3.46403057e+00
  3.46582500e+00  3.47062466e+00  3.47452474e+00  3.47946238e+00
  3.48120320e+00  3.48459678e+00  3.48990866e+00  3.49790965e+00
  3.50237671e+00  3.50298373e+00  3.50810914e+00  3.50834155e+00
  3.51891087e+00  3.52147253e+00  3.52463359e+00  3.53332028e+00
  3.53762408e+00  3.54434705e+00  3.55384181e+00  3.55558207e+00
  3.55631124e+00  3.55874142e+00  3.56538458e+00  3.57164266e+00
  3.57701165e+00  3.58190066e+00  3.58738904e+00  3.58814557e+00
  3.59126852e+00  3.59515711e+00  3.59762723e+00  3.60216539e+00
  3.60930025e+00  3.61073387e+00  3.61411619e+00  3.61675233e+00
  3.62340475e+00  3.62717448e+00  3.64249663e+00  3.64406300e+00
  3.64681839e+00  3.66066249e+00  3.66604012e+00  3.67466454e+00
  3.67521129e+00  3.68546896e+00  3.69577771e+00  3.70324618e+00
  3.70984439e+00  3.71122391e+00  3.71722804e+00  3.72499622e+00
  3.74182314e+00  3.74822266e+00  3.75522922e+00  3.76642560e+00
  3.77466199e+00  3.78518682e+00  3.79509404e+00  3.79944119e+00
  3.81542248e+00  3.82027898e+00  3.82603393e+00  3.83937182e+00
  3.84616858e+00  3.84741675e+00  3.85078535e+00  3.86377333e+00
  3.86755274e+00  3.87797939e+00  3.88827858e+00  3.89457609e+00
  3.89827385e+00  3.91290759e+00  3.91855377e+00  3.93089487e+00
  3.93471870e+00  3.95000351e+00  3.95516818e+00  3.96695579e+00
  3.97043148e+00  3.98028196e+00  3.98588169e+00  3.99920790e+00
  4.00582581e+00  4.01257944e+00  4.01552103e+00  4.02357646e+00
  4.03790019e+00  4.04110177e+00  4.04784718e+00  4.05423913e+00
  4.06194334e+00  4.07088023e+00  4.07736887e+00  4.08603053e+00
  4.09489802e+00  4.09670363e+00  4.10402111e+00  4.10661555e+00
  4.11695804e+00  4.12499346e+00  4.13338636e+00  4.13609734e+00
  4.14971491e+00  4.17026574e+00  4.18060892e+00  4.18662742e+00
  4.19563810e+00  4.20849500e+00  4.21764794e+00  4.22111750e+00
  4.23656890e+00  4.23940571e+00  4.24865740e+00  4.25392003e+00
  4.25697746e+00  4.26093217e+00  4.26606996e+00  4.27280998e+00
  4.27906832e+00  4.28474697e+00  4.28932655e+00  4.29173962e+00
  4.29636406e+00  4.30344935e+00  4.30511541e+00  4.31399919e+00
  4.31967049e+00  4.32119146e+00  4.32945388e+00  4.33445720e+00
  4.34556638e+00  4.34903751e+00  4.36219206e+00  4.36437177e+00
  4.37502768e+00  4.37819915e+00  4.38420872e+00  4.39349824e+00
  4.40482546e+00  4.41424089e+00  4.42096014e+00  4.44088683e+00
  4.44624165e+00  4.45988998e+00  4.46973842e+00  4.48712249e+00
  4.50006536e+00  4.51883632e+00  4.52151900e+00  4.53835574e+00
  4.54363849e+00  4.56136595e+00  4.58365837e+00  4.59212789e+00
  4.59670252e+00  4.60647692e+00  4.62911473e+00  4.64257533e+00
  4.66427021e+00  4.67053264e+00  4.68287199e+00  4.68690529e+00
  4.70219852e+00  4.71115404e+00  4.73488110e+00  4.74352864e+00
  4.75267352e+00  4.76492759e+00  4.77135570e+00  4.77836197e+00
  4.79570498e+00  4.80469416e+00  4.81205846e+00  4.82614576e+00
  4.83680332e+00  4.84986975e+00  4.87667344e+00  4.87937500e+00
  4.88555305e+00  4.90538264e+00  4.91704844e+00  4.92400339e+00
  4.93429836e+00  4.94375798e+00  4.95903660e+00  4.96292500e+00
  4.96729285e+00  4.97817725e+00  4.99437125e+00  4.99503538e+00
  5.02162623e+00  5.02881432e+00  5.03475635e+00  5.05039264e+00
  5.05373241e+00  5.06534610e+00  5.07436282e+00  5.09062576e+00
  5.12316966e+00  5.13430320e+00  5.15212471e+00  5.17890670e+00
  5.18439991e+00  5.19030924e+00  5.22215722e+00  5.22415541e+00
  5.23034277e+00  5.24628169e+00  5.25939159e+00  5.26538687e+00
  5.26643767e+00  5.27778953e+00  5.28240790e+00  5.28617211e+00
  5.30920735e+00  5.34955394e+00  5.35118110e+00  5.35651636e+00
  5.37204526e+00  5.37368197e+00  5.40291462e+00  5.40390959e+00
  5.41097361e+00  5.42638795e+00  5.43462109e+00  5.47219821e+00
  5.47692085e+00  5.48338390e+00  5.49082511e+00  5.50110812e+00
  5.52942357e+00  5.54566715e+00  5.55765890e+00  5.57044733e+00
  5.57438970e+00  5.57497829e+00  5.58322495e+00  5.60215887e+00
  5.62226088e+00  5.62991393e+00  5.66718120e+00  5.69347894e+00
  5.71768583e+00  5.72695136e+00  5.75737156e+00  5.76331027e+00
  5.79422950e+00  5.80629426e+00  5.81341127e+00  5.85005920e+00
  5.87292534e+00  5.88621601e+00  5.91381979e+00  5.99506793e+00
  6.03383681e+00  6.07311726e+00  6.08898591e+00  6.14939333e+00
  6.15684962e+00  6.27079948e+00  6.29942598e+00  6.32334103e+00
  6.37368166e+00  6.37941015e+00  6.44950495e+00  6.47456448e+00
  6.48153301e+00  6.50014167e+00  6.52244334e+00  6.53098775e+00
  6.57782392e+00  6.69533628e+00  6.79453018e+00  6.81397219e+00
  6.88146166e+00  6.90354002e+00  6.96247475e+00  6.98408481e+00
  7.07134184e+00  7.09133222e+00  7.22827746e+00  7.26721014e+00
  7.34993682e+00  7.36447188e+00  2.21717629e+01  2.21965177e+01
  2.22601933e+01  2.25493554e+01  2.26031659e+01  2.26070074e+01
  2.26720912e+01  2.26884310e+01  2.26974325e+01  2.27077990e+01
  2.27283831e+01  2.27461653e+01  2.27496273e+01  2.27756548e+01
  2.27880503e+01  2.28039486e+01  2.29211131e+01  2.29357389e+01
  2.30068285e+01  2.31447658e+01  2.31633478e+01  2.32234057e+01
  2.33186873e+01  2.33818417e+01  2.35516060e+01  2.35842596e+01
  3.25577682e+01  3.27086317e+01  3.31673887e+01  4.39451203e+01
  4.39583522e+01  4.41013797e+01]
nelec by numeric integration = 222.000122902468
    CPU time for vxc    154.33 sec, wall time     10.56 sec
    CPU time for df vj and vk    601.86 sec, wall time     46.02 sec
    CPU time for df vj and vk    467.87 sec, wall time     30.36 sec
E1 = -7592.26041824939  Ecoul = 3526.6743196593966  Exc = -195.18828131681414
cycle= 2 E= -1393.47518712412  delta_E= 2e-11  |g|= 1.53e-05  |ddm|= 2.4e-05
    CPU time for cycle= 2   1231.46 sec, wall time     87.90 sec
  HOMO = -0.256855741882751  LUMO = 0.0032680721061147
  mo_energy =
[-1.92438535e+01 -1.92201609e+01 -1.91470399e+01 -1.44551250e+01
 -1.44477965e+01 -1.44038481e+01 -1.03496536e+01 -1.03438424e+01
 -1.03404123e+01 -1.03249923e+01 -1.03221838e+01 -1.03164370e+01
 -1.03083631e+01 -1.03026656e+01 -1.02939647e+01 -1.02926988e+01
 -1.02922267e+01 -1.02875605e+01 -1.02868812e+01 -1.02827667e+01
 -1.02820290e+01 -1.02819500e+01 -1.02808683e+01 -1.02793635e+01
 -1.02790420e+01 -1.02768205e+01 -1.02630418e+01 -1.02594741e+01
 -1.02584899e+01 -1.02558778e+01 -1.02511378e+01 -1.02483696e+01
 -1.20622368e+00 -1.18116142e+00 -1.17180523e+00 -1.12523978e+00
 -1.09894540e+00 -1.03656219e+00 -1.00962424e+00 -1.00368427e+00
 -9.77489014e-01 -9.53670014e-01 -9.16697426e-01 -9.08359723e-01
 -8.97595159e-01 -8.90839074e-01 -8.83093926e-01 -8.69244269e-01
 -8.67358853e-01 -8.39186075e-01 -8.16436967e-01 -7.86122133e-01
 -7.66912156e-01 -7.50084107e-01 -7.43669209e-01 -7.35363561e-01
 -7.32798144e-01 -7.20130934e-01 -7.05668648e-01 -6.90762741e-01
 -6.77016882e-01 -6.65540454e-01 -6.52750121e-01 -6.47342562e-01
 -6.42768408e-01 -6.35284232e-01 -6.04618830e-01 -5.99850848e-01
 -5.94367555e-01 -5.86239913e-01 -5.83369771e-01 -5.81893487e-01
 -5.72953829e-01 -5.67918544e-01 -5.60812002e-01 -5.49957227e-01
 -5.44881864e-01 -5.44187039e-01 -5.42856741e-01 -5.40943238e-01
 -5.34554825e-01 -5.26550349e-01 -5.22231324e-01 -5.19220815e-01
 -5.15549716e-01 -5.12445377e-01 -5.11722800e-01 -5.01539417e-01
 -5.01027844e-01 -4.95387539e-01 -4.85883107e-01 -4.74017686e-01
 -4.70942249e-01 -4.63100587e-01 -4.58959178e-01 -4.57812732e-01
 -4.56740038e-01 -4.45369861e-01 -4.33244774e-01 -4.29547882e-01
 -4.23096713e-01 -4.16706007e-01 -3.69696662e-01 -3.68049478e-01
 -3.64163614e-01 -3.56706416e-01 -3.46410323e-01 -3.38992490e-01
 -3.15783453e-01 -3.01181369e-01 -2.56855742e-01  3.26807211e-03
  2.96109250e-02  4.42148772e-02  4.52508311e-02  4.98147605e-02
  7.23555609e-02  9.02395728e-02  9.66366865e-02  1.04369572e-01
  1.07445469e-01  1.21932554e-01  1.26242909e-01  1.31256183e-01
  1.37009108e-01  1.39264169e-01  1.46922351e-01  1.54095174e-01
  1.58994792e-01  1.68255948e-01  1.70287864e-01  1.72324499e-01
  1.74974104e-01  1.77485736e-01  1.80665822e-01  1.85554742e-01
  1.92470068e-01  1.96346514e-01  1.97717341e-01  2.02432420e-01
  2.06716040e-01  2.08468372e-01  2.10535351e-01  2.18773374e-01
  2.25012789e-01  2.29189877e-01  2.30329145e-01  2.34740101e-01
  2.39550102e-01  2.43617135e-01  2.47432149e-01  2.49136679e-01
  2.50551504e-01  2.54024253e-01  2.59708487e-01  2.67361955e-01
  2.70786633e-01  2.73476150e-01  2.76852430e-01  2.79217585e-01
  2.83789582e-01  2.89104883e-01  2.92313402e-01  2.95501131e-01
  2.97675657e-01  3.01834179e-01  3.05757782e-01  3.08947345e-01
  3.10217828e-01  3.13442094e-01  3.13739181e-01  3.16189693e-01
  3.17375231e-01  3.25413523e-01  3.27814042e-01  3.29146667e-01
  3.32970095e-01  3.35471772e-01  3.43618494e-01  3.44765585e-01
  3.50623263e-01  3.53675578e-01  3.55793303e-01  3.59163037e-01
  3.61435037e-01  3.66003230e-01  3.68637075e-01  3.74527343e-01
  3.75788222e-01  3.79549495e-01  3.83977510e-01  3.89227040e-01
  3.92014517e-01  3.92812917e-01  3.94210181e-01  3.97569619e-01
  4.05610885e-01  4.08172549e-01  4.13658422e-01  4.15531640e-01
  4.20488931e-01  4.22031894e-01  4.24198385e-01  4.30081786e-01
  4.30955940e-01  4.33654354e-01  4.35292074e-01  4.39916421e-01
  4.40490282e-01  4.41655812e-01  4.45023952e-01  4.46660994e-01
  4.49654676e-01  4.50778454e-01  4.51779279e-01  4.57117813e-01
  4.60386663e-01  4.62089966e-01  4.67703413e-01  4.70881629e-01
  4.74850132e-01  4.76514988e-01  4.80753256e-01  4.83353501e-01
  4.86895734e-01  4.88349139e-01  4.89735983e-01  4.92362781e-01
  4.96344286e-01  5.01627930e-01  5.05567091e-01  5.09259362e-01
  5.14030061e-01  5.15522069e-01  5.16306548e-01  5.21521923e-01
  5.25784336e-01  5.29050014e-01  5.34430740e-01  5.35507634e-01
  5.36433209e-01  5.40145671e-01  5.41439573e-01  5.42553933e-01
  5.51316504e-01  5.51904772e-01  5.54800735e-01  5.58232303e-01
  5.65758416e-01  5.67416621e-01  5.71604658e-01  5.73533101e-01
  5.75715399e-01  5.78808155e-01  5.79779798e-01  5.84072571e-01
  5.84846152e-01  5.88123288e-01  5.93098304e-01  5.96227051e-01
  6.04365548e-01  6.07961897e-01  6.15102472e-01  6.19661218e-01
  6.21677715e-01  6.26772421e-01  6.31242152e-01  6.35449110e-01
  6.42272490e-01  6.44689315e-01  6.49184437e-01  6.51473281e-01
  6.59009961e-01  6.61748530e-01  6.67443661e-01  6.68856917e-01
  6.71311894e-01  6.76845576e-01  6.83320863e-01  6.89367004e-01
  6.93310671e-01  6.95262022e-01  7.00000216e-01  7.09785552e-01
  7.12564138e-01  7.17871796e-01  7.19681683e-01  7.25530832e-01
  7.28284199e-01  7.32531787e-01  7.34607544e-01  7.36656161e-01
  7.41391534e-01  7.47108946e-01  7.49794868e-01  7.52220763e-01
  7.61303907e-01  7.65364589e-01  7.66813679e-01  7.72580094e-01
  7.74532978e-01  7.79621112e-01  7.79999945e-01  7.85143537e-01
  7.89021050e-01  7.93331101e-01  7.94314305e-01  7.98964135e-01
  8.02077594e-01  8.11515909e-01  8.12213502e-01  8.14571227e-01
  8.19979219e-01  8.21949245e-01  8.26175209e-01  8.31255831e-01
  8.33478518e-01  8.37764687e-01  8.41711493e-01  8.46076405e-01
  8.48589997e-01  8.52221765e-01  8.56495632e-01  8.60194010e-01
  8.70489758e-01  8.71760858e-01  8.76078488e-01  8.81615814e-01
  8.85138392e-01  8.90335835e-01  8.96824065e-01  9.04255746e-01
  9.05464079e-01  9.11364567e-01  9.16648050e-01  9.19772338e-01
  9.23799892e-01  9.28983106e-01  9.30824737e-01  9.37880595e-01
  9.40270340e-01  9.49560767e-01  9.50129343e-01  9.53770699e-01
  9.57815184e-01  9.66398040e-01  9.71639528e-01  9.74972186e-01
  9.77510202e-01  9.81978907e-01  9.86756022e-01  9.92380127e-01
  9.99323544e-01  1.00022739e+00  1.00782937e+00  1.01185110e+00
  1.01542591e+00  1.02425574e+00  1.02869743e+00  1.03444943e+00
  1.04295527e+00  1.05350455e+00  1.06141385e+00  1.06834753e+00
  1.07317999e+00  1.08266938e+00  1.08756689e+00  1.09223190e+00
  1.10139934e+00  1.10916153e+00  1.11657424e+00  1.12201318e+00
  1.12570525e+00  1.13190260e+00  1.13677629e+00  1.14149670e+00
  1.14483231e+00  1.14624738e+00  1.15405285e+00  1.16122454e+00
  1.16324845e+00  1.16923496e+00  1.17099819e+00  1.18000665e+00
  1.18767729e+00  1.19050400e+00  1.20009212e+00  1.20620254e+00
  1.21693884e+00  1.22000806e+00  1.22531415e+00  1.23501139e+00
  1.24074447e+00  1.24987739e+00  1.25416895e+00  1.26598671e+00
  1.27113918e+00  1.28077697e+00  1.28428695e+00  1.29191252e+00
  1.29702052e+00  1.29845632e+00  1.30464139e+00  1.30855420e+00
  1.31182394e+00  1.31481594e+00  1.31652861e+00  1.32526953e+00
  1.33006665e+00  1.33353608e+00  1.34141740e+00  1.34361846e+00
  1.34662988e+00  1.35330159e+00  1.35725657e+00  1.36606583e+00
  1.37106098e+00  1.37605025e+00  1.37731913e+00  1.38085153e+00
  1.39003549e+00  1.39321716e+00  1.40702914e+00  1.40892474e+00
  1.41104597e+00  1.42140360e+00  1.42522519e+00  1.42885812e+00
  1.43182685e+00  1.44485502e+00  1.44740636e+00  1.45146527e+00
  1.45605824e+00  1.45987243e+00  1.47631006e+00  1.48363377e+00
  1.48743503e+00  1.48978875e+00  1.49841054e+00  1.50582744e+00
  1.51748445e+00  1.52342782e+00  1.52753180e+00  1.53506499e+00
  1.53894774e+00  1.54124628e+00  1.54360192e+00  1.55362573e+00
  1.55453721e+00  1.55862332e+00  1.56244357e+00  1.56645169e+00
  1.57097538e+00  1.58116630e+00  1.58498017e+00  1.59421591e+00
  1.59879941e+00  1.60240985e+00  1.60473161e+00  1.60904822e+00
  1.61267354e+00  1.61561218e+00  1.62077157e+00  1.63566246e+00
  1.63719073e+00  1.64368261e+00  1.64658591e+00  1.65733875e+00
  1.66180223e+00  1.66285233e+00  1.66796974e+00  1.67232145e+00
  1.67864944e+00  1.69095388e+00  1.69280944e+00  1.69832707e+00
  1.70292182e+00  1.70913599e+00  1.71196580e+00  1.71381692e+00
  1.72145720e+00  1.72463884e+00  1.73041178e+00  1.73257596e+00
  1.74038074e+00  1.74701747e+00  1.74825142e+00  1.75289642e+00
  1.75706175e+00  1.76002750e+00  1.76704040e+00  1.77374963e+00
  1.77556721e+00  1.77944636e+00  1.78692311e+00  1.78944314e+00
  1.79615646e+00  1.79854501e+00  1.80194844e+00  1.80495628e+00
  1.81100485e+00  1.81297512e+00  1.81643264e+00  1.82565152e+00
  1.82685827e+00  1.83019342e+00  1.83742345e+00  1.84166015e+00
  1.84505171e+00  1.85295487e+00  1.85318724e+00  1.86058371e+00
  1.86491191e+00  1.87060552e+00  1.87746602e+00  1.88338337e+00
  1.89044754e+00  1.90195852e+00  1.91576585e+00  1.92161786e+00
  1.92514324e+00  1.92963459e+00  1.93939221e+00  1.94097997e+00
  1.94724329e+00  1.95361792e+00  1.95839833e+00  1.96418748e+00
  1.97644068e+00  1.97989015e+00  1.99231576e+00  1.99276926e+00
  1.99976558e+00  2.00059625e+00  2.00800020e+00  2.01371862e+00
  2.02059976e+00  2.03466891e+00  2.03947875e+00  2.04403870e+00
  2.04988775e+00  2.05307972e+00  2.05808779e+00  2.07477837e+00
  2.07635333e+00  2.08588008e+00  2.09455097e+00  2.10001746e+00
  2.10283433e+00  2.11700460e+00  2.12277748e+00  2.12659298e+00
  2.13045773e+00  2.13390654e+00  2.14148913e+00  2.14649070e+00
  2.15412314e+00  2.16998539e+00  2.17793560e+00  2.18266734e+00
  2.18702514e+00  2.19745142e+00  2.20805542e+00  2.21041698e+00
  2.21757672e+00  2.22011265e+00  2.22742472e+00  2.22992731e+00
  2.23480577e+00  2.23827915e+00  2.24505664e+00  2.24631466e+00
  2.25323813e+00  2.25723494e+00  2.26277255e+00  2.26396406e+00
  2.26579376e+00  2.27737080e+00  2.28100663e+00  2.28794762e+00
  2.30051443e+00  2.30355474e+00  2.30738307e+00  2.31846484e+00
  2.32064679e+00  2.33654084e+00  2.33871851e+00  2.34465402e+00
  2.35049725e+00  2.35690050e+00  2.35905856e+00  2.37166085e+00
  2.37668730e+00  2.38403611e+00  2.39738371e+00  2.40214514e+00
  2.40743094e+00  2.41381305e+00  2.41665571e+00  2.42775268e+00
  2.43252420e+00  2.44051356e+00  2.45926014e+00  2.46889663e+00
  2.47501998e+00  2.48685757e+00  2.49161408e+00  2.50288547e+00
  2.50677377e+00  2.51676480e+00  2.51914318e+00  2.52793741e+00
  2.53479081e+00  2.54218678e+00  2.54350071e+00  2.55733411e+00
  2.56221669e+00  2.57139633e+00  2.57811006e+00  2.58346434e+00
  2.59518560e+00  2.60202552e+00  2.61186634e+00  2.61912337e+00
  2.62396054e+00  2.62969195e+00  2.63341708e+00  2.64396808e+00
  2.64510368e+00  2.65166053e+00  2.65424488e+00  2.66524708e+00
  2.66802193e+00  2.67393516e+00  2.67874647e+00  2.68170024e+00
  2.68727256e+00  2.69612521e+00  2.69950877e+00  2.70304549e+00
  2.70855766e+00  2.71997747e+00  2.72646103e+00  2.73046319e+00
  2.73145799e+00  2.73766273e+00  2.74075645e+00  2.74156873e+00
  2.74679757e+00  2.74960609e+00  2.75204731e+00  2.75563262e+00
  2.76048680e+00  2.76494569e+00  2.76652690e+00  2.77565943e+00
  2.78060430e+00  2.78462350e+00  2.79203273e+00  2.79223849e+00
  2.79680739e+00  2.79915156e+00  2.80304584e+00  2.80437112e+00
  2.80536116e+00  2.81738673e+00  2.82418403e+00  2.82984845e+00
  2.83422369e+00  2.84776111e+00  2.85233873e+00  2.85634748e+00
  2.85882140e+00  2.86556432e+00  2.87003059e+00  2.87290280e+00
  2.88123305e+00  2.88429592e+00  2.88736693e+00  2.89236072e+00
  2.89860461e+00  2.90110301e+00  2.90613816e+00  2.90860347e+00
  2.91044399e+00  2.91845516e+00  2.92007458e+00  2.92487930e+00
  2.92976362e+00  2.93172863e+00  2.93652858e+00  2.94098287e+00
  2.94519477e+00  2.95022339e+00  2.95306917e+00  2.96469386e+00
  2.96864449e+00  2.97209019e+00  2.97438933e+00  2.98524827e+00
  2.99288776e+00  2.99351573e+00  3.00042212e+00  3.00732125e+00
  3.01495366e+00  3.01815405e+00  3.02548829e+00  3.02757817e+00
  3.03506067e+00  3.03659773e+00  3.04104372e+00  3.04842028e+00
  3.05907220e+00  3.06204579e+00  3.06344037e+00  3.06659585e+00
  3.07602282e+00  3.07933775e+00  3.08538489e+00  3.09267553e+00
  3.09367639e+00  3.09924657e+00  3.10398852e+00  3.11290549e+00
  3.12115068e+00  3.12525787e+00  3.13192112e+00  3.13906213e+00
  3.14581830e+00  3.15216786e+00  3.16364024e+00  3.16437962e+00
  3.17206466e+00  3.17327251e+00  3.17886500e+00  3.18361683e+00
  3.18820521e+00  3.19192727e+00  3.20225240e+00  3.20380619e+00
  3.21091654e+00  3.21367798e+00  3.21560935e+00  3.21822952e+00
  3.21962213e+00  3.22673294e+00  3.22817766e+00  3.22992009e+00
  3.23258401e+00  3.23901757e+00  3.24099695e+00  3.24571918e+00
  3.24796423e+00  3.25371865e+00  3.25555504e+00  3.26328463e+00
  3.26578492e+00  3.27339853e+00  3.27470435e+00  3.28108198e+00
  3.28816385e+00  3.29221683e+00  3.29347829e+00  3.29574928e+00
  3.30208799e+00  3.30766191e+00  3.30886525e+00  3.31451520e+00
  3.32108759e+00  3.32290076e+00  3.33123589e+00  3.33563317e+00
  3.33871310e+00  3.34526491e+00  3.35323017e+00  3.35529399e+00
  3.35910171e+00  3.36393897e+00  3.36814220e+00  3.37400515e+00
  3.37688014e+00  3.38235693e+00  3.38524139e+00  3.38719258e+00
  3.39250174e+00  3.39615944e+00  3.40011736e+00  3.40393601e+00
  3.40909594e+00  3.41031548e+00  3.41940580e+00  3.42175689e+00
  3.42715484e+00  3.42918206e+00  3.43720945e+00  3.43898248e+00
  3.44794238e+00  3.45435043e+00  3.45507732e+00  3.46403052e+00
  3.46582499e+00  3.47062465e+00  3.47452477e+00  3.47946243e+00
  3.48120322e+00  3.48459690e+00  3.48990879e+00  3.49790960e+00
  3.50237663e+00  3.50298367e+00  3.50810915e+00  3.50834157e+00
  3.51891080e+00  3.52147251e+00  3.52463367e+00  3.53332032e+00
  3.53762411e+00  3.54434700e+00  3.55384175e+00  3.55558210e+00
  3.55631118e+00  3.55874140e+00  3.56538460e+00  3.57164257e+00
  3.57701166e+00  3.58190062e+00  3.58738900e+00  3.58814558e+00
  3.59126853e+00  3.59515710e+00  3.59762716e+00  3.60216538e+00
  3.60930029e+00  3.61073386e+00  3.61411615e+00  3.61675224e+00
  3.62340464e+00  3.62717450e+00  3.64249659e+00  3.64406302e+00
  3.64681826e+00  3.66066235e+00  3.66603994e+00  3.67466455e+00
  3.67521129e+00  3.68546892e+00  3.69577774e+00  3.70324620e+00
  3.70984441e+00  3.71122372e+00  3.71722798e+00  3.72499618e+00
  3.74182300e+00  3.74822255e+00  3.75522915e+00  3.76642565e+00
  3.77466182e+00  3.78518677e+00  3.79509398e+00  3.79944106e+00
  3.81542245e+00  3.82027896e+00  3.82603394e+00  3.83937171e+00
  3.84616861e+00  3.84741678e+00  3.85078533e+00  3.86377321e+00
  3.86755283e+00  3.87797931e+00  3.88827843e+00  3.89457596e+00
  3.89827363e+00  3.91290755e+00  3.91855380e+00  3.93089473e+00
  3.93471844e+00  3.95000350e+00  3.95516798e+00  3.96695575e+00
  3.97043137e+00  3.98028191e+00  3.98588168e+00  3.99920787e+00
  4.00582579e+00  4.01257942e+00  4.01552095e+00  4.02357632e+00
  4.03790016e+00  4.04110163e+00  4.04784689e+00  4.05423899e+00
  4.06194327e+00  4.07088003e+00  4.07736884e+00  4.08603056e+00
  4.09489798e+00  4.09670360e+00  4.10402100e+00  4.10661563e+00
  4.11695797e+00  4.12499335e+00  4.13338632e+00  4.13609729e+00
  4.14971483e+00  4.17026576e+00  4.18060879e+00  4.18662740e+00
  4.19563805e+00  4.20849490e+00  4.21764793e+00  4.22111753e+00
  4.23656883e+00  4.23940564e+00  4.24865751e+00  4.25392010e+00
  4.25697755e+00  4.26093221e+00  4.26606990e+00  4.27280991e+00
  4.27906833e+00  4.28474708e+00  4.28932653e+00  4.29173969e+00
  4.29636405e+00  4.30344938e+00  4.30511544e+00  4.31399933e+00
  4.31967050e+00  4.32119133e+00  4.32945399e+00  4.33445726e+00
  4.34556637e+00  4.34903750e+00  4.36219216e+00  4.36437163e+00
  4.37502773e+00  4.37819915e+00  4.38420882e+00  4.39349819e+00
  4.40482539e+00  4.41424102e+00  4.42096005e+00  4.44088679e+00
  4.44624159e+00  4.45989005e+00  4.46973832e+00  4.48712260e+00
  4.50006529e+00  4.51883639e+00  4.52151884e+00  4.53835573e+00
  4.54363837e+00  4.56136594e+00  4.58365821e+00  4.59212783e+00
  4.59670233e+00  4.60647693e+00  4.62911473e+00  4.64257529e+00
  4.66427026e+00  4.67053264e+00  4.68287205e+00  4.68690531e+00
  4.70219863e+00  4.71115404e+00  4.73488110e+00  4.74352856e+00
  4.75267338e+00  4.76492763e+00  4.77135542e+00  4.77836166e+00
  4.79570496e+00  4.80469417e+00  4.81205852e+00  4.82614516e+00
  4.83680327e+00  4.84986971e+00  4.87667328e+00  4.87937475e+00
  4.88555295e+00  4.90538253e+00  4.91704856e+00  4.92400345e+00
  4.93429804e+00  4.94375813e+00  4.95903665e+00  4.96292493e+00
  4.96729291e+00  4.97817716e+00  4.99437121e+00  4.99503538e+00
  5.02162633e+00  5.02881435e+00  5.03475624e+00  5.05039232e+00
  5.05373239e+00  5.06534593e+00  5.07436274e+00  5.09062547e+00
  5.12316953e+00  5.13430320e+00  5.15212462e+00  5.17890662e+00
  5.18439922e+00  5.19030894e+00  5.22215688e+00  5.22415517e+00
  5.23034248e+00  5.24628154e+00  5.25939157e+00  5.26538679e+00
  5.26643751e+00  5.27778945e+00  5.28240767e+00  5.28617193e+00
  5.30920719e+00  5.34955409e+00  5.35118095e+00  5.35651677e+00
  5.37204632e+00  5.37368169e+00  5.40291428e+00  5.40390943e+00
  5.41097348e+00  5.42638794e+00  5.43462113e+00  5.47219776e+00
  5.47692084e+00  5.48338376e+00  5.49082521e+00  5.50110804e+00
  5.52942360e+00  5.54566708e+00  5.55765839e+00  5.57044737e+00
  5.57438954e+00  5.57497801e+00  5.58322498e+00  5.60215880e+00
  5.62226060e+00  5.62991373e+00  5.66718099e+00  5.69347858e+00
  5.71768583e+00  5.72695126e+00  5.75737151e+00  5.76331008e+00
  5.79422925e+00  5.80629454e+00  5.81341145e+00  5.85005917e+00
  5.87292483e+00  5.88621572e+00  5.91381979e+00  5.99506790e+00
  6.03383644e+00  6.07311684e+00  6.08898567e+00  6.14939269e+00
  6.15684902e+00  6.27079934e+00  6.29942728e+00  6.32334039e+00
  6.37368124e+00  6.37940993e+00  6.44950492e+00  6.47456419e+00
  6.48153274e+00  6.50014091e+00  6.52244287e+00  6.53099025e+00
  6.57782490e+00  6.69533830e+00  6.79452946e+00  6.81397170e+00
  6.88146096e+00  6.90353955e+00  6.96247706e+00  6.98408579e+00
  7.07134114e+00  7.09133175e+00  7.22827968e+00  7.26721179e+00
  7.34993622e+00  7.36447148e+00  2.21717630e+01  2.21965178e+01
  2.22601936e+01  2.25493555e+01  2.26031658e+01  2.26070072e+01
  2.26720914e+01  2.26884312e+01  2.26974328e+01  2.27077993e+01
  2.27283833e+01  2.27461655e+01  2.27496273e+01  2.27756547e+01
  2.27880503e+01  2.28039485e+01  2.29211134e+01  2.29357389e+01
  2.30068276e+01  2.31447658e+01  2.31633482e+01  2.32234060e+01
  2.33186873e+01  2.33818421e+01  2.35516045e+01  2.35842584e+01
  3.25577681e+01  3.27086323e+01  3.31673861e+01  4.39451190e+01
  4.39583512e+01  4.41013844e+01]
nelec by numeric integration = 222.00012290219146
    CPU time for vxc    151.64 sec, wall time     10.43 sec
    CPU time for df vj and vk    600.05 sec, wall time     46.64 sec
    CPU time for df vj and vk    466.29 sec, wall time     30.21 sec
E1 = -7592.2604291865455  Ecoul = 3526.6743290193976  Exc = -195.18827973969834
cycle= 3 E= -1393.47518712416  delta_E= -4e-11  |g|= 6.46e-07  |ddm|= 1.39e-05
    CPU time for cycle= 3   1225.34 sec, wall time     88.23 sec
  HOMO = -0.256855723440011  LUMO = 0.0032681020008743
  mo_energy =
[-1.92438539e+01 -1.92201612e+01 -1.91470401e+01 -1.44551250e+01
 -1.44477963e+01 -1.44038482e+01 -1.03496535e+01 -1.03438423e+01
 -1.03404122e+01 -1.03249924e+01 -1.03221837e+01 -1.03164368e+01
 -1.03083629e+01 -1.03026656e+01 -1.02939646e+01 -1.02926987e+01
 -1.02922267e+01 -1.02875605e+01 -1.02868812e+01 -1.02827667e+01
 -1.02820290e+01 -1.02819499e+01 -1.02808683e+01 -1.02793635e+01
 -1.02790420e+01 -1.02768205e+01 -1.02630417e+01 -1.02594740e+01
 -1.02584899e+01 -1.02558776e+01 -1.02511377e+01 -1.02483695e+01
 -1.20622380e+00 -1.18116152e+00 -1.17180519e+00 -1.12523977e+00
 -1.09894539e+00 -1.03656213e+00 -1.00962421e+00 -1.00368424e+00
 -9.77488969e-01 -9.53669974e-01 -9.16697391e-01 -9.08359703e-01
 -8.97595126e-01 -8.90839056e-01 -8.83093883e-01 -8.69244228e-01
 -8.67358812e-01 -8.39186042e-01 -8.16436939e-01 -7.86122103e-01
 -7.66912129e-01 -7.50084100e-01 -7.43669189e-01 -7.35363532e-01
 -7.32798124e-01 -7.20130914e-01 -7.05668628e-01 -6.90762711e-01
 -6.77016908e-01 -6.65540400e-01 -6.52750105e-01 -6.47342555e-01
 -6.42768391e-01 -6.35284218e-01 -6.04618797e-01 -5.99850840e-01
 -5.94367538e-01 -5.86239889e-01 -5.83369746e-01 -5.81893449e-01
 -5.72953785e-01 -5.67918529e-01 -5.60811984e-01 -5.49957214e-01
 -5.44881879e-01 -5.44187032e-01 -5.42856746e-01 -5.40943217e-01
 -5.34554804e-01 -5.26550350e-01 -5.22231301e-01 -5.19220835e-01
 -5.15549719e-01 -5.12445377e-01 -5.11722828e-01 -5.01539424e-01
 -5.01027849e-01 -4.95387530e-01 -4.85883093e-01 -4.74017686e-01
 -4.70942259e-01 -4.63100590e-01 -4.58959160e-01 -4.57812718e-01
 -4.56740018e-01 -4.45369856e-01 -4.33244790e-01 -4.29547862e-01
 -4.23096687e-01 -4.16706032e-01 -3.69696636e-01 -3.68049460e-01
 -3.64163597e-01 -3.56706406e-01 -3.46410354e-01 -3.38992455e-01
 -3.15783442e-01 -3.01181357e-01 -2.56855723e-01  3.26810200e-03
  2.96109667e-02  4.42148991e-02  4.52508531e-02  4.98147817e-02
  7.23555892e-02  9.02395966e-02  9.66367028e-02  1.04369570e-01
  1.07445495e-01  1.21932538e-01  1.26242920e-01  1.31256196e-01
  1.37009124e-01  1.39264183e-01  1.46922356e-01  1.54095183e-01
  1.58994801e-01  1.68255954e-01  1.70287875e-01  1.72324505e-01
  1.74974108e-01  1.77485751e-01  1.80665828e-01  1.85554755e-01
  1.92470092e-01  1.96346530e-01  1.97717345e-01  2.02432431e-01
  2.06716056e-01  2.08468384e-01  2.10535371e-01  2.18773392e-01
  2.25012802e-01  2.29189887e-01  2.30329160e-01  2.34740122e-01
  2.39550118e-01  2.43617133e-01  2.47432161e-01  2.49136694e-01
  2.50551518e-01  2.54024265e-01  2.59708492e-01  2.67361967e-01
  2.70786649e-01  2.73476170e-01  2.76852450e-01  2.79217615e-01
  2.83789599e-01  2.89104908e-01  2.92313424e-01  2.95501149e-01
  2.97675670e-01  3.01834200e-01  3.05757798e-01  3.08947358e-01
  3.10217845e-01  3.13442111e-01  3.13739195e-01  3.16189708e-01
  3.17375238e-01  3.25413536e-01  3.27814054e-01  3.29146682e-01
  3.32970109e-01  3.35471785e-01  3.43618511e-01  3.44765600e-01
  3.50623279e-01  3.53675596e-01  3.55793322e-01  3.59163048e-01
  3.61435049e-01  3.66003245e-01  3.68637082e-01  3.74527362e-01
  3.75788239e-01  3.79549514e-01  3.83977525e-01  3.89227055e-01
  3.92014528e-01  3.92812922e-01  3.94210193e-01  3.97569634e-01
  4.05610900e-01  4.08172558e-01  4.13658435e-01  4.15531655e-01
  4.20488945e-01  4.22031915e-01  4.24198392e-01  4.30081798e-01
  4.30955958e-01  4.33654367e-01  4.35292089e-01  4.39916437e-01
  4.40490301e-01  4.41655825e-01  4.45023962e-01  4.46661017e-01
  4.49654677e-01  4.50778470e-01  4.51779292e-01  4.57117824e-01
  4.60386668e-01  4.62089981e-01  4.67703426e-01  4.70881648e-01
  4.74850138e-01  4.76515006e-01  4.80753269e-01  4.83353512e-01
  4.86895745e-01  4.88349149e-01  4.89735997e-01  4.92362798e-01
  4.96344302e-01  5.01627945e-01  5.05567106e-01  5.09259376e-01
  5.14030083e-01  5.15522083e-01  5.16306560e-01  5.21521934e-01
  5.25784345e-01  5.29050025e-01  5.34430753e-01  5.35507641e-01
  5.36433217e-01  5.40145685e-01  5.41439588e-01  5.42553941e-01
  5.51316517e-01  5.51904790e-01  5.54800734e-01  5.58232315e-01
  5.65758416e-01  5.67416631e-01  5.71604669e-01  5.73533117e-01
  5.75715411e-01  5.78808168e-01  5.79779809e-01  5.84072584e-01
  5.84846168e-01  5.88123297e-01  5.93098312e-01  5.96227063e-01
  6.04365564e-01  6.07961918e-01  6.15102489e-01  6.19661230e-01
  6.21677718e-01  6.26772432e-01  6.31242144e-01  6.35449115e-01
  6.42272494e-01  6.44689328e-01  6.49184449e-01  6.51473289e-01
  6.59009968e-01  6.61748542e-01  6.67443670e-01  6.68856941e-01
  6.71311910e-01  6.76845590e-01  6.83320881e-01  6.89367023e-01
  6.93310690e-01  6.95262033e-01  7.00000237e-01  7.09785570e-01
  7.12564147e-01  7.17871822e-01  7.19681704e-01  7.25530853e-01
  7.28284221e-01  7.32531811e-01  7.34607556e-01  7.36656180e-01
  7.41391553e-01  7.47108965e-01  7.49794889e-01  7.52220784e-01
  7.61303929e-01  7.65364609e-01  7.66813693e-01  7.72580116e-01
  7.74532999e-01  7.79621125e-01  7.79999964e-01  7.85143559e-01
  7.89021067e-01  7.93331117e-01  7.94314331e-01  7.98964154e-01
  8.02077613e-01  8.11515932e-01  8.12213511e-01  8.14571247e-01
  8.19979225e-01  8.21949265e-01  8.26175229e-01  8.31255855e-01
  8.33478532e-01  8.37764709e-01  8.41711511e-01  8.46076427e-01
  8.48590010e-01  8.52221782e-01  8.56495650e-01  8.60194024e-01
  8.70489776e-01  8.71760871e-01  8.76078501e-01  8.81615828e-01
  8.85138413e-01  8.90335851e-01  8.96824077e-01  9.04255768e-01
  9.05464105e-01  9.11364581e-01  9.16648059e-01  9.19772352e-01
  9.23799899e-01  9.28983129e-01  9.30824744e-01  9.37880602e-01
  9.40270352e-01  9.49560775e-01  9.50129354e-01  9.53770704e-01
  9.57815203e-01  9.66398058e-01  9.71639545e-01  9.74972203e-01
  9.77510219e-01  9.81978924e-01  9.86756035e-01  9.92380145e-01
  9.99323565e-01  1.00022740e+00  1.00782938e+00  1.01185113e+00
  1.01542593e+00  1.02425577e+00  1.02869745e+00  1.03444945e+00
  1.04295530e+00  1.05350457e+00  1.06141387e+00  1.06834755e+00
  1.07318001e+00  1.08266940e+00  1.08756690e+00  1.09223192e+00
  1.10139936e+00  1.10916155e+00  1.11657425e+00  1.12201320e+00
  1.12570527e+00  1.13190262e+00  1.13677631e+00  1.14149671e+00
  1.14483233e+00  1.14624740e+00  1.15405286e+00  1.16122455e+00
  1.16324847e+00  1.16923498e+00  1.17099821e+00  1.18000666e+00
  1.18767730e+00  1.19050401e+00  1.20009213e+00  1.20620256e+00
  1.21693886e+00  1.22000807e+00  1.22531417e+00  1.23501141e+00
  1.24074449e+00  1.24987742e+00  1.25416897e+00  1.26598673e+00
  1.27113919e+00  1.28077699e+00  1.28428696e+00  1.29191253e+00
  1.29702053e+00  1.29845634e+00  1.30464140e+00  1.30855422e+00
  1.31182395e+00  1.31481596e+00  1.31652863e+00  1.32526955e+00
  1.33006667e+00  1.33353610e+00  1.34141742e+00  1.34361847e+00
  1.34662990e+00  1.35330160e+00  1.35725658e+00  1.36606584e+00
  1.37106100e+00  1.37605027e+00  1.37731915e+00  1.38085154e+00
  1.39003550e+00  1.39321718e+00  1.40702916e+00  1.40892477e+00
  1.41104599e+00  1.42140362e+00  1.42522520e+00  1.42885814e+00
  1.43182687e+00  1.44485504e+00  1.44740637e+00  1.45146530e+00
  1.45605827e+00  1.45987246e+00  1.47631008e+00  1.48363380e+00
  1.48743505e+00  1.48978877e+00  1.49841056e+00  1.50582746e+00
  1.51748447e+00  1.52342785e+00  1.52753183e+00  1.53506501e+00
  1.53894776e+00  1.54124631e+00  1.54360194e+00  1.55362574e+00
  1.55453723e+00  1.55862335e+00  1.56244359e+00  1.56645170e+00
  1.57097540e+00  1.58116632e+00  1.58498020e+00  1.59421592e+00
  1.59879943e+00  1.60240987e+00  1.60473163e+00  1.60904824e+00
  1.61267356e+00  1.61561220e+00  1.62077159e+00  1.63566247e+00
  1.63719076e+00  1.64368263e+00  1.64658593e+00  1.65733876e+00
  1.66180225e+00  1.66285235e+00  1.66796976e+00  1.67232146e+00
  1.67864946e+00  1.69095390e+00  1.69280946e+00  1.69832708e+00
  1.70292184e+00  1.70913601e+00  1.71196582e+00  1.71381695e+00
  1.72145723e+00  1.72463886e+00  1.73041181e+00  1.73257597e+00
  1.74038076e+00  1.74701748e+00  1.74825143e+00  1.75289643e+00
  1.75706176e+00  1.76002751e+00  1.76704042e+00  1.77374965e+00
  1.77556723e+00  1.77944638e+00  1.78692312e+00  1.78944316e+00
  1.79615648e+00  1.79854503e+00  1.80194847e+00  1.80495630e+00
  1.81100487e+00  1.81297514e+00  1.81643266e+00  1.82565154e+00
  1.82685829e+00  1.83019344e+00  1.83742347e+00  1.84166016e+00
  1.84505172e+00  1.85295488e+00  1.85318726e+00  1.86058372e+00
  1.86491192e+00  1.87060553e+00  1.87746604e+00  1.88338339e+00
  1.89044755e+00  1.90195853e+00  1.91576587e+00  1.92161788e+00
  1.92514324e+00  1.92963460e+00  1.93939223e+00  1.94097998e+00
  1.94724330e+00  1.95361795e+00  1.95839836e+00  1.96418749e+00
  1.97644071e+00  1.97989016e+00  1.99231578e+00  1.99276928e+00
  1.99976559e+00  2.00059626e+00  2.00800022e+00  2.01371864e+00
  2.02059977e+00  2.03466892e+00  2.03947878e+00  2.04403872e+00
  2.04988776e+00  2.05307971e+00  2.05808780e+00  2.07477839e+00
  2.07635335e+00  2.08588008e+00  2.09455099e+00  2.10001748e+00
  2.10283435e+00  2.11700461e+00  2.12277749e+00  2.12659300e+00
  2.13045775e+00  2.13390654e+00  2.14148914e+00  2.14649072e+00
  2.15412314e+00  2.16998541e+00  2.17793562e+00  2.18266736e+00
  2.18702516e+00  2.19745144e+00  2.20805543e+00  2.21041700e+00
  2.21757673e+00  2.22011266e+00  2.22742472e+00  2.22992733e+00
  2.23480578e+00  2.23827916e+00  2.24505666e+00  2.24631467e+00
  2.25323815e+00  2.25723496e+00  2.26277254e+00  2.26396409e+00
  2.26579378e+00  2.27737082e+00  2.28100664e+00  2.28794764e+00
  2.30051445e+00  2.30355475e+00  2.30738309e+00  2.31846486e+00
  2.32064682e+00  2.33654087e+00  2.33871852e+00  2.34465403e+00
  2.35049727e+00  2.35690050e+00  2.35905858e+00  2.37166087e+00
  2.37668731e+00  2.38403612e+00  2.39738374e+00  2.40214519e+00
  2.40743094e+00  2.41381307e+00  2.41665573e+00  2.42775269e+00
  2.43252421e+00  2.44051358e+00  2.45926016e+00  2.46889663e+00
  2.47502000e+00  2.48685758e+00  2.49161410e+00  2.50288550e+00
  2.50677378e+00  2.51676482e+00  2.51914315e+00  2.52793743e+00
  2.53479083e+00  2.54218680e+00  2.54350072e+00  2.55733412e+00
  2.56221672e+00  2.57139634e+00  2.57811007e+00  2.58346434e+00
  2.59518562e+00  2.60202555e+00  2.61186636e+00  2.61912340e+00
  2.62396057e+00  2.62969197e+00  2.63341711e+00  2.64396810e+00
  2.64510369e+00  2.65166055e+00  2.65424490e+00  2.66524710e+00
  2.66802196e+00  2.67393518e+00  2.67874650e+00  2.68170026e+00
  2.68727259e+00  2.69612523e+00  2.69950880e+00  2.70304551e+00
  2.70855768e+00  2.71997750e+00  2.72646105e+00  2.73046322e+00
  2.73145801e+00  2.73766275e+00  2.74075647e+00  2.74156875e+00
  2.74679759e+00  2.74960611e+00  2.75204732e+00  2.75563264e+00
  2.76048683e+00  2.76494572e+00  2.76652692e+00  2.77565945e+00
  2.78060433e+00  2.78462353e+00  2.79203275e+00  2.79223851e+00
  2.79680740e+00  2.79915157e+00  2.80304585e+00  2.80437115e+00
  2.80536118e+00  2.81738675e+00  2.82418404e+00  2.82984847e+00
  2.83422371e+00  2.84776113e+00  2.85233875e+00  2.85634751e+00
  2.85882142e+00  2.86556434e+00  2.87003061e+00  2.87290283e+00
  2.88123307e+00  2.88429595e+00  2.88736695e+00  2.89236075e+00
  2.89860464e+00  2.90110304e+00  2.90613818e+00  2.90860349e+00
  2.91044402e+00  2.91845519e+00  2.92007460e+00  2.92487932e+00
  2.92976364e+00  2.93172865e+00  2.93652861e+00  2.94098289e+00
  2.94519478e+00  2.95022341e+00  2.95306919e+00  2.96469389e+00
  2.96864451e+00  2.97209022e+00  2.97438936e+00  2.98524828e+00
  2.99288779e+00  2.99351575e+00  3.00042214e+00  3.00732128e+00
  3.01495366e+00  3.01815407e+00  3.02548831e+00  3.02757820e+00
  3.03506069e+00  3.03659776e+00  3.04104374e+00  3.04842031e+00
  3.05907222e+00  3.06204581e+00  3.06344039e+00  3.06659586e+00
  3.07602284e+00  3.07933778e+00  3.08538491e+00  3.09267554e+00
  3.09367641e+00  3.09924660e+00  3.10398856e+00  3.11290552e+00
  3.12115071e+00  3.12525789e+00  3.13192115e+00  3.13906216e+00
  3.14581832e+00  3.15216789e+00  3.16364027e+00  3.16437965e+00
  3.17206468e+00  3.17327253e+00  3.17886502e+00  3.18361686e+00
  3.18820523e+00  3.19192729e+00  3.20225242e+00  3.20380621e+00
  3.21091655e+00  3.21367800e+00  3.21560938e+00  3.21822954e+00
  3.21962215e+00  3.22673297e+00  3.22817769e+00  3.22992011e+00
  3.23258403e+00  3.23901759e+00  3.24099698e+00  3.24571921e+00
  3.24796426e+00  3.25371867e+00  3.25555507e+00  3.26328466e+00
  3.26578494e+00  3.27339856e+00  3.27470438e+00  3.28108200e+00
  3.28816387e+00  3.29221686e+00  3.29347832e+00  3.29574932e+00
  3.30208802e+00  3.30766194e+00  3.30886527e+00  3.31451522e+00
  3.32108762e+00  3.32290079e+00  3.33123593e+00  3.33563320e+00
  3.33871312e+00  3.34526493e+00  3.35323019e+00  3.35529402e+00
  3.35910173e+00  3.36393898e+00  3.36814222e+00  3.37400518e+00
  3.37688017e+00  3.38235697e+00  3.38524141e+00  3.38719260e+00
  3.39250176e+00  3.39615946e+00  3.40011739e+00  3.40393602e+00
  3.40909597e+00  3.41031550e+00  3.41940583e+00  3.42175691e+00
  3.42715486e+00  3.42918207e+00  3.43720947e+00  3.43898250e+00
  3.44794241e+00  3.45435045e+00  3.45507735e+00  3.46403054e+00
  3.46582501e+00  3.47062467e+00  3.47452479e+00  3.47946246e+00
  3.48120325e+00  3.48459693e+00  3.48990880e+00  3.49790963e+00
  3.50237666e+00  3.50298370e+00  3.50810917e+00  3.50834160e+00
  3.51891083e+00  3.52147254e+00  3.52463370e+00  3.53332035e+00
  3.53762413e+00  3.54434703e+00  3.55384178e+00  3.55558212e+00
  3.55631120e+00  3.55874142e+00  3.56538462e+00  3.57164259e+00
  3.57701169e+00  3.58190064e+00  3.58738903e+00  3.58814561e+00
  3.59126855e+00  3.59515712e+00  3.59762719e+00  3.60216540e+00
  3.60930031e+00  3.61073388e+00  3.61411617e+00  3.61675226e+00
  3.62340466e+00  3.62717452e+00  3.64249661e+00  3.64406305e+00
  3.64681827e+00  3.66066237e+00  3.66603996e+00  3.67466458e+00
  3.67521131e+00  3.68546894e+00  3.69577778e+00  3.70324622e+00
  3.70984444e+00  3.71122374e+00  3.71722800e+00  3.72499620e+00
  3.74182303e+00  3.74822256e+00  3.75522918e+00  3.76642568e+00
  3.77466184e+00  3.78518679e+00  3.79509400e+00  3.79944109e+00
  3.81542249e+00  3.82027899e+00  3.82603397e+00  3.83937173e+00
  3.84616863e+00  3.84741681e+00  3.85078536e+00  3.86377323e+00
  3.86755285e+00  3.87797934e+00  3.88827845e+00  3.89457599e+00
  3.89827367e+00  3.91290758e+00  3.91855382e+00  3.93089477e+00
  3.93471847e+00  3.95000354e+00  3.95516800e+00  3.96695578e+00
  3.97043139e+00  3.98028193e+00  3.98588171e+00  3.99920789e+00
  4.00582580e+00  4.01257944e+00  4.01552098e+00  4.02357632e+00
  4.03790018e+00  4.04110164e+00  4.04784691e+00  4.05423898e+00
  4.06194330e+00  4.07088005e+00  4.07736885e+00  4.08603060e+00
  4.09489801e+00  4.09670362e+00  4.10402102e+00  4.10661566e+00
  4.11695799e+00  4.12499337e+00  4.13338636e+00  4.13609732e+00
  4.14971486e+00  4.17026579e+00  4.18060881e+00  4.18662743e+00
  4.19563807e+00  4.20849493e+00  4.21764796e+00  4.22111755e+00
  4.23656887e+00  4.23940567e+00  4.24865754e+00  4.25392013e+00
  4.25697758e+00  4.26093224e+00  4.26606993e+00  4.27280994e+00
  4.27906835e+00  4.28474711e+00  4.28932656e+00  4.29173973e+00
  4.29636409e+00  4.30344940e+00  4.30511548e+00  4.31399937e+00
  4.31967054e+00  4.32119137e+00  4.32945403e+00  4.33445728e+00
  4.34556641e+00  4.34903754e+00  4.36219219e+00  4.36437166e+00
  4.37502776e+00  4.37819918e+00  4.38420884e+00  4.39349822e+00
  4.40482543e+00  4.41424105e+00  4.42096008e+00  4.44088682e+00
  4.44624160e+00  4.45989008e+00  4.46973835e+00  4.48712264e+00
  4.50006531e+00  4.51883642e+00  4.52151887e+00  4.53835576e+00
  4.54363838e+00  4.56136595e+00  4.58365821e+00  4.59212784e+00
  4.59670234e+00  4.60647696e+00  4.62911475e+00  4.64257531e+00
  4.66427030e+00  4.67053266e+00  4.68287208e+00  4.68690533e+00
  4.70219866e+00  4.71115407e+00  4.73488113e+00  4.74352859e+00
  4.75267341e+00  4.76492766e+00  4.77135546e+00  4.77836170e+00
  4.79570500e+00  4.80469419e+00  4.81205854e+00  4.82614521e+00
  4.83680331e+00  4.84986974e+00  4.87667331e+00  4.87937476e+00
  4.88555295e+00  4.90538255e+00  4.91704859e+00  4.92400347e+00
  4.93429807e+00  4.94375817e+00  4.95903668e+00  4.96292495e+00
  4.96729293e+00  4.97817718e+00  4.99437124e+00  4.99503541e+00
  5.02162635e+00  5.02881437e+00  5.03475627e+00  5.05039237e+00
  5.05373241e+00  5.06534596e+00  5.07436277e+00  5.09062551e+00
  5.12316956e+00  5.13430324e+00  5.15212467e+00  5.17890666e+00
  5.18439929e+00  5.19030898e+00  5.22215692e+00  5.22415522e+00
  5.23034251e+00  5.24628156e+00  5.25939160e+00  5.26538682e+00
  5.26643753e+00  5.27778948e+00  5.28240770e+00  5.28617197e+00
  5.30920723e+00  5.34955403e+00  5.35118087e+00  5.35651677e+00
  5.37204628e+00  5.37368158e+00  5.40291430e+00  5.40390946e+00
  5.41097352e+00  5.42638797e+00  5.43462117e+00  5.47219779e+00
  5.47692087e+00  5.48338376e+00  5.49082524e+00  5.50110808e+00
  5.52942362e+00  5.54566710e+00  5.55765826e+00  5.57044738e+00
  5.57438951e+00  5.57497792e+00  5.58322500e+00  5.60215881e+00
  5.62226060e+00  5.62991373e+00  5.66718100e+00  5.69347862e+00
  5.71768584e+00  5.72695127e+00  5.75737154e+00  5.76331009e+00
  5.79422926e+00  5.80629454e+00  5.81341145e+00  5.85005923e+00
  5.87292471e+00  5.88621561e+00  5.91381982e+00  5.99506793e+00
  6.03383647e+00  6.07311675e+00  6.08898559e+00  6.14939273e+00
  6.15684907e+00  6.27079939e+00  6.29942722e+00  6.32334045e+00
  6.37368116e+00  6.37940986e+00  6.44950490e+00  6.47456409e+00
  6.48153262e+00  6.50014071e+00  6.52244271e+00  6.53099014e+00
  6.57782486e+00  6.69533822e+00  6.79452928e+00  6.81397154e+00
  6.88146078e+00  6.90353940e+00  6.96247696e+00  6.98408575e+00
  7.07134096e+00  7.09133159e+00  7.22827959e+00  7.26721172e+00
  7.34993606e+00  7.36447134e+00  2.21717630e+01  2.21965178e+01
  2.22601936e+01  2.25493555e+01  2.26031658e+01  2.26070072e+01
  2.26720914e+01  2.26884313e+01  2.26974329e+01  2.27077993e+01
  2.27283834e+01  2.27461655e+01  2.27496274e+01  2.27756547e+01
  2.27880504e+01  2.28039486e+01  2.29211135e+01  2.29357390e+01
  2.30068277e+01  2.31447659e+01  2.31633482e+01  2.32234061e+01
  2.33186873e+01  2.33818422e+01  2.35516045e+01  2.35842584e+01
  3.25577680e+01  3.27086323e+01  3.31673863e+01  4.39451186e+01
  4.39583509e+01  4.41013843e+01]
nelec by numeric integration = 222.00012290219345
    CPU time for vxc    152.22 sec, wall time     10.35 sec
    CPU time for df vj and vk    599.77 sec, wall time     46.26 sec
    CPU time for df vj and vk    465.70 sec, wall time     30.16 sec
E1 = -7592.260427420834  Ecoul = 3526.6743275855547  Exc = -195.18828007156336
Extra cycle  E= -1393.47518712416  delta_E= 3.64e-12  |g|= 6.6e-07  |ddm|= 2.3e-06
    CPU time for scf_cycle   7027.50 sec, wall time    536.08 sec
    CPU time for SCF   7027.51 sec, wall time    536.09 sec
converged SCF energy = -1393.47518712416
SCF Done after  536.0852 seconds
after SCF memory used: 24926.89453125 MB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
a_x = 0.56
beta = 8.0
alpha = 4.58
hdiag (111777,)
n_occ =  111
n_vir =  1007
max_vir =  277
Q-Gamma tensors building time = 17.4872
after Q matrix memory used: 25595.58203125 MB
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   sTDA
Preconditioner:  sTDA
A matrix size =  111777 * 111777
sTDA nstate = 28
sTDA A diagonalization: threshold = 0.001 ; in 10 steps  28.2981 seconds
sTDA excitation energies:
[3.01223279 3.73449073 4.27312101 4.56488877 4.82026762 4.92242827
 4.99970334 5.1590582  5.23968551 5.24037287 5.29995409 5.36747248
 5.46531819 5.47372686 5.52530848 5.8119102  5.89897321 5.91145354
 6.06136942 6.06401829 6.1826364  6.26414372 6.29995896 6.36227724
 6.3728226  6.47923456 6.51684235 6.60625497]
Intial guess time: 28.5709 seconds
    CPU time for df vj and vk  17595.86 sec, wall time   1254.51 sec
    CPU time for df vj and vk  13729.53 sec, wall time    895.27 sec
Iteration  0
subspace size:  28
maximum residual norm 0.1189106777705286
sTDA Preconditioning Done after  20 steps;  28.1878 seconds
subgencost 3.0535 10.83 %
mvcost 4.4338 15.73 %
GScost 18.3087 64.95 %
subcost 0.1477 0.52 %
m,new_m 28 48
    CPU time for df vj and vk  12619.16 sec, wall time    891.85 sec
    CPU time for df vj and vk   9711.53 sec, wall time    633.49 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.059670553213002325
sTDA Preconditioning Done after  17 steps;  24.5612 seconds
subgencost 2.3156 9.43 %
mvcost 6.1609 25.08 %
GScost 14.2512 58.02 %
subcost 0.1049 0.43 %
m,new_m 48 68
    CPU time for df vj and vk  12614.46 sec, wall time    896.08 sec
    CPU time for df vj and vk   9834.60 sec, wall time    644.83 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.042831016348666165
sTDA Preconditioning Done after  18 steps;  26.6773 seconds
subgencost 2.5184 9.44 %
mvcost 6.4229 24.08 %
GScost 15.784 59.17 %
subcost 0.1833 0.69 %
m,new_m 68 88
    CPU time for df vj and vk  12714.04 sec, wall time    899.09 sec
    CPU time for df vj and vk   9940.72 sec, wall time    649.59 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.013012432036477615
sTDA Preconditioning Done after  21 steps;  27.0228 seconds
subgencost 3.2227 11.93 %
mvcost 6.2037 22.96 %
GScost 15.549 57.54 %
subcost 0.1538 0.57 %
m,new_m 88 108
    CPU time for df vj and vk  12701.96 sec, wall time    902.86 sec
    CPU time for df vj and vk   9762.22 sec, wall time    638.51 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.003586103883076296
sTDA Preconditioning Done after  16 steps;  25.2774 seconds
subgencost 2.2992 9.1 %
mvcost 6.1179 24.2 %
GScost 15.0782 59.65 %
subcost 0.0939 0.37 %
m,new_m 108 128
    CPU time for df vj and vk  12615.25 sec, wall time    892.68 sec
    CPU time for df vj and vk   9691.67 sec, wall time    632.80 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.0008708472585713873
sTDA Preconditioning Done after  15 steps;  13.6392 seconds
subgencost 1.2206 8.95 %
mvcost 3.6877 27.04 %
GScost 7.3729 54.06 %
subcost 0.0991 0.73 %
m,new_m 128 147
    CPU time for df vj and vk  11946.41 sec, wall time    846.27 sec
    CPU time for df vj and vk   9257.64 sec, wall time    602.37 sec
new generated guesses: 19
Iteration  6
subspace size:  147
maximum residual norm 0.0001772894796578511
sTDA Preconditioning Done after  19 steps;  10.0341 seconds
subgencost 1.1443 11.4 %
mvcost 3.1964 31.86 %
GScost 4.7287 47.13 %
subcost 0.0611 0.61 %
m,new_m 147 156
    CPU time for df vj and vk   5603.92 sec, wall time    398.56 sec
    CPU time for df vj and vk   4339.15 sec, wall time    282.18 sec
new generated guesses: 9
Iteration  7
subspace size:  156
maximum residual norm 3.261216661265463e-05
sTDA Preconditioning Done after  26 steps;  5.3908 seconds
subgencost 0.8655 16.05 %
mvcost 1.9833 36.79 %
GScost 1.9616 36.39 %
subcost 0.0364 0.68 %
m,new_m 156 160
    CPU time for df vj and vk   2515.51 sec, wall time    181.99 sec
    CPU time for df vj and vk   1920.92 sec, wall time    124.89 sec
new generated guesses: 4
Iteration  8
subspace size:  160
maximum residual norm 6.7731997623800006e-06
Davidson procedure aborted
Davidson done after  14299.8178 seconds
Total steps = 9
Final subspace shape =  (160, 160)
Preconditioning time: 161.3173 1.13 %
In-house Davidson time: 14299.9334 seconds
Excited State energies (eV) =
[3.18107868 3.96013738 4.37778329 4.72584895 5.01055589 5.19010314
 5.33312695 5.37157449 5.42011722 5.44942122 5.5008197  5.62453879
 5.76457124 5.88126479 6.08705366 6.14793096 6.2251953  6.26083039
 6.45308737 6.46597739]
|---------------   In-house Developed Davidson Done   -----------|
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   Adiag
Preconditioner:  Adiag
A matrix size =  111777 * 111777
Intial guess time: 0.0062 seconds
    CPU time for df vj and vk  17742.40 sec, wall time   1256.25 sec
    CPU time for df vj and vk  13637.61 sec, wall time    891.57 sec
Iteration  0
subspace size:  28
maximum residual norm 0.1381900107040311
m,new_m 28 48
    CPU time for df vj and vk  12692.52 sec, wall time    901.20 sec
    CPU time for df vj and vk   9815.73 sec, wall time    639.55 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.05168946106226593
m,new_m 48 68
    CPU time for df vj and vk  12757.62 sec, wall time    901.97 sec
    CPU time for df vj and vk   9814.77 sec, wall time    644.18 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.07196434791769891
m,new_m 68 88
    CPU time for df vj and vk  12638.96 sec, wall time    899.11 sec
    CPU time for df vj and vk   9773.73 sec, wall time    639.34 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.042943669111488426
m,new_m 88 108
    CPU time for df vj and vk  12654.08 sec, wall time    902.80 sec
    CPU time for df vj and vk   9804.92 sec, wall time    642.51 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.03715119493372174
m,new_m 108 128
    CPU time for df vj and vk  12630.28 sec, wall time    894.72 sec
    CPU time for df vj and vk   9792.36 sec, wall time    641.25 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.030567929546008368
m,new_m 128 148
    CPU time for df vj and vk  12638.07 sec, wall time    894.95 sec
    CPU time for df vj and vk   9794.28 sec, wall time    643.87 sec
new generated guesses: 20
Iteration  6
subspace size:  148
maximum residual norm 0.01368092832787693
m,new_m 148 168
    CPU time for df vj and vk  12688.39 sec, wall time    902.92 sec
    CPU time for df vj and vk   9716.76 sec, wall time    632.15 sec
new generated guesses: 20
Iteration  7
subspace size:  168
maximum residual norm 0.0053424353822165765
m,new_m 168 188
    CPU time for df vj and vk  12626.51 sec, wall time    897.02 sec
    CPU time for df vj and vk   9818.02 sec, wall time    642.25 sec
new generated guesses: 20
Iteration  8
subspace size:  188
maximum residual norm 0.0019134575809503793
m,new_m 188 206
    CPU time for df vj and vk  11293.44 sec, wall time    805.81 sec
    CPU time for df vj and vk   8837.84 sec, wall time    580.56 sec
new generated guesses: 18
Iteration  9
subspace size:  206
maximum residual norm 0.0008015628043969045
m,new_m 206 222
    CPU time for df vj and vk  10093.71 sec, wall time    722.30 sec
    CPU time for df vj and vk   7804.16 sec, wall time    508.47 sec
new generated guesses: 16
Iteration  10
subspace size:  222
maximum residual norm 0.0003467487717795405
m,new_m 222 232
    CPU time for df vj and vk   6370.20 sec, wall time    459.51 sec
    CPU time for df vj and vk   4902.08 sec, wall time    321.32 sec
new generated guesses: 10
Iteration  11
subspace size:  232
maximum residual norm 0.00013938798316146398
m,new_m 232 240
    CPU time for df vj and vk   5029.24 sec, wall time    363.14 sec
    CPU time for df vj and vk   3953.19 sec, wall time    258.98 sec
new generated guesses: 8
Iteration  12
subspace size:  240
maximum residual norm 5.276467652497589e-05
m,new_m 240 245
    CPU time for df vj and vk   3139.83 sec, wall time    225.68 sec
    CPU time for df vj and vk   2391.67 sec, wall time    157.04 sec
new generated guesses: 5
Iteration  13
subspace size:  245
maximum residual norm 1.9009657308094493e-05
m,new_m 245 247
    CPU time for df vj and vk   1223.99 sec, wall time     90.84 sec
    CPU time for df vj and vk    948.01 sec, wall time     62.03 sec
new generated guesses: 2
Iteration  14
subspace size:  247
maximum residual norm 6.856152447245951e-06
Davidson procedure aborted
Davidson done after  21979.2181 seconds
Total steps = 15
Final subspace shape =  (247, 247)
Preconditioning time: 0.8095 0.0 %
In-house Davidson time: 21979.2902 seconds
Excited State energies (eV) =
[3.18107868 3.96013738 4.37778329 4.72584895 5.01055589 5.19010314
 5.33312695 5.37157449 5.42011722 5.44942122 5.50081971 5.62453879
 5.76457124 5.88126479 6.08705366 6.14793096 6.22519529 6.26083039
 6.45308737 6.46597739]
|---------------   In-house Developed Davidson Done   -----------|
xyzfile = 53_Coelenterazine.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 20
pytd = False
TDA = True
TDDFT = False
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
TDA_options = [0, 1]
TDDFT_options = [0]
dynpol_options = [0]
stapol_options = [0]
TDA_tolerance = 1e-05
TDDFT_tolerance = 1e-05
dynpol_tolerance = 1e-05
stapol_tolerance = 1e-05
max = 35
TDA_initialTOL = 0.001
TDDFT_initialTOL = 0.001
dynpol_initprecTOL = 0.01
stapol_initprecTOL = 0.01
TDA_precondTOL = 0.01
TDDFT_precondTOL = 0.01
TDA_extrainitial = 8
TDDFT_extrainitial = 8
TDDFT_extrainitial_3n = False
eigensolver_tol = 1e-05
memory = 50000
verbose = 5
beta = []
alpha = []
