curpath /scratch/pbsjobs/job.15971920.hpc
lib.num_threads() =  16
at beginning memory used: 51.87109375 MB
mol.max_memory 60000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul6_GS.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
#from einsum2 import einsum2 as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

# from pyscf.tools import molden
# from pyscf.dft import xcfun

# wb97x methanol, sTDA[ 6.46739329  8.18181719  8.38358186  9.45195086  9.52132657  9.98634407
#  10.57628203 11.22108803 11.23872459 11.57456576]

# wb97x methanol, sTDDFT [6.46636223 8.18031038 8.38140358 9.45010938 9.50610109]
# truncate 40 eV         [6.46748128 8.18219018 8.38315179 9.45216734 9.51268853]
#
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA',  help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=bool,  default=False, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default='NA',  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='NA',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=bool,  default=True,  help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default='3',   help='0-9, 9 is best')

parser.add_argument('-n',  '--nstates',                     type=int,   default = 4,      help='number of excited states')
parser.add_argument('-pytd',  '--pytd',                     type=bool,  default = False , help='whether to compare with PySCF TDDFT')

parser.add_argument('-TDA','--TDA',                         type=bool,  default = False, help='perform TDA')
parser.add_argument('-TDDFT','--TDDFT',                     type=bool,  default = False, help='perform TDDFT')
parser.add_argument('-dynpol','--dynpol',                   type=bool,  default = False, help='perform dynamic polarizability')
parser.add_argument('-omega','--dynpol_omega',              type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
parser.add_argument('-stapol','--stapol',                   type=bool,  default = False, help='perform static polarizability')

parser.add_argument('-sTDA','--sTDA',                       type=bool,  default = False, help='perform sTDA calculation')
parser.add_argument('-sTDDFT','--sTDDFT',                   type=bool,  default = False, help='perform sTDDFT calculation')
parser.add_argument('-TT','--Truncate_test',                type=bool,  default = False, help='test the wall time for different virtual truncation')

parser.add_argument('-TV','--truncate_virtual',             type=float, default = 0, help='the threshold to truncate virtual orbitals, in eV')

parser.add_argument('-o1', '--TDA_options',                 type=int,   default = [0], nargs='+', help='0-7')
parser.add_argument('-o2', '--TDDFT_options',               type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o3', '--dynpol_options',              type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o4', '--stapol_options',              type=int,   default = [0], nargs='+', help='0-3')

parser.add_argument('-t1',  '--TDA_tolerance',              type=float, default= 1e-5, help='residual norm conv for TDA')
parser.add_argument('-t2',  '--TDDFT_tolerance',            type=float, default= 1e-5, help='residual norm conv for TDDFT')
parser.add_argument('-t3',  '--dynpol_tolerance',           type=float, default= 1e-5, help='residual norm conv for dynamic polarizability')
parser.add_argument('-t4',  '--stapol_tolerance',           type=float, default= 1e-5, help='residual norm conv for static polarizability')

parser.add_argument('-max',  '--max',                       type=int,   default= 30,   help='max iterations')

parser.add_argument('-it1', '--TDA_initialTOL',             type=float, default= 1e-3, help='conv for sTDA inital guess')
parser.add_argument('-it2', '--TDDFT_initialTOL',           type=float, default= 1e-3, help='conv for sTDDFT inital guess')
parser.add_argument('-it3', '--dynpol_initprecTOL',         type=float, default= 1e-2, help='conv for s-dynamic polarizability inital guess and precond')
parser.add_argument('-it4', '--stapol_initprecTOL',         type=float, default= 1e-2, help='conv for s-static polarizability inital guess and precond')

parser.add_argument('-pt1', '--TDA_precondTOL',             type=float, default= 1e-2, help='conv for TDA preconditioner')
parser.add_argument('-pt2', '--TDDFT_precondTOL',           type=float, default= 1e-2, help='conv for TDDFT preconditioner')

parser.add_argument('-ei1', '--TDA_extrainitial',           type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
parser.add_argument('-ei2', '--TDDFT_extrainitial',         type=int,   default= 8,    help='number of extral TDDFT initial guess vectors, 0-8')
parser.add_argument('-ei3n','--TDDFT_extrainitial_3n',      type=bool,  default= False,help='number of extral TDDFT initial guess vectors, 3state')

parser.add_argument('-et', '--eigensolver_tol',             type=float, default= 1e-5, help='conv for new guess generator in new_ES')
parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')

parser.add_argument('-be', '--beta',                        type=float, default= [],    nargs='+', help='beta = 0.83')
parser.add_argument('-al', '--alpha',                       type=float, default= [],    nargs='+', help='alpha = 0.83')

args = parser.parse_args()
################################################


########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

# info = psutil.virtual_memory()
# print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

f = open(args.xyzfile)
atom_coordinates = f.readlines()
del atom_coordinates[:2]
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile == True:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'
    # to use the chk file as scf input


mf.conv_tol = 1e-10

print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
kernel_t = kernel_1 - kernel_0
print ('SCF Done after ', round(kernel_t, 4), 'seconds')

show_memory_info('after SCF')

#################################################################
# Collect everything needed from PySCF
Qstart = time.time()
Natm = mol.natm
mo_occ = mf.mo_occ
n_occ = len(np.where(mo_occ > 0)[0])
#mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
n_vir = len(np.where(mo_occ == 0)[0])
#################################################
# generate matrix vector multiplication function
td = tddft.TDA(mf)
TDA_vind, hdiag = td.gen_vind(mf)

TD = tddft.TDDFT(mf)
TDDFT_vind, Hdiag = TD.gen_vind(mf)

A_size = n_occ * n_vir

# return AV
def TDA_matrix_vector(V):
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1
#################################################

##################################################################################################
# create a function for dictionary of chemical hardness, by mappig two iteratable subject, list
# list of elements
elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', 'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb','Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
#list of chemical hardness, they are floats, containing elements 1-94, in Hartree
hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
HARDNESS = dict(zip(elements,hardness))
#function to return chemical hardness from dictionary HARDNESS
def Hardness(atom_id):
    atom = mol.atom_pure_symbol(atom_id)
    return HARDNESS[atom]

################################################################################
# This block is the function to produce orthonormalized coefficient matrix C
def matrix_power(S,a):
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    #X == S^a
    return X

def matrix_power2(S):
    s,ket = np.linalg.eigh(S)
    s_sqrt = s**0.5
    s_inv = 1/s_sqrt

    S1 = np.dot(ket*s_sqrt,ket.T)
    S2 = np.dot(ket*s_inv,ket.T)

    #S1 == S^1/2
    #S2 == S^-1/2
    return S1, S2

def orthonormalize(C):
    X = matrix_power(mf.get_ovlp(), 0.5)
    # S = mf.get_ovlp() #.get_ovlp() is basis overlap matrix
    # S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
    C = np.dot(X,C)
    return C

################################################################################
def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']# NA is for Hartree-Fork
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    DF_ax = dict(zip(hybride_F, hybride_paramt))
    #Zhao, Y. and Truhlar, D.G., 2006. Density functional for spectroscopy: no long-range self-interaction error, good performance for Rydberg and charge-transfer states, and better performance on average than B3LYP for ground states. The Journal of Physical Chemistry A, 110(49), pp.13126-13130.

    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]

    elif args.functional in hybride_F:
        beta1 = 0.2
        beta2 = 1.83
        alpha1 = 1.42
        alpha2 = 0.48

        a_x = DF_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)
    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

# creat \eta matrix

def gen_gammaJK():
    Natm = mol.natm
    a = [Hardness(atom_id) for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2

    #Inter-particle distance array
    # unit == ’Bohr’, Its value is 5.29177210903(80)×10^(−11) m
    R = pyscf.gto.mole.inter_distance(mol, coords=None)
    # creat GammaK and GammaK matrix
    GammaJ = (R**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

GammaJ, GammaK = gen_gammaJK()

def generateQ():
    N_bf = len(mo_occ)
    C = mf.mo_coeff
    # mf.mo_coeff is the coefficient matrix
    C = orthonormalize(C)
    # C is orthonormalized coefficient matrix, N_bf * N_bf
    # np.dot(C.T,C) is a an identity matrix
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    #N_bf is number Atomic orbitals = n_occ+n_vir
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

q_tensors = generateQ()

''' if no truncation, max_vir = n_vir and n_occ + max_vir = N_bf '''
print('hdiag', hdiag.shape)
delta_diag_A = hdiag.reshape(n_occ, n_vir)

def gen_maxvir(tol_eV = args.truncate_virtual):
    if tol_eV != 0:
        homo_vir = delta_diag_A[-1,:].tolist()
        # print(delta_diag_A[-1,:]*27.211386245988)
        tol = tol_eV/27.211386245988
        for i in range(len(homo_vir)):
            if homo_vir[i] >= tol:
                max_vir = i
                break
            else:
                max_vir = n_vir
    else:
        max_vir = n_vir
    return max_vir

max_vir = gen_maxvir()
print('n_occ = ', n_occ)
print('n_vir = ', n_vir)
print('max_vir = ', max_vir)

A_reduced_size = n_occ * max_vir

def gen_QJK(max_vir=max_vir):

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)


    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()
# pre-calculate and store the Q-Gamma rank 3 tensor
Qend = time.time()

Q_time = Qend - Qstart
print('Q-Gamma tensors building time =', round(Q_time, 4))
################################################################################

show_memory_info('after Q matrix')


################################################################################
# This block is to define on-the-fly two electron intergeral (pq|rs)
# A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v

# iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
# ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)

max_vir_hdiag = delta_diag_A[:,:max_vir]

def gen_iajb_ijab_ibja_delta_fly(max_vir=max_vir, \
                                q_ij=q_ij, \
                                q_ab=q_ab, \
                                q_ia=q_ia , \
                                GK_q_jb=GK_q_jb, \
                                GJ_q_ab=GJ_q_ab):

    def iajb_fly(V):
        start = time.time()
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        end = time.time()
        # print('iajb =', round(end - start,4))
        return iajb_V


    def ijab_fly(V):
        start = time.time()
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        end = time.time()
        # print('ijab =', round(end - start,4))
        return ijab_V

    def ibja_fly(V):
        start = time.time()
        # the Forck exchange energy in B matrix
        ''' (ib|ja) '''
        # GK_q_jb_V = einsum("Aja,jbm->Abam", GK_q_jb, V)
        # ibja_V = einsum("Aib,Abam->iam", q_ia, GK_q_jb_V)
        # [ 6.46636595  8.18031516  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]

        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        #[ 6.46636595  8.18031515  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]
        end = time.time()
        # print('ibja =', round(end - start,4))
        return ibja_V

    def delta_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_diag_A, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir=max_vir, \
                            iajb_fly = iajb_fly, \
                            ijab_fly = ijab_fly, \
                            ibja_fly = ibja_fly, \
                            delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        # sTDA_A * V
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''''return AX+BY and AY+BX'''''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        '''sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        '''sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)'''

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        ''' return (A+B)X '''
        ''' sTDA_A = delta_fly(V) + 4*iajb_fly(V) \
                    - ijab_fly(V) - a_x*ibja_fly(V)'''
        X = X.reshape(n_occ, max_vir, -1)

        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)

        U = U.reshape(n_occ*max_vir, -1)
        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

################################################################################

################################################################################
# orthonormalization of guess_vectors
def Gram_Schmidt_bvec(A, bvec):
    ''' orthonormalize vector b against all A vectors'''
    ''' b = b - A*(A.T*b)'''
    if A.shape[1] != 0:
        # suppose A is orthonormalized
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)

    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    # V is a vectors holder
    # count is the amount of vectors that already sit in the holder
    nvec = np.shape(vecs)[1]
    # amount of new vectors intended to fill in the V
    # count will be final amount of vectors in V
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize

        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count

    return V, new_count


def S_symmetry_orthogonal(x,y):

    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    # print('x.Ty', np.dot(new_x.T,new_y))
    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A


################################################################################
# define the orthonormality of a matrix A as the norm of (A.T*A - I)
def check_orthonormal(A):
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c
################################################################################

################################################################################
def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    # put X_new into V, and Y_new into W
    # m is the amount of vectors that already on V or W
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]
    # amount of new vectors intended to fill in the V_holder and W_holder
    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):

        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)

        # x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m
################################################################################



################################################################################
def solve_AX_Xla_B(A, omega, Q):
    ''' AX - XΩ  = Q '''

    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)

    X *= Qnorm
    return X
################################################################################
def TDA_A_diag_initial_guess(m, V, hdiag = hdiag):
    # m is the amount of initial guesses
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V

def sTDA_initial_guess(m, V):
    sTDA_A_eigenkets = Davidson0(m)
    # print('sTDA_A_eigenkets', sTDA_A_eigenkets.shape)
    #diagonalize sTDA_A amtrix
    V[:, :m] = sTDA_A_eigenkets[:,:m]
    return V
################################################################################

################################################################################
def TDA_A_diag_preconditioner(arg1, arg2, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None, arg8=None, hdiag = hdiag):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    # preconditioners for each corresponding residual
    residual = arg1
    sub_eigenvalue = arg2
    current_dic = arg3

    k = np.shape(residual)[1]
    t = 1e-14

    # print('hdiag in preconditioner', hdiag.reshape(-1,1).shape)
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    D = np.where( abs(D) < t, np.sign(D)*t, D) # force all values not in domain (-t, t)

    new_guess = residual/D

    return new_guess, current_dic
################################################################################


################################################################################
# sTDA preconditioner
def sTDA_preconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """ (sTDA_A - λ*I)^-1 B = X """
    """ AX - Xλ = B """
    """ columns in B are residuals (in Davidson's loop) to be preconditioned, """
    residuals = arg1
    eigen_lambda = arg2
    current_dic = arg3

    precondition_start = time.time()

    # N_rows = np.shape(B)[0]
    A_reduced_size = n_occ*max_vir
    residuals = residuals.reshape(n_occ,n_vir,-1)
    B = residuals[:,:max_vir,:]


    B = B.reshape(A_reduced_size,-1)
    # B = B.reshape(A_reduced_size, -1)
    N_vectors = B.shape[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = args.TDA_precondTOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors

    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    hdiag_m_lambda = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    hdiag_m_lambda = np.where( abs(hdiag_m_lambda) < t, np.sign(hdiag_m_lambda)*t, hdiag_m_lambda) # <t: returns np.sign(D)*t; else: D

    hdiag_m_lambda = hdiag_m_lambda.reshape(n_occ, n_vir, -1)
    D = hdiag_m_lambda[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count

    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0
    ####################################################################################
    for i in range(max):
        substart = time.time()
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        subend = time.time()
        subgencost += subend - substart
        #project sTDA_A matrix and vector B into subspace
        sub_A = symmetrize(sub_A)
        # size of subspace
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append({'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        GSstart = time.time()
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart


        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________')
        print('sTDA preconditioning failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('sTDA Preconditioning Done after ', i, 'steps; ', \
                round(precondition_time, 4), 'seconds')
        print('subgencost',round(subgencost,4),round(subgencost/precondition_time *100, 2),"%")
        print('mvcost',round(mvcost,4),round(mvcost/precondition_time *100, 2),"%")
        print('GScost', round(GScost,4), round(GScost/precondition_time *100, 2),"%")
        print('subcost', round(subcost,4), round(subcost/precondition_time *100, 2),"%")
    full_guess *= bnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = B2'''
        B2 = residuals[:,max_vir:,:]
        B2 = B2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = hdiag_m_lambda[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (B2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)
    return U, current_dic
################################################################################

################################################################################
# K_inv # exacty the same function with sTDA_preconditioner, just no dic
# used in Jacobi_precodnitioner
def K_inv(B, eigen_lambda):
    # to solve K^(-1)y and K^(-1)u
    # K = A-λ*I
    # (sTDA_A - eigen_lambda*I)^-1 B = X
    # AX - Xλ = B
    # columns in B are residuals or current guess
    precondition_start = time.time()

    N_rows = np.shape(B)[0]
    B = B.reshape(N_rows, -1)
    N_vectors = np.shape(B)[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = 1e-2    # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((N_rows, (max+1)*N_vectors))
    W = np.zeros_like(V)
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors
    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    D = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    D= np.where( abs(D) < t, np.sign(D)*t, D) # <t: returns np.sign(D)*t; else: D
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count
    ############################################################################
    for i in range(0, max):
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        #project sTDA_A matrix and vector B into subspace
        # size of subspace
        m = np.shape(sub_A)[0]
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ K inverse Failed Due to Iteration Limit _________________')
        print('K inverse  failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('K inverse Done after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
    return full_guess*bnorm
################################################################################

################################################################################
def Jacobi_preconditioner(arg1, arg2, arg3, arg4, arg5=None, arg6=None, arg7=None, arg8=None):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """    (1-uu*)(A-λ*I)(1-uu*)t = -B"""
    """    B is residual, we want to solve t """
    """    z approximates t """
    """    z = (A-λ*I)^(-1)*(-B) + α(A-λ*I)^(-1) * u"""
    """    where α = [u*(A-λ*I)^(-1)y]/[u*(A-λ*I)^(-1)u] """
    """    first is to solve (A-λ*I)^(-1)y and (A-λ*I)^(-1)u """

    B = arg1
    eigen_lambda = arg2
    current_dic = arg3
    current_guess = arg4

    u = current_guess
    K_inv_y = K_inv(-B, eigen_lambda)
    K_inv_u = K_inv(current_guess, eigen_lambda)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d

    z = K_inv_y -  Alpha*K_inv_u
    return z, current_dic
################################################################################

################################################################################
# original simple Davidson, to solve eigenvalues and eigenkets of sTDA_A matrix
def Davidson0(k):
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    tol = args.TDA_initialTOL # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    V = TDA_A_diag_initial_guess(m, V, hdiag = max_vir_hdiag)
    W[:, :m] = sTDA_mv(V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ############################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index], hdiag = max_vir_hdiag)
        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        m = new_m
    ############################################################################


    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 4), 'seconds' )
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*27.211386245988)

    # U = np.zeros((n_occ * n_vir, k))
    # U[:n_occ * max_vir,:] = full_guess

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    return U
################################################################################


################################################################################
def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    ''' [ a b ] x - [ σ   π] x  Ω = p '''
    ''' [ b a ] y   [-π  -σ] y    = q '''

    ##############################
    ''' normalize the RHS '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)
    # print('pqnorm', pqnorm)
    p /= pqnorm
    q /= pqnorm
    ##############################
    d = abs(np.diag(sigma))
    # d is an one-dimension matrix
    d_mh = d**(-0.5)
    # d_h = d**0.5

    ''' LU = d^−1/2 (σ − π) d^−1/2 '''
    ''' A = PLU '''
    ''' P is identity matrix only when A is diagonally dominant '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True) # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T '''
    ''' M = G^T (a ̃+ b ̃) G '''
    a_p_b_tilde = np.linalg.multi_dot([L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde) + np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    ''' (x ̃+ y ̃) = GZ '''
    ''' x + y = d^-1/2 L^-T (x ̃+ y ̃) '''
    ''' x - y = d^-1/2 U^-1 (x ̃- y ̃) '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)
    # x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z])
    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    x *= pqnorm
    y *= pqnorm

    return x, y
################################################################################

################################################################################
def Qx(V, x):
    """ Qx = (1 - V*V.T)*x = x - V*V.T*x  """
    return x - einsum('ij, jk, kl -> il', V, V.T, x)
################################################################################

################################################################################
def on_the_fly_Hx(W, V, sub_A, x):
    """ on-the-fly compute H'x """
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q"""
    """ K approximates H, here K = sTDA_A"""
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)"""
    """ H′x ≡ a + b − c + d """
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx
################################################################################

################################################################################
# to diagonalize the H'
def new_ES(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    current_dic = arg3
    return_index = arg5
    W_H = arg6
    V_H = arg7
    sub_A_H = arg8

    """ new eigenvalue solver """
    """ the traditional Davidson to diagonalize the H' matrix """
    """ W_H, V_H, sub_A_H are from the exact H """

    sTDA_D_start = time.time()
    tol = args.eigensolver_tol # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    k = args.nstates
    m = min([k+8, 2*k, A_size])
    # m is the amount of initial guesses
    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    # sTDA as initial guess
    V = sTDA_initial_guess(m, V)

    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ###########################################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
#             print(sub_eigenvalue[:k]*27.211386245988)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
#             print(r_norms)
        # largest residual norm
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals

        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index])
        # Y doesn't matter

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
#             print(check_orthonormal(V[:,:new_m]))
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m
    ###########################################################################################
    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('H_app diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 2), 'seconds' )
#         print('H_app', sub_eigenvalue[:k]*27.211386245988)

    return full_guess[:,return_index], current_dic
################################################################################

################################################################################
# a dictionary for TDA initial guess and precodnitioner
TDA_i_key = ['sTDA', 'Adiag']
TDA_i_func = [sTDA_initial_guess, TDA_A_diag_initial_guess]
TDA_i_lib = dict(zip(TDA_i_key, TDA_i_func))

TDA_p_key = ['sTDA', 'Adiag', 'Jacobi', 'new_ES']
TDA_p_func = [sTDA_preconditioner, TDA_A_diag_preconditioner, \
Jacobi_preconditioner, new_ES]
TDA_p_lib = dict(zip(TDA_p_key, TDA_p_func))
################################################################################

################################################################################
#Davidson frame, where we can choose different initial guess and preconditioner
def Davidson(k, tol, init,prec):
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)
    max = args.max
    # Maximum number of iterations

    m = min([k + args.TDA_extrainitial, 2*k, A_size])
    # amount of initila guess
    #################################################
    # generate initial guess

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    init_start = time.time()
    V = initial_guess(m, V)
    init_end = time.time()
    init_time = init_end - init_start

    print('Intial guess time:', round(init_time, 4), 'seconds')
    #generate initial guess and put in holders V and W
    # m is size of subspace

    # W = Av, create transformed guess vectors
    W[:, :m] = TDA_matrix_vector(V[:, :m])

    # time cost for preconditioning
    Pcost = 0
    ###########################################################################################
    for ii in range(max):
        print('Iteration ', ii)

        # sub_A is subspace A matrix
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # print(sub_eigenvalue[:k])
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        # largest residual norm
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm', max_norm)
        if max_norm < tol or ii == (max-1):
            print('Davidson procedure aborted')
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        ########################################
        # generate new guess
        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                    arg1 = residual[:,index],
                                    arg2 = sub_eigenvalue[:k][index],
                                    arg3 = current_dic,
                                    arg4 = full_guess[:,index],
                                    arg5 = index,
                                    arg6 = W[:,:m],
                                    arg7 = V[:,:m],
                                    arg8 = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('m,new_m',m,new_m)
        W[:, m:new_m] = TDA_matrix_vector(V[:, m:new_m])
        print('new generated guesses:', new_m - m)
        m = new_m

    energies = sub_eigenvalue[:k]*27.211386245988


    D_end = time.time()
    Dcost = D_end - D_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDA_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDA_precondTOL
    Davidson_dic['total time'] = Dcost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sub_A)[0]
    Davidson_dic['excitation energy(eV)'] = energies.tolist()
    # Davidson_dic['semiempirical_difference'] = difference
    # Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    ###########################################################################################
    if ii == max-1:
        print('============ Davidson Failed Due to Iteration Limit ==============')
        print('Davidson failed after ', round(Dcost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Davidson done after ', round(Dcost, 4), 'seconds')
        print('Total steps =', ii+1)
        print('Final subspace shape = ', np.shape(sub_A))
        print('Preconditioning time:', round(Pcost, 4), round(Pcost/Dcost*100,2), '%')
    return energies, full_guess, Davidson_dic
################################################################################



def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder = TDA_A_diag_initial_guess(new_m, V_holder, hdiag = hdiag)
    energies = hdiag[Dsort][:new_m]*27.211386245988
    return V_holder, W_holder, new_m, energies, V_holder[:,:new_m], W_holder[:,:new_m]

################################################################################
def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag = hdiag):
    # preconditioners for each corresponding residual
    hdiag = hdiag.reshape(-1,1)
    # print('hdiag', hdiag.shape)
    k = R_x.shape[1]
#     print('omega.shape',omega.shape)
    t = 1e-14

    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    # force all values not in domain (-t, t)
    D_y_inv = D_y**-1

#     print('R_x.shape, D_x.shape',R_x.shape, D_x.shape)
    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new
################################################################################

################################################################################
def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  w = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    # print(d)
    # d is an one-dimension matrix
    d_mh = d**(-0.5)


    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    M = np.linalg.multi_dot([G.T, L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    # print(omega*27.211386245988)
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([L_inv.T, G, Z])     * (np.array(omega)**-0.5).reshape(1,-1)
    x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z]) * (np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    # norm = np.linalg.multi_dot([x.T, sigma, x])
    # norm += np.linalg.multi_dot([x.T, pi, y])
    # norm -= np.linalg.multi_dot([y.T, pi, x])
    # norm -= np.linalg.multi_dot([y.T, sigma, y])
    # print(norm)

    return omega, x, y
################################################################################

################################################################################
def sTDDFT_eigen_solver(k):
    ''' [ A' B' ] x - [ σ   π] x  w = 0'''
    ''' [ B' A' ] y   [-π  -σ] y    = 0'''
    tol=args.TDDFT_initialTOL
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    # new_m = min([3*k, A_size])
    # print('initial new_m = ', new_m)
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)
#     print('initial guess done')
    ##############################

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        ###############################################################
        # print('ii = ', ii)
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        # show_memory_info('before sTDDFT_mv')
        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start
        # show_memory_info('after sTDDFT_mv')

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)
        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        ########################################################################
        # preconditioning step
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTD-DFT Failed Due to Iteration Limit==================')
        print('sTD-DFT failed after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Converged after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('final subspace', sigma.shape)
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_cost * 100,2),'%')

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*27.211386245988
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y
################################################################################

################################################################################
def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    # energies, X_new, Y_new = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup
################################################################################

################################################################################
def sTDDFT_preconditioner(Rx, Ry, omega):
    ''' [ A B ] - [1  0]X  w = P'''
    ''' [ B A ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''
    tol = args.TDDFT_precondTOL
    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    # print('pqnorm', pqnorm)
    P /= pqnorm
    Q /= pqnorm

    ##############################

    ##############################
    # setting up initial guess
    X_new, Y_new  = TDDFT_A_diag_preconditioner(P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = \
            VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start
    print('new_m =', new_m)
    print('diagonal initial guess done')
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    symmetrycost = 0
    for ii in range(max):
#         print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        symmetrystart = time.time()
        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
        # solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                                  a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        # U1x = np.dot(U1,x)
        # U2x = np.dot(U2,x)
        # Vx = np.dot(V,x)
        # Wx = np.dot(W,x)
        #
        # U1y = np.dot(U1,y)
        # U2y = np.dot(U2,y)
        # Vy = np.dot(V,y)
        # Wy = np.dot(W,y)
        #
        # X_full = Vx + Wy
        # Y_full = Wx + Vy
        #
        # R_x = U1x + U2y - X_full*omega - P
        # R_y = U2x + U1y + Y_full*omega - Q

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################

        ########################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index], \
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_precond_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit==========')
        print('sTDDFT_precond failed after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT_precond Converged after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sTDDFT_precond_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_precond_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_precond_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_precond_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_precond_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_precond_cost * 100,2),'%')
        print('symmetrycost', round(symmetrycost,4), round(symmetrycost/sTDDFT_precond_cost * 100,2),'%')
        print('final subspace', sigma.shape)

    show_memory_info('preconditioner at end')
    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_diag_A[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)
    print(X.shape, Y.shape)
    return X, Y
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
TDDFT_i_key = ['sTDDFT', 'Adiag']
TDDFT_i_func = [sTDDFT_initial_guess, TDDFT_A_diag_initial_guess]
TDDFT_i_lib = dict(zip(TDDFT_i_key, TDDFT_i_func))

TDDFT_p_key = ['sTDDFT', 'Adiag']
TDDFT_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
TDDFT_p_lib = dict(zip(TDDFT_p_key, TDDFT_p_func))
################################################################################

################################################################################
def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.TDDFT_tolerance):

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    if args.TDDFT_extrainitial_3n == True:
        new_m = min([k + args.TDDFT_extrainitial, 3*k, A_size])
    else:
        new_m = min([k + args.TDDFT_extrainitial, 2*k, A_size])

    # new_m = k

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    ##############################
    # setting up initial guess
    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig = initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')
    ##############################
    Pcost = 0
    VWGScost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '____________________||||')
        show_memory_info('beginning of step '+ str(ii))
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        print('Maximum residual norm: ', np.max(r_norms))
        # print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        P_start = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        VWGScost_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        VWGScost_end = time.time()
        VWGScost += VWGScost_end - VWGScost_start
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################



    omega *= 27.211386245988

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['initial_energies'] = initial_energies
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDDFT_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDDFT_precondTOL
    Davidson_dic['total time'] = TDDFT_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['excitation energy(eV)'] = omega.tolist()
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    if ii == (max -1):
        print('============================ TDDFT Failed Due to Iteration Limit============================')
        print('TDDFT failed after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('================================== TDDFT Calculation Done ==================================')
        print('TDDFT Converged after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('Initial guess',init)
        print('preconditioner', prec)
        print('Final subspace ', sigma.shape)
        print('preconditioning cost', round(Pcost,4), round(Pcost/TDDFT_cost * 100, 2), "%")
        print('VWGScost',round(VWGScost,4))
        # print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))

    # need normalize
    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic
# end of TDDFT module
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
dynpol_i_key = ['sTDDFT', 'Adiag']
dynpol_i_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_i_lib = dict(zip(dynpol_i_key, dynpol_i_func))

dynpol_p_key = ['sTDDFT', 'Adiag']
dynpol_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_p_lib = dict(zip(dynpol_p_key, dynpol_p_func))
################################################################################

################################################################################
def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P
################################################################################

################################################################################
def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        # 0,1,2   3,4,5   6,7,8
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]
        # convert nm to Hartree

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P
    #P, Q, omega

    max = args.max
    tol = args.dynpol_tolerance

    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P) + np.dot(W.T, Q)
        q = np.dot(W.T, P) + np.dot(V.T, Q)
        subgenend = time.time()
        subgencost += subgenend - subgenstart
        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R_x = U1x + U2y - (Vx + Wy)omega - P
#         R_y = U2x + U1y + (Wx + Vy)omega - Q
#         R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
#         R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega + P
        R_y = U2x + U1y + Y_full*omega + Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)
        print('maximum residual norm: ', np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        Pend = time.time()
        Pcost += Pend - Pstart
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('============================ Dynamic polarizability Failed Due to Iteration Limit============================')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

     # np.dot(-P.T, X_full) + np.dot(-P.T, Y_full)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)


    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.dynpol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.dynpol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.dynpol_initprecTOL
    Davidson_dic['total time'] = dp_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    Davidson_dic['Dynamic polarizability tensor alpha'] = [i.tolist() for i in alpha_omega]
    Davidson_dic['Dynamic polarizability tensor alpha initial guess '] = [i.tolist() for i in alpha_omega_ig]
    Davidson_dic['overlap'] = overlap
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    show_memory_info('Total Dynamic polarizability')

    return alpha_omega, Davidson_dic
################################################################################

###############################################################################
def stapol_A_diag_initprec(P):
    d = hdiag.reshape(-1,1)
    return -P/d
###############################################################################

###############################################################################
def stapol_sTDDFT_initprec(P):
    '''(A* + B*)X = -P'''
    '''residual = (A* + B*)X + P'''
    '''X_ig = -P/d'''
    '''X_new = (residual - P)/D = Ux/D'''
    ssp_start = time.time()
    max = 30
    tol = args.stapol_initprecTOL
    m = 0
    npvec = P.shape[1]

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]
    pnorm = np.linalg.norm(P_origin, axis=0, keepdims = True)
    # print('pnorm', pnorm)
    P /= pnorm

    # print('vectors to be preconditioned', npvec)
    V_holder = np.zeros((A_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

    X_ig = stapol_A_diag_initprec(P)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    # V_holder[:,0] = X_new[:,0]/np.linalg.norm(X_new[:,0])
    # if npvec >= 2:
    #     V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 1, X_new[:, 1:])
    # else:
    #     new_m = 1
    # print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        # creating the subspace
        MV_start = time.time()
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ###############################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = stapol_A_diag_initprec(-residual[:,index])

        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    X_full = np.dot(V,x)
    # alpha = np.dot(X_full.T, P)*-4

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('============================ sTDDFT Static polarizability Failed Due to Iteration Limit============================')
        print('sTDDFT Static polarizability failed after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Static polarizability Converged after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        # print('initial_cost', round(initial_cost,4), round(initial_cost/ssp_cost * 100,2),'%')
        # print('Pcost', round(Pcost,4), round(Pcost/ssp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/ssp_cost * 100,2),'%')
        # print('GScost', round(GScost,4), round(GScost/ssp_cost * 100,2),'%')
        # print('subcost', round(subcost,4), round(subcost/ssp_cost * 100,2),'%')
        # print('subgencost', round(subgencost,4), round(subgencost/ssp_cost * 100,2),'%')

    X_full *= pnorm
    return X_full
################################################################################

################################################################################
# a dictionary for static_polarizability initial guess and precodnitioner
stapol_i_key = ['sTDDFT', 'Adiag']
stapol_i_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_i_lib = dict(zip(stapol_i_key, stapol_i_func))

stapol_p_key = ['sTDDFT', 'Adiag']
stapol_p_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_p_lib = dict(zip(stapol_p_key, stapol_p_func))
################################################################################

################################################################################
# Static polarizability
def static_polarizability(init, prec):
    '''(A+B)X = -P'''
    '''residual = (A+B)X + P'''
    '''X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    # pnorm is constant
    print('pnorm', pnorm)

    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.stapol_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

#     X_new = -P/d3
    X_ig = initial_guess(P)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ########################################################################
        # creating the subspace

        MV_start = time.time()
        U_holder[:, m:new_m] = static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # print('check_orthonormal(V)',check_orthonormal(V))
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()
        subgencost += subgenend - subgenstart

        # print('a_p_b.shape', a_p_b.shape)
        ########################################################################

        ########################################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        # print('x.shape', x.shape)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ########################################################################

        ########################################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index])
        # X_new = X_new/np.linalg.norm(X_new, axis=0)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    print('V.shape', V.shape)
    X_full = np.dot(V,x)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start



    if ii == (max -1):
        print('============================ Static polarizability Failed Due to Iteration Limit============================')
        print('Static polarizability failed after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Static polarizability Converged after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sp_cost * 100,2),'%')

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.stapol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.stapol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.stapol_initprecTOL
    Davidson_dic['total time'] = sp_cost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(a_p_b)[0]
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    return tensor_alpha, Davidson_dic
################################################################################

TDA_combo = [            # option
['sTDA','sTDA'],     # 0
['Adiag','Adiag'],   # 1
['Adiag','sTDA'],    # 2
['sTDA','Adiag'],    # 3
['sTDA','Jacobi'],   # 4
['Adiag','Jacobi'],  # 5
['Adiag','new_ES'],  # 6
['sTDA','new_ES']]   # 7

TDDFT_combo = [         # option
['sTDDFT','sTDDFT'],     # 0
['Adiag','Adiag'],       # 1
['Adiag','sTDDFT'],      # 2
['sTDDFT','Adiag']]      # 3

dynpol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

stapol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

if args.TDA == True:
    for option in args.TDA_options:
        init, prec = TDA_combo[option]
        print('-------------------------------------------------------------------')
        print('|---------------   In-house Developed Davidson Starts   -----------|')
        print('Residual conv =', args.TDA_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, eigenkets, Davidson_dic = Davidson(args.nstates, args.TDA_tolerance, init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Davidson time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDA_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Davidson Done   -----------|')

if args.TDDFT == True:
    for option in args.TDDFT_options:
        init, prec = TDDFT_combo[option]
        print('----------------------------------------------------------------------------')
        print('|---------------   In-house Developed TDDFT Eigensolver Starts   -----------|')
        print('Residual conv =', args.TDDFT_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, X, Y, Davidson_dic = TDDFT_eigen_solver(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house TDDFT Eigensolver time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDDFT_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed TDDFT Eigensolver Done   -----------|')

if args.dynpol == True:
    args.TDDFT_precondTOL = args.dynpol_initprecTOL
    print('args.TDDFT_precondTOL', args.TDDFT_precondTOL)
    for option in args.dynpol_options:
        init,prec = dynpol_combo[option]
        print('---------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Dynamic Polarizability Starts   -----------|')
        print('Residual conv =', args.dynpol_tolerance)
        print('Perturbation wavelength omega (nm) =', args.dynpol_omega)

        total_start = time.time()
        alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Dynamic Polarizability time:', round(total_time, 4), 'seconds')
        print('Dynamic polarizability tensor alpha')
        for i in range(len(args.dynpol_omega)):
            print(args.dynpol_omega[i],'nm')
            print(alpha_omega[i])

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Dynamic_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Dynamic Polarizability Done   -----------|')

if args.stapol == True:
    for option in args.stapol_options:
        init,prec = stapol_combo[option]
        print('--------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Static Polarizability Starts   -----------|')
        print('Residual conv =', args.stapol_tolerance)

        total_start = time.time()
        tensor_alpha, Davidson_dic = static_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Static Polarizability time:', round(total_time, 4), 'seconds')
        print('Static polarizability tensor alpha')
        print(tensor_alpha)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Static_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Static Polarizability Done   -----------|')


if args.sTDA == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDA   --------------------|')
    print('Convergence =', args.TDA_initialTOL)

    total_start = time.time()
    X = Davidson0(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDA time:', round(total_time, 4), 'seconds')
    print('|---------------------------   In-house Developed sTDA done  ----------------|')

if args.sTDDFT == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDDFT   --------------------|')
    print('Convergence =', args.TDDFT_initialTOL)

    total_start = time.time()
    energies, X, Y = sTDDFT_eigen_solver(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDDFT time:', round(total_time, 4), 'seconds')

    print('|---------------------------   In-house Developed sTDDFT done  ----------------|')


if args.Truncate_test == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   Test the Truncation efficiency  ----------------|')

    n_state = 40
    X = np.random.rand(A_size,n_state)
    Y = np.random.rand(A_size,n_state)
    print('n_vir = ', n_vir)
    print('A_size =', A_size)
    print('n_state =', n_state)
    print("virtual tuning: -------------------------------------------- ")
    print("{:<8} {:<8} {:<8} {:<8}".format(\
            'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
    for vir_trunc in [40, 50, 60, 70, 10000000]:
        del max_vir, sTDA_mv, sTDDFT_mv
        max_vir = gen_maxvir(tol_eV = vir_trunc)
        q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
        # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
        iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                        max_vir=max_vir, \
                                        q_ij = q_ij, \
                                        q_ab = q_ab, \
                                        q_ia = q_ia , \
                                        GK_q_jb = GK_q_jb, \
                                        GJ_q_ab = GJ_q_ab)


        sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                        max_vir=max_vir, \
                                        iajb_fly = iajb_fly, \
                                        ijab_fly = ijab_fly, \
                                        ibja_fly = ibja_fly, \
                                        delta_fly = delta_fly)


        sTDA_start = time.time()
        sTDA_X = sTDA_mv(X)
        sTDA_end = time.time()
        sTDA_mv_time = sTDA_end - sTDA_start

        sTDDFT_start = time.time()
        sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
        sTDDFT_end = time.time()
        sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

        print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))

    print('|-------------------------------------   Test done  --------------------------|')

if args.pytd == True:
    print('-----------------------------------------------------------------')
    print('|----------------------    PySCF TTDDFT    ----------------------|')
    TD.nstates = args.nstates
    TD.conv_tol = 1e-10
    start = time.time()
    TD.kernel()
    end = time.time()
    pyscf_time = end-start
    print('Built-in TDDFT time:', round(pyscf_time, 4), 'seconds')
    print('|---------------------------------------------------------------|')

if args.verbose > 3:
    for key in vars(args):
        print(key,'=', vars(args)[key])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt181', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Wed Jul  7 16:46:30 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 60000 
[INPUT] num. atoms = 83
[INPUT] num. electrons = 314
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O     -4.902982297871  -2.855278903159  -1.086968075212 AA   -9.265293736566  -5.395695136220  -2.054071968297 Bohr
[INPUT]  2 O     -3.688663386284  -1.477121544840  -2.418415966091 AA   -6.970563565787  -2.791355172442  -4.570143831187 Bohr
[INPUT]  3 O     -1.394176334558   4.761588697686   1.704485719201 AA   -2.634611441664   8.998098556450   3.221011192522 Bohr
[INPUT]  4 O     -8.178807348645   0.263641637218  -0.215428946742 AA  -15.455705914520   0.498210489374  -0.407101708646 Bohr
[INPUT]  5 O     -7.079585965842  -1.285438625874  -1.412974604011 AA  -13.378478550756  -2.429126952838  -2.670135022547 Bohr
[INPUT]  6 O      3.888205431183  -1.459766783793   2.943114831397 AA    7.347643380983  -2.758559427107   5.561680984485 Bohr
[INPUT]  7 N     -1.927747504618  -0.917666646182  -0.396980720132 AA   -3.642914821042  -1.734138634932  -0.750184837782 Bohr
[INPUT]  8 N      0.293232189221   1.316192072677  -0.916548089970 AA    0.554128528535   2.487242544684  -1.732024870036 Bohr
[INPUT]  9 N      3.298055179808  -0.302921998661  -1.876403768234 AA    6.232421033541  -0.572439614575  -3.545889221063 Bohr
[INPUT] 10 N      4.084716837660  -2.953633626964   1.159431702686 AA    7.718996119577  -5.581558627267   2.191008378215 Bohr
[INPUT] 11 C     -3.637515483235  -0.451871354593   1.215919215302 AA   -6.873908037180  -0.853913103717   2.297754306516 Bohr
[INPUT] 12 C     -3.381953778562  -1.981464812013   1.140446778871 AA   -6.390966407421  -3.744425820168   2.155132071710 Bohr
[INPUT] 13 C     -2.766420098079  -2.119454707542  -0.272293356155 AA   -5.227776330861  -4.005188930674  -0.514559868671 Bohr
[INPUT] 14 C     -2.410500312210   0.080194483233   0.498300044770 AA   -4.555185413256   0.151545610011   0.941650612473 Bohr
[INPUT] 15 C     -4.899425631273   0.035553986968   0.441486510476 AA   -9.258572610781   0.067187298006   0.834288592490 Bohr
[INPUT] 16 C     -1.827549944049   1.300954659768   0.627898307335 AA   -3.453568873217   2.458448007438   1.186555834940 Bohr
[INPUT] 17 C     -2.419208660630  -2.451388525113   2.238458604103 AA   -4.571641806766  -4.632452937365   4.230073702930 Bohr
[INPUT] 18 C     -0.649931124786   1.790519358733  -0.048238633441 AA   -1.228191825676   3.383591208736  -0.091157805826 Bohr
[INPUT] 19 C     -2.292648487686   2.466118054298   1.497135651530 AA   -4.332477741625   4.660287713468   2.829176352714 Bohr
[INPUT] 20 C     -0.331243813584   3.121124005606   0.250945437449 AA   -0.625960088130   5.898069571401   0.474218148989 Bohr
[INPUT] 21 C     -6.228430267156  -0.683555323746   0.789920655216 AA  -11.770027390877  -1.291732352867   1.492733698494 Bohr
[INPUT] 22 C     -3.820639700954  -2.123031974928  -1.392452232982 AA   -7.219962655444  -4.011948986308  -2.631353361875 Bohr
[INPUT] 23 C     -1.309502418463   3.648407541276   1.200334557011 AA   -2.474600930351   6.894491043809   2.268303570602 Bohr
[INPUT] 24 C      0.865694011106   3.472427679177  -0.460975099612 AA    1.635924588666   6.561937301004  -0.871116688510 Bohr
[INPUT] 25 C      1.233248279023   2.327805446548  -1.170681190211 AA    2.330501490944   4.398914765246  -2.212266828678 Bohr
[INPUT] 26 C      2.412431399030   2.057998063630  -2.066955948286 AA    4.558834638467   3.889052705147  -3.905980653801 Bohr
[INPUT] 27 C      3.369864412638   1.029728586476  -1.519880226805 AA    6.368120816803   1.945905011075  -2.872157370804 Bohr
[INPUT] 28 C      1.561673518386   4.801328571107  -0.425946903229 AA    2.951135245736   9.073196033442  -0.804922990710 Bohr
[INPUT] 29 C     -7.182527400278  -0.627189478083  -0.382657927909 AA  -13.573009668709  -1.185216341785  -0.723118683141 Bohr
[INPUT] 30 C      4.403303080261   1.156909629162  -0.593595216588 AA    8.321036865147   2.186242349989  -1.121732388203 Bohr
[INPUT] 31 C      4.271526643254  -1.037607080481  -1.220428512266 AA    8.072015489532  -1.960793207019  -2.306275642793 Bohr
[INPUT] 32 C      4.983942789066  -0.147762226696  -0.412060317861 AA    9.418286891835  -0.279230140011  -0.778681147559 Bohr
[INPUT] 33 C      4.263884523999  -2.529354376014  -1.289041857654 AA    8.057573977130  -4.779787042636  -2.435936074067 Bohr
[INPUT] 34 C      3.431546615863  -3.171705813469  -0.117670625560 AA    6.484683287659  -5.993655335148  -0.222365255214 Bohr
[INPUT] 35 C      4.855430358009   2.436802807264   0.060682231908 AA    9.175433593537   4.604889925300   0.114672798934 Bohr
[INPUT] 36 C      2.103109926067  -2.457726470358   0.082678694391 AA    3.974301770121  -4.644429918071   0.156240088736 Bohr
[INPUT] 37 C      6.133753808450  -0.472680704112   0.500211346707 AA   11.591114813478  -0.893237075137   0.945262449675 Bohr
[INPUT] 38 C      2.157433487014  -1.712023382578   1.227387690157 AA    4.076958422422  -3.235255311924   2.319426583060 Bohr
[INPUT] 39 C      5.941010267091   3.183558088237  -0.738213886245 AA   11.226882308030   6.016052888412  -1.395022066353 Bohr
[INPUT] 40 C      3.459114805336  -1.976339167643   1.916286659205 AA    6.536779615514  -3.734739756096   3.621256962055 Bohr
[INPUT] 41 C      1.001016529814  -2.498728901799  -0.859019331872 AA    1.891647087511  -4.721913283936  -1.623311272946 Bohr
[INPUT] 42 C      1.190196489593  -0.732041299911   1.797807004821 AA    2.249145399750  -1.383357568701   3.397362863935 Bohr
[INPUT] 43 C      0.940519842815  -3.213706286863  -2.008850316649 AA    1.777324917639  -6.073024726964  -3.796176923712 Bohr
[INPUT] 44 H     -3.690562312223  -0.107400889367   2.262799604233 AA   -6.974152015743  -0.202958266439   4.276071526774 Bohr
[INPUT] 45 H     -4.309434991280  -2.569827911259   1.195947181325 AA   -8.143651885136  -4.856270939542   2.260012632149 Bohr
[INPUT] 46 H     -2.158196821500  -3.040623509558  -0.361666538954 AA   -4.078400915543  -5.745945680978  -0.683450707042 Bohr
[INPUT] 47 H     -1.878153034178  -0.607120166256  -1.375630517566 AA   -3.549194854618  -1.147290838925  -2.599564926794 Bohr
[INPUT] 48 H     -5.014305056207   1.118325568711   0.618136545998 AA   -9.475663261254   2.113329042962   1.168108779520 Bohr
[INPUT] 49 H     -4.707347144056  -0.065775424093  -0.639245964977 AA   -8.895596875520  -0.124297537263  -1.207999800041 Bohr
[INPUT] 50 H     -1.478778213517  -1.875932551427   2.218637177201 AA   -2.794485822521  -3.544998750354   4.192616634688 Bohr
[INPUT] 51 H     -2.171214598191  -3.519424776633   2.112795385362 AA   -4.103000948239  -6.650748943845   3.992604635580 Bohr
[INPUT] 52 H     -2.877366757617  -2.320935823719   3.233912305331 AA   -5.437435131824  -4.385933059520   6.111208567936 Bohr
[INPUT] 53 H     -2.249828769155   2.231876620312   2.577324856684 AA   -4.251560200870   4.217635556210   4.870438113167 Bohr
[INPUT] 54 H     -3.326150070280   2.791706230226   1.279141888325 AA   -6.285512682031   5.275560195369   2.417227843393 Bohr
[INPUT] 55 H     -6.037892807527  -1.752664898744   0.974234167276 AA  -11.409963775707  -3.312056646764   1.841035757345 Bohr
[INPUT] 56 H     -6.699554195995  -0.245337843227   1.683136693866 AA  -12.660322587110  -0.463621331690   3.180667381613 Bohr
[INPUT] 57 H      0.395956750464   0.347838424334  -1.211393834136 AA    0.748249815550   0.657319357591  -2.289202575504 Bohr
[INPUT] 58 H      2.060051899665   1.734635308753  -3.067243220909 AA    3.892933892757   3.277985659543  -5.796249644946 Bohr
[INPUT] 59 H      2.943731877629   3.009806312539  -2.223974614419 AA    5.562847032871   5.687709618687  -4.202702929237 Bohr
[INPUT] 60 H      1.938930307266   5.020218725404   0.589283724215 AA    3.664047255352   9.486838476427   1.113584848429 Bohr
[INPUT] 61 H      2.415371504628   4.838935139578  -1.122944829466 AA    4.564390632825   9.144262148337  -2.122058180687 Bohr
[INPUT] 62 H      0.864496310212   5.616638790161  -0.686975632522 AA    1.633661261999  10.613909054012  -1.298195799716 Bohr
[INPUT] 63 H      2.625110483613  -0.706360927459  -2.523612542915 AA    4.960739860754  -1.334828697992  -4.768936550626 Bohr
[INPUT] 64 H     -5.683868379980  -2.500152084464  -1.596333115491 AA  -10.740954566237  -4.724602709397  -3.016632391852 Bohr
[INPUT] 65 H      5.289936623073  -2.935435542287  -1.236367808936 AA    9.996531433914  -5.547169231237  -2.336396548118 Bohr
[INPUT] 66 H      3.838896433940  -2.867910151077  -2.251297696973 AA    7.254462880716  -5.419564735395  -4.254336072144 Bohr
[INPUT] 67 H      3.299446562746  -4.251981515339  -0.320705002534 AA    6.235050366228  -8.035080550704  -0.606044621567 Bohr
[INPUT] 68 H      5.237123757319   2.210868021225   1.073000621650 AA    9.896729581787   4.177935057674   2.027677306407 Bohr
[INPUT] 69 H      3.985949175379   3.102605599854   0.208013038627 AA    7.532352287902   5.863074856265   0.393087673344 Bohr
[INPUT] 70 H      6.943808782748   0.272058331705   0.403568527159 AA   13.121896860742   0.514115736829   0.762633988825 Bohr
[INPUT] 71 H      6.568263185596  -1.459628751089   0.263964560533 AA   12.412218534840  -2.758298583099   0.498820725999 Bohr
[INPUT] 72 H      5.818917310107  -0.487394815866   1.561209095976 AA   10.996160057593  -0.921042716520   2.950257614575 Bohr
[INPUT] 73 H      5.066872626686  -3.169690502701   1.314180716775 AA    9.575001572492  -5.989846949740   2.483441632889 Bohr
[INPUT] 74 H     -8.714524288742   0.240506810893  -1.038375458002 AA  -16.468064211593   0.454492003680  -1.962245230094 Bohr
[INPUT] 75 H      6.834469541979   2.550117258739  -0.879136404113 AA   12.915275641021   4.819023204544  -1.661327029908 Bohr
[INPUT] 76 H      6.253514018908   4.109187946848  -0.222068023485 AA   11.817428811865   7.765239813906  -0.419647745410 Bohr
[INPUT] 77 H      5.571561311505   3.458296544858  -1.742524380342 AA   10.528724964967   6.535233327311  -3.292893844224 Bohr
[INPUT] 78 H      0.129260211218  -1.887965781744  -0.580046793530 AA    0.244266398005  -3.567738260046  -1.096129579204 Bohr
[INPUT] 79 H      1.019817126584  -0.942611864276   2.868135994037 AA    1.927175066384  -1.781278265248   5.419991516737 Bohr
[INPUT] 80 H      0.227223772571  -0.726967535691   1.265986673450 AA    0.429390699150  -1.373769543907   2.392368090170 Bohr
[INPUT] 81 H      1.622401494289   0.284274694284   1.744750768946 AA    3.065894488291   0.537201316341   3.297101108932 Bohr
[INPUT] 82 H      0.050072474565  -3.177440294193  -2.646594914243 AA    0.094623263308  -6.004491933183  -5.001339550587 Bohr
[INPUT] 83 H      1.752443431435  -3.872406121505  -2.338872122073 AA    3.311638134205  -7.317787012733  -4.419827751098 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1

nuclear repulsion = 5462.08638299416
number of shells = 633
number of NR pGTOs = 2298
number of NR cGTOs = 1573
basis = def2-tzvp
ecp = {}
CPU time:         3.60
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 83_Dinoflagellate_luciferin_wb97x.chk
max_memory 60000 MB (current use 56 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f2ee47c4048>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f2ee47b1f28>
Set gradient conv threshold to 1e-05
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
tot grids = 1001482
Drop grids 206421
    CPU time for setting up grids    446.66 sec, wall time     31.38 sec
nelec by numeric integration = 314.0007631518219
    CPU time for vxc    736.97 sec, wall time     49.21 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 60000
_cderi_to_save = /tmp/job.15971920.hpc/tmpw1u83kjp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
num shells = 1315, num cGTOs = 3965
size of aux basis 3965
int3c2e [1/7], AO [0:226], nrow = 197506
int3c2e [2/7], AO [226:317], nrow = 196322
int3c2e [3/7], AO [317:387], nrow = 197500
int3c2e [4/7], AO [387:448], nrow = 195557
int3c2e [5/7], AO [448:520], nrow = 196618
int3c2e [6/7], AO [520:608], nrow = 193842
int3c2e [7/7], AO [608:633], nrow = 60606
    CPU time for cholesky_eri   1629.10 sec, wall time    198.20 sec
    CPU time for df vj and vk   5723.51 sec, wall time    500.18 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7f2ee28f9710> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 60000
_cderi_to_save = /tmp/job.15971920.hpc/tmpcrx_695y
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
num shells = 1315, num cGTOs = 3965
size of aux basis 3965
    CPU time for 2c2e      1.44 sec, wall time      0.15 sec
    CPU time for Cholesky 2c2e     92.60 sec, wall time      6.87 sec
erifile 39267.806 MB, IO buf size 4586.0142 MB
int3c2e [1/9], AO [0:193], nrow = 143380
    CPU time for gen CD eri [1/9]    252.04 sec, wall time     22.01 sec
int3c2e [2/9], AO [193:272], nrow = 144281
    CPU time for gen CD eri [2/9]    253.64 sec, wall time     16.73 sec
int3c2e [3/9], AO [272:329], nrow = 138765
    CPU time for gen CD eri [3/9]    245.25 sec, wall time     18.99 sec
int3c2e [4/9], AO [329:382], nrow = 144420
    CPU time for gen CD eri [4/9]    255.20 sec, wall time     18.39 sec
int3c2e [5/9], AO [382:426], nrow = 140182
    CPU time for gen CD eri [5/9]    250.24 sec, wall time     18.95 sec
int3c2e [6/9], AO [426:467], nrow = 143750
    CPU time for gen CD eri [6/9]    259.48 sec, wall time     18.52 sec
int3c2e [7/9], AO [467:527], nrow = 144213
    CPU time for gen CD eri [7/9]    269.32 sec, wall time     19.28 sec
int3c2e [8/9], AO [527:592], nrow = 141814
    CPU time for gen CD eri [8/9]    264.50 sec, wall time     18.37 sec
int3c2e [9/9], AO [592:633], nrow = 97146
    CPU time for gen CD eri [9/9]    178.11 sec, wall time     13.83 sec
    CPU time for df vj and vk   5582.36 sec, wall time    443.42 sec
E1 = -13530.129800427792  Ecoul = 6388.869191945298  Exc = -273.06881673450334
init E= -1952.24304222284
cond(S) = 2187271.602598633
    CPU time for initialize scf  12527.72 sec, wall time   1028.22 sec
  HOMO = -0.272586013191593  LUMO = 0.00668761846453467
  mo_energy =
[-1.92787521e+01 -1.92505057e+01 -1.92205184e+01 -1.92022722e+01
 -1.91601568e+01 -1.91575160e+01 -1.44513905e+01 -1.44344884e+01
 -1.44223683e+01 -1.44159503e+01 -1.04311620e+01 -1.04101280e+01
 -1.03571022e+01 -1.03379416e+01 -1.03269212e+01 -1.03205926e+01
 -1.03125973e+01 -1.03015957e+01 -1.03009253e+01 -1.02974476e+01
 -1.02970010e+01 -1.02939686e+01 -1.02936053e+01 -1.02889062e+01
 -1.02873671e+01 -1.02853111e+01 -1.02845090e+01 -1.02832003e+01
 -1.02817987e+01 -1.02817033e+01 -1.02784604e+01 -1.02780831e+01
 -1.02708499e+01 -1.02672212e+01 -1.02649081e+01 -1.02573241e+01
 -1.02516364e+01 -1.02510303e+01 -1.02468341e+01 -1.02466102e+01
 -1.02455451e+01 -1.02429106e+01 -1.02407841e+01 -1.26948286e+00
 -1.24609531e+00 -1.17372526e+00 -1.15784583e+00 -1.15709222e+00
 -1.14126702e+00 -1.11803572e+00 -1.10317217e+00 -1.09644868e+00
 -1.07546215e+00 -9.76523690e-01 -9.71704071e-01 -9.63244694e-01
 -9.38206514e-01 -9.34940351e-01 -9.28544176e-01 -9.25155131e-01
 -9.11370579e-01 -9.03917271e-01 -8.88223818e-01 -8.75046578e-01
 -8.56314910e-01 -8.43930088e-01 -8.35943012e-01 -8.27165773e-01
 -8.17365994e-01 -8.09899422e-01 -7.96903057e-01 -7.86716097e-01
 -7.67494103e-01 -7.57819635e-01 -7.55115364e-01 -7.40521803e-01
 -7.38318304e-01 -7.22571136e-01 -7.11749669e-01 -6.98100017e-01
 -6.82444899e-01 -6.76245433e-01 -6.68314316e-01 -6.63945760e-01
 -6.58670702e-01 -6.53371727e-01 -6.49340104e-01 -6.47422801e-01
 -6.36049779e-01 -6.30117388e-01 -6.25571164e-01 -6.13998807e-01
 -6.13211964e-01 -6.04914826e-01 -5.98393199e-01 -5.89344356e-01
 -5.84982076e-01 -5.80415485e-01 -5.76859171e-01 -5.71611096e-01
 -5.66122593e-01 -5.62667479e-01 -5.58030946e-01 -5.56538788e-01
 -5.52771192e-01 -5.48519990e-01 -5.46643179e-01 -5.43478806e-01
 -5.36701167e-01 -5.36277069e-01 -5.30887807e-01 -5.29870977e-01
 -5.27657151e-01 -5.25773376e-01 -5.21052229e-01 -5.20370288e-01
 -5.16837424e-01 -5.14994075e-01 -5.11760648e-01 -5.10692745e-01
 -5.04389287e-01 -5.02917056e-01 -4.97783405e-01 -4.97419825e-01
 -4.94707810e-01 -4.90620115e-01 -4.88668960e-01 -4.81497074e-01
 -4.80880193e-01 -4.77657489e-01 -4.74614089e-01 -4.70115521e-01
 -4.68256858e-01 -4.67268379e-01 -4.64625204e-01 -4.61925056e-01
 -4.59824547e-01 -4.58102924e-01 -4.54269928e-01 -4.49252622e-01
 -4.42796905e-01 -4.36850675e-01 -4.34939208e-01 -4.33896735e-01
 -4.21895010e-01 -4.21463756e-01 -4.19011100e-01 -3.98321433e-01
 -3.62612852e-01 -3.58730792e-01 -3.56079765e-01 -3.40740813e-01
 -3.38245965e-01 -3.32790766e-01 -3.21064849e-01 -2.89393322e-01
 -2.72586013e-01  6.68761846e-03  3.19657716e-02  5.88071108e-02
  6.73686929e-02  7.55162513e-02  8.36625350e-02  9.11806490e-02
  9.53326978e-02  1.02295362e-01  1.05328561e-01  1.09426303e-01
  1.15200390e-01  1.17589375e-01  1.21490420e-01  1.23151030e-01
  1.29784070e-01  1.34933979e-01  1.37455975e-01  1.41757763e-01
  1.44674396e-01  1.48141285e-01  1.50384265e-01  1.55093801e-01
  1.59839660e-01  1.60439136e-01  1.65272275e-01  1.66191884e-01
  1.70376223e-01  1.71072324e-01  1.75153073e-01  1.78468894e-01
  1.81193389e-01  1.83333407e-01  1.86639018e-01  1.88908203e-01
  1.94073209e-01  1.95787617e-01  1.98342075e-01  1.98958492e-01
  1.99296867e-01  2.03421632e-01  2.07862451e-01  2.09788473e-01
  2.11829546e-01  2.12591658e-01  2.15893831e-01  2.20977814e-01
  2.22546808e-01  2.25467600e-01  2.28806877e-01  2.31265962e-01
  2.32763019e-01  2.34501201e-01  2.35230909e-01  2.39665775e-01
  2.41564039e-01  2.48059999e-01  2.49020891e-01  2.50088504e-01
  2.52354059e-01  2.56663994e-01  2.59064901e-01  2.61127691e-01
  2.62603452e-01  2.65710855e-01  2.69037523e-01  2.70600218e-01
  2.74990203e-01  2.76406769e-01  2.80664063e-01  2.85639064e-01
  2.87229868e-01  2.90031244e-01  2.94158787e-01  2.95777746e-01
  2.99820158e-01  3.01745578e-01  3.04688890e-01  3.08676291e-01
  3.11449503e-01  3.12783313e-01  3.17367053e-01  3.18197345e-01
  3.18520043e-01  3.23492528e-01  3.28151227e-01  3.29345134e-01
  3.30990747e-01  3.33984850e-01  3.34711472e-01  3.37331727e-01
  3.39415926e-01  3.39522831e-01  3.46342474e-01  3.47471709e-01
  3.51545463e-01  3.54662750e-01  3.55932882e-01  3.58445865e-01
  3.60242799e-01  3.64477055e-01  3.66903551e-01  3.72615055e-01
  3.74534714e-01  3.78792966e-01  3.81833501e-01  3.83345307e-01
  3.84341402e-01  3.89976146e-01  3.90371201e-01  3.91971207e-01
  3.93215349e-01  3.99317358e-01  4.00903483e-01  4.02133233e-01
  4.06006420e-01  4.10812797e-01  4.13641504e-01  4.15529624e-01
  4.17381987e-01  4.20454856e-01  4.22912106e-01  4.25137515e-01
  4.28010236e-01  4.30127718e-01  4.30844198e-01  4.34973036e-01
  4.37596012e-01  4.42112100e-01  4.42307371e-01  4.42750213e-01
  4.45488911e-01  4.49650928e-01  4.50354873e-01  4.58540201e-01
  4.58635508e-01  4.61033544e-01  4.63939468e-01  4.69042761e-01
  4.70028161e-01  4.72229601e-01  4.73210005e-01  4.76505745e-01
  4.77770172e-01  4.79385883e-01  4.83587986e-01  4.84559056e-01
  4.84652349e-01  4.88827494e-01  4.90448663e-01  4.93676160e-01
  4.94867691e-01  4.95815027e-01  4.99379445e-01  4.99613838e-01
  5.00050507e-01  5.03504670e-01  5.05668963e-01  5.08943831e-01
  5.11917088e-01  5.14243776e-01  5.16388702e-01  5.18425852e-01
  5.19863838e-01  5.21610121e-01  5.23386199e-01  5.27045258e-01
  5.29109844e-01  5.29652366e-01  5.32743050e-01  5.33597925e-01
  5.35563330e-01  5.39384723e-01  5.41899909e-01  5.42821317e-01
  5.46675770e-01  5.49168358e-01  5.50610779e-01  5.52586894e-01
  5.54710113e-01  5.56247794e-01  5.57823245e-01  5.62586551e-01
  5.65122003e-01  5.66651708e-01  5.70251579e-01  5.72279206e-01
  5.72969380e-01  5.76120626e-01  5.78536633e-01  5.79682882e-01
  5.80486843e-01  5.83487435e-01  5.84537830e-01  5.87335276e-01
  5.92420359e-01  5.95964563e-01  5.96263625e-01  6.00076517e-01
  6.01903338e-01  6.02950275e-01  6.06395588e-01  6.07227721e-01
  6.08270623e-01  6.11870607e-01  6.12438318e-01  6.18149557e-01
  6.20154286e-01  6.21719830e-01  6.27840442e-01  6.29077873e-01
  6.30695896e-01  6.35401082e-01  6.37285532e-01  6.40635916e-01
  6.42943963e-01  6.44488029e-01  6.46751431e-01  6.50121099e-01
  6.52493539e-01  6.55417592e-01  6.58992016e-01  6.60203337e-01
  6.61870663e-01  6.63804068e-01  6.66724704e-01  6.68427048e-01
  6.77097538e-01  6.78321104e-01  6.80285415e-01  6.84499846e-01
  6.87226099e-01  6.87649409e-01  6.94007635e-01  6.97173739e-01
  7.01255922e-01  7.03774156e-01  7.04119767e-01  7.09142646e-01
  7.11861277e-01  7.14541276e-01  7.16321003e-01  7.19468411e-01
  7.21005458e-01  7.28114196e-01  7.30153895e-01  7.33369379e-01
  7.38644677e-01  7.40243680e-01  7.43734717e-01  7.45806941e-01
  7.49019256e-01  7.50675736e-01  7.52916919e-01  7.55461374e-01
  7.61644986e-01  7.65167185e-01  7.68738739e-01  7.71148167e-01
  7.75651342e-01  7.78313066e-01  7.80441962e-01  7.83451786e-01
  7.87154229e-01  7.91976405e-01  7.93953442e-01  7.97706844e-01
  7.99007650e-01  8.01510414e-01  8.07144760e-01  8.07786303e-01
  8.14020625e-01  8.16278452e-01  8.17179106e-01  8.25086403e-01
  8.31025086e-01  8.31971596e-01  8.36764520e-01  8.38738246e-01
  8.40924710e-01  8.44053978e-01  8.49066400e-01  8.55601666e-01
  8.55896566e-01  8.61898852e-01  8.64935499e-01  8.69924058e-01
  8.74855989e-01  8.77129284e-01  8.82097668e-01  8.89878604e-01
  8.90718312e-01  8.92851786e-01  8.94256223e-01  8.97231248e-01
  9.01538679e-01  9.03379786e-01  9.07792036e-01  9.09978694e-01
  9.12682480e-01  9.19611248e-01  9.21571903e-01  9.25487748e-01
  9.29256495e-01  9.36046913e-01  9.41160639e-01  9.44122307e-01
  9.49123363e-01  9.53886489e-01  9.56588796e-01  9.62045851e-01
  9.64139054e-01  9.66273427e-01  9.68866177e-01  9.76334196e-01
  9.77186440e-01  9.80039803e-01  9.82748016e-01  9.86297857e-01
  9.90019731e-01  9.95193459e-01  9.98092852e-01  1.00025967e+00
  1.00682032e+00  1.00864845e+00  1.01311456e+00  1.01535831e+00
  1.02203809e+00  1.02503469e+00  1.02711161e+00  1.03191650e+00
  1.03579474e+00  1.03965000e+00  1.04810592e+00  1.04840314e+00
  1.05056676e+00  1.05354099e+00  1.05648644e+00  1.06521351e+00
  1.06856753e+00  1.07081034e+00  1.07407817e+00  1.07936070e+00
  1.08087701e+00  1.08261183e+00  1.08519925e+00  1.09064780e+00
  1.09489754e+00  1.09816668e+00  1.10382202e+00  1.10507168e+00
  1.10775634e+00  1.10911906e+00  1.11167667e+00  1.11733114e+00
  1.12293277e+00  1.12634431e+00  1.12902921e+00  1.13445810e+00
  1.13864620e+00  1.14421783e+00  1.14629193e+00  1.14864408e+00
  1.15523435e+00  1.15941583e+00  1.16747467e+00  1.17165080e+00
  1.17488711e+00  1.17905122e+00  1.18074866e+00  1.18657689e+00
  1.19019796e+00  1.19120596e+00  1.19909208e+00  1.19966109e+00
  1.20263934e+00  1.20665202e+00  1.20910775e+00  1.21258731e+00
  1.21809035e+00  1.22333829e+00  1.22650838e+00  1.22921574e+00
  1.23534736e+00  1.23766673e+00  1.24293930e+00  1.24692605e+00
  1.25117952e+00  1.25638160e+00  1.26085905e+00  1.26420957e+00
  1.26718088e+00  1.27279356e+00  1.27506223e+00  1.27827574e+00
  1.27883678e+00  1.28689458e+00  1.29123927e+00  1.29452579e+00
  1.29526006e+00  1.29757265e+00  1.30240496e+00  1.30858969e+00
  1.31311360e+00  1.31907834e+00  1.32256393e+00  1.32390391e+00
  1.32853917e+00  1.33287747e+00  1.33476145e+00  1.34234092e+00
  1.34412060e+00  1.35126578e+00  1.35786700e+00  1.36231772e+00
  1.36497713e+00  1.36655170e+00  1.37361363e+00  1.37652560e+00
  1.37846023e+00  1.38211935e+00  1.38732214e+00  1.39555125e+00
  1.39906482e+00  1.40294135e+00  1.40921754e+00  1.41216098e+00
  1.41697983e+00  1.41908285e+00  1.42665413e+00  1.42694150e+00
  1.43132451e+00  1.43439969e+00  1.44327015e+00  1.44641681e+00
  1.44827858e+00  1.44928692e+00  1.45195927e+00  1.45583385e+00
  1.46304596e+00  1.46910588e+00  1.47380700e+00  1.48073644e+00
  1.48249686e+00  1.48790587e+00  1.49252242e+00  1.49544114e+00
  1.50199984e+00  1.50722524e+00  1.51074884e+00  1.51685381e+00
  1.51714799e+00  1.52480999e+00  1.52837596e+00  1.53074486e+00
  1.53336431e+00  1.53902550e+00  1.54819709e+00  1.55586886e+00
  1.55963956e+00  1.56126943e+00  1.56334321e+00  1.56774278e+00
  1.57419977e+00  1.57752901e+00  1.58098670e+00  1.58609068e+00
  1.59103106e+00  1.59825452e+00  1.60050444e+00  1.60585715e+00
  1.61066051e+00  1.61605117e+00  1.61913216e+00  1.62256213e+00
  1.63055115e+00  1.63291271e+00  1.63804365e+00  1.64236076e+00
  1.64301323e+00  1.64740403e+00  1.64982401e+00  1.65160304e+00
  1.65289819e+00  1.65857078e+00  1.66085617e+00  1.66620873e+00
  1.66986921e+00  1.67194864e+00  1.67353086e+00  1.67613955e+00
  1.68073242e+00  1.68254331e+00  1.68557322e+00  1.68910227e+00
  1.69339741e+00  1.69753251e+00  1.69955697e+00  1.70467280e+00
  1.70749864e+00  1.71079612e+00  1.71270045e+00  1.71442378e+00
  1.72072110e+00  1.72186096e+00  1.72457285e+00  1.72644989e+00
  1.73439106e+00  1.73696447e+00  1.73961480e+00  1.74694277e+00
  1.74971891e+00  1.75305156e+00  1.75784024e+00  1.76122493e+00
  1.76337536e+00  1.76894132e+00  1.76989274e+00  1.77230521e+00
  1.77725156e+00  1.78192093e+00  1.78565468e+00  1.79067348e+00
  1.79396275e+00  1.79499346e+00  1.79922102e+00  1.80440071e+00
  1.80483337e+00  1.80978231e+00  1.81372157e+00  1.81428027e+00
  1.81917067e+00  1.82247769e+00  1.82641337e+00  1.83055231e+00
  1.83319810e+00  1.83698174e+00  1.84145045e+00  1.84408764e+00
  1.85232259e+00  1.85494141e+00  1.85571808e+00  1.86531535e+00
  1.86626114e+00  1.86897865e+00  1.87166376e+00  1.87725458e+00
  1.88363741e+00  1.89061206e+00  1.89383761e+00  1.89610976e+00
  1.90346471e+00  1.90743347e+00  1.91430572e+00  1.91923076e+00
  1.92270307e+00  1.92751506e+00  1.93161731e+00  1.93556549e+00
  1.93828846e+00  1.94270593e+00  1.94733246e+00  1.94862949e+00
  1.95441761e+00  1.95912892e+00  1.96329205e+00  1.96855376e+00
  1.96980450e+00  1.97654479e+00  1.98352652e+00  1.98545151e+00
  1.98741305e+00  1.99119174e+00  1.99436396e+00  1.99578287e+00
  2.00348481e+00  2.00396785e+00  2.00566098e+00  2.01007825e+00
  2.02111435e+00  2.02302111e+00  2.02792536e+00  2.03148722e+00
  2.03676153e+00  2.03959930e+00  2.04319129e+00  2.04996772e+00
  2.05575714e+00  2.05748101e+00  2.06567060e+00  2.06758498e+00
  2.06938102e+00  2.07458422e+00  2.07587427e+00  2.08152604e+00
  2.08282796e+00  2.08633927e+00  2.08928017e+00  2.09725242e+00
  2.10104799e+00  2.10674684e+00  2.10954067e+00  2.11668975e+00
  2.11977355e+00  2.12165309e+00  2.12539549e+00  2.12979068e+00
  2.13352990e+00  2.13885939e+00  2.14303670e+00  2.14720480e+00
  2.14914097e+00  2.15321229e+00  2.15498919e+00  2.16436078e+00
  2.16550157e+00  2.16963903e+00  2.17460948e+00  2.17857275e+00
  2.18482666e+00  2.18830795e+00  2.19288783e+00  2.19505512e+00
  2.20081273e+00  2.21047402e+00  2.21163073e+00  2.21798020e+00
  2.21986582e+00  2.22271684e+00  2.22620910e+00  2.23390580e+00
  2.23601677e+00  2.24079243e+00  2.24945047e+00  2.25060139e+00
  2.25376952e+00  2.25473125e+00  2.26480022e+00  2.26508225e+00
  2.27323821e+00  2.27763256e+00  2.28621935e+00  2.28882447e+00
  2.29020521e+00  2.29497573e+00  2.29570930e+00  2.30144190e+00
  2.30561372e+00  2.30900916e+00  2.31079976e+00  2.31425845e+00
  2.31729456e+00  2.32267227e+00  2.33096472e+00  2.33652492e+00
  2.33790988e+00  2.34111898e+00  2.34596946e+00  2.34954222e+00
  2.35359007e+00  2.36217332e+00  2.36515423e+00  2.36874538e+00
  2.37518933e+00  2.37948479e+00  2.38088013e+00  2.38546008e+00
  2.38913627e+00  2.39096640e+00  2.39552740e+00  2.40466688e+00
  2.40528701e+00  2.40849881e+00  2.41241149e+00  2.41804742e+00
  2.42016501e+00  2.42555249e+00  2.42851221e+00  2.43467305e+00
  2.43621087e+00  2.43830708e+00  2.44547331e+00  2.45052031e+00
  2.45366247e+00  2.46079334e+00  2.46271700e+00  2.46896413e+00
  2.47096668e+00  2.47470736e+00  2.47616253e+00  2.48000694e+00
  2.48485809e+00  2.49050065e+00  2.49334217e+00  2.49483525e+00
  2.50062557e+00  2.50545203e+00  2.51036591e+00  2.51412942e+00
  2.52070662e+00  2.52095465e+00  2.52623363e+00  2.53055075e+00
  2.53316534e+00  2.53640213e+00  2.54061913e+00  2.54672686e+00
  2.55039206e+00  2.55141227e+00  2.55439416e+00  2.55640403e+00
  2.56051189e+00  2.56424463e+00  2.56871672e+00  2.56958001e+00
  2.57534137e+00  2.58136420e+00  2.58805509e+00  2.59107689e+00
  2.60163719e+00  2.60257469e+00  2.60664486e+00  2.61201942e+00
  2.61892893e+00  2.62288688e+00  2.62483728e+00  2.63313347e+00
  2.63431444e+00  2.63568628e+00  2.64103913e+00  2.64261759e+00
  2.64456269e+00  2.65011846e+00  2.65512618e+00  2.65783155e+00
  2.66110431e+00  2.66245751e+00  2.67137516e+00  2.67514354e+00
  2.67952164e+00  2.68166713e+00  2.69018030e+00  2.69172445e+00
  2.69350274e+00  2.69904366e+00  2.70033647e+00  2.70278444e+00
  2.70615279e+00  2.71291476e+00  2.71456840e+00  2.71734742e+00
  2.72245441e+00  2.72376311e+00  2.72858078e+00  2.73079877e+00
  2.73707875e+00  2.74239579e+00  2.74434925e+00  2.74755466e+00
  2.75077965e+00  2.75290225e+00  2.75527002e+00  2.75895044e+00
  2.76306151e+00  2.77066617e+00  2.77806179e+00  2.78213350e+00
  2.78366453e+00  2.78489852e+00  2.78953036e+00  2.79348920e+00
  2.79583739e+00  2.80039257e+00  2.80165172e+00  2.80368049e+00
  2.81715512e+00  2.81841020e+00  2.82027559e+00  2.82724640e+00
  2.82863276e+00  2.83273714e+00  2.83687293e+00  2.84055664e+00
  2.84475042e+00  2.84642286e+00  2.85350739e+00  2.85539107e+00
  2.86203622e+00  2.86387578e+00  2.87039652e+00  2.87504847e+00
  2.88149762e+00  2.88343467e+00  2.88974139e+00  2.88995487e+00
  2.89839048e+00  2.89929887e+00  2.90291062e+00  2.90832237e+00
  2.90888674e+00  2.91277453e+00  2.91585997e+00  2.92080419e+00
  2.92407612e+00  2.93059577e+00  2.93388330e+00  2.93657676e+00
  2.94055473e+00  2.94279524e+00  2.94765559e+00  2.94996948e+00
  2.95236774e+00  2.95816848e+00  2.95910009e+00  2.96393490e+00
  2.96998184e+00  2.97468234e+00  2.97890873e+00  2.98237378e+00
  2.98555280e+00  2.98889016e+00  2.99625400e+00  2.99997124e+00
  3.00283301e+00  3.00416133e+00  3.01382091e+00  3.02095647e+00
  3.03248103e+00  3.03495199e+00  3.04042519e+00  3.04417753e+00
  3.04700103e+00  3.04968104e+00  3.05559544e+00  3.05857020e+00
  3.06209716e+00  3.06325898e+00  3.06929033e+00  3.07573874e+00
  3.07806565e+00  3.08333029e+00  3.08510368e+00  3.08955677e+00
  3.09395380e+00  3.09834329e+00  3.10074172e+00  3.10440404e+00
  3.10685285e+00  3.11067684e+00  3.11623418e+00  3.11706634e+00
  3.12020397e+00  3.12293102e+00  3.12929634e+00  3.13618384e+00
  3.13873146e+00  3.14207997e+00  3.14478782e+00  3.14575102e+00
  3.14970180e+00  3.15346155e+00  3.15713960e+00  3.15961235e+00
  3.16241880e+00  3.16905284e+00  3.16985187e+00  3.17496901e+00
  3.17677649e+00  3.18088135e+00  3.18308026e+00  3.18597130e+00
  3.19171995e+00  3.19552851e+00  3.19961125e+00  3.20202728e+00
  3.20585013e+00  3.20854486e+00  3.21184777e+00  3.21755456e+00
  3.21912592e+00  3.22056851e+00  3.22474467e+00  3.23026119e+00
  3.23149832e+00  3.23299957e+00  3.23760750e+00  3.24076412e+00
  3.24411367e+00  3.24765129e+00  3.25048921e+00  3.25266549e+00
  3.25750115e+00  3.25853083e+00  3.26282622e+00  3.26644939e+00
  3.27016751e+00  3.27080807e+00  3.27588867e+00  3.28160062e+00
  3.28410228e+00  3.28767759e+00  3.29372576e+00  3.29833720e+00
  3.29893718e+00  3.30338049e+00  3.30629848e+00  3.30833880e+00
  3.31301402e+00  3.31359054e+00  3.31731804e+00  3.32643377e+00
  3.32871997e+00  3.33144342e+00  3.33607017e+00  3.33839500e+00
  3.34077718e+00  3.34305453e+00  3.34498071e+00  3.35080207e+00
  3.35356952e+00  3.35598581e+00  3.35787195e+00  3.35926341e+00
  3.36499802e+00  3.36623499e+00  3.37056098e+00  3.37343746e+00
  3.37919160e+00  3.38022077e+00  3.38048779e+00  3.38468329e+00
  3.38650619e+00  3.39359247e+00  3.39600456e+00  3.39762396e+00
  3.40065227e+00  3.40194505e+00  3.40618093e+00  3.40670336e+00
  3.40983706e+00  3.41426639e+00  3.41615357e+00  3.42172452e+00
  3.42378549e+00  3.42721677e+00  3.43163614e+00  3.43448814e+00
  3.43751800e+00  3.43884674e+00  3.44516206e+00  3.44893964e+00
  3.45123136e+00  3.45539578e+00  3.45833164e+00  3.46039264e+00
  3.46443528e+00  3.46604897e+00  3.46853922e+00  3.47152309e+00
  3.47332625e+00  3.47810852e+00  3.48024318e+00  3.48508471e+00
  3.48621928e+00  3.48954349e+00  3.49476371e+00  3.49783648e+00
  3.50029231e+00  3.50331751e+00  3.50649399e+00  3.50892905e+00
  3.51306943e+00  3.51616267e+00  3.52098782e+00  3.52247883e+00
  3.52642016e+00  3.52920426e+00  3.53276173e+00  3.53484489e+00
  3.54094168e+00  3.54517407e+00  3.54779790e+00  3.55239540e+00
  3.55545563e+00  3.55740339e+00  3.56186032e+00  3.56582795e+00
  3.56995089e+00  3.57427549e+00  3.57729469e+00  3.57785181e+00
  3.58336530e+00  3.58436278e+00  3.58965015e+00  3.59014588e+00
  3.59558126e+00  3.59668415e+00  3.60808093e+00  3.60977746e+00
  3.61671109e+00  3.62012673e+00  3.62321863e+00  3.62563922e+00
  3.62868454e+00  3.63725576e+00  3.64101853e+00  3.64344464e+00
  3.64755973e+00  3.65413356e+00  3.65622072e+00  3.65814188e+00
  3.66190006e+00  3.67103794e+00  3.67662770e+00  3.68004833e+00
  3.68396900e+00  3.68673998e+00  3.69282602e+00  3.69523005e+00
  3.69913581e+00  3.70468458e+00  3.70965824e+00  3.71412844e+00
  3.72123670e+00  3.72308263e+00  3.72565526e+00  3.72800081e+00
  3.73618115e+00  3.74069583e+00  3.74235239e+00  3.74536209e+00
  3.75612405e+00  3.76425897e+00  3.76525029e+00  3.76933409e+00
  3.77450225e+00  3.78207879e+00  3.78619468e+00  3.78967192e+00
  3.79444406e+00  3.80036458e+00  3.80256824e+00  3.80909801e+00
  3.81424540e+00  3.81859383e+00  3.82410801e+00  3.82739619e+00
  3.83066601e+00  3.83307191e+00  3.83954126e+00  3.84294867e+00
  3.84885512e+00  3.85008701e+00  3.85272948e+00  3.85771100e+00
  3.86000375e+00  3.86711766e+00  3.87341957e+00  3.87913394e+00
  3.88183195e+00  3.88861756e+00  3.89201002e+00  3.89842916e+00
  3.90288983e+00  3.90943064e+00  3.91105416e+00  3.91147323e+00
  3.92144194e+00  3.92559777e+00  3.93302346e+00  3.93668571e+00
  3.94312012e+00  3.94471410e+00  3.95108217e+00  3.95746965e+00
  3.96328505e+00  3.97075911e+00  3.97438494e+00  3.98124769e+00
  3.98296699e+00  3.98801497e+00  3.99155659e+00  3.99520150e+00
  3.99993405e+00  4.00406663e+00  4.01279968e+00  4.01605317e+00
  4.02242510e+00  4.03203183e+00  4.03673669e+00  4.04308297e+00
  4.04422530e+00  4.05112957e+00  4.06180811e+00  4.06553515e+00
  4.06934909e+00  4.07277124e+00  4.07442951e+00  4.07882557e+00
  4.08539031e+00  4.08839314e+00  4.09019266e+00  4.10173062e+00
  4.10931367e+00  4.11266655e+00  4.12144070e+00  4.12770629e+00
  4.12865011e+00  4.13493222e+00  4.13761471e+00  4.15012590e+00
  4.15748645e+00  4.16438662e+00  4.16967346e+00  4.17600206e+00
  4.18150679e+00  4.18679765e+00  4.19234745e+00  4.20021615e+00
  4.20825073e+00  4.21337736e+00  4.22152954e+00  4.22387626e+00
  4.23214050e+00  4.23395332e+00  4.23745076e+00  4.24699005e+00
  4.25466161e+00  4.25723417e+00  4.27005002e+00  4.27212623e+00
  4.28308404e+00  4.28900455e+00  4.29349571e+00  4.29785837e+00
  4.30476051e+00  4.31104589e+00  4.31668718e+00  4.32916376e+00
  4.33380616e+00  4.33761886e+00  4.34140830e+00  4.35860318e+00
  4.36598419e+00  4.36730966e+00  4.37996808e+00  4.38265158e+00
  4.38846723e+00  4.39525533e+00  4.40041114e+00  4.41097651e+00
  4.41958340e+00  4.42605977e+00  4.44409599e+00  4.44684219e+00
  4.45056005e+00  4.45182327e+00  4.45448158e+00  4.45975343e+00
  4.47014924e+00  4.47273698e+00  4.47573574e+00  4.48245565e+00
  4.48868252e+00  4.49147326e+00  4.49701091e+00  4.50231200e+00
  4.50591045e+00  4.51727230e+00  4.51978032e+00  4.53316782e+00
  4.53759987e+00  4.54395815e+00  4.55016684e+00  4.55522364e+00
  4.56144653e+00  4.57036744e+00  4.57562148e+00  4.58225604e+00
  4.59177840e+00  4.60255288e+00  4.60866728e+00  4.61199263e+00
  4.62291378e+00  4.63300793e+00  4.63752807e+00  4.64015121e+00
  4.65033456e+00  4.65743532e+00  4.66093014e+00  4.66655204e+00
  4.67449675e+00  4.67882619e+00  4.68793342e+00  4.70262273e+00
  4.70790308e+00  4.71107030e+00  4.71765794e+00  4.72792670e+00
  4.73601076e+00  4.74309146e+00  4.75355449e+00  4.77168214e+00
  4.77451131e+00  4.78299745e+00  4.80025244e+00  4.80258755e+00
  4.82327779e+00  4.83243406e+00  4.83892453e+00  4.85272407e+00
  4.86379365e+00  4.86962836e+00  4.87903737e+00  4.88650444e+00
  4.89066629e+00  4.89557644e+00  4.90573002e+00  4.91713203e+00
  4.92167019e+00  4.92564412e+00  4.93596106e+00  4.94136361e+00
  4.95056714e+00  4.95255057e+00  4.95766561e+00  4.96226866e+00
  4.97682413e+00  4.97729751e+00  4.99551153e+00  5.00781485e+00
  5.01618876e+00  5.02102226e+00  5.03409247e+00  5.04183940e+00
  5.05438319e+00  5.06491039e+00  5.08047369e+00  5.08783795e+00
  5.09580340e+00  5.11007932e+00  5.11580550e+00  5.13907796e+00
  5.14332060e+00  5.15061593e+00  5.16029573e+00  5.17555969e+00
  5.18756652e+00  5.19685209e+00  5.20288483e+00  5.21449521e+00
  5.22169992e+00  5.22638205e+00  5.24018111e+00  5.24538029e+00
  5.25288666e+00  5.25834796e+00  5.26068525e+00  5.26363784e+00
  5.26618166e+00  5.26982475e+00  5.28009306e+00  5.28299957e+00
  5.29725785e+00  5.31166008e+00  5.31367311e+00  5.32094042e+00
  5.33371190e+00  5.33939203e+00  5.34269927e+00  5.34821112e+00
  5.35752817e+00  5.37264006e+00  5.38071207e+00  5.38542481e+00
  5.39357206e+00  5.40249000e+00  5.40677562e+00  5.41480116e+00
  5.41951975e+00  5.42743501e+00  5.43840860e+00  5.44046603e+00
  5.45174027e+00  5.45623294e+00  5.46050740e+00  5.46820396e+00
  5.48519947e+00  5.52411103e+00  5.53270099e+00  5.54801006e+00
  5.54969091e+00  5.56776635e+00  5.57334361e+00  5.58924749e+00
  5.60292905e+00  5.61857852e+00  5.65808751e+00  5.66645114e+00
  5.67902399e+00  5.68246342e+00  5.69852034e+00  5.69970563e+00
  5.74201300e+00  5.74515116e+00  5.76503547e+00  5.77764479e+00
  5.79882848e+00  5.81312678e+00  5.82103694e+00  5.82368838e+00
  5.85612726e+00  5.86327221e+00  5.86778366e+00  5.88166674e+00
  5.92589576e+00  5.93860911e+00  5.94621214e+00  5.99567194e+00
  6.00564126e+00  6.02925388e+00  6.03092359e+00  6.04927679e+00
  6.05591178e+00  6.11150744e+00  6.14229511e+00  6.17189695e+00
  6.18356843e+00  6.19390191e+00  6.21019900e+00  6.27014165e+00
  6.27325586e+00  6.29773559e+00  6.31506064e+00  6.33616838e+00
  6.39970354e+00  6.40741175e+00  6.45293003e+00  6.48316375e+00
  6.50750564e+00  6.51597715e+00  6.52191179e+00  6.52588432e+00
  6.55418587e+00  6.56777244e+00  6.61226302e+00  6.68725626e+00
  6.69610381e+00  6.72049436e+00  6.73453557e+00  6.76899070e+00
  6.77454196e+00  6.82873325e+00  6.83019339e+00  6.83871190e+00
  6.89611972e+00  6.90304729e+00  6.91727505e+00  6.94450099e+00
  6.97193120e+00  6.97631723e+00  6.98772169e+00  7.03491957e+00
  7.15734163e+00  7.17271938e+00  7.18613596e+00  7.21106998e+00
  7.21457904e+00  7.23245497e+00  7.23308794e+00  7.24266008e+00
  7.35241796e+00  7.40261725e+00  2.23711579e+01  2.23744948e+01
  2.24644006e+01  2.24675617e+01  2.24789079e+01  2.25375915e+01
  2.25555022e+01  2.25705424e+01  2.25960072e+01  2.26092157e+01
  2.26501094e+01  2.26977296e+01  2.27199070e+01  2.27300346e+01
  2.27596543e+01  2.27759598e+01  2.27938348e+01  2.28511077e+01
  2.28700424e+01  2.28845066e+01  2.30613822e+01  2.31193752e+01
  2.32410389e+01  2.33149034e+01  2.33224637e+01  2.33724280e+01
  2.33940160e+01  2.34152788e+01  2.34586533e+01  2.34620478e+01
  2.35374164e+01  2.36391748e+01  2.37858596e+01  3.25550822e+01
  3.25943258e+01  3.26964218e+01  3.27361736e+01  4.38222214e+01
  4.38879197e+01  4.39879193e+01  4.40119628e+01  4.40807356e+01
  4.41120653e+01]
nelec by numeric integration = 314.00148360946673
    CPU time for vxc    519.26 sec, wall time     34.73 sec
    CPU time for df vj and vk   4095.28 sec, wall time    306.58 sec
    CPU time for df vj and vk   3256.57 sec, wall time    247.54 sec
E1 = -13530.129822632562  Ecoul = 6388.869104935999  Exc = -273.06951445568035
cycle= 1 E= -1952.24384915808  delta_E= -0.000807  |g|= 0.000698  |ddm|= 0.0404
    CPU time for cycle= 1   7893.83 sec, wall time    592.35 sec
  HOMO = -0.27258538181705  LUMO = 0.00668792315297253
  mo_energy =
[-1.92789300e+01 -1.92505037e+01 -1.92205096e+01 -1.92022701e+01
 -1.91601598e+01 -1.91575145e+01 -1.44513900e+01 -1.44344874e+01
 -1.44223683e+01 -1.44159502e+01 -1.04311160e+01 -1.04101252e+01
 -1.03571024e+01 -1.03379400e+01 -1.03269199e+01 -1.03205923e+01
 -1.03125972e+01 -1.03015937e+01 -1.03009233e+01 -1.02974461e+01
 -1.02970008e+01 -1.02939630e+01 -1.02936041e+01 -1.02889057e+01
 -1.02873669e+01 -1.02853110e+01 -1.02845088e+01 -1.02832006e+01
 -1.02817982e+01 -1.02817028e+01 -1.02784602e+01 -1.02780811e+01
 -1.02708487e+01 -1.02672207e+01 -1.02649078e+01 -1.02573238e+01
 -1.02516364e+01 -1.02510303e+01 -1.02468343e+01 -1.02466104e+01
 -1.02455438e+01 -1.02429108e+01 -1.02407841e+01 -1.26951043e+00
 -1.24609325e+00 -1.17373936e+00 -1.15784544e+00 -1.15709041e+00
 -1.14126755e+00 -1.11803503e+00 -1.10317171e+00 -1.09644780e+00
 -1.07546193e+00 -9.76522486e-01 -9.71702344e-01 -9.63244420e-01
 -9.38206067e-01 -9.34939918e-01 -9.28544062e-01 -9.25154961e-01
 -9.11370393e-01 -9.03917054e-01 -8.88223613e-01 -8.75046514e-01
 -8.56315766e-01 -8.43929647e-01 -8.35942720e-01 -8.27165439e-01
 -8.17365788e-01 -8.09900327e-01 -7.96905233e-01 -7.86718438e-01
 -7.67493812e-01 -7.57825271e-01 -7.55115725e-01 -7.40528094e-01
 -7.38320787e-01 -7.22569949e-01 -7.11750084e-01 -6.98099140e-01
 -6.82444299e-01 -6.76245222e-01 -6.68314093e-01 -6.63945423e-01
 -6.58670034e-01 -6.53369955e-01 -6.49345347e-01 -6.47422639e-01
 -6.36049673e-01 -6.30118283e-01 -6.25572599e-01 -6.13998801e-01
 -6.13214587e-01 -6.04921937e-01 -5.98393010e-01 -5.89344415e-01
 -5.84981856e-01 -5.80416458e-01 -5.76861591e-01 -5.71611478e-01
 -5.66122334e-01 -5.62666715e-01 -5.58032912e-01 -5.56543258e-01
 -5.52771168e-01 -5.48519923e-01 -5.46642872e-01 -5.43484546e-01
 -5.36700927e-01 -5.36276674e-01 -5.30890515e-01 -5.29870085e-01
 -5.27657330e-01 -5.25774395e-01 -5.21052696e-01 -5.20370340e-01
 -5.16837327e-01 -5.14994326e-01 -5.11760957e-01 -5.10693359e-01
 -5.04388908e-01 -5.02920099e-01 -4.97784469e-01 -4.97419534e-01
 -4.94707693e-01 -4.90619936e-01 -4.88668231e-01 -4.81496941e-01
 -4.80880024e-01 -4.77657042e-01 -4.74613868e-01 -4.70115036e-01
 -4.68256934e-01 -4.67268444e-01 -4.64636431e-01 -4.61926963e-01
 -4.59826576e-01 -4.58103959e-01 -4.54271059e-01 -4.49252172e-01
 -4.42795715e-01 -4.36849145e-01 -4.34939060e-01 -4.33896289e-01
 -4.21897405e-01 -4.21463107e-01 -4.19010668e-01 -3.98319891e-01
 -3.62612458e-01 -3.58730000e-01 -3.56079359e-01 -3.40740357e-01
 -3.38246356e-01 -3.32790510e-01 -3.21064660e-01 -2.89393049e-01
 -2.72585382e-01  6.68792315e-03  3.19666643e-02  5.88100201e-02
  6.73705829e-02  7.55170068e-02  8.36629033e-02  9.11809687e-02
  9.53301517e-02  1.02295111e-01  1.05324536e-01  1.09426174e-01
  1.15200851e-01  1.17589623e-01  1.21489533e-01  1.23151299e-01
  1.29784414e-01  1.34932470e-01  1.37455598e-01  1.41757967e-01
  1.44674771e-01  1.48141232e-01  1.50384493e-01  1.55094083e-01
  1.59839740e-01  1.60439156e-01  1.65272666e-01  1.66191985e-01
  1.70376333e-01  1.71072391e-01  1.75153561e-01  1.78468849e-01
  1.81193445e-01  1.83334017e-01  1.86639064e-01  1.88908911e-01
  1.94073284e-01  1.95787884e-01  1.98342613e-01  1.98958518e-01
  1.99296898e-01  2.03421388e-01  2.07862836e-01  2.09788574e-01
  2.11829721e-01  2.12591952e-01  2.15894069e-01  2.20978038e-01
  2.22547149e-01  2.25467873e-01  2.28807227e-01  2.31266146e-01
  2.32763409e-01  2.34501425e-01  2.35231209e-01  2.39666119e-01
  2.41564112e-01  2.48060835e-01  2.49021006e-01  2.50088985e-01
  2.52354162e-01  2.56664301e-01  2.59064926e-01  2.61127547e-01
  2.62603961e-01  2.65711209e-01  2.69037693e-01  2.70601025e-01
  2.74989921e-01  2.76406885e-01  2.80664444e-01  2.85639361e-01
  2.87230137e-01  2.90029784e-01  2.94159042e-01  2.95778388e-01
  2.99819888e-01  3.01744282e-01  3.04689142e-01  3.08676555e-01
  3.11449567e-01  3.12783315e-01  3.17367400e-01  3.18197752e-01
  3.18520507e-01  3.23493053e-01  3.28151561e-01  3.29345666e-01
  3.30990842e-01  3.33985011e-01  3.34711685e-01  3.37331972e-01
  3.39416341e-01  3.39523107e-01  3.46342719e-01  3.47472198e-01
  3.51545499e-01  3.54663066e-01  3.55933126e-01  3.58446534e-01
  3.60243750e-01  3.64477320e-01  3.66904160e-01  3.72615507e-01
  3.74534886e-01  3.78793081e-01  3.81832975e-01  3.83345930e-01
  3.84340976e-01  3.89976107e-01  3.90371026e-01  3.91971081e-01
  3.93215515e-01  3.99317088e-01  4.00901707e-01  4.02133700e-01
  4.06006678e-01  4.10813101e-01  4.13641845e-01  4.15529022e-01
  4.17382067e-01  4.20454687e-01  4.22912369e-01  4.25133840e-01
  4.28010672e-01  4.30127931e-01  4.30844261e-01  4.34973305e-01
  4.37595984e-01  4.42111891e-01  4.42307860e-01  4.42750535e-01
  4.45488471e-01  4.49650981e-01  4.50355030e-01  4.58540321e-01
  4.58635815e-01  4.61034217e-01  4.63939916e-01  4.69042946e-01
  4.70028665e-01  4.72229868e-01  4.73210183e-01  4.76506203e-01
  4.77770440e-01  4.79385953e-01  4.83588484e-01  4.84559564e-01
  4.84652707e-01  4.88825798e-01  4.90448630e-01  4.93676633e-01
  4.94868154e-01  4.95815136e-01  4.99378892e-01  4.99614225e-01
  5.00050258e-01  5.03505363e-01  5.05669413e-01  5.08944348e-01
  5.11917556e-01  5.14244163e-01  5.16388771e-01  5.18425735e-01
  5.19864120e-01  5.21610288e-01  5.23386408e-01  5.27044931e-01
  5.29109570e-01  5.29652487e-01  5.32743174e-01  5.33598110e-01
  5.35563854e-01  5.39384818e-01  5.41900391e-01  5.42821372e-01
  5.46675776e-01  5.49168140e-01  5.50610721e-01  5.52586888e-01
  5.54710495e-01  5.56247643e-01  5.57823255e-01  5.62586787e-01
  5.65121356e-01  5.66651237e-01  5.70248802e-01  5.72278789e-01
  5.72969805e-01  5.76120926e-01  5.78536862e-01  5.79680140e-01
  5.80484840e-01  5.83487284e-01  5.84537775e-01  5.87335057e-01
  5.92420834e-01  5.95964726e-01  5.96263612e-01  6.00076925e-01
  6.01903678e-01  6.02950735e-01  6.06395432e-01  6.07228456e-01
  6.08270751e-01  6.11870068e-01  6.12436963e-01  6.18149678e-01
  6.20153550e-01  6.21719904e-01  6.27839538e-01  6.29078451e-01
  6.30695676e-01  6.35401106e-01  6.37285834e-01  6.40636161e-01
  6.42944373e-01  6.44487976e-01  6.46751891e-01  6.50121318e-01
  6.52493803e-01  6.55417712e-01  6.58992522e-01  6.60203151e-01
  6.61870723e-01  6.63804455e-01  6.66725557e-01  6.68427431e-01
  6.77097806e-01  6.78321399e-01  6.80285745e-01  6.84500285e-01
  6.87226447e-01  6.87649843e-01  6.94007931e-01  6.97173676e-01
  7.01256456e-01  7.03774173e-01  7.04120182e-01  7.09142888e-01
  7.11861779e-01  7.14541048e-01  7.16321339e-01  7.19468508e-01
  7.21005695e-01  7.28114773e-01  7.30154041e-01  7.33369744e-01
  7.38645008e-01  7.40243972e-01  7.43734634e-01  7.45807021e-01
  7.49019692e-01  7.50676350e-01  7.52916946e-01  7.55461492e-01
  7.61645454e-01  7.65167553e-01  7.68739068e-01  7.71148238e-01
  7.75651919e-01  7.78313294e-01  7.80442896e-01  7.83452234e-01
  7.87154691e-01  7.91976547e-01  7.93954016e-01  7.97707383e-01
  7.99007755e-01  8.01510968e-01  8.07145179e-01  8.07786563e-01
  8.14020765e-01  8.16278710e-01  8.17179338e-01  8.25086876e-01
  8.31025547e-01  8.31971974e-01  8.36764992e-01  8.38738774e-01
  8.40925428e-01  8.44054670e-01  8.49067217e-01  8.55602302e-01
  8.55897081e-01  8.61899268e-01  8.64935745e-01  8.69924787e-01
  8.74856366e-01  8.77128919e-01  8.82098083e-01  8.89879109e-01
  8.90718811e-01  8.92852354e-01  8.94256889e-01  8.97231619e-01
  9.01539385e-01  9.03380342e-01  9.07792858e-01  9.09979002e-01
  9.12683386e-01  9.19611516e-01  9.21572256e-01  9.25487979e-01
  9.29256956e-01  9.36047338e-01  9.41161376e-01  9.44122634e-01
  9.49123910e-01  9.53886942e-01  9.56589190e-01  9.62046341e-01
  9.64139600e-01  9.66274140e-01  9.68867029e-01  9.76335015e-01
  9.77187148e-01  9.80040432e-01  9.82748336e-01  9.86298489e-01
  9.90020602e-01  9.95193931e-01  9.98092433e-01  1.00025982e+00
  1.00682032e+00  1.00864909e+00  1.01311464e+00  1.01535835e+00
  1.02203729e+00  1.02503421e+00  1.02711164e+00  1.03191639e+00
  1.03579567e+00  1.03965041e+00  1.04810616e+00  1.04840329e+00
  1.05056719e+00  1.05354139e+00  1.05648682e+00  1.06521417e+00
  1.06856759e+00  1.07081073e+00  1.07407883e+00  1.07936194e+00
  1.08087681e+00  1.08261273e+00  1.08519898e+00  1.09064814e+00
  1.09489862e+00  1.09816927e+00  1.10382226e+00  1.10507190e+00
  1.10775631e+00  1.10911956e+00  1.11167645e+00  1.11733152e+00
  1.12293370e+00  1.12634478e+00  1.12903001e+00  1.13445845e+00
  1.13864705e+00  1.14421830e+00  1.14629258e+00  1.14864514e+00
  1.15523475e+00  1.15941634e+00  1.16747508e+00  1.17165131e+00
  1.17488767e+00  1.17905171e+00  1.18074917e+00  1.18657755e+00
  1.19019883e+00  1.19120640e+00  1.19909209e+00  1.19966169e+00
  1.20264007e+00  1.20665184e+00  1.20910824e+00  1.21258773e+00
  1.21809069e+00  1.22333878e+00  1.22650883e+00  1.22921634e+00
  1.23534674e+00  1.23766712e+00  1.24293945e+00  1.24692642e+00
  1.25118010e+00  1.25638189e+00  1.26085933e+00  1.26420988e+00
  1.26718134e+00  1.27279437e+00  1.27506271e+00  1.27827624e+00
  1.27883719e+00  1.28689500e+00  1.29123939e+00  1.29452623e+00
  1.29526054e+00  1.29757311e+00  1.30240542e+00  1.30859028e+00
  1.31311427e+00  1.31907885e+00  1.32256417e+00  1.32390438e+00
  1.32853973e+00  1.33287789e+00  1.33476184e+00  1.34234165e+00
  1.34412130e+00  1.35126611e+00  1.35786758e+00  1.36231784e+00
  1.36497747e+00  1.36655201e+00  1.37361354e+00  1.37652596e+00
  1.37845937e+00  1.38211940e+00  1.38732259e+00  1.39554820e+00
  1.39906551e+00  1.40294088e+00  1.40921755e+00  1.41216112e+00
  1.41698007e+00  1.41908266e+00  1.42665326e+00  1.42694050e+00
  1.43132416e+00  1.43439900e+00  1.44327040e+00  1.44641700e+00
  1.44827724e+00  1.44928770e+00  1.45195967e+00  1.45583381e+00
  1.46304695e+00  1.46910387e+00  1.47380774e+00  1.48073670e+00
  1.48249716e+00  1.48790680e+00  1.49252290e+00  1.49544153e+00
  1.50200037e+00  1.50722561e+00  1.51074928e+00  1.51685443e+00
  1.51714855e+00  1.52481006e+00  1.52837644e+00  1.53074559e+00
  1.53336522e+00  1.53902593e+00  1.54820112e+00  1.55586998e+00
  1.55964026e+00  1.56127022e+00  1.56334380e+00  1.56774332e+00
  1.57420031e+00  1.57752869e+00  1.58098759e+00  1.58609117e+00
  1.59103053e+00  1.59825550e+00  1.60050490e+00  1.60585824e+00
  1.61066084e+00  1.61605194e+00  1.61913234e+00  1.62256243e+00
  1.63055170e+00  1.63291318e+00  1.63804397e+00  1.64236081e+00
  1.64301368e+00  1.64740472e+00  1.64982463e+00  1.65160341e+00
  1.65289852e+00  1.65857227e+00  1.66085660e+00  1.66620915e+00
  1.66986938e+00  1.67194901e+00  1.67352989e+00  1.67614016e+00
  1.68073169e+00  1.68254341e+00  1.68557384e+00  1.68910274e+00
  1.69339827e+00  1.69753326e+00  1.69955691e+00  1.70467282e+00
  1.70749880e+00  1.71079636e+00  1.71270055e+00  1.71442394e+00
  1.72072111e+00  1.72186099e+00  1.72457278e+00  1.72645063e+00
  1.73438857e+00  1.73696494e+00  1.73961430e+00  1.74694332e+00
  1.74971932e+00  1.75305183e+00  1.75784065e+00  1.76122476e+00
  1.76337565e+00  1.76894162e+00  1.76989138e+00  1.77230553e+00
  1.77725180e+00  1.78192067e+00  1.78565495e+00  1.79067338e+00
  1.79396333e+00  1.79499422e+00  1.79922132e+00  1.80440135e+00
  1.80483276e+00  1.80977937e+00  1.81372145e+00  1.81428065e+00
  1.81917015e+00  1.82247805e+00  1.82641286e+00  1.83055226e+00
  1.83319830e+00  1.83698167e+00  1.84145013e+00  1.84408776e+00
  1.85232246e+00  1.85494006e+00  1.85571616e+00  1.86531490e+00
  1.86625967e+00  1.86897888e+00  1.87166383e+00  1.87725425e+00
  1.88363557e+00  1.89061266e+00  1.89383784e+00  1.89611099e+00
  1.90346519e+00  1.90743384e+00  1.91430597e+00  1.91922964e+00
  1.92270177e+00  1.92751548e+00  1.93161764e+00  1.93556607e+00
  1.93828894e+00  1.94270653e+00  1.94733153e+00  1.94862970e+00
  1.95441828e+00  1.95912823e+00  1.96329213e+00  1.96855399e+00
  1.96980466e+00  1.97654558e+00  1.98352564e+00  1.98545183e+00
  1.98741384e+00  1.99119172e+00  1.99436369e+00  1.99578324e+00
  2.00348455e+00  2.00396830e+00  2.00566135e+00  2.01007861e+00
  2.02111434e+00  2.02301470e+00  2.02792516e+00  2.03148760e+00
  2.03676227e+00  2.03959873e+00  2.04319122e+00  2.04996699e+00
  2.05575727e+00  2.05748085e+00  2.06567051e+00  2.06758519e+00
  2.06938104e+00  2.07458456e+00  2.07587395e+00  2.08152653e+00
  2.08282830e+00  2.08633956e+00  2.08928064e+00  2.09725289e+00
  2.10104815e+00  2.10674708e+00  2.10954146e+00  2.11669014e+00
  2.11977371e+00  2.12165308e+00  2.12539630e+00  2.12979083e+00
  2.13353023e+00  2.13885980e+00  2.14303712e+00  2.14720581e+00
  2.14914221e+00  2.15321286e+00  2.15498786e+00  2.16436103e+00
  2.16550206e+00  2.16963935e+00  2.17460982e+00  2.17857326e+00
  2.18482594e+00  2.18830825e+00  2.19288810e+00  2.19505410e+00
  2.20081282e+00  2.21047500e+00  2.21163029e+00  2.21798072e+00
  2.21986653e+00  2.22271682e+00  2.22620937e+00  2.23390621e+00
  2.23601732e+00  2.24079229e+00  2.24945083e+00  2.25060115e+00
  2.25376999e+00  2.25473113e+00  2.26479993e+00  2.26508252e+00
  2.27323490e+00  2.27763302e+00  2.28621962e+00  2.28882245e+00
  2.29020574e+00  2.29497392e+00  2.29570928e+00  2.30144178e+00
  2.30560692e+00  2.30900988e+00  2.31080022e+00  2.31425819e+00
  2.31729479e+00  2.32267267e+00  2.33096350e+00  2.33652177e+00
  2.33791020e+00  2.34111972e+00  2.34596913e+00  2.34954181e+00
  2.35359023e+00  2.36217380e+00  2.36515468e+00  2.36874537e+00
  2.37518940e+00  2.37948502e+00  2.38088014e+00  2.38546038e+00
  2.38913663e+00  2.39096722e+00  2.39552662e+00  2.40466751e+00
  2.40528740e+00  2.40849687e+00  2.41241154e+00  2.41804774e+00
  2.42016512e+00  2.42555302e+00  2.42851254e+00  2.43467286e+00
  2.43621141e+00  2.43830755e+00  2.44547353e+00  2.45052059e+00
  2.45366280e+00  2.46079362e+00  2.46271781e+00  2.46896448e+00
  2.47096713e+00  2.47470766e+00  2.47616288e+00  2.48000726e+00
  2.48485828e+00  2.49050123e+00  2.49334204e+00  2.49483474e+00
  2.50062593e+00  2.50545243e+00  2.51036652e+00  2.51412933e+00
  2.52070708e+00  2.52095496e+00  2.52623407e+00  2.53055101e+00
  2.53316579e+00  2.53640352e+00  2.54061960e+00  2.54672719e+00
  2.55039191e+00  2.55141266e+00  2.55439423e+00  2.55640431e+00
  2.56051219e+00  2.56424478e+00  2.56871649e+00  2.56958007e+00
  2.57534092e+00  2.58136446e+00  2.58805542e+00  2.59107707e+00
  2.60163707e+00  2.60257418e+00  2.60664503e+00  2.61201940e+00
  2.61892889e+00  2.62288351e+00  2.62483752e+00  2.63313351e+00
  2.63431422e+00  2.63568600e+00  2.64104006e+00  2.64261787e+00
  2.64456327e+00  2.65011582e+00  2.65512626e+00  2.65783186e+00
  2.66110454e+00  2.66245819e+00  2.67137600e+00  2.67514393e+00
  2.67952209e+00  2.68166282e+00  2.69017952e+00  2.69172470e+00
  2.69350327e+00  2.69904339e+00  2.70033653e+00  2.70278504e+00
  2.70615274e+00  2.71291311e+00  2.71456791e+00  2.71734759e+00
  2.72245255e+00  2.72376266e+00  2.72858078e+00  2.73079654e+00
  2.73707900e+00  2.74239612e+00  2.74434915e+00  2.74755500e+00
  2.75078054e+00  2.75289808e+00  2.75526417e+00  2.75895069e+00
  2.76306065e+00  2.77066578e+00  2.77805664e+00  2.78213384e+00
  2.78366490e+00  2.78489644e+00  2.78953107e+00  2.79348867e+00
  2.79583786e+00  2.80039286e+00  2.80165226e+00  2.80368063e+00
  2.81715549e+00  2.81841032e+00  2.82027545e+00  2.82724677e+00
  2.82863396e+00  2.83273654e+00  2.83687315e+00  2.84055712e+00
  2.84475037e+00  2.84642031e+00  2.85350617e+00  2.85538989e+00
  2.86203630e+00  2.86387626e+00  2.87039703e+00  2.87504903e+00
  2.88149815e+00  2.88343551e+00  2.88974174e+00  2.88995529e+00
  2.89839077e+00  2.89929949e+00  2.90291130e+00  2.90832356e+00
  2.90888699e+00  2.91277501e+00  2.91586092e+00  2.92080484e+00
  2.92407636e+00  2.93059561e+00  2.93388355e+00  2.93657642e+00
  2.94055521e+00  2.94279578e+00  2.94765607e+00  2.94997003e+00
  2.95236797e+00  2.95816913e+00  2.95910048e+00  2.96393523e+00
  2.96998228e+00  2.97468301e+00  2.97890917e+00  2.98237416e+00
  2.98555289e+00  2.98889107e+00  2.99625434e+00  2.99997201e+00
  3.00283186e+00  3.00416215e+00  3.01382137e+00  3.02095531e+00
  3.03248181e+00  3.03495248e+00  3.04042706e+00  3.04417816e+00
  3.04700485e+00  3.04968121e+00  3.05559644e+00  3.05857076e+00
  3.06209815e+00  3.06325935e+00  3.06928984e+00  3.07573901e+00
  3.07806521e+00  3.08333127e+00  3.08510448e+00  3.08955668e+00
  3.09395100e+00  3.09834355e+00  3.10074189e+00  3.10440431e+00
  3.10685486e+00  3.11067777e+00  3.11623484e+00  3.11706746e+00
  3.12020510e+00  3.12293162e+00  3.12929695e+00  3.13618373e+00
  3.13873198e+00  3.14208058e+00  3.14478820e+00  3.14575190e+00
  3.14970323e+00  3.15346220e+00  3.15714000e+00  3.15961260e+00
  3.16241871e+00  3.16905318e+00  3.16985217e+00  3.17497007e+00
  3.17677681e+00  3.18088238e+00  3.18308179e+00  3.18597206e+00
  3.19172117e+00  3.19552991e+00  3.19961190e+00  3.20202784e+00
  3.20584918e+00  3.20854502e+00  3.21184877e+00  3.21755509e+00
  3.21912656e+00  3.22056904e+00  3.22474528e+00  3.23026288e+00
  3.23149854e+00  3.23299930e+00  3.23760858e+00  3.24076426e+00
  3.24411350e+00  3.24765164e+00  3.25049034e+00  3.25266610e+00
  3.25750167e+00  3.25853125e+00  3.26282706e+00  3.26645012e+00
  3.27016809e+00  3.27080912e+00  3.27588868e+00  3.28160093e+00
  3.28410257e+00  3.28767782e+00  3.29372610e+00  3.29833770e+00
  3.29893795e+00  3.30338170e+00  3.30629863e+00  3.30833943e+00
  3.31301430e+00  3.31359100e+00  3.31731712e+00  3.32643412e+00
  3.32872015e+00  3.33144372e+00  3.33606800e+00  3.33839576e+00
  3.34077764e+00  3.34305494e+00  3.34497981e+00  3.35080243e+00
  3.35357003e+00  3.35598463e+00  3.35787235e+00  3.35926432e+00
  3.36499848e+00  3.36623301e+00  3.37056136e+00  3.37343780e+00
  3.37919177e+00  3.38022114e+00  3.38048636e+00  3.38468377e+00
  3.38650709e+00  3.39358868e+00  3.39600436e+00  3.39762365e+00
  3.40065220e+00  3.40194447e+00  3.40617976e+00  3.40670350e+00
  3.40983755e+00  3.41426659e+00  3.41615418e+00  3.42172514e+00
  3.42378573e+00  3.42721626e+00  3.43163638e+00  3.43448958e+00
  3.43751817e+00  3.43884626e+00  3.44516271e+00  3.44894045e+00
  3.45123138e+00  3.45539599e+00  3.45833257e+00  3.46039339e+00
  3.46443650e+00  3.46604978e+00  3.46853926e+00  3.47152436e+00
  3.47332677e+00  3.47810917e+00  3.48024362e+00  3.48508537e+00
  3.48621936e+00  3.48954420e+00  3.49476453e+00  3.49783710e+00
  3.50029277e+00  3.50331796e+00  3.50649502e+00  3.50893067e+00
  3.51307021e+00  3.51616366e+00  3.52098851e+00  3.52247919e+00
  3.52642035e+00  3.52920519e+00  3.53276209e+00  3.53484552e+00
  3.54094201e+00  3.54517456e+00  3.54779738e+00  3.55239602e+00
  3.55545621e+00  3.55740438e+00  3.56186033e+00  3.56582826e+00
  3.56995142e+00  3.57427607e+00  3.57729567e+00  3.57785255e+00
  3.58336590e+00  3.58436311e+00  3.58965075e+00  3.59014661e+00
  3.59558181e+00  3.59668445e+00  3.60808141e+00  3.60977810e+00
  3.61671165e+00  3.62012735e+00  3.62322031e+00  3.62564082e+00
  3.62868549e+00  3.63725662e+00  3.64101903e+00  3.64344548e+00
  3.64756092e+00  3.65413400e+00  3.65622146e+00  3.65814319e+00
  3.66190077e+00  3.67103862e+00  3.67662830e+00  3.68004914e+00
  3.68396964e+00  3.68674024e+00  3.69282654e+00  3.69523051e+00
  3.69913620e+00  3.70468574e+00  3.70965867e+00  3.71412953e+00
  3.72123719e+00  3.72308337e+00  3.72565586e+00  3.72800129e+00
  3.73618150e+00  3.74069668e+00  3.74235290e+00  3.74536252e+00
  3.75612421e+00  3.76425932e+00  3.76525056e+00  3.76933458e+00
  3.77450315e+00  3.78208049e+00  3.78619476e+00  3.78967235e+00
  3.79444456e+00  3.80036464e+00  3.80256932e+00  3.80909824e+00
  3.81424603e+00  3.81859393e+00  3.82410828e+00  3.82739643e+00
  3.83066653e+00  3.83307215e+00  3.83954149e+00  3.84294978e+00
  3.84885512e+00  3.85008801e+00  3.85272990e+00  3.85771119e+00
  3.86000380e+00  3.86711660e+00  3.87342012e+00  3.87913362e+00
  3.88183246e+00  3.88861798e+00  3.89201087e+00  3.89842825e+00
  3.90288910e+00  3.90943115e+00  3.91105324e+00  3.91146469e+00
  3.92144086e+00  3.92559787e+00  3.93302305e+00  3.93668548e+00
  3.94312041e+00  3.94471478e+00  3.95108309e+00  3.95747051e+00
  3.96328539e+00  3.97075967e+00  3.97438486e+00  3.98124809e+00
  3.98296738e+00  3.98801482e+00  3.99155785e+00  3.99520246e+00
  3.99993467e+00  4.00406738e+00  4.01279964e+00  4.01605297e+00
  4.02242534e+00  4.03203214e+00  4.03673681e+00  4.04308341e+00
  4.04422588e+00  4.05112985e+00  4.06180853e+00  4.06553622e+00
  4.06934987e+00  4.07277199e+00  4.07443077e+00  4.07882591e+00
  4.08539161e+00  4.08839343e+00  4.09019333e+00  4.10173202e+00
  4.10931449e+00  4.11266715e+00  4.12144136e+00  4.12770712e+00
  4.12865037e+00  4.13493233e+00  4.13761515e+00  4.15012618e+00
  4.15748679e+00  4.16438792e+00  4.16967370e+00  4.17600356e+00
  4.18150761e+00  4.18679838e+00  4.19234806e+00  4.20021650e+00
  4.20825180e+00  4.21337775e+00  4.22153027e+00  4.22387655e+00
  4.23214095e+00  4.23395367e+00  4.23745124e+00  4.24699055e+00
  4.25466216e+00  4.25723486e+00  4.27005036e+00  4.27212722e+00
  4.28308535e+00  4.28900502e+00  4.29349614e+00  4.29785863e+00
  4.30476111e+00  4.31104719e+00  4.31668760e+00  4.32916413e+00
  4.33380648e+00  4.33761974e+00  4.34140877e+00  4.35860364e+00
  4.36598529e+00  4.36731014e+00  4.37996930e+00  4.38265202e+00
  4.38846754e+00  4.39525590e+00  4.40041173e+00  4.41097710e+00
  4.41958422e+00  4.42606022e+00  4.44409672e+00  4.44684247e+00
  4.45056077e+00  4.45182400e+00  4.45448216e+00  4.45975409e+00
  4.47014934e+00  4.47273716e+00  4.47573584e+00  4.48245669e+00
  4.48868324e+00  4.49147337e+00  4.49701109e+00  4.50231213e+00
  4.50591102e+00  4.51727283e+00  4.51978065e+00  4.53316815e+00
  4.53760095e+00  4.54395657e+00  4.55016493e+00  4.55522237e+00
  4.56144613e+00  4.57036646e+00  4.57561480e+00  4.58225560e+00
  4.59177873e+00  4.60255348e+00  4.60866762e+00  4.61199253e+00
  4.62290948e+00  4.63300799e+00  4.63752491e+00  4.64014988e+00
  4.65033509e+00  4.65743556e+00  4.66092988e+00  4.66655076e+00
  4.67449740e+00  4.67882658e+00  4.68793362e+00  4.70262297e+00
  4.70790118e+00  4.71107055e+00  4.71765635e+00  4.72792697e+00
  4.73601086e+00  4.74309180e+00  4.75355520e+00  4.77168312e+00
  4.77451159e+00  4.78299876e+00  4.80025299e+00  4.80258807e+00
  4.82327991e+00  4.83243483e+00  4.83892499e+00  4.85272439e+00
  4.86379414e+00  4.86962962e+00  4.87903793e+00  4.88650625e+00
  4.89066737e+00  4.89557806e+00  4.90573104e+00  4.91713311e+00
  4.92167048e+00  4.92564455e+00  4.93596166e+00  4.94136408e+00
  4.95056811e+00  4.95255112e+00  4.95766656e+00  4.96226966e+00
  4.97682431e+00  4.97729800e+00  4.99551186e+00  5.00781517e+00
  5.01618898e+00  5.02102310e+00  5.03409313e+00  5.04184013e+00
  5.05438355e+00  5.06491071e+00  5.08047520e+00  5.08783921e+00
  5.09580383e+00  5.11007974e+00  5.11580609e+00  5.13907843e+00
  5.14332112e+00  5.15061644e+00  5.16029594e+00  5.17556030e+00
  5.18756711e+00  5.19685237e+00  5.20288532e+00  5.21448690e+00
  5.22169346e+00  5.22638117e+00  5.24018136e+00  5.24537990e+00
  5.25288782e+00  5.25834894e+00  5.26068697e+00  5.26363755e+00
  5.26618142e+00  5.26981300e+00  5.28009304e+00  5.28300030e+00
  5.29725829e+00  5.31166054e+00  5.31367294e+00  5.32094111e+00
  5.33371112e+00  5.33939349e+00  5.34269958e+00  5.34821169e+00
  5.35752911e+00  5.37264046e+00  5.38071288e+00  5.38542531e+00
  5.39357285e+00  5.40249081e+00  5.40677591e+00  5.41480167e+00
  5.41952062e+00  5.42743514e+00  5.43840845e+00  5.44042461e+00
  5.45174019e+00  5.45621126e+00  5.46049880e+00  5.46820416e+00
  5.48519970e+00  5.52411144e+00  5.53270208e+00  5.54801089e+00
  5.54969116e+00  5.56776730e+00  5.57332534e+00  5.58924812e+00
  5.60293039e+00  5.61857886e+00  5.65808804e+00  5.66644148e+00
  5.67902400e+00  5.68246479e+00  5.69852087e+00  5.69970584e+00
  5.74201229e+00  5.74515177e+00  5.76503587e+00  5.77764534e+00
  5.79882897e+00  5.81310847e+00  5.82103741e+00  5.82368823e+00
  5.85612788e+00  5.86327332e+00  5.86778362e+00  5.88166728e+00
  5.92588994e+00  5.93858541e+00  5.94617833e+00  5.99567143e+00
  6.00564153e+00  6.02925457e+00  6.03092408e+00  6.04927881e+00
  6.05591201e+00  6.11150813e+00  6.14229564e+00  6.17189735e+00
  6.18356885e+00  6.19389585e+00  6.21020050e+00  6.27013203e+00
  6.27322997e+00  6.29773624e+00  6.31506119e+00  6.33616941e+00
  6.39968314e+00  6.40739326e+00  6.45293040e+00  6.48316122e+00
  6.50750408e+00  6.51597795e+00  6.52191230e+00  6.52585611e+00
  6.55418775e+00  6.56777187e+00  6.61226320e+00  6.68725703e+00
  6.69610538e+00  6.72049277e+00  6.73448735e+00  6.76896865e+00
  6.77450999e+00  6.82873343e+00  6.83019324e+00  6.83868490e+00
  6.89612025e+00  6.90304656e+00  6.91727685e+00  6.94449955e+00
  6.97187591e+00  6.97631798e+00  6.98772230e+00  7.03492150e+00
  7.15733706e+00  7.17271814e+00  7.18613787e+00  7.21107072e+00
  7.21456877e+00  7.23245562e+00  7.23308670e+00  7.24266161e+00
  7.35237193e+00  7.40261940e+00  2.23711584e+01  2.23744947e+01
  2.24644009e+01  2.24675621e+01  2.24789078e+01  2.25375942e+01
  2.25555025e+01  2.25705425e+01  2.25960087e+01  2.26092160e+01
  2.26501138e+01  2.26977298e+01  2.27199073e+01  2.27300358e+01
  2.27596545e+01  2.27759608e+01  2.27938360e+01  2.28511080e+01
  2.28700429e+01  2.28845079e+01  2.30613834e+01  2.31193759e+01
  2.32410752e+01  2.33149035e+01  2.33224638e+01  2.33724292e+01
  2.33940196e+01  2.34152797e+01  2.34586537e+01  2.34620487e+01
  2.35374163e+01  2.36391750e+01  2.37858611e+01  3.25550823e+01
  3.25943267e+01  3.26964223e+01  3.27361737e+01  4.38220738e+01
  4.38879129e+01  4.39879211e+01  4.40119600e+01  4.40807369e+01
  4.41120650e+01]
nelec by numeric integration = 314.001478729877
    CPU time for vxc    520.52 sec, wall time     35.16 sec
    CPU time for df vj and vk   4100.67 sec, wall time    307.66 sec
    CPU time for df vj and vk   3273.83 sec, wall time    248.20 sec
E1 = -13530.130199766387  Ecoul = 6388.869578251287  Exc = -273.0696106923084
cycle= 2 E= -1952.24384921325  delta_E= -5.52e-08  |g|= 0.000194  |ddm|= 0.00222
    CPU time for cycle= 2   7922.51 sec, wall time    594.61 sec
  HOMO = -0.272586077839019  LUMO = 0.00668760420459625
  mo_energy =
[-1.92787412e+01 -1.92505075e+01 -1.92205169e+01 -1.92022724e+01
 -1.91601552e+01 -1.91575161e+01 -1.44513905e+01 -1.44344885e+01
 -1.44223687e+01 -1.44159500e+01 -1.04311593e+01 -1.04101295e+01
 -1.03571020e+01 -1.03379415e+01 -1.03269222e+01 -1.03205925e+01
 -1.03125980e+01 -1.03015959e+01 -1.03009327e+01 -1.02974486e+01
 -1.02970008e+01 -1.02939721e+01 -1.02936065e+01 -1.02889063e+01
 -1.02873672e+01 -1.02853111e+01 -1.02845089e+01 -1.02832002e+01
 -1.02817989e+01 -1.02817032e+01 -1.02784604e+01 -1.02780832e+01
 -1.02708498e+01 -1.02672213e+01 -1.02649078e+01 -1.02573240e+01
 -1.02516363e+01 -1.02510301e+01 -1.02468340e+01 -1.02466102e+01
 -1.02455451e+01 -1.02429106e+01 -1.02407840e+01 -1.26947483e+00
 -1.24609649e+00 -1.17372609e+00 -1.15784576e+00 -1.15709334e+00
 -1.14126631e+00 -1.11803571e+00 -1.10317218e+00 -1.09644937e+00
 -1.07546205e+00 -9.76523867e-01 -9.71706255e-01 -9.63244729e-01
 -9.38206905e-01 -9.34941605e-01 -9.28544142e-01 -9.25155849e-01
 -9.11371037e-01 -9.03917872e-01 -8.88224199e-01 -8.75046534e-01
 -8.56316519e-01 -8.43930106e-01 -8.35943102e-01 -8.27165765e-01
 -8.17366131e-01 -8.09899489e-01 -7.96903033e-01 -7.86716191e-01
 -7.67494117e-01 -7.57818083e-01 -7.55115180e-01 -7.40520751e-01
 -7.38317742e-01 -7.22571751e-01 -7.11750117e-01 -6.98100407e-01
 -6.82444902e-01 -6.76245401e-01 -6.68314303e-01 -6.63945850e-01
 -6.58671023e-01 -6.53372183e-01 -6.49338731e-01 -6.47422728e-01
 -6.36049409e-01 -6.30114673e-01 -6.25568078e-01 -6.13998489e-01
 -6.13210787e-01 -6.04914238e-01 -5.98393163e-01 -5.89344767e-01
 -5.84982286e-01 -5.80416342e-01 -5.76858732e-01 -5.71610928e-01
 -5.66123020e-01 -5.62667938e-01 -5.58030208e-01 -5.56536993e-01
 -5.52771308e-01 -5.48520107e-01 -5.46643108e-01 -5.43477802e-01
 -5.36701160e-01 -5.36277045e-01 -5.30887454e-01 -5.29871748e-01
 -5.27657100e-01 -5.25773310e-01 -5.21052355e-01 -5.20370286e-01
 -5.16837398e-01 -5.14994236e-01 -5.11760706e-01 -5.10692846e-01
 -5.04389265e-01 -5.02917344e-01 -4.97784969e-01 -4.97419794e-01
 -4.94707720e-01 -4.90620326e-01 -4.88669392e-01 -4.81497061e-01
 -4.80880063e-01 -4.77657850e-01 -4.74614064e-01 -4.70116299e-01
 -4.68256821e-01 -4.67269220e-01 -4.64623303e-01 -4.61924959e-01
 -4.59824352e-01 -4.58102431e-01 -4.54269947e-01 -4.49252647e-01
 -4.42797491e-01 -4.36851584e-01 -4.34939175e-01 -4.33896842e-01
 -4.21897039e-01 -4.21464148e-01 -4.19011247e-01 -3.98322183e-01
 -3.62612787e-01 -3.58730925e-01 -3.56079710e-01 -3.40740684e-01
 -3.38245359e-01 -3.32790785e-01 -3.21064799e-01 -2.89393301e-01
 -2.72586078e-01  6.68760420e-03  3.19658288e-02  5.88094136e-02
  6.73678662e-02  7.55164672e-02  8.36623602e-02  9.11806379e-02
  9.53328685e-02  1.02295373e-01  1.05328294e-01  1.09426309e-01
  1.15200131e-01  1.17589379e-01  1.21490254e-01  1.23150755e-01
  1.29783881e-01  1.34933154e-01  1.37455740e-01  1.41757691e-01
  1.44674329e-01  1.48140937e-01  1.50384203e-01  1.55093651e-01
  1.59839571e-01  1.60438468e-01  1.65271947e-01  1.66191553e-01
  1.70376170e-01  1.71071911e-01  1.75152727e-01  1.78468619e-01
  1.81193305e-01  1.83332937e-01  1.86638933e-01  1.88907857e-01
  1.94072984e-01  1.95787460e-01  1.98341577e-01  1.98957963e-01
  1.99296296e-01  2.03420864e-01  2.07862370e-01  2.09787980e-01
  2.11829231e-01  2.12591515e-01  2.15893821e-01  2.20977697e-01
  2.22546689e-01  2.25467229e-01  2.28806715e-01  2.31265885e-01
  2.32762887e-01  2.34501078e-01  2.35230770e-01  2.39665571e-01
  2.41563863e-01  2.48059393e-01  2.49020730e-01  2.50088326e-01
  2.52353879e-01  2.56663931e-01  2.59064471e-01  2.61127328e-01
  2.62603538e-01  2.65710623e-01  2.69037662e-01  2.70599714e-01
  2.74990241e-01  2.76406920e-01  2.80663919e-01  2.85638723e-01
  2.87229630e-01  2.90029461e-01  2.94158562e-01  2.95777523e-01
  2.99820212e-01  3.01745682e-01  3.04688706e-01  3.08676109e-01
  3.11449056e-01  3.12783656e-01  3.17366806e-01  3.18197008e-01
  3.18519916e-01  3.23492012e-01  3.28151199e-01  3.29344782e-01
  3.30990515e-01  3.33984697e-01  3.34711418e-01  3.37331465e-01
  3.39415792e-01  3.39522488e-01  3.46342207e-01  3.47471555e-01
  3.51544752e-01  3.54662386e-01  3.55932945e-01  3.58446007e-01
  3.60242951e-01  3.64476624e-01  3.66903443e-01  3.72615066e-01
  3.74534545e-01  3.78792700e-01  3.81833249e-01  3.83345163e-01
  3.84341363e-01  3.89975976e-01  3.90371110e-01  3.91970959e-01
  3.93215192e-01  3.99317006e-01  4.00902348e-01  4.02133007e-01
  4.06006127e-01  4.10812730e-01  4.13641246e-01  4.15528665e-01
  4.17381929e-01  4.20454489e-01  4.22911976e-01  4.25137800e-01
  4.28010297e-01  4.30127715e-01  4.30844181e-01  4.34972864e-01
  4.37595925e-01  4.42111889e-01  4.42307363e-01  4.42750162e-01
  4.45488357e-01  4.49650744e-01  4.50354622e-01  4.58540200e-01
  4.58635317e-01  4.61033360e-01  4.63939506e-01  4.69042608e-01
  4.70028006e-01  4.72229498e-01  4.73210032e-01  4.76505502e-01
  4.77769981e-01  4.79385714e-01  4.83587836e-01  4.84558661e-01
  4.84652274e-01  4.88828150e-01  4.90448702e-01  4.93676087e-01
  4.94867449e-01  4.95814832e-01  4.99378997e-01  4.99612969e-01
  5.00049873e-01  5.03504075e-01  5.05669500e-01  5.08944193e-01
  5.11916795e-01  5.14243710e-01  5.16388213e-01  5.18425596e-01
  5.19863882e-01  5.21610196e-01  5.23386163e-01  5.27045831e-01
  5.29110229e-01  5.29652194e-01  5.32742845e-01  5.33597918e-01
  5.35563128e-01  5.39384896e-01  5.41900019e-01  5.42821359e-01
  5.46675858e-01  5.49168348e-01  5.50610812e-01  5.52586880e-01
  5.54709924e-01  5.56247782e-01  5.57823194e-01  5.62586497e-01
  5.65122231e-01  5.66651942e-01  5.70251616e-01  5.72279263e-01
  5.72969287e-01  5.76120514e-01  5.78536712e-01  5.79682906e-01
  5.80487075e-01  5.83487270e-01  5.84538105e-01  5.87335044e-01
  5.92420067e-01  5.95964664e-01  5.96263812e-01  6.00076389e-01
  6.01903263e-01  6.02951263e-01  6.06396004e-01  6.07227802e-01
  6.08270767e-01  6.11870610e-01  6.12438223e-01  6.18149348e-01
  6.20154280e-01  6.21719750e-01  6.27841025e-01  6.29078008e-01
  6.30695749e-01  6.35400712e-01  6.37285501e-01  6.40635941e-01
  6.42943820e-01  6.44487832e-01  6.46751383e-01  6.50121201e-01
  6.52493358e-01  6.55417597e-01  6.58991621e-01  6.60203489e-01
  6.61870332e-01  6.63803897e-01  6.66724726e-01  6.68426821e-01
  6.77097536e-01  6.78321051e-01  6.80285496e-01  6.84499440e-01
  6.87225946e-01  6.87649138e-01  6.94007096e-01  6.97173191e-01
  7.01255713e-01  7.03773937e-01  7.04119721e-01  7.09142506e-01
  7.11860713e-01  7.14540952e-01  7.16320824e-01  7.19468333e-01
  7.21005457e-01  7.28114144e-01  7.30153668e-01  7.33369309e-01
  7.38644713e-01  7.40243292e-01  7.43734571e-01  7.45806794e-01
  7.49019246e-01  7.50675527e-01  7.52916795e-01  7.55461032e-01
  7.61644767e-01  7.65167262e-01  7.68738531e-01  7.71148059e-01
  7.75651239e-01  7.78313140e-01  7.80441570e-01  7.83451490e-01
  7.87153970e-01  7.91976899e-01  7.93953389e-01  7.97706640e-01
  7.99007761e-01  8.01510492e-01  8.07144573e-01  8.07786452e-01
  8.14021051e-01  8.16279033e-01  8.17179198e-01  8.25086325e-01
  8.31024976e-01  8.31971590e-01  8.36764358e-01  8.38738344e-01
  8.40924934e-01  8.44053428e-01  8.49066580e-01  8.55601794e-01
  8.55896412e-01  8.61898856e-01  8.64934924e-01  8.69924165e-01
  8.74855905e-01  8.77128448e-01  8.82097475e-01  8.89878561e-01
  8.90718258e-01  8.92851537e-01  8.94256130e-01  8.97230977e-01
  9.01538318e-01  9.03379685e-01  9.07791854e-01  9.09978664e-01
  9.12682058e-01  9.19611154e-01  9.21571671e-01  9.25487343e-01
  9.29256392e-01  9.36046746e-01  9.41161166e-01  9.44122580e-01
  9.49123122e-01  9.53886177e-01  9.56588833e-01  9.62045798e-01
  9.64138925e-01  9.66272634e-01  9.68865899e-01  9.76334226e-01
  9.77186114e-01  9.80039335e-01  9.82747731e-01  9.86297468e-01
  9.90019868e-01  9.95193551e-01  9.98091666e-01  1.00025982e+00
  1.00682068e+00  1.00864863e+00  1.01311400e+00  1.01535885e+00
  1.02203917e+00  1.02503550e+00  1.02711102e+00  1.03191675e+00
  1.03579457e+00  1.03964964e+00  1.04810601e+00  1.04840299e+00
  1.05056648e+00  1.05354100e+00  1.05648614e+00  1.06521338e+00
  1.06856701e+00  1.07081058e+00  1.07407827e+00  1.07936098e+00
  1.08087646e+00  1.08261194e+00  1.08519783e+00  1.09064784e+00
  1.09489835e+00  1.09816823e+00  1.10382199e+00  1.10507171e+00
  1.10775563e+00  1.10911870e+00  1.11167602e+00  1.11733078e+00
  1.12293293e+00  1.12634438e+00  1.12902884e+00  1.13445792e+00
  1.13864624e+00  1.14421745e+00  1.14629200e+00  1.14864433e+00
  1.15523407e+00  1.15941579e+00  1.16747460e+00  1.17165062e+00
  1.17488723e+00  1.17905100e+00  1.18074868e+00  1.18657669e+00
  1.19019805e+00  1.19120553e+00  1.19909174e+00  1.19966074e+00
  1.20263955e+00  1.20665143e+00  1.20910792e+00  1.21258724e+00
  1.21809022e+00  1.22333821e+00  1.22650831e+00  1.22921573e+00
  1.23534637e+00  1.23766662e+00  1.24293857e+00  1.24692577e+00
  1.25117938e+00  1.25638119e+00  1.26085888e+00  1.26420949e+00
  1.26718056e+00  1.27279345e+00  1.27506182e+00  1.27827532e+00
  1.27883677e+00  1.28689434e+00  1.29123883e+00  1.29452499e+00
  1.29525994e+00  1.29757250e+00  1.30240468e+00  1.30858954e+00
  1.31311312e+00  1.31907816e+00  1.32256391e+00  1.32390350e+00
  1.32853896e+00  1.33287747e+00  1.33476078e+00  1.34234061e+00
  1.34412017e+00  1.35126571e+00  1.35786681e+00  1.36231739e+00
  1.36497707e+00  1.36655175e+00  1.37361332e+00  1.37652553e+00
  1.37845962e+00  1.38211922e+00  1.38732249e+00  1.39555111e+00
  1.39906454e+00  1.40294170e+00  1.40921670e+00  1.41216076e+00
  1.41697952e+00  1.41908276e+00  1.42665357e+00  1.42694200e+00
  1.43132459e+00  1.43439981e+00  1.44326946e+00  1.44641659e+00
  1.44827745e+00  1.44928657e+00  1.45195821e+00  1.45583338e+00
  1.46304515e+00  1.46910340e+00  1.47380668e+00  1.48073635e+00
  1.48249641e+00  1.48790553e+00  1.49252217e+00  1.49544090e+00
  1.50199989e+00  1.50722504e+00  1.51074839e+00  1.51685377e+00
  1.51714778e+00  1.52480945e+00  1.52837565e+00  1.53074431e+00
  1.53336428e+00  1.53902544e+00  1.54819736e+00  1.55586890e+00
  1.55963928e+00  1.56126908e+00  1.56334309e+00  1.56774233e+00
  1.57419958e+00  1.57752844e+00  1.58098646e+00  1.58609027e+00
  1.59103020e+00  1.59825431e+00  1.60050337e+00  1.60585679e+00
  1.61066039e+00  1.61605113e+00  1.61913209e+00  1.62256211e+00
  1.63055105e+00  1.63291236e+00  1.63804357e+00  1.64236058e+00
  1.64301300e+00  1.64740400e+00  1.64982367e+00  1.65160287e+00
  1.65289809e+00  1.65857011e+00  1.66085606e+00  1.66620860e+00
  1.66986906e+00  1.67194863e+00  1.67352980e+00  1.67613912e+00
  1.68073181e+00  1.68254317e+00  1.68557306e+00  1.68910213e+00
  1.69339702e+00  1.69753222e+00  1.69955665e+00  1.70467248e+00
  1.70749842e+00  1.71079592e+00  1.71270031e+00  1.71442350e+00
  1.72072088e+00  1.72186089e+00  1.72457280e+00  1.72644961e+00
  1.73439113e+00  1.73696441e+00  1.73961463e+00  1.74694265e+00
  1.74971885e+00  1.75305134e+00  1.75784006e+00  1.76122465e+00
  1.76337529e+00  1.76894128e+00  1.76989158e+00  1.77230525e+00
  1.77725119e+00  1.78192072e+00  1.78565460e+00  1.79067344e+00
  1.79396240e+00  1.79499288e+00  1.79922093e+00  1.80440049e+00
  1.80483263e+00  1.80978275e+00  1.81372149e+00  1.81428015e+00
  1.81917002e+00  1.82247744e+00  1.82641331e+00  1.83055226e+00
  1.83319814e+00  1.83698165e+00  1.84145000e+00  1.84408766e+00
  1.85232284e+00  1.85494108e+00  1.85571864e+00  1.86531528e+00
  1.86626083e+00  1.86897882e+00  1.87166357e+00  1.87725440e+00
  1.88363690e+00  1.89061165e+00  1.89383761e+00  1.89610896e+00
  1.90346458e+00  1.90743316e+00  1.91430532e+00  1.91923082e+00
  1.92270341e+00  1.92751498e+00  1.93161728e+00  1.93556511e+00
  1.93828812e+00  1.94270580e+00  1.94733202e+00  1.94862946e+00
  1.95441745e+00  1.95912882e+00  1.96329213e+00  1.96855378e+00
  1.96980456e+00  1.97654449e+00  1.98352683e+00  1.98545148e+00
  1.98741268e+00  1.99119154e+00  1.99436377e+00  1.99578289e+00
  2.00348477e+00  2.00396758e+00  2.00566063e+00  2.01007828e+00
  2.02111443e+00  2.02302283e+00  2.02792520e+00  2.03148711e+00
  2.03676136e+00  2.03959931e+00  2.04319152e+00  2.04996825e+00
  2.05575736e+00  2.05748142e+00  2.06567107e+00  2.06758527e+00
  2.06938070e+00  2.07458417e+00  2.07587493e+00  2.08152623e+00
  2.08282761e+00  2.08633920e+00  2.08927992e+00  2.09725229e+00
  2.10104845e+00  2.10674684e+00  2.10953991e+00  2.11668970e+00
  2.11977289e+00  2.12165311e+00  2.12539531e+00  2.12979041e+00
  2.13352965e+00  2.13885898e+00  2.14303666e+00  2.14720429e+00
  2.14913975e+00  2.15321227e+00  2.15499030e+00  2.16436076e+00
  2.16550152e+00  2.16963901e+00  2.17460959e+00  2.17857261e+00
  2.18482678e+00  2.18830798e+00  2.19288776e+00  2.19505500e+00
  2.20081290e+00  2.21047381e+00  2.21163071e+00  2.21798025e+00
  2.21986539e+00  2.22271676e+00  2.22620899e+00  2.23390570e+00
  2.23601672e+00  2.24079208e+00  2.24945038e+00  2.25060145e+00
  2.25376943e+00  2.25473127e+00  2.26480027e+00  2.26508255e+00
  2.27323837e+00  2.27763243e+00  2.28621983e+00  2.28882492e+00
  2.29020515e+00  2.29497603e+00  2.29570897e+00  2.30144137e+00
  2.30561516e+00  2.30900904e+00  2.31079957e+00  2.31425821e+00
  2.31729455e+00  2.32267217e+00  2.33096494e+00  2.33652484e+00
  2.33790974e+00  2.34111859e+00  2.34596905e+00  2.34954226e+00
  2.35359025e+00  2.36217314e+00  2.36515394e+00  2.36874520e+00
  2.37518899e+00  2.37948476e+00  2.38087964e+00  2.38545982e+00
  2.38913614e+00  2.39096610e+00  2.39552742e+00  2.40466658e+00
  2.40528687e+00  2.40849967e+00  2.41241146e+00  2.41804698e+00
  2.42016488e+00  2.42555215e+00  2.42851188e+00  2.43467282e+00
  2.43621055e+00  2.43830696e+00  2.44547330e+00  2.45052016e+00
  2.45366236e+00  2.46079324e+00  2.46271657e+00  2.46896325e+00
  2.47096662e+00  2.47470729e+00  2.47616248e+00  2.48000679e+00
  2.48485776e+00  2.49050027e+00  2.49334198e+00  2.49483467e+00
  2.50062521e+00  2.50545202e+00  2.51036552e+00  2.51412921e+00
  2.52070646e+00  2.52095432e+00  2.52623296e+00  2.53055077e+00
  2.53316507e+00  2.53640150e+00  2.54061881e+00  2.54672656e+00
  2.55039184e+00  2.55141192e+00  2.55439407e+00  2.55640389e+00
  2.56051181e+00  2.56424423e+00  2.56871589e+00  2.56957984e+00
  2.57534072e+00  2.58136386e+00  2.58805493e+00  2.59107682e+00
  2.60163698e+00  2.60257451e+00  2.60664472e+00  2.61201921e+00
  2.61892871e+00  2.62288596e+00  2.62483717e+00  2.63313292e+00
  2.63431417e+00  2.63568575e+00  2.64103866e+00  2.64261749e+00
  2.64456227e+00  2.65011741e+00  2.65512592e+00  2.65783151e+00
  2.66110430e+00  2.66245722e+00  2.67137473e+00  2.67514328e+00
  2.67952158e+00  2.68166614e+00  2.69018022e+00  2.69172395e+00
  2.69350254e+00  2.69904349e+00  2.70033622e+00  2.70278418e+00
  2.70615252e+00  2.71291451e+00  2.71456800e+00  2.71734733e+00
  2.72245400e+00  2.72376285e+00  2.72858049e+00  2.73079831e+00
  2.73707834e+00  2.74239533e+00  2.74434898e+00  2.74755447e+00
  2.75077912e+00  2.75290209e+00  2.75527005e+00  2.75895030e+00
  2.76306149e+00  2.77066625e+00  2.77806193e+00  2.78213322e+00
  2.78366388e+00  2.78489897e+00  2.78953000e+00  2.79348906e+00
  2.79583729e+00  2.80039227e+00  2.80165143e+00  2.80368025e+00
  2.81715511e+00  2.81841008e+00  2.82027551e+00  2.82724636e+00
  2.82863201e+00  2.83273688e+00  2.83687293e+00  2.84055663e+00
  2.84475032e+00  2.84642301e+00  2.85350735e+00  2.85539030e+00
  2.86203657e+00  2.86387557e+00  2.87039608e+00  2.87504837e+00
  2.88149690e+00  2.88343436e+00  2.88974102e+00  2.88995474e+00
  2.89839047e+00  2.89929863e+00  2.90291041e+00  2.90832204e+00
  2.90888659e+00  2.91277435e+00  2.91585933e+00  2.92080400e+00
  2.92407613e+00  2.93059599e+00  2.93388357e+00  2.93657711e+00
  2.94055447e+00  2.94279501e+00  2.94765559e+00  2.94996938e+00
  2.95236770e+00  2.95816807e+00  2.95909987e+00  2.96393472e+00
  2.96998167e+00  2.97468217e+00  2.97890852e+00  2.98237363e+00
  2.98555307e+00  2.98889003e+00  2.99625373e+00  2.99997100e+00
  3.00283474e+00  3.00416122e+00  3.01382077e+00  3.02095882e+00
  3.03248066e+00  3.03495184e+00  3.04042505e+00  3.04417721e+00
  3.04700268e+00  3.04968029e+00  3.05559558e+00  3.05857002e+00
  3.06209685e+00  3.06325865e+00  3.06928921e+00  3.07573833e+00
  3.07806395e+00  3.08332918e+00  3.08510334e+00  3.08955567e+00
  3.09394915e+00  3.09834287e+00  3.10074179e+00  3.10440335e+00
  3.10685320e+00  3.11067693e+00  3.11623405e+00  3.11706573e+00
  3.12020424e+00  3.12293131e+00  3.12929582e+00  3.13618370e+00
  3.13873158e+00  3.14207995e+00  3.14478800e+00  3.14575099e+00
  3.14970183e+00  3.15346167e+00  3.15713957e+00  3.15961191e+00
  3.16241883e+00  3.16905298e+00  3.16985162e+00  3.17496883e+00
  3.17677643e+00  3.18088294e+00  3.18308087e+00  3.18597110e+00
  3.19172064e+00  3.19552890e+00  3.19961136e+00  3.20202733e+00
  3.20584967e+00  3.20854485e+00  3.21184776e+00  3.21755455e+00
  3.21912604e+00  3.22056865e+00  3.22474470e+00  3.23026135e+00
  3.23149834e+00  3.23299943e+00  3.23760770e+00  3.24076374e+00
  3.24411364e+00  3.24765109e+00  3.25048930e+00  3.25266529e+00
  3.25750136e+00  3.25853031e+00  3.26282632e+00  3.26644920e+00
  3.27016749e+00  3.27080779e+00  3.27588884e+00  3.28160020e+00
  3.28410232e+00  3.28767754e+00  3.29372557e+00  3.29833637e+00
  3.29893696e+00  3.30338080e+00  3.30629845e+00  3.30833830e+00
  3.31301353e+00  3.31359036e+00  3.31731811e+00  3.32643341e+00
  3.32871993e+00  3.33144330e+00  3.33607056e+00  3.33839471e+00
  3.34077693e+00  3.34305418e+00  3.34498102e+00  3.35080194e+00
  3.35356950e+00  3.35598609e+00  3.35787190e+00  3.35926321e+00
  3.36499785e+00  3.36623568e+00  3.37056098e+00  3.37343773e+00
  3.37919162e+00  3.38022036e+00  3.38048791e+00  3.38468342e+00
  3.38650638e+00  3.39359086e+00  3.39600452e+00  3.39762381e+00
  3.40065202e+00  3.40194463e+00  3.40618119e+00  3.40670340e+00
  3.40983692e+00  3.41426640e+00  3.41615323e+00  3.42172450e+00
  3.42378543e+00  3.42721627e+00  3.43163604e+00  3.43448836e+00
  3.43751833e+00  3.43884635e+00  3.44516188e+00  3.44894055e+00
  3.45123107e+00  3.45539566e+00  3.45833135e+00  3.46039268e+00
  3.46443600e+00  3.46604966e+00  3.46853818e+00  3.47152401e+00
  3.47332588e+00  3.47810917e+00  3.48024323e+00  3.48508480e+00
  3.48621876e+00  3.48954346e+00  3.49476310e+00  3.49783638e+00
  3.50029185e+00  3.50331735e+00  3.50649390e+00  3.50892932e+00
  3.51306926e+00  3.51616250e+00  3.52098766e+00  3.52247900e+00
  3.52642016e+00  3.52920400e+00  3.53276156e+00  3.53484457e+00
  3.54094172e+00  3.54517405e+00  3.54779659e+00  3.55239520e+00
  3.55545547e+00  3.55740320e+00  3.56185993e+00  3.56582760e+00
  3.56995054e+00  3.57427537e+00  3.57729333e+00  3.57785170e+00
  3.58336402e+00  3.58436269e+00  3.58965005e+00  3.59014587e+00
  3.59558124e+00  3.59668402e+00  3.60808088e+00  3.60977739e+00
  3.61671084e+00  3.62012672e+00  3.62321862e+00  3.62563946e+00
  3.62868421e+00  3.63725550e+00  3.64101851e+00  3.64344440e+00
  3.64755990e+00  3.65413347e+00  3.65622065e+00  3.65814129e+00
  3.66189975e+00  3.67103752e+00  3.67662697e+00  3.68004799e+00
  3.68396896e+00  3.68673971e+00  3.69282562e+00  3.69522972e+00
  3.69913516e+00  3.70468441e+00  3.70965802e+00  3.71412823e+00
  3.72123666e+00  3.72308207e+00  3.72565503e+00  3.72799953e+00
  3.73618090e+00  3.74069523e+00  3.74235230e+00  3.74536197e+00
  3.75612363e+00  3.76425884e+00  3.76524983e+00  3.76933378e+00
  3.77450175e+00  3.78207803e+00  3.78619350e+00  3.78967175e+00
  3.79444345e+00  3.80036373e+00  3.80256784e+00  3.80909764e+00
  3.81424482e+00  3.81859301e+00  3.82410771e+00  3.82739601e+00
  3.83066590e+00  3.83307186e+00  3.83954029e+00  3.84294797e+00
  3.84885413e+00  3.85008656e+00  3.85272931e+00  3.85771063e+00
  3.86000313e+00  3.86711761e+00  3.87341906e+00  3.87913373e+00
  3.88183107e+00  3.88861745e+00  3.89200968e+00  3.89842771e+00
  3.90288857e+00  3.90943048e+00  3.91105383e+00  3.91147018e+00
  3.92144150e+00  3.92559772e+00  3.93302235e+00  3.93668502e+00
  3.94312009e+00  3.94471377e+00  3.95108223e+00  3.95746941e+00
  3.96328507e+00  3.97075890e+00  3.97438453e+00  3.98124767e+00
  3.98296691e+00  3.98801384e+00  3.99155634e+00  3.99520145e+00
  3.99993395e+00  4.00406573e+00  4.01279910e+00  4.01605304e+00
  4.02242494e+00  4.03203184e+00  4.03673599e+00  4.04308269e+00
  4.04422497e+00  4.05112948e+00  4.06180791e+00  4.06553480e+00
  4.06934897e+00  4.07277100e+00  4.07442965e+00  4.07882557e+00
  4.08539041e+00  4.08839317e+00  4.09019232e+00  4.10173028e+00
  4.10931370e+00  4.11266646e+00  4.12144065e+00  4.12770552e+00
  4.12865013e+00  4.13493118e+00  4.13761467e+00  4.15012576e+00
  4.15748629e+00  4.16438669e+00  4.16967346e+00  4.17600201e+00
  4.18150638e+00  4.18679729e+00  4.19234715e+00  4.20021613e+00
  4.20825035e+00  4.21337743e+00  4.22152965e+00  4.22387619e+00
  4.23214058e+00  4.23395327e+00  4.23745070e+00  4.24698973e+00
  4.25466091e+00  4.25723417e+00  4.27004943e+00  4.27212599e+00
  4.28308369e+00  4.28900438e+00  4.29349568e+00  4.29785779e+00
  4.30476044e+00  4.31104515e+00  4.31668713e+00  4.32916367e+00
  4.33380612e+00  4.33761778e+00  4.34140796e+00  4.35860300e+00
  4.36598357e+00  4.36730935e+00  4.37996734e+00  4.38265159e+00
  4.38846722e+00  4.39525461e+00  4.40041101e+00  4.41097594e+00
  4.41958303e+00  4.42605978e+00  4.44409496e+00  4.44684136e+00
  4.45055926e+00  4.45182241e+00  4.45448143e+00  4.45975309e+00
  4.47014841e+00  4.47273541e+00  4.47573498e+00  4.48245441e+00
  4.48868166e+00  4.49147320e+00  4.49701008e+00  4.50231200e+00
  4.50591017e+00  4.51727216e+00  4.51978030e+00  4.53316780e+00
  4.53759929e+00  4.54395771e+00  4.55016667e+00  4.55522314e+00
  4.56144648e+00  4.57036734e+00  4.57562073e+00  4.58225583e+00
  4.59177717e+00  4.60255270e+00  4.60866711e+00  4.61199201e+00
  4.62291321e+00  4.63300794e+00  4.63752726e+00  4.64015105e+00
  4.65033449e+00  4.65743508e+00  4.66092958e+00  4.66655138e+00
  4.67449648e+00  4.67882582e+00  4.68793337e+00  4.70262271e+00
  4.70790272e+00  4.71107015e+00  4.71765720e+00  4.72792657e+00
  4.73600997e+00  4.74309063e+00  4.75355418e+00  4.77168156e+00
  4.77451134e+00  4.78299741e+00  4.80025191e+00  4.80258754e+00
  4.82327781e+00  4.83243362e+00  4.83892433e+00  4.85272406e+00
  4.86379362e+00  4.86962770e+00  4.87903737e+00  4.88650430e+00
  4.89066612e+00  4.89557657e+00  4.90573018e+00  4.91713199e+00
  4.92167022e+00  4.92564404e+00  4.93596100e+00  4.94136341e+00
  4.95056714e+00  4.95255043e+00  4.95766511e+00  4.96226803e+00
  4.97682416e+00  4.97729740e+00  4.99551135e+00  5.00781469e+00
  5.01618872e+00  5.02102096e+00  5.03409229e+00  5.04183918e+00
  5.05438319e+00  5.06491035e+00  5.08047331e+00  5.08783739e+00
  5.09580341e+00  5.11007923e+00  5.11580513e+00  5.13907778e+00
  5.14332048e+00  5.15061563e+00  5.16029577e+00  5.17555957e+00
  5.18756646e+00  5.19685205e+00  5.20288444e+00  5.21449834e+00
  5.22170208e+00  5.22638244e+00  5.24018118e+00  5.24538055e+00
  5.25288607e+00  5.25834759e+00  5.26068428e+00  5.26363772e+00
  5.26618173e+00  5.26982849e+00  5.28009318e+00  5.28299928e+00
  5.29725783e+00  5.31165997e+00  5.31367336e+00  5.32094025e+00
  5.33371259e+00  5.33939123e+00  5.34269933e+00  5.34821100e+00
  5.35752780e+00  5.37264007e+00  5.38071157e+00  5.38542477e+00
  5.39357179e+00  5.40248977e+00  5.40677566e+00  5.41480111e+00
  5.41951935e+00  5.42743495e+00  5.43840846e+00  5.44047885e+00
  5.45174041e+00  5.45624068e+00  5.46051082e+00  5.46820402e+00
  5.48519950e+00  5.52411100e+00  5.53270058e+00  5.54800987e+00
  5.54969097e+00  5.56776616e+00  5.57335058e+00  5.58924735e+00
  5.60292848e+00  5.61857851e+00  5.65808753e+00  5.66645405e+00
  5.67902404e+00  5.68246286e+00  5.69852005e+00  5.69970569e+00
  5.74201373e+00  5.74515108e+00  5.76503550e+00  5.77764470e+00
  5.79882854e+00  5.81314240e+00  5.82103693e+00  5.82368892e+00
  5.85612703e+00  5.86327167e+00  5.86778407e+00  5.88166649e+00
  5.92589735e+00  5.93861666e+00  5.94621847e+00  5.99567141e+00
  6.00564119e+00  6.02925356e+00  6.03092348e+00  6.04927565e+00
  6.05591187e+00  6.11150728e+00  6.14229503e+00  6.17189690e+00
  6.18356709e+00  6.19389665e+00  6.21019832e+00  6.27014460e+00
  6.27326259e+00  6.29773561e+00  6.31506068e+00  6.33616780e+00
  6.39970723e+00  6.40741763e+00  6.45292977e+00  6.48316442e+00
  6.50750668e+00  6.51597715e+00  6.52191184e+00  6.52589424e+00
  6.55418500e+00  6.56777316e+00  6.61226278e+00  6.68725626e+00
  6.69610314e+00  6.72049538e+00  6.73454241e+00  6.76899890e+00
  6.77455374e+00  6.82873244e+00  6.83019371e+00  6.83871871e+00
  6.89611976e+00  6.90304606e+00  6.91727415e+00  6.94450196e+00
  6.97194092e+00  6.97631724e+00  6.98772089e+00  7.03491824e+00
  7.15733889e+00  7.17272030e+00  7.18613525e+00  7.21106999e+00
  7.21458048e+00  7.23245499e+00  7.23308886e+00  7.24265940e+00
  7.35243392e+00  7.40261582e+00  2.23711578e+01  2.23744948e+01
  2.24644006e+01  2.24675616e+01  2.24789080e+01  2.25375859e+01
  2.25555022e+01  2.25705425e+01  2.25960066e+01  2.26092157e+01
  2.26501064e+01  2.26977297e+01  2.27199070e+01  2.27300338e+01
  2.27596543e+01  2.27759596e+01  2.27938340e+01  2.28511076e+01
  2.28700423e+01  2.28845057e+01  2.30613819e+01  2.31193748e+01
  2.32410401e+01  2.33149035e+01  2.33224638e+01  2.33724280e+01
  2.33940148e+01  2.34152790e+01  2.34586533e+01  2.34620478e+01
  2.35374166e+01  2.36391749e+01  2.37858595e+01  3.25550824e+01
  3.25943258e+01  3.26964218e+01  3.27361732e+01  4.38222289e+01
  4.38879208e+01  4.39879182e+01  4.40119643e+01  4.40807355e+01
  4.41120646e+01]
nelec by numeric integration = 314.001478424508
    CPU time for vxc    516.54 sec, wall time     34.76 sec
    CPU time for df vj and vk   4103.52 sec, wall time    304.02 sec
    CPU time for df vj and vk   3279.65 sec, wall time    244.62 sec
E1 = -13530.12989438069  Ecoul = 6388.869173064661  Exc = -273.0695108928487
cycle= 3 E= -1952.24384921472  delta_E= -1.47e-09  |g|= 0.000169  |ddm|= 0.000264
    CPU time for cycle= 3   7928.51 sec, wall time    587.80 sec
  HOMO = -0.272585836520318  LUMO = 0.00668775026441849
  mo_energy =
[-1.92788324e+01 -1.92505044e+01 -1.92205007e+01 -1.92022717e+01
 -1.91601586e+01 -1.91575152e+01 -1.44513903e+01 -1.44344879e+01
 -1.44223684e+01 -1.44159503e+01 -1.04311442e+01 -1.04101266e+01
 -1.03571024e+01 -1.03379408e+01 -1.03269206e+01 -1.03205924e+01
 -1.03125975e+01 -1.03015948e+01 -1.03009270e+01 -1.02974474e+01
 -1.02970010e+01 -1.02939676e+01 -1.02936050e+01 -1.02889060e+01
 -1.02873670e+01 -1.02853110e+01 -1.02845089e+01 -1.02832005e+01
 -1.02817984e+01 -1.02817030e+01 -1.02784603e+01 -1.02780825e+01
 -1.02708495e+01 -1.02672212e+01 -1.02649080e+01 -1.02573240e+01
 -1.02516364e+01 -1.02510303e+01 -1.02468342e+01 -1.02466103e+01
 -1.02455446e+01 -1.02429107e+01 -1.02407842e+01 -1.26949086e+00
 -1.24609420e+00 -1.17372944e+00 -1.15784565e+00 -1.15709131e+00
 -1.14126741e+00 -1.11803544e+00 -1.10317195e+00 -1.09644846e+00
 -1.07546205e+00 -9.76523315e-01 -9.71704212e-01 -9.63244599e-01
 -9.38206511e-01 -9.34940653e-01 -9.28544147e-01 -9.25155405e-01
 -9.11370707e-01 -9.03917419e-01 -8.88223906e-01 -8.75046569e-01
 -8.56316020e-01 -8.43929923e-01 -8.35942954e-01 -8.27165642e-01
 -8.17365999e-01 -8.09899961e-01 -7.96904220e-01 -7.86717378e-01
 -7.67493989e-01 -7.57821490e-01 -7.55115472e-01 -7.40524386e-01
 -7.38319296e-01 -7.22570675e-01 -7.11749989e-01 -6.98099747e-01
 -6.82444678e-01 -6.76245356e-01 -6.68314219e-01 -6.63945599e-01
 -6.58670424e-01 -6.53370657e-01 -6.49339495e-01 -6.47422554e-01
 -6.36049519e-01 -6.30116141e-01 -6.25570088e-01 -6.13998642e-01
 -6.13212357e-01 -6.04917288e-01 -5.98393122e-01 -5.89344268e-01
 -5.84982077e-01 -5.80416244e-01 -5.76860001e-01 -5.71611226e-01
 -5.66122475e-01 -5.62667115e-01 -5.58031543e-01 -5.56539781e-01
 -5.52771216e-01 -5.48519949e-01 -5.46643068e-01 -5.43480962e-01
 -5.36701083e-01 -5.36276927e-01 -5.30888878e-01 -5.29870587e-01
 -5.27657211e-01 -5.25773855e-01 -5.21052471e-01 -5.20370369e-01
 -5.16837400e-01 -5.14994313e-01 -5.11760868e-01 -5.10693182e-01
 -5.04389146e-01 -5.02918605e-01 -4.97784538e-01 -4.97419727e-01
 -4.94707762e-01 -4.90620127e-01 -4.88668817e-01 -4.81497032e-01
 -4.80880148e-01 -4.77657407e-01 -4.74614006e-01 -4.70115537e-01
 -4.68256874e-01 -4.67268480e-01 -4.64628405e-01 -4.61925730e-01
 -4.59825242e-01 -4.58103166e-01 -4.54270046e-01 -4.49252455e-01
 -4.42796300e-01 -4.36850155e-01 -4.34939155e-01 -4.33896554e-01
 -4.21893665e-01 -4.21463466e-01 -4.19010958e-01 -3.98320700e-01
 -3.62612667e-01 -3.58730535e-01 -3.56079583e-01 -3.40740656e-01
 -3.38246287e-01 -3.32790677e-01 -3.21064769e-01 -2.89393223e-01
 -2.72585837e-01  6.68775026e-03  3.19662264e-02  5.88106236e-02
  6.73695465e-02  7.55167351e-02  8.36626143e-02  9.11807940e-02
  9.53315670e-02  1.02295193e-01  1.05326381e-01  1.09426209e-01
  1.15200473e-01  1.17589472e-01  1.21489883e-01  1.23151065e-01
  1.29784159e-01  1.34932869e-01  1.37455714e-01  1.41757782e-01
  1.44674521e-01  1.48141143e-01  1.50384333e-01  1.55093843e-01
  1.59839678e-01  1.60438789e-01  1.65272365e-01  1.66191791e-01
  1.70376354e-01  1.71072117e-01  1.75153387e-01  1.78468747e-01
  1.81193348e-01  1.83333611e-01  1.86638959e-01  1.88908494e-01
  1.94073068e-01  1.95787678e-01  1.98342136e-01  1.98958194e-01
  1.99296714e-01  2.03421120e-01  2.07862605e-01  2.09788280e-01
  2.11829464e-01  2.12591707e-01  2.15893911e-01  2.20977856e-01
  2.22546935e-01  2.25467684e-01  2.28806947e-01  2.31265977e-01
  2.32763136e-01  2.34501217e-01  2.35230970e-01  2.39665788e-01
  2.41563973e-01  2.48060133e-01  2.49020816e-01  2.50088655e-01
  2.52354020e-01  2.56664030e-01  2.59064660e-01  2.61127546e-01
  2.62603769e-01  2.65710919e-01  2.69037680e-01  2.70600478e-01
  2.74990151e-01  2.76406884e-01  2.80664199e-01  2.85639044e-01
  2.87229883e-01  2.90029719e-01  2.94158758e-01  2.95777942e-01
  2.99820097e-01  3.01745003e-01  3.04688953e-01  3.08676364e-01
  3.11449328e-01  3.12783482e-01  3.17367150e-01  3.18197368e-01
  3.18520240e-01  3.23492638e-01  3.28151362e-01  3.29345339e-01
  3.30990685e-01  3.33984849e-01  3.34711542e-01  3.37331727e-01
  3.39416072e-01  3.39522769e-01  3.46342466e-01  3.47471871e-01
  3.51545133e-01  3.54662790e-01  3.55933027e-01  3.58446266e-01
  3.60243509e-01  3.64476990e-01  3.66903818e-01  3.72615272e-01
  3.74534723e-01  3.78792955e-01  3.81833108e-01  3.83345575e-01
  3.84341180e-01  3.89976045e-01  3.90371067e-01  3.91971063e-01
  3.93215322e-01  3.99317076e-01  4.00902200e-01  4.02133357e-01
  4.06006389e-01  4.10812885e-01  4.13641565e-01  4.15528861e-01
  4.17381969e-01  4.20454630e-01  4.22912197e-01  4.25135884e-01
  4.28010440e-01  4.30127834e-01  4.30844232e-01  4.34973138e-01
  4.37596001e-01  4.42111961e-01  4.42307644e-01  4.42750319e-01
  4.45488537e-01  4.49650911e-01  4.50354894e-01  4.58540443e-01
  4.58635552e-01  4.61033791e-01  4.63939700e-01  4.69042834e-01
  4.70028350e-01  4.72229680e-01  4.73210140e-01  4.76505895e-01
  4.77770233e-01  4.79385895e-01  4.83588174e-01  4.84559137e-01
  4.84652458e-01  4.88827189e-01  4.90448701e-01  4.93676500e-01
  4.94867815e-01  4.95815064e-01  4.99378921e-01  4.99613800e-01
  5.00050216e-01  5.03504813e-01  5.05669447e-01  5.08944252e-01
  5.11917240e-01  5.14243929e-01  5.16388446e-01  5.18425656e-01
  5.19864008e-01  5.21610277e-01  5.23386332e-01  5.27045481e-01
  5.29109971e-01  5.29652344e-01  5.32742971e-01  5.33597981e-01
  5.35563480e-01  5.39384851e-01  5.41900191e-01  5.42821308e-01
  5.46675789e-01  5.49168242e-01  5.50610744e-01  5.52586894e-01
  5.54710154e-01  5.56247709e-01  5.57823205e-01  5.62586721e-01
  5.65121835e-01  5.66651551e-01  5.70250222e-01  5.72278988e-01
  5.72969594e-01  5.76120688e-01  5.78536785e-01  5.79681467e-01
  5.80485918e-01  5.83487375e-01  5.84537948e-01  5.87335141e-01
  5.92420631e-01  5.95964677e-01  5.96263704e-01  6.00076642e-01
  6.01903457e-01  6.02951074e-01  6.06395812e-01  6.07228195e-01
  6.08270829e-01  6.11870380e-01  6.12437619e-01  6.18149523e-01
  6.20153907e-01  6.21719856e-01  6.27840325e-01  6.29078359e-01
  6.30695738e-01  6.35400972e-01  6.37285695e-01  6.40636015e-01
  6.42944108e-01  6.44487954e-01  6.46751642e-01  6.50121240e-01
  6.52493669e-01  6.55417648e-01  6.58992154e-01  6.60203332e-01
  6.61870549e-01  6.63804225e-01  6.66725254e-01  6.68427117e-01
  6.77097707e-01  6.78321264e-01  6.80285696e-01  6.84499932e-01
  6.87226216e-01  6.87649523e-01  6.94007495e-01  6.97173530e-01
  7.01256091e-01  7.03774052e-01  7.04119982e-01  7.09142697e-01
  7.11861277e-01  7.14541101e-01  7.16321054e-01  7.19468508e-01
  7.21005551e-01  7.28114444e-01  7.30153908e-01  7.33369515e-01
  7.38644867e-01  7.40243796e-01  7.43734611e-01  7.45806968e-01
  7.49019436e-01  7.50676006e-01  7.52916885e-01  7.55461415e-01
  7.61645270e-01  7.65167479e-01  7.68738861e-01  7.71148169e-01
  7.75651560e-01  7.78313235e-01  7.80442380e-01  7.83451891e-01
  7.87154351e-01  7.91976685e-01  7.93953712e-01  7.97707013e-01
  7.99007772e-01  8.01510704e-01  8.07144909e-01  8.07786538e-01
  8.14020844e-01  8.16278915e-01  8.17179234e-01  8.25086577e-01
  8.31025261e-01  8.31971755e-01  8.36764698e-01  8.38738574e-01
  8.40925213e-01  8.44054138e-01  8.49067006e-01  8.55602122e-01
  8.55896820e-01  8.61899010e-01  8.64935661e-01  8.69924573e-01
  8.74856104e-01  8.77129093e-01  8.82097787e-01  8.89878828e-01
  8.90718502e-01  8.92852063e-01  8.94256581e-01  8.97231388e-01
  9.01538946e-01  9.03380056e-01  9.07792372e-01  9.09978788e-01
  9.12682836e-01  9.19611308e-01  9.21571914e-01  9.25487663e-01
  9.29256748e-01  9.36047032e-01  9.41161512e-01  9.44122609e-01
  9.49123609e-01  9.53886600e-01  9.56589049e-01  9.62046087e-01
  9.64139409e-01  9.66273588e-01  9.68866551e-01  9.76334624e-01
  9.77186648e-01  9.80039937e-01  9.82748061e-01  9.86297988e-01
  9.90020358e-01  9.95193769e-01  9.98092202e-01  1.00025985e+00
  1.00682051e+00  1.00864889e+00  1.01311435e+00  1.01535858e+00
  1.02203827e+00  1.02503490e+00  1.02711145e+00  1.03191655e+00
  1.03579512e+00  1.03965001e+00  1.04810606e+00  1.04840310e+00
  1.05056681e+00  1.05354120e+00  1.05648652e+00  1.06521379e+00
  1.06856728e+00  1.07081066e+00  1.07407851e+00  1.07936154e+00
  1.08087662e+00  1.08261240e+00  1.08519857e+00  1.09064798e+00
  1.09489858e+00  1.09816892e+00  1.10382218e+00  1.10507177e+00
  1.10775592e+00  1.10911915e+00  1.11167619e+00  1.11733124e+00
  1.12293340e+00  1.12634461e+00  1.12902958e+00  1.13445815e+00
  1.13864669e+00  1.14421789e+00  1.14629230e+00  1.14864479e+00
  1.15523445e+00  1.15941604e+00  1.16747482e+00  1.17165097e+00
  1.17488743e+00  1.17905132e+00  1.18074899e+00  1.18657717e+00
  1.19019848e+00  1.19120598e+00  1.19909191e+00  1.19966126e+00
  1.20263979e+00  1.20665158e+00  1.20910805e+00  1.21258744e+00
  1.21809040e+00  1.22333848e+00  1.22650856e+00  1.22921605e+00
  1.23534660e+00  1.23766687e+00  1.24293899e+00  1.24692610e+00
  1.25117974e+00  1.25638150e+00  1.26085907e+00  1.26420966e+00
  1.26718095e+00  1.27279393e+00  1.27506228e+00  1.27827577e+00
  1.27883694e+00  1.28689466e+00  1.29123910e+00  1.29452572e+00
  1.29526024e+00  1.29757277e+00  1.30240504e+00  1.30858993e+00
  1.31311372e+00  1.31907850e+00  1.32256400e+00  1.32390394e+00
  1.32853932e+00  1.33287764e+00  1.33476138e+00  1.34234114e+00
  1.34412080e+00  1.35126590e+00  1.35786719e+00  1.36231762e+00
  1.36497722e+00  1.36655185e+00  1.37361343e+00  1.37652570e+00
  1.37845958e+00  1.38211927e+00  1.38732260e+00  1.39554972e+00
  1.39906503e+00  1.40294123e+00  1.40921714e+00  1.41216092e+00
  1.41697979e+00  1.41908268e+00  1.42665356e+00  1.42694120e+00
  1.43132430e+00  1.43439938e+00  1.44326992e+00  1.44641681e+00
  1.44827742e+00  1.44928717e+00  1.45195912e+00  1.45583365e+00
  1.46304619e+00  1.46910390e+00  1.47380726e+00  1.48073650e+00
  1.48249686e+00  1.48790625e+00  1.49252254e+00  1.49544123e+00
  1.50200002e+00  1.50722532e+00  1.51074887e+00  1.51685408e+00
  1.51714813e+00  1.52480979e+00  1.52837601e+00  1.53074504e+00
  1.53336472e+00  1.53902564e+00  1.54819939e+00  1.55586946e+00
  1.55963980e+00  1.56126966e+00  1.56334340e+00  1.56774289e+00
  1.57419994e+00  1.57752879e+00  1.58098711e+00  1.58609088e+00
  1.59103072e+00  1.59825495e+00  1.60050446e+00  1.60585763e+00
  1.61066061e+00  1.61605149e+00  1.61913221e+00  1.62256224e+00
  1.63055139e+00  1.63291292e+00  1.63804377e+00  1.64236075e+00
  1.64301339e+00  1.64740432e+00  1.64982431e+00  1.65160317e+00
  1.65289830e+00  1.65857123e+00  1.66085635e+00  1.66620890e+00
  1.66986928e+00  1.67194878e+00  1.67353004e+00  1.67613963e+00
  1.68073192e+00  1.68254333e+00  1.68557339e+00  1.68910248e+00
  1.69339772e+00  1.69753273e+00  1.69955693e+00  1.70467273e+00
  1.70749864e+00  1.71079620e+00  1.71270046e+00  1.71442378e+00
  1.72072107e+00  1.72186096e+00  1.72457288e+00  1.72645008e+00
  1.73439000e+00  1.73696463e+00  1.73961453e+00  1.74694296e+00
  1.74971905e+00  1.75305160e+00  1.75784031e+00  1.76122466e+00
  1.76337545e+00  1.76894141e+00  1.76989144e+00  1.77230535e+00
  1.77725142e+00  1.78192071e+00  1.78565478e+00  1.79067340e+00
  1.79396287e+00  1.79499364e+00  1.79922110e+00  1.80440104e+00
  1.80483278e+00  1.80978110e+00  1.81372144e+00  1.81428038e+00
  1.81917010e+00  1.82247779e+00  1.82641307e+00  1.83055221e+00
  1.83319819e+00  1.83698168e+00  1.84145002e+00  1.84408764e+00
  1.85232280e+00  1.85494052e+00  1.85571738e+00  1.86531508e+00
  1.86626026e+00  1.86897881e+00  1.87166367e+00  1.87725429e+00
  1.88363627e+00  1.89061221e+00  1.89383769e+00  1.89611006e+00
  1.90346486e+00  1.90743358e+00  1.91430577e+00  1.91923030e+00
  1.92270272e+00  1.92751521e+00  1.93161748e+00  1.93556560e+00
  1.93828869e+00  1.94270621e+00  1.94733194e+00  1.94862957e+00
  1.95441790e+00  1.95912872e+00  1.96329215e+00  1.96855387e+00
  1.96980459e+00  1.97654518e+00  1.98352635e+00  1.98545159e+00
  1.98741337e+00  1.99119170e+00  1.99436382e+00  1.99578305e+00
  2.00348478e+00  2.00396799e+00  2.00566108e+00  2.01007857e+00
  2.02111446e+00  2.02301946e+00  2.02792521e+00  2.03148742e+00
  2.03676187e+00  2.03959906e+00  2.04319135e+00  2.04996766e+00
  2.05575728e+00  2.05748110e+00  2.06567074e+00  2.06758518e+00
  2.06938081e+00  2.07458435e+00  2.07587441e+00  2.08152643e+00
  2.08282804e+00  2.08633941e+00  2.08928032e+00  2.09725262e+00
  2.10104837e+00  2.10674696e+00  2.10954084e+00  2.11669000e+00
  2.11977335e+00  2.12165311e+00  2.12539591e+00  2.12979071e+00
  2.13352996e+00  2.13885947e+00  2.14303685e+00  2.14720508e+00
  2.14914103e+00  2.15321252e+00  2.15498945e+00  2.16436085e+00
  2.16550178e+00  2.16963914e+00  2.17460968e+00  2.17857299e+00
  2.18482638e+00  2.18830813e+00  2.19288795e+00  2.19505458e+00
  2.20081286e+00  2.21047444e+00  2.21163051e+00  2.21798048e+00
  2.21986606e+00  2.22271683e+00  2.22620918e+00  2.23390602e+00
  2.23601708e+00  2.24079229e+00  2.24945061e+00  2.25060131e+00
  2.25376972e+00  2.25473128e+00  2.26480009e+00  2.26508257e+00
  2.27323698e+00  2.27763281e+00  2.28621977e+00  2.28882368e+00
  2.29020548e+00  2.29497506e+00  2.29570931e+00  2.30144178e+00
  2.30561103e+00  2.30900950e+00  2.31079990e+00  2.31425824e+00
  2.31729467e+00  2.32267242e+00  2.33096422e+00  2.33652355e+00
  2.33790995e+00  2.34111922e+00  2.34596941e+00  2.34954202e+00
  2.35359020e+00  2.36217368e+00  2.36515431e+00  2.36874540e+00
  2.37518935e+00  2.37948489e+00  2.38088008e+00  2.38546019e+00
  2.38913642e+00  2.39096669e+00  2.39552705e+00  2.40466711e+00
  2.40528716e+00  2.40849839e+00  2.41241152e+00  2.41804738e+00
  2.42016503e+00  2.42555264e+00  2.42851228e+00  2.43467285e+00
  2.43621102e+00  2.43830724e+00  2.44547338e+00  2.45052038e+00
  2.45366258e+00  2.46079339e+00  2.46271724e+00  2.46896407e+00
  2.47096683e+00  2.47470739e+00  2.47616264e+00  2.48000701e+00
  2.48485805e+00  2.49050076e+00  2.49334201e+00  2.49483477e+00
  2.50062564e+00  2.50545220e+00  2.51036616e+00  2.51412927e+00
  2.52070682e+00  2.52095477e+00  2.52623393e+00  2.53055085e+00
  2.53316545e+00  2.53640290e+00  2.54061928e+00  2.54672697e+00
  2.55039191e+00  2.55141236e+00  2.55439414e+00  2.55640409e+00
  2.56051195e+00  2.56424454e+00  2.56871626e+00  2.56957991e+00
  2.57534093e+00  2.58136420e+00  2.58805517e+00  2.59107693e+00
  2.60163705e+00  2.60257432e+00  2.60664483e+00  2.61201929e+00
  2.61892882e+00  2.62288482e+00  2.62483732e+00  2.63313326e+00
  2.63431415e+00  2.63568600e+00  2.64103947e+00  2.64261765e+00
  2.64456290e+00  2.65011676e+00  2.65512607e+00  2.65783163e+00
  2.66110440e+00  2.66245767e+00  2.67137557e+00  2.67514358e+00
  2.67952180e+00  2.68166474e+00  2.69017986e+00  2.69172434e+00
  2.69350288e+00  2.69904350e+00  2.70033637e+00  2.70278455e+00
  2.70615267e+00  2.71291385e+00  2.71456820e+00  2.71734747e+00
  2.72245331e+00  2.72376276e+00  2.72858061e+00  2.73079745e+00
  2.73707882e+00  2.74239572e+00  2.74434911e+00  2.74755473e+00
  2.75077991e+00  2.75290015e+00  2.75526724e+00  2.75895048e+00
  2.76306105e+00  2.77066600e+00  2.77805933e+00  2.78213355e+00
  2.78366441e+00  2.78489784e+00  2.78953055e+00  2.79348888e+00
  2.79583764e+00  2.80039264e+00  2.80165185e+00  2.80368049e+00
  2.81715527e+00  2.81841021e+00  2.82027559e+00  2.82724653e+00
  2.82863315e+00  2.83273679e+00  2.83687303e+00  2.84055687e+00
  2.84475047e+00  2.84642198e+00  2.85350710e+00  2.85539125e+00
  2.86203637e+00  2.86387595e+00  2.87039671e+00  2.87504891e+00
  2.88149782e+00  2.88343493e+00  2.88974165e+00  2.88995498e+00
  2.89839058e+00  2.89929910e+00  2.90291096e+00  2.90832314e+00
  2.90888677e+00  2.91277474e+00  2.91586019e+00  2.92080446e+00
  2.92407620e+00  2.93059606e+00  2.93388385e+00  2.93657689e+00
  2.94055487e+00  2.94279541e+00  2.94765579e+00  2.94996972e+00
  2.95236781e+00  2.95816865e+00  2.95910017e+00  2.96393499e+00
  2.96998202e+00  2.97468255e+00  2.97890883e+00  2.98237387e+00
  2.98555294e+00  2.98889054e+00  2.99625407e+00  2.99997153e+00
  3.00283343e+00  3.00416166e+00  3.01382106e+00  3.02095710e+00
  3.03248125e+00  3.03495220e+00  3.04042631e+00  3.04417773e+00
  3.04700389e+00  3.04968083e+00  3.05559603e+00  3.05857038e+00
  3.06209754e+00  3.06325900e+00  3.06928969e+00  3.07573863e+00
  3.07806473e+00  3.08333039e+00  3.08510391e+00  3.08955628e+00
  3.09395046e+00  3.09834328e+00  3.10074182e+00  3.10440386e+00
  3.10685408e+00  3.11067730e+00  3.11623444e+00  3.11706667e+00
  3.12020470e+00  3.12293145e+00  3.12929665e+00  3.13618372e+00
  3.13873217e+00  3.14208024e+00  3.14478810e+00  3.14575140e+00
  3.14970256e+00  3.15346188e+00  3.15713975e+00  3.15961233e+00
  3.16241893e+00  3.16905302e+00  3.16985192e+00  3.17496952e+00
  3.17677660e+00  3.18088255e+00  3.18308132e+00  3.18597176e+00
  3.19172094e+00  3.19552940e+00  3.19961162e+00  3.20202756e+00
  3.20585000e+00  3.20854509e+00  3.21184850e+00  3.21755478e+00
  3.21912667e+00  3.22056881e+00  3.22474500e+00  3.23026228e+00
  3.23149842e+00  3.23299938e+00  3.23760812e+00  3.24076405e+00
  3.24411356e+00  3.24765148e+00  3.25048981e+00  3.25266578e+00
  3.25750148e+00  3.25853084e+00  3.26282670e+00  3.26644968e+00
  3.27016778e+00  3.27080846e+00  3.27588871e+00  3.28160056e+00
  3.28410238e+00  3.28767766e+00  3.29372581e+00  3.29833719e+00
  3.29893743e+00  3.30338132e+00  3.30629851e+00  3.30833904e+00
  3.31301413e+00  3.31359070e+00  3.31731794e+00  3.32643379e+00
  3.32872002e+00  3.33144348e+00  3.33606948e+00  3.33839524e+00
  3.34077727e+00  3.34305460e+00  3.34498052e+00  3.35080222e+00
  3.35356980e+00  3.35598545e+00  3.35787208e+00  3.35926379e+00
  3.36499818e+00  3.36623455e+00  3.37056124e+00  3.37343784e+00
  3.37919168e+00  3.38022081e+00  3.38048720e+00  3.38468359e+00
  3.38650674e+00  3.39359029e+00  3.39600449e+00  3.39762373e+00
  3.40065217e+00  3.40194467e+00  3.40618064e+00  3.40670347e+00
  3.40983731e+00  3.41426649e+00  3.41615372e+00  3.42172489e+00
  3.42378553e+00  3.42721632e+00  3.43163622e+00  3.43448902e+00
  3.43751825e+00  3.43884632e+00  3.44516230e+00  3.44894047e+00
  3.45123125e+00  3.45539583e+00  3.45833209e+00  3.46039305e+00
  3.46443627e+00  3.46604971e+00  3.46853893e+00  3.47152423e+00
  3.47332638e+00  3.47810917e+00  3.48024337e+00  3.48508511e+00
  3.48621921e+00  3.48954384e+00  3.49476381e+00  3.49783674e+00
  3.50029236e+00  3.50331765e+00  3.50649465e+00  3.50893004e+00
  3.51306977e+00  3.51616317e+00  3.52098814e+00  3.52247907e+00
  3.52642029e+00  3.52920462e+00  3.53276184e+00  3.53484501e+00
  3.54094183e+00  3.54517428e+00  3.54779720e+00  3.55239562e+00
  3.55545586e+00  3.55740386e+00  3.56186027e+00  3.56582797e+00
  3.56995110e+00  3.57427573e+00  3.57729467e+00  3.57785213e+00
  3.58336517e+00  3.58436287e+00  3.58965037e+00  3.59014629e+00
  3.59558152e+00  3.59668425e+00  3.60808111e+00  3.60977786e+00
  3.61671124e+00  3.62012702e+00  3.62321963e+00  3.62564026e+00
  3.62868493e+00  3.63725607e+00  3.64101878e+00  3.64344505e+00
  3.64756059e+00  3.65413370e+00  3.65622111e+00  3.65814245e+00
  3.66190031e+00  3.67103810e+00  3.67662771e+00  3.68004860e+00
  3.68396928e+00  3.68673996e+00  3.69282610e+00  3.69523011e+00
  3.69913570e+00  3.70468515e+00  3.70965832e+00  3.71412886e+00
  3.72123687e+00  3.72308275e+00  3.72565543e+00  3.72800044e+00
  3.73618115e+00  3.74069597e+00  3.74235258e+00  3.74536219e+00
  3.75612389e+00  3.76425905e+00  3.76525019e+00  3.76933416e+00
  3.77450247e+00  3.78207932e+00  3.78619415e+00  3.78967205e+00
  3.79444402e+00  3.80036425e+00  3.80256867e+00  3.80909793e+00
  3.81424540e+00  3.81859348e+00  3.82410801e+00  3.82739617e+00
  3.83066622e+00  3.83307196e+00  3.83954103e+00  3.84294883e+00
  3.84885463e+00  3.85008746e+00  3.85272960e+00  3.85771090e+00
  3.86000352e+00  3.86711712e+00  3.87341959e+00  3.87913366e+00
  3.88183184e+00  3.88861769e+00  3.89201032e+00  3.89842794e+00
  3.90288880e+00  3.90943080e+00  3.91105356e+00  3.91146751e+00
  3.92144117e+00  3.92559780e+00  3.93302276e+00  3.93668522e+00
  3.94312023e+00  3.94471430e+00  3.95108269e+00  3.95747000e+00
  3.96328519e+00  3.97075927e+00  3.97438471e+00  3.98124800e+00
  3.98296711e+00  3.98801444e+00  3.99155715e+00  3.99520200e+00
  3.99993427e+00  4.00406669e+00  4.01279948e+00  4.01605300e+00
  4.02242512e+00  4.03203197e+00  4.03673651e+00  4.04308304e+00
  4.04422542e+00  4.05112965e+00  4.06180818e+00  4.06553554e+00
  4.06934937e+00  4.07277151e+00  4.07443033e+00  4.07882571e+00
  4.08539107e+00  4.08839325e+00  4.09019284e+00  4.10173125e+00
  4.10931410e+00  4.11266681e+00  4.12144099e+00  4.12770635e+00
  4.12865021e+00  4.13493178e+00  4.13761487e+00  4.15012591e+00
  4.15748652e+00  4.16438732e+00  4.16967354e+00  4.17600280e+00
  4.18150700e+00  4.18679786e+00  4.19234763e+00  4.20021627e+00
  4.20825114e+00  4.21337758e+00  4.22153002e+00  4.22387637e+00
  4.23214081e+00  4.23395343e+00  4.23745094e+00  4.24699009e+00
  4.25466156e+00  4.25723449e+00  4.27004998e+00  4.27212662e+00
  4.28308458e+00  4.28900469e+00  4.29349589e+00  4.29785827e+00
  4.30476076e+00  4.31104625e+00  4.31668733e+00  4.32916388e+00
  4.33380628e+00  4.33761894e+00  4.34140832e+00  4.35860333e+00
  4.36598445e+00  4.36730975e+00  4.37996834e+00  4.38265175e+00
  4.38846734e+00  4.39525532e+00  4.40041131e+00  4.41097649e+00
  4.41958359e+00  4.42605992e+00  4.44409593e+00  4.44684198e+00
  4.45056018e+00  4.45182323e+00  4.45448175e+00  4.45975358e+00
  4.47014902e+00  4.47273669e+00  4.47573552e+00  4.48245616e+00
  4.48868290e+00  4.49147326e+00  4.49701087e+00  4.50231203e+00
  4.50591071e+00  4.51727246e+00  4.51978046e+00  4.53316792e+00
  4.53760017e+00  4.54395731e+00  4.55016588e+00  4.55522284e+00
  4.56144628e+00  4.57036694e+00  4.57561804e+00  4.58225578e+00
  4.59177822e+00  4.60255311e+00  4.60866740e+00  4.61199237e+00
  4.62291152e+00  4.63300793e+00  4.63752624e+00  4.64015047e+00
  4.65033473e+00  4.65743531e+00  4.66092977e+00  4.66655112e+00
  4.67449695e+00  4.67882622e+00  4.68793346e+00  4.70262280e+00
  4.70790215e+00  4.71107038e+00  4.71765691e+00  4.72792674e+00
  4.73601044e+00  4.74309125e+00  4.75355467e+00  4.77168239e+00
  4.77451140e+00  4.78299811e+00  4.80025251e+00  4.80258777e+00
  4.82327900e+00  4.83243419e+00  4.83892463e+00  4.85272419e+00
  4.86379383e+00  4.86962871e+00  4.87903765e+00  4.88650536e+00
  4.89066677e+00  4.89557738e+00  4.90573059e+00  4.91713250e+00
  4.92167030e+00  4.92564425e+00  4.93596129e+00  4.94136371e+00
  4.95056761e+00  4.95255075e+00  4.95766593e+00  4.96226891e+00
  4.97682418e+00  4.97729768e+00  4.99551158e+00  5.00781491e+00
  5.01618880e+00  5.02102208e+00  5.03409273e+00  5.04183967e+00
  5.05438334e+00  5.06491049e+00  5.08047431e+00  5.08783841e+00
  5.09580356e+00  5.11007945e+00  5.11580561e+00  5.13907810e+00
  5.14332079e+00  5.15061605e+00  5.16029580e+00  5.17555991e+00
  5.18756673e+00  5.19685241e+00  5.20288493e+00  5.21449414e+00
  5.22169870e+00  5.22638206e+00  5.24018127e+00  5.24538021e+00
  5.25288838e+00  5.25834846e+00  5.26068786e+00  5.26363870e+00
  5.26618176e+00  5.26982401e+00  5.28009344e+00  5.28299996e+00
  5.29725803e+00  5.31166025e+00  5.31367291e+00  5.32094070e+00
  5.33371140e+00  5.33939270e+00  5.34269940e+00  5.34821127e+00
  5.35752858e+00  5.37264025e+00  5.38071236e+00  5.38542504e+00
  5.39357244e+00  5.40249039e+00  5.40677574e+00  5.41480136e+00
  5.41952022e+00  5.42743507e+00  5.43840877e+00  5.44045191e+00
  5.45174029e+00  5.45622708e+00  5.46050514e+00  5.46820405e+00
  5.48519956e+00  5.52411123e+00  5.53270181e+00  5.54801041e+00
  5.54969101e+00  5.56776674e+00  5.57334101e+00  5.58924804e+00
  5.60292996e+00  5.61857867e+00  5.65808778e+00  5.66645078e+00
  5.67902411e+00  5.68246400e+00  5.69852057e+00  5.69970571e+00
  5.74201253e+00  5.74515139e+00  5.76503564e+00  5.77764500e+00
  5.79882872e+00  5.81312759e+00  5.82103713e+00  5.82368871e+00
  5.85612753e+00  5.86327274e+00  5.86778357e+00  5.88166699e+00
  5.92589393e+00  5.93860173e+00  5.94620111e+00  5.99567197e+00
  6.00564142e+00  6.02925417e+00  6.03092380e+00  6.04927777e+00
  6.05591188e+00  6.11150770e+00  6.14229534e+00  6.17189714e+00
  6.18356879e+00  6.19390050e+00  6.21019972e+00  6.27013828e+00
  6.27324714e+00  6.29773583e+00  6.31506091e+00  6.33616932e+00
  6.39969876e+00  6.40740878e+00  6.45293079e+00  6.48316313e+00
  6.50750470e+00  6.51597755e+00  6.52191204e+00  6.52587884e+00
  6.55418716e+00  6.56777204e+00  6.61226621e+00  6.68725665e+00
  6.69610752e+00  6.72049343e+00  6.73451725e+00  6.76898423e+00
  6.77453195e+00  6.82873372e+00  6.83019325e+00  6.83870454e+00
  6.89611999e+00  6.90305175e+00  6.91727640e+00  6.94450013e+00
  6.97190948e+00  6.97631760e+00  6.98772210e+00  7.03492066e+00
  7.15734285e+00  7.17271862e+00  7.18613688e+00  7.21107034e+00
  7.21457889e+00  7.23245529e+00  7.23308718e+00  7.24266094e+00
  7.35240352e+00  7.40261852e+00  2.23711581e+01  2.23744947e+01
  2.24644006e+01  2.24675617e+01  2.24789079e+01  2.25375908e+01
  2.25555022e+01  2.25705425e+01  2.25960075e+01  2.26092158e+01
  2.26501101e+01  2.26977297e+01  2.27199071e+01  2.27300350e+01
  2.27596544e+01  2.27759602e+01  2.27938352e+01  2.28511078e+01
  2.28700426e+01  2.28845068e+01  2.30613825e+01  2.31193753e+01
  2.32410525e+01  2.33149035e+01  2.33224637e+01  2.33724285e+01
  2.33940176e+01  2.34152792e+01  2.34586534e+01  2.34620481e+01
  2.35374163e+01  2.36391749e+01  2.37858602e+01  3.25550822e+01
  3.25943263e+01  3.26964220e+01  3.27361735e+01  4.38221542e+01
  4.38879277e+01  4.39879203e+01  4.40119611e+01  4.40807363e+01
  4.41120652e+01]
nelec by numeric integration = 314.00147833707814
    CPU time for vxc    539.32 sec, wall time     36.50 sec
    CPU time for df vj and vk   4099.98 sec, wall time    302.86 sec
    CPU time for df vj and vk   3336.18 sec, wall time    253.82 sec
E1 = -13530.129987132259  Ecoul = 6388.869306424729  Exc = -273.0695515057489
cycle= 4 E= -1952.24384921912  delta_E= -4.4e-09  |g|= 1.64e-05  |ddm|= 0.000119
    CPU time for cycle= 4   7999.01 sec, wall time    596.70 sec
  HOMO = -0.272585809736519  LUMO = 0.00668774709307447
  mo_energy =
[-1.92788316e+01 -1.92505050e+01 -1.92205110e+01 -1.92022711e+01
 -1.91601577e+01 -1.91575153e+01 -1.44513904e+01 -1.44344880e+01
 -1.44223685e+01 -1.44159502e+01 -1.04311419e+01 -1.04101270e+01
 -1.03571023e+01 -1.03379409e+01 -1.03269209e+01 -1.03205924e+01
 -1.03125976e+01 -1.03015949e+01 -1.03009273e+01 -1.02974474e+01
 -1.02970009e+01 -1.02939674e+01 -1.02936052e+01 -1.02889060e+01
 -1.02873671e+01 -1.02853111e+01 -1.02845089e+01 -1.02832004e+01
 -1.02817985e+01 -1.02817030e+01 -1.02784603e+01 -1.02780823e+01
 -1.02708494e+01 -1.02672210e+01 -1.02649079e+01 -1.02573239e+01
 -1.02516364e+01 -1.02510303e+01 -1.02468342e+01 -1.02466103e+01
 -1.02455446e+01 -1.02429107e+01 -1.02407841e+01 -1.26949137e+00
 -1.24609450e+00 -1.17373153e+00 -1.15784563e+00 -1.15709154e+00
 -1.14126710e+00 -1.11803546e+00 -1.10317198e+00 -1.09644854e+00
 -1.07546202e+00 -9.76523280e-01 -9.71704190e-01 -9.63244596e-01
 -9.38206504e-01 -9.34940665e-01 -9.28544132e-01 -9.25155382e-01
 -9.11370701e-01 -9.03917431e-01 -8.88223907e-01 -8.75046554e-01
 -8.56316004e-01 -8.43929918e-01 -8.35942944e-01 -8.27165635e-01
 -8.17365996e-01 -8.09899928e-01 -7.96904152e-01 -7.86717317e-01
 -7.67493990e-01 -7.57821543e-01 -7.55115469e-01 -7.40524330e-01
 -7.38319258e-01 -7.22570797e-01 -7.11750021e-01 -6.98099765e-01
 -6.82444674e-01 -6.76245337e-01 -6.68314223e-01 -6.63945634e-01
 -6.58670500e-01 -6.53370847e-01 -6.49341262e-01 -6.47422664e-01
 -6.36049544e-01 -6.30116254e-01 -6.25570153e-01 -6.13998642e-01
 -6.13212451e-01 -6.04917640e-01 -5.98393115e-01 -5.89344432e-01
 -5.84982079e-01 -5.80416247e-01 -5.76860097e-01 -5.71611228e-01
 -5.66122579e-01 -5.62667251e-01 -5.58031559e-01 -5.56540014e-01
 -5.52771229e-01 -5.48519996e-01 -5.46643045e-01 -5.43481099e-01
 -5.36701074e-01 -5.36276908e-01 -5.30888972e-01 -5.29870745e-01
 -5.27657231e-01 -5.25773872e-01 -5.21052501e-01 -5.20370346e-01
 -5.16837386e-01 -5.14994286e-01 -5.11760853e-01 -5.10693100e-01
 -5.04389134e-01 -5.02918573e-01 -4.97784554e-01 -4.97419714e-01
 -4.94707747e-01 -4.90620132e-01 -4.88668804e-01 -4.81497022e-01
 -4.80880111e-01 -4.77657428e-01 -4.74613997e-01 -4.70115610e-01
 -4.68256887e-01 -4.67268662e-01 -4.64629228e-01 -4.61925848e-01
 -4.59825370e-01 -4.58103194e-01 -4.54270357e-01 -4.49252450e-01
 -4.42796483e-01 -4.36850246e-01 -4.34939143e-01 -4.33896570e-01
 -4.21896032e-01 -4.21463577e-01 -4.19010961e-01 -3.98320817e-01
 -3.62612657e-01 -3.58730530e-01 -3.56079571e-01 -3.40740614e-01
 -3.38246012e-01 -3.32790673e-01 -3.21064761e-01 -2.89393217e-01
 -2.72585810e-01  6.68774709e-03  3.19662147e-02  5.88101419e-02
  6.73694061e-02  7.55167200e-02  8.36626094e-02  9.11807832e-02
  9.53315825e-02  1.02295207e-01  1.05326399e-01  1.09426211e-01
  1.15200496e-01  1.17589479e-01  1.21489881e-01  1.23151045e-01
  1.29784142e-01  1.34932852e-01  1.37455698e-01  1.41757797e-01
  1.44674540e-01  1.48141104e-01  1.50384336e-01  1.55093851e-01
  1.59839688e-01  1.60438794e-01  1.65272330e-01  1.66191768e-01
  1.70376323e-01  1.71072119e-01  1.75153239e-01  1.78468762e-01
  1.81193360e-01  1.83333533e-01  1.86638980e-01  1.88908429e-01
  1.94073090e-01  1.95787719e-01  1.98342106e-01  1.98958196e-01
  1.99296671e-01  2.03421105e-01  2.07862595e-01  2.09788270e-01
  2.11829457e-01  2.12591707e-01  2.15893924e-01  2.20977850e-01
  2.22546921e-01  2.25467669e-01  2.28806955e-01  2.31265982e-01
  2.32763132e-01  2.34501224e-01  2.35230980e-01  2.39665803e-01
  2.41563994e-01  2.48060115e-01  2.49020832e-01  2.50088641e-01
  2.52354014e-01  2.56664055e-01  2.59064672e-01  2.61127490e-01
  2.62603759e-01  2.65710901e-01  2.69037676e-01  2.70600409e-01
  2.74990110e-01  2.76406881e-01  2.80664175e-01  2.85639040e-01
  2.87229863e-01  2.90029646e-01  2.94158763e-01  2.95777942e-01
  2.99820093e-01  3.01745001e-01  3.04688942e-01  3.08676337e-01
  3.11449296e-01  3.12783488e-01  3.17367140e-01  3.18197366e-01
  3.18520223e-01  3.23492590e-01  3.28151371e-01  3.29345270e-01
  3.30990686e-01  3.33984838e-01  3.34711542e-01  3.37331717e-01
  3.39416055e-01  3.39522765e-01  3.46342456e-01  3.47471867e-01
  3.51545108e-01  3.54662748e-01  3.55933019e-01  3.58446259e-01
  3.60243431e-01  3.64476966e-01  3.66903796e-01  3.72615268e-01
  3.74534731e-01  3.78792914e-01  3.81833100e-01  3.83345549e-01
  3.84341157e-01  3.89976056e-01  3.90371047e-01  3.91971047e-01
  3.93215323e-01  3.99317059e-01  4.00902136e-01  4.02133344e-01
  4.06006384e-01  4.10812889e-01  4.13641550e-01  4.15528843e-01
  4.17381973e-01  4.20454638e-01  4.22912168e-01  4.25135936e-01
  4.28010454e-01  4.30127818e-01  4.30844198e-01  4.34973112e-01
  4.37595980e-01  4.42111948e-01  4.42307629e-01  4.42750324e-01
  4.45488483e-01  4.49650866e-01  4.50354846e-01  4.58540415e-01
  4.58635547e-01  4.61033784e-01  4.63939701e-01  4.69042797e-01
  4.70028345e-01  4.72229677e-01  4.73210123e-01  4.76505872e-01
  4.77770216e-01  4.79385856e-01  4.83588158e-01  4.84559110e-01
  4.84652464e-01  4.88827109e-01  4.90448702e-01  4.93676429e-01
  4.94867803e-01  4.95815020e-01  4.99378918e-01  4.99613700e-01
  5.00050160e-01  5.03504763e-01  5.05669444e-01  5.08944257e-01
  5.11917205e-01  5.14243929e-01  5.16388459e-01  5.18425655e-01
  5.19863998e-01  5.21610256e-01  5.23386322e-01  5.27045460e-01
  5.29109950e-01  5.29652343e-01  5.32742976e-01  5.33597984e-01
  5.35563476e-01  5.39384842e-01  5.41900169e-01  5.42821323e-01
  5.46675797e-01  5.49168231e-01  5.50610743e-01  5.52586874e-01
  5.54710171e-01  5.56247688e-01  5.57823204e-01  5.62586656e-01
  5.65121819e-01  5.66651570e-01  5.70250234e-01  5.72279002e-01
  5.72969551e-01  5.76120704e-01  5.78536783e-01  5.79681502e-01
  5.80485946e-01  5.83487309e-01  5.84537950e-01  5.87335060e-01
  5.92420541e-01  5.95964680e-01  5.96263697e-01  6.00076650e-01
  6.01903460e-01  6.02951044e-01  6.06395776e-01  6.07228146e-01
  6.08270792e-01  6.11870361e-01  6.12437587e-01  6.18149501e-01
  6.20153919e-01  6.21719836e-01  6.27840321e-01  6.29078322e-01
  6.30695707e-01  6.35400935e-01  6.37285679e-01  6.40636022e-01
  6.42944090e-01  6.44487927e-01  6.46751631e-01  6.50121245e-01
  6.52493632e-01  6.55417656e-01  6.58992096e-01  6.60203335e-01
  6.61870535e-01  6.63804200e-01  6.66725175e-01  6.68427119e-01
  6.77097680e-01  6.78321219e-01  6.80285640e-01  6.84499886e-01
  6.87226189e-01  6.87649493e-01  6.94007474e-01  6.97173482e-01
  7.01256075e-01  7.03774040e-01  7.04119946e-01  7.09142692e-01
  7.11861245e-01  7.14541079e-01  7.16321058e-01  7.19468433e-01
  7.21005563e-01  7.28114442e-01  7.30153867e-01  7.33369509e-01
  7.38644858e-01  7.40243678e-01  7.43734604e-01  7.45806933e-01
  7.49019438e-01  7.50675958e-01  7.52916874e-01  7.55461335e-01
  7.61645151e-01  7.65167409e-01  7.68738809e-01  7.71148148e-01
  7.75651553e-01  7.78313211e-01  7.80442283e-01  7.83451868e-01
  7.87154328e-01  7.91976704e-01  7.93953691e-01  7.97706998e-01
  7.99007751e-01  8.01510703e-01  8.07144878e-01  8.07786517e-01
  8.14020867e-01  8.16278890e-01  8.17179239e-01  8.25086574e-01
  8.31025248e-01  8.31971757e-01  8.36764652e-01  8.38738563e-01
  8.40925193e-01  8.44054064e-01  8.49066978e-01  8.55602081e-01
  8.55896769e-01  8.61899021e-01  8.64935426e-01  8.69924500e-01
  8.74856106e-01  8.77128795e-01  8.82097776e-01  8.89878813e-01
  8.90718509e-01  8.92852003e-01  8.94256548e-01  8.97231344e-01
  9.01538895e-01  9.03380025e-01  9.07792353e-01  9.09978799e-01
  9.12682777e-01  9.19611310e-01  9.21571922e-01  9.25487650e-01
  9.29256692e-01  9.36047025e-01  9.41161417e-01  9.44122603e-01
  9.49123529e-01  9.53886598e-01  9.56589032e-01  9.62046078e-01
  9.64139361e-01  9.66273441e-01  9.68866493e-01  9.76334611e-01
  9.77186634e-01  9.80039899e-01  9.82748045e-01  9.86297972e-01
  9.90020300e-01  9.95193749e-01  9.98092146e-01  1.00025982e+00
  1.00682051e+00  1.00864887e+00  1.01311431e+00  1.01535858e+00
  1.02203827e+00  1.02503487e+00  1.02711142e+00  1.03191656e+00
  1.03579512e+00  1.03965000e+00  1.04810606e+00  1.04840310e+00
  1.05056681e+00  1.05354120e+00  1.05648647e+00  1.06521377e+00
  1.06856727e+00  1.07081066e+00  1.07407852e+00  1.07936151e+00
  1.08087662e+00  1.08261238e+00  1.08519845e+00  1.09064798e+00
  1.09489854e+00  1.09816888e+00  1.10382218e+00  1.10507178e+00
  1.10775592e+00  1.10911913e+00  1.11167619e+00  1.11733119e+00
  1.12293337e+00  1.12634460e+00  1.12902953e+00  1.13445816e+00
  1.13864667e+00  1.14421788e+00  1.14629229e+00  1.14864477e+00
  1.15523444e+00  1.15941604e+00  1.16747482e+00  1.17165096e+00
  1.17488744e+00  1.17905133e+00  1.18074895e+00  1.18657716e+00
  1.19019846e+00  1.19120597e+00  1.19909194e+00  1.19966123e+00
  1.20263980e+00  1.20665160e+00  1.20910805e+00  1.21258745e+00
  1.21809041e+00  1.22333847e+00  1.22650856e+00  1.22921604e+00
  1.23534661e+00  1.23766687e+00  1.24293898e+00  1.24692610e+00
  1.25117974e+00  1.25638150e+00  1.26085907e+00  1.26420966e+00
  1.26718095e+00  1.27279391e+00  1.27506226e+00  1.27827576e+00
  1.27883694e+00  1.28689465e+00  1.29123909e+00  1.29452567e+00
  1.29526022e+00  1.29757278e+00  1.30240504e+00  1.30858992e+00
  1.31311371e+00  1.31907849e+00  1.32256401e+00  1.32390393e+00
  1.32853932e+00  1.33287765e+00  1.33476136e+00  1.34234114e+00
  1.34412077e+00  1.35126590e+00  1.35786719e+00  1.36231760e+00
  1.36497724e+00  1.36655186e+00  1.37361342e+00  1.37652571e+00
  1.37845953e+00  1.38211928e+00  1.38732256e+00  1.39554965e+00
  1.39906502e+00  1.40294124e+00  1.40921712e+00  1.41216092e+00
  1.41697978e+00  1.41908268e+00  1.42665347e+00  1.42694121e+00
  1.43132432e+00  1.43439939e+00  1.44326991e+00  1.44641680e+00
  1.44827738e+00  1.44928712e+00  1.45195906e+00  1.45583364e+00
  1.46304609e+00  1.46910377e+00  1.47380723e+00  1.48073650e+00
  1.48249682e+00  1.48790621e+00  1.49252253e+00  1.49544121e+00
  1.50200006e+00  1.50722532e+00  1.51074887e+00  1.51685408e+00
  1.51714813e+00  1.52480977e+00  1.52837602e+00  1.53074498e+00
  1.53336472e+00  1.53902565e+00  1.54819920e+00  1.55586943e+00
  1.55963978e+00  1.56126965e+00  1.56334341e+00  1.56774286e+00
  1.57419993e+00  1.57752869e+00  1.58098705e+00  1.58609077e+00
  1.59103052e+00  1.59825491e+00  1.60050427e+00  1.60585756e+00
  1.61066060e+00  1.61605149e+00  1.61913219e+00  1.62256225e+00
  1.63055137e+00  1.63291284e+00  1.63804376e+00  1.64236072e+00
  1.64301336e+00  1.64740433e+00  1.64982420e+00  1.65160316e+00
  1.65289829e+00  1.65857120e+00  1.66085633e+00  1.66620887e+00
  1.66986923e+00  1.67194879e+00  1.67352994e+00  1.67613963e+00
  1.68073185e+00  1.68254332e+00  1.68557341e+00  1.68910246e+00
  1.69339769e+00  1.69753274e+00  1.69955684e+00  1.70467269e+00
  1.70749863e+00  1.71079620e+00  1.71270045e+00  1.71442375e+00
  1.72072107e+00  1.72186094e+00  1.72457283e+00  1.72645010e+00
  1.73438993e+00  1.73696463e+00  1.73961451e+00  1.74694296e+00
  1.74971906e+00  1.75305159e+00  1.75784032e+00  1.76122467e+00
  1.76337545e+00  1.76894143e+00  1.76989143e+00  1.77230535e+00
  1.77725145e+00  1.78192069e+00  1.78565477e+00  1.79067340e+00
  1.79396287e+00  1.79499360e+00  1.79922110e+00  1.80440097e+00
  1.80483273e+00  1.80978113e+00  1.81372145e+00  1.81428039e+00
  1.81917009e+00  1.82247777e+00  1.82641307e+00  1.83055223e+00
  1.83319819e+00  1.83698165e+00  1.84145003e+00  1.84408767e+00
  1.85232272e+00  1.85494056e+00  1.85571743e+00  1.86531509e+00
  1.86626026e+00  1.86897882e+00  1.87166368e+00  1.87725430e+00
  1.88363625e+00  1.89061217e+00  1.89383770e+00  1.89611001e+00
  1.90346485e+00  1.90743354e+00  1.91430570e+00  1.91923028e+00
  1.92270268e+00  1.92751520e+00  1.93161746e+00  1.93556558e+00
  1.93828859e+00  1.94270618e+00  1.94733184e+00  1.94862957e+00
  1.95441787e+00  1.95912862e+00  1.96329213e+00  1.96855386e+00
  1.96980459e+00  1.97654511e+00  1.98352630e+00  1.98545161e+00
  1.98741330e+00  1.99119164e+00  1.99436376e+00  1.99578304e+00
  2.00348470e+00  2.00396796e+00  2.00566102e+00  2.01007850e+00
  2.02111443e+00  2.02301899e+00  2.02792519e+00  2.03148737e+00
  2.03676184e+00  2.03959903e+00  2.04319135e+00  2.04996761e+00
  2.05575728e+00  2.05748108e+00  2.06567074e+00  2.06758519e+00
  2.06938076e+00  2.07458435e+00  2.07587440e+00  2.08152639e+00
  2.08282800e+00  2.08633938e+00  2.08928029e+00  2.09725259e+00
  2.10104831e+00  2.10674695e+00  2.10954074e+00  2.11668995e+00
  2.11977331e+00  2.12165311e+00  2.12539585e+00  2.12979067e+00
  2.13352994e+00  2.13885945e+00  2.14303686e+00  2.14720507e+00
  2.14914099e+00  2.15321253e+00  2.15498932e+00  2.16436086e+00
  2.16550177e+00  2.16963915e+00  2.17460968e+00  2.17857295e+00
  2.18482639e+00  2.18830811e+00  2.19288793e+00  2.19505456e+00
  2.20081286e+00  2.21047441e+00  2.21163050e+00  2.21798047e+00
  2.21986601e+00  2.22271679e+00  2.22620916e+00  2.23390597e+00
  2.23601705e+00  2.24079223e+00  2.24945060e+00  2.25060130e+00
  2.25376971e+00  2.25473123e+00  2.26480008e+00  2.26508251e+00
  2.27323674e+00  2.27763273e+00  2.28621973e+00  2.28882371e+00
  2.29020543e+00  2.29497501e+00  2.29570916e+00  2.30144165e+00
  2.30561109e+00  2.30900946e+00  2.31079989e+00  2.31425818e+00
  2.31729465e+00  2.32267240e+00  2.33096422e+00  2.33652347e+00
  2.33790995e+00  2.34111917e+00  2.34596923e+00  2.34954202e+00
  2.35359023e+00  2.36217355e+00  2.36515431e+00  2.36874531e+00
  2.37518925e+00  2.37948487e+00  2.38087996e+00  2.38546013e+00
  2.38913639e+00  2.39096667e+00  2.39552706e+00  2.40466706e+00
  2.40528715e+00  2.40849842e+00  2.41241152e+00  2.41804736e+00
  2.42016502e+00  2.42555261e+00  2.42851222e+00  2.43467286e+00
  2.43621099e+00  2.43830724e+00  2.44547338e+00  2.45052037e+00
  2.45366257e+00  2.46079340e+00  2.46271721e+00  2.46896398e+00
  2.47096684e+00  2.47470743e+00  2.47616265e+00  2.48000700e+00
  2.48485803e+00  2.49050074e+00  2.49334201e+00  2.49483473e+00
  2.50062559e+00  2.50545220e+00  2.51036605e+00  2.51412928e+00
  2.52070678e+00  2.52095467e+00  2.52623370e+00  2.53055086e+00
  2.53316543e+00  2.53640266e+00  2.54061923e+00  2.54672689e+00
  2.55039189e+00  2.55141233e+00  2.55439414e+00  2.55640409e+00
  2.56051196e+00  2.56424451e+00  2.56871624e+00  2.56957993e+00
  2.57534092e+00  2.58136419e+00  2.58805516e+00  2.59107693e+00
  2.60163704e+00  2.60257433e+00  2.60664486e+00  2.61201929e+00
  2.61892880e+00  2.62288483e+00  2.62483733e+00  2.63313324e+00
  2.63431417e+00  2.63568595e+00  2.64103940e+00  2.64261765e+00
  2.64456283e+00  2.65011671e+00  2.65512608e+00  2.65783166e+00
  2.66110440e+00  2.66245768e+00  2.67137542e+00  2.67514359e+00
  2.67952180e+00  2.68166465e+00  2.69017985e+00  2.69172434e+00
  2.69350288e+00  2.69904346e+00  2.70033637e+00  2.70278457e+00
  2.70615264e+00  2.71291385e+00  2.71456809e+00  2.71734745e+00
  2.72245331e+00  2.72376277e+00  2.72858062e+00  2.73079748e+00
  2.73707878e+00  2.74239573e+00  2.74434911e+00  2.74755473e+00
  2.75077986e+00  2.75290018e+00  2.75526727e+00  2.75895049e+00
  2.76306107e+00  2.77066601e+00  2.77805937e+00  2.78213354e+00
  2.78366442e+00  2.78489781e+00  2.78953055e+00  2.79348889e+00
  2.79583761e+00  2.80039261e+00  2.80165185e+00  2.80368047e+00
  2.81715527e+00  2.81841020e+00  2.82027552e+00  2.82724653e+00
  2.82863309e+00  2.83273675e+00  2.83687302e+00  2.84055687e+00
  2.84475037e+00  2.84642184e+00  2.85350688e+00  2.85539047e+00
  2.86203642e+00  2.86387593e+00  2.87039661e+00  2.87504875e+00
  2.88149763e+00  2.88343493e+00  2.88974146e+00  2.88995499e+00
  2.89839059e+00  2.89929907e+00  2.90291088e+00  2.90832298e+00
  2.90888677e+00  2.91277471e+00  2.91586016e+00  2.92080441e+00
  2.92407620e+00  2.93059595e+00  2.93388366e+00  2.93657683e+00
  2.94055485e+00  2.94279539e+00  2.94765580e+00  2.94996969e+00
  2.95236781e+00  2.95816862e+00  2.95910016e+00  2.96393498e+00
  2.96998199e+00  2.97468256e+00  2.97890883e+00  2.98237388e+00
  2.98555295e+00  2.98889055e+00  2.99625404e+00  2.99997150e+00
  3.00283341e+00  3.00416167e+00  3.01382106e+00  3.02095711e+00
  3.03248123e+00  3.03495216e+00  3.04042627e+00  3.04417769e+00
  3.04700396e+00  3.04968079e+00  3.05559604e+00  3.05857038e+00
  3.06209751e+00  3.06325899e+00  3.06928959e+00  3.07573863e+00
  3.07806466e+00  3.08333036e+00  3.08510389e+00  3.08955622e+00
  3.09395020e+00  3.09834324e+00  3.10074182e+00  3.10440385e+00
  3.10685407e+00  3.11067732e+00  3.11623444e+00  3.11706658e+00
  3.12020468e+00  3.12293145e+00  3.12929651e+00  3.13618372e+00
  3.13873195e+00  3.14208024e+00  3.14478809e+00  3.14575141e+00
  3.14970252e+00  3.15346189e+00  3.15713975e+00  3.15961228e+00
  3.16241885e+00  3.16905304e+00  3.16985191e+00  3.17496948e+00
  3.17677660e+00  3.18088256e+00  3.18308131e+00  3.18597167e+00
  3.19172092e+00  3.19552937e+00  3.19961162e+00  3.20202756e+00
  3.20584959e+00  3.20854495e+00  3.21184833e+00  3.21755479e+00
  3.21912639e+00  3.22056881e+00  3.22474497e+00  3.23026217e+00
  3.23149841e+00  3.23299939e+00  3.23760812e+00  3.24076400e+00
  3.24411357e+00  3.24765142e+00  3.25048981e+00  3.25266573e+00
  3.25750149e+00  3.25853079e+00  3.26282668e+00  3.26644967e+00
  3.27016778e+00  3.27080844e+00  3.27588876e+00  3.28160057e+00
  3.28410240e+00  3.28767765e+00  3.29372582e+00  3.29833708e+00
  3.29893743e+00  3.30338132e+00  3.30629852e+00  3.30833892e+00
  3.31301396e+00  3.31359068e+00  3.31731780e+00  3.32643377e+00
  3.32872005e+00  3.33144349e+00  3.33606936e+00  3.33839523e+00
  3.34077728e+00  3.34305457e+00  3.34498046e+00  3.35080219e+00
  3.35356978e+00  3.35598540e+00  3.35787209e+00  3.35926377e+00
  3.36499816e+00  3.36623446e+00  3.37056119e+00  3.37343779e+00
  3.37919168e+00  3.38022078e+00  3.38048714e+00  3.38468357e+00
  3.38650675e+00  3.39359006e+00  3.39600443e+00  3.39762371e+00
  3.40065214e+00  3.40194460e+00  3.40618057e+00  3.40670346e+00
  3.40983727e+00  3.41426649e+00  3.41615370e+00  3.42172485e+00
  3.42378554e+00  3.42721627e+00  3.43163619e+00  3.43448898e+00
  3.43751824e+00  3.43884630e+00  3.44516229e+00  3.44894048e+00
  3.45123123e+00  3.45539584e+00  3.45833203e+00  3.46039304e+00
  3.46443626e+00  3.46604972e+00  3.46853884e+00  3.47152423e+00
  3.47332636e+00  3.47810917e+00  3.48024338e+00  3.48508510e+00
  3.48621919e+00  3.48954383e+00  3.49476379e+00  3.49783673e+00
  3.50029233e+00  3.50331765e+00  3.50649458e+00  3.50893003e+00
  3.51306975e+00  3.51616316e+00  3.52098811e+00  3.52247908e+00
  3.52642031e+00  3.52920461e+00  3.53276182e+00  3.53484503e+00
  3.54094185e+00  3.54517428e+00  3.54779713e+00  3.55239561e+00
  3.55545585e+00  3.55740383e+00  3.56186026e+00  3.56582795e+00
  3.56995108e+00  3.57427571e+00  3.57729458e+00  3.57785213e+00
  3.58336507e+00  3.58436287e+00  3.58965037e+00  3.59014628e+00
  3.59558152e+00  3.59668423e+00  3.60808112e+00  3.60977783e+00
  3.61671124e+00  3.62012703e+00  3.62321955e+00  3.62564021e+00
  3.62868491e+00  3.63725606e+00  3.64101878e+00  3.64344501e+00
  3.64756055e+00  3.65413370e+00  3.65622109e+00  3.65814237e+00
  3.66190029e+00  3.67103808e+00  3.67662768e+00  3.68004859e+00
  3.68396928e+00  3.68673996e+00  3.69282608e+00  3.69523009e+00
  3.69913568e+00  3.70468514e+00  3.70965832e+00  3.71412886e+00
  3.72123688e+00  3.72308273e+00  3.72565542e+00  3.72800042e+00
  3.73618115e+00  3.74069594e+00  3.74235257e+00  3.74536220e+00
  3.75612388e+00  3.76425905e+00  3.76525018e+00  3.76933416e+00
  3.77450246e+00  3.78207931e+00  3.78619412e+00  3.78967203e+00
  3.79444400e+00  3.80036420e+00  3.80256863e+00  3.80909792e+00
  3.81424541e+00  3.81859346e+00  3.82410800e+00  3.82739618e+00
  3.83066620e+00  3.83307197e+00  3.83954094e+00  3.84294884e+00
  3.84885459e+00  3.85008737e+00  3.85272960e+00  3.85771090e+00
  3.86000350e+00  3.86711714e+00  3.87341959e+00  3.87913369e+00
  3.88183183e+00  3.88861770e+00  3.89201032e+00  3.89842794e+00
  3.90288879e+00  3.90943081e+00  3.91105358e+00  3.91146747e+00
  3.92144117e+00  3.92559781e+00  3.93302275e+00  3.93668524e+00
  3.94312024e+00  3.94471428e+00  3.95108270e+00  3.95746999e+00
  3.96328521e+00  3.97075929e+00  3.97438472e+00  3.98124796e+00
  3.98296712e+00  3.98801444e+00  3.99155715e+00  3.99520199e+00
  3.99993428e+00  4.00406665e+00  4.01279942e+00  4.01605300e+00
  4.02242512e+00  4.03203198e+00  4.03673647e+00  4.04308304e+00
  4.04422541e+00  4.05112964e+00  4.06180819e+00  4.06553552e+00
  4.06934938e+00  4.07277150e+00  4.07443031e+00  4.07882572e+00
  4.08539109e+00  4.08839326e+00  4.09019282e+00  4.10173123e+00
  4.10931411e+00  4.11266681e+00  4.12144099e+00  4.12770633e+00
  4.12865022e+00  4.13493178e+00  4.13761489e+00  4.15012593e+00
  4.15748652e+00  4.16438732e+00  4.16967355e+00  4.17600279e+00
  4.18150698e+00  4.18679783e+00  4.19234761e+00  4.20021628e+00
  4.20825110e+00  4.21337758e+00  4.22153001e+00  4.22387637e+00
  4.23214081e+00  4.23395344e+00  4.23745095e+00  4.24699010e+00
  4.25466154e+00  4.25723450e+00  4.27004997e+00  4.27212661e+00
  4.28308456e+00  4.28900468e+00  4.29349588e+00  4.29785826e+00
  4.30476076e+00  4.31104623e+00  4.31668733e+00  4.32916388e+00
  4.33380628e+00  4.33761886e+00  4.34140833e+00  4.35860331e+00
  4.36598442e+00  4.36730975e+00  4.37996831e+00  4.38265176e+00
  4.38846735e+00  4.39525527e+00  4.40041132e+00  4.41097648e+00
  4.41958360e+00  4.42605994e+00  4.44409590e+00  4.44684195e+00
  4.45056006e+00  4.45182324e+00  4.45448176e+00  4.45975358e+00
  4.47014891e+00  4.47273640e+00  4.47573543e+00  4.48245583e+00
  4.48868261e+00  4.49147326e+00  4.49701066e+00  4.50231204e+00
  4.50591063e+00  4.51727247e+00  4.51978045e+00  4.53316794e+00
  4.53760012e+00  4.54395731e+00  4.55016590e+00  4.55522283e+00
  4.56144630e+00  4.57036695e+00  4.57561809e+00  4.58225577e+00
  4.59177806e+00  4.60255308e+00  4.60866737e+00  4.61199233e+00
  4.62291155e+00  4.63300795e+00  4.63752625e+00  4.64015049e+00
  4.65033475e+00  4.65743532e+00  4.66092978e+00  4.66655115e+00
  4.67449695e+00  4.67882621e+00  4.68793346e+00  4.70262281e+00
  4.70790212e+00  4.71107036e+00  4.71765690e+00  4.72792675e+00
  4.73601044e+00  4.74309125e+00  4.75355467e+00  4.77168236e+00
  4.77451142e+00  4.78299811e+00  4.80025247e+00  4.80258778e+00
  4.82327898e+00  4.83243420e+00  4.83892463e+00  4.85272419e+00
  4.86379384e+00  4.86962868e+00  4.87903765e+00  4.88650538e+00
  4.89066676e+00  4.89557740e+00  4.90573060e+00  4.91713252e+00
  4.92167031e+00  4.92564426e+00  4.93596129e+00  4.94136372e+00
  4.95056760e+00  4.95255074e+00  4.95766588e+00  4.96226888e+00
  4.97682420e+00  4.97729767e+00  4.99551159e+00  5.00781491e+00
  5.01618883e+00  5.02102210e+00  5.03409271e+00  5.04183964e+00
  5.05438334e+00  5.06491050e+00  5.08047427e+00  5.08783835e+00
  5.09580357e+00  5.11007946e+00  5.11580560e+00  5.13907809e+00
  5.14332077e+00  5.15061604e+00  5.16029582e+00  5.17555989e+00
  5.18756672e+00  5.19685226e+00  5.20288489e+00  5.21449326e+00
  5.22169818e+00  5.22638189e+00  5.24018125e+00  5.24538021e+00
  5.25288748e+00  5.25834835e+00  5.26068640e+00  5.26363802e+00
  5.26618164e+00  5.26982208e+00  5.28009326e+00  5.28299990e+00
  5.29725804e+00  5.31166026e+00  5.31367307e+00  5.32094068e+00
  5.33371172e+00  5.33939255e+00  5.34269942e+00  5.34821130e+00
  5.35752849e+00  5.37264023e+00  5.38071228e+00  5.38542502e+00
  5.39357236e+00  5.40249031e+00  5.40677575e+00  5.41480135e+00
  5.41952009e+00  5.42743504e+00  5.43840859e+00  5.44045206e+00
  5.45174029e+00  5.45622679e+00  5.46050505e+00  5.46820405e+00
  5.48519957e+00  5.52411121e+00  5.53270160e+00  5.54801038e+00
  5.54969104e+00  5.56776671e+00  5.57333939e+00  5.58924790e+00
  5.60292971e+00  5.61857867e+00  5.65808777e+00  5.66644900e+00
  5.67902404e+00  5.68246396e+00  5.69852050e+00  5.69970574e+00
  5.74201285e+00  5.74515137e+00  5.76503563e+00  5.77764498e+00
  5.79882872e+00  5.81312678e+00  5.82103713e+00  5.82368863e+00
  5.85612749e+00  5.86327263e+00  5.86778374e+00  5.88166693e+00
  5.92589384e+00  5.93860159e+00  5.94620034e+00  5.99567169e+00
  6.00564137e+00  6.02925410e+00  6.03092378e+00  6.04927752e+00
  6.05591191e+00  6.11150767e+00  6.14229531e+00  6.17189710e+00
  6.18356830e+00  6.19389784e+00  6.21019957e+00  6.27013841e+00
  6.27324677e+00  6.29773583e+00  6.31506090e+00  6.33616899e+00
  6.39969654e+00  6.40740673e+00  6.45293048e+00  6.48316313e+00
  6.50750521e+00  6.51597752e+00  6.52191204e+00  6.52587663e+00
  6.55418679e+00  6.56777235e+00  6.61226406e+00  6.68725661e+00
  6.69610534e+00  6.72049391e+00  6.73451621e+00  6.76898418e+00
  6.77453207e+00  6.82873334e+00  6.83019342e+00  6.83870320e+00
  6.89611997e+00  6.90304780e+00  6.91727592e+00  6.94450059e+00
  6.97190912e+00  6.97631757e+00  6.98772193e+00  7.03492028e+00
  7.15733914e+00  7.17271906e+00  7.18613683e+00  7.21107032e+00
  7.21457579e+00  7.23245527e+00  7.23308762e+00  7.24266080e+00
  7.35240363e+00  7.40261805e+00  2.23711581e+01  2.23744947e+01
  2.24644007e+01  2.24675618e+01  2.24789079e+01  2.25375906e+01
  2.25555023e+01  2.25705425e+01  2.25960076e+01  2.26092158e+01
  2.26501102e+01  2.26977297e+01  2.27199071e+01  2.27300349e+01
  2.27596544e+01  2.27759601e+01  2.27938351e+01  2.28511078e+01
  2.28700426e+01  2.28845068e+01  2.30613826e+01  2.31193753e+01
  2.32410543e+01  2.33149035e+01  2.33224638e+01  2.33724285e+01
  2.33940173e+01  2.34152792e+01  2.34586534e+01  2.34620482e+01
  2.35374164e+01  2.36391749e+01  2.37858602e+01  3.25550823e+01
  3.25943262e+01  3.26964219e+01  3.27361735e+01  4.38221542e+01
  4.38879191e+01  4.39879201e+01  4.40119620e+01  4.40807362e+01
  4.41120652e+01]
nelec by numeric integration = 314.00147833591296
    CPU time for vxc    536.48 sec, wall time     36.33 sec
    CPU time for df vj and vk   4077.70 sec, wall time    300.37 sec
    CPU time for df vj and vk   3318.70 sec, wall time    250.11 sec
E1 = -13530.130018851687  Ecoul = 6388.869342711568  Exc = -273.0695560732041
cycle= 5 E= -1952.24384921916  delta_E= -4.46e-11  |g|= 5.92e-06  |ddm|= 1.56e-05
    CPU time for cycle= 5   7959.70 sec, wall time    590.75 sec
  HOMO = -0.272585808584594  LUMO = 0.00668775945713789
  mo_energy =
[-1.92788321e+01 -1.92505049e+01 -1.92205051e+01 -1.92022715e+01
 -1.91601582e+01 -1.91575153e+01 -1.44513903e+01 -1.44344879e+01
 -1.44223684e+01 -1.44159502e+01 -1.04311436e+01 -1.04101269e+01
 -1.03571023e+01 -1.03379408e+01 -1.03269208e+01 -1.03205924e+01
 -1.03125975e+01 -1.03015949e+01 -1.03009281e+01 -1.02974474e+01
 -1.02970009e+01 -1.02939678e+01 -1.02936051e+01 -1.02889060e+01
 -1.02873670e+01 -1.02853110e+01 -1.02845089e+01 -1.02832005e+01
 -1.02817985e+01 -1.02817030e+01 -1.02784603e+01 -1.02780824e+01
 -1.02708494e+01 -1.02672211e+01 -1.02649079e+01 -1.02573240e+01
 -1.02516364e+01 -1.02510303e+01 -1.02468342e+01 -1.02466103e+01
 -1.02455445e+01 -1.02429107e+01 -1.02407841e+01 -1.26949141e+00
 -1.24609443e+00 -1.17373050e+00 -1.15784563e+00 -1.15709150e+00
 -1.14126725e+00 -1.11803542e+00 -1.10317196e+00 -1.09644850e+00
 -1.07546203e+00 -9.76523286e-01 -9.71704377e-01 -9.63244589e-01
 -9.38206528e-01 -9.34940745e-01 -9.28544141e-01 -9.25155442e-01
 -9.11370726e-01 -9.03917454e-01 -8.88223924e-01 -8.75046562e-01
 -8.56316099e-01 -8.43929911e-01 -8.35942946e-01 -8.27165632e-01
 -8.17366002e-01 -8.09899963e-01 -7.96904223e-01 -7.86717397e-01
 -7.67493981e-01 -7.57821595e-01 -7.55115474e-01 -7.40524441e-01
 -7.38319309e-01 -7.22570749e-01 -7.11750065e-01 -6.98099777e-01
 -6.82444659e-01 -6.76245338e-01 -6.68314217e-01 -6.63945613e-01
 -6.58670468e-01 -6.53370842e-01 -6.49340334e-01 -6.47422602e-01
 -6.36049531e-01 -6.30116272e-01 -6.25570189e-01 -6.13998645e-01
 -6.13212467e-01 -6.04917640e-01 -5.98393113e-01 -5.89344417e-01
 -5.84982089e-01 -5.80416343e-01 -5.76860096e-01 -5.71611227e-01
 -5.66122560e-01 -5.62667197e-01 -5.58031555e-01 -5.56539911e-01
 -5.52771230e-01 -5.48519980e-01 -5.46643048e-01 -5.43481060e-01
 -5.36701072e-01 -5.36276908e-01 -5.30888948e-01 -5.29870709e-01
 -5.27657224e-01 -5.25773871e-01 -5.21052513e-01 -5.20370360e-01
 -5.16837395e-01 -5.14994320e-01 -5.11760873e-01 -5.10693191e-01
 -5.04389132e-01 -5.02918708e-01 -4.97784655e-01 -4.97419714e-01
 -4.94707751e-01 -4.90620140e-01 -4.88668833e-01 -4.81497030e-01
 -4.80880118e-01 -4.77657437e-01 -4.74613997e-01 -4.70115616e-01
 -4.68256882e-01 -4.67268611e-01 -4.64628804e-01 -4.61925807e-01
 -4.59825314e-01 -4.58103183e-01 -4.54270205e-01 -4.49252445e-01
 -4.42796421e-01 -4.36850262e-01 -4.34939150e-01 -4.33896559e-01
 -4.21894786e-01 -4.21463525e-01 -4.19010963e-01 -3.98320798e-01
 -3.62612652e-01 -3.58730514e-01 -3.56079566e-01 -3.40740614e-01
 -3.38246150e-01 -3.32790666e-01 -3.21064763e-01 -2.89393214e-01
 -2.72585809e-01  6.68775946e-03  3.19662072e-02  5.88101924e-02
  6.73694391e-02  7.55167266e-02  8.36626165e-02  9.11807941e-02
  9.53315359e-02  1.02295205e-01  1.05326388e-01  1.09426215e-01
  1.15200455e-01  1.17589476e-01  1.21489887e-01  1.23151049e-01
  1.29784151e-01  1.34932828e-01  1.37455693e-01  1.41757789e-01
  1.44674511e-01  1.48141113e-01  1.50384329e-01  1.55093845e-01
  1.59839654e-01  1.60438763e-01  1.65272340e-01  1.66191772e-01
  1.70376305e-01  1.71072102e-01  1.75153308e-01  1.78468719e-01
  1.81193345e-01  1.83333552e-01  1.86638961e-01  1.88908455e-01
  1.94073073e-01  1.95787665e-01  1.98342107e-01  1.98958183e-01
  1.99296654e-01  2.03421094e-01  2.07862604e-01  2.09788254e-01
  2.11829450e-01  2.12591706e-01  2.15893915e-01  2.20977854e-01
  2.22546928e-01  2.25467624e-01  2.28806948e-01  2.31265981e-01
  2.32763133e-01  2.34501218e-01  2.35230971e-01  2.39665783e-01
  2.41563958e-01  2.48060088e-01  2.49020817e-01  2.50088646e-01
  2.52354008e-01  2.56664040e-01  2.59064643e-01  2.61127481e-01
  2.62603760e-01  2.65710908e-01  2.69037673e-01  2.70600400e-01
  2.74990084e-01  2.76406879e-01  2.80664181e-01  2.85639017e-01
  2.87229864e-01  2.90029599e-01  2.94158759e-01  2.95777924e-01
  2.99820065e-01  3.01744948e-01  3.04688929e-01  3.08676339e-01
  3.11449296e-01  3.12783466e-01  3.17367102e-01  3.18197350e-01
  3.18520213e-01  3.23492590e-01  3.28151356e-01  3.29345290e-01
  3.30990663e-01  3.33984842e-01  3.34711521e-01  3.37331712e-01
  3.39416059e-01  3.39522755e-01  3.46342449e-01  3.47471859e-01
  3.51545082e-01  3.54662753e-01  3.55933017e-01  3.58446258e-01
  3.60243443e-01  3.64476964e-01  3.66903800e-01  3.72615266e-01
  3.74534711e-01  3.78792914e-01  3.81833078e-01  3.83345560e-01
  3.84341148e-01  3.89976023e-01  3.90371038e-01  3.91971040e-01
  3.93215319e-01  3.99317050e-01  4.00902120e-01  4.02133341e-01
  4.06006379e-01  4.10812884e-01  4.13641537e-01  4.15528819e-01
  4.17381972e-01  4.20454600e-01  4.22912168e-01  4.25135836e-01
  4.28010435e-01  4.30127826e-01  4.30844205e-01  4.34973101e-01
  4.37595965e-01  4.42111904e-01  4.42307630e-01  4.42750325e-01
  4.45488469e-01  4.49650877e-01  4.50354854e-01  4.58540368e-01
  4.58635535e-01  4.61033780e-01  4.63939693e-01  4.69042793e-01
  4.70028336e-01  4.72229671e-01  4.73210113e-01  4.76505873e-01
  4.77770213e-01  4.79385872e-01  4.83588156e-01  4.84559105e-01
  4.84652459e-01  4.88827110e-01  4.90448674e-01  4.93676441e-01
  4.94867798e-01  4.95815017e-01  4.99378877e-01  4.99613710e-01
  5.00050131e-01  5.03504755e-01  5.05669423e-01  5.08944237e-01
  5.11917207e-01  5.14243922e-01  5.16388434e-01  5.18425647e-01
  5.19864000e-01  5.21610245e-01  5.23386274e-01  5.27045441e-01
  5.29109941e-01  5.29652312e-01  5.32742962e-01  5.33597985e-01
  5.35563467e-01  5.39384847e-01  5.41900158e-01  5.42821311e-01
  5.46675793e-01  5.49168222e-01  5.50610729e-01  5.52586878e-01
  5.54710158e-01  5.56247687e-01  5.57823199e-01  5.62586669e-01
  5.65121818e-01  5.66651561e-01  5.70250223e-01  5.72278995e-01
  5.72969569e-01  5.76120687e-01  5.78536769e-01  5.79681466e-01
  5.80485907e-01  5.83487315e-01  5.84537936e-01  5.87335086e-01
  5.92420556e-01  5.95964666e-01  5.96263694e-01  6.00076630e-01
  6.01903455e-01  6.02951033e-01  6.06395785e-01  6.07228148e-01
  6.08270804e-01  6.11870354e-01  6.12437581e-01  6.18149505e-01
  6.20153883e-01  6.21719832e-01  6.27840309e-01  6.29078303e-01
  6.30695701e-01  6.35400932e-01  6.37285682e-01  6.40636022e-01
  6.42944084e-01  6.44487926e-01  6.46751632e-01  6.50121241e-01
  6.52493625e-01  6.55417639e-01  6.58992117e-01  6.60203321e-01
  6.61870528e-01  6.63804195e-01  6.66725200e-01  6.68427103e-01
  6.77097686e-01  6.78321238e-01  6.80285657e-01  6.84499885e-01
  6.87226193e-01  6.87649501e-01  6.94007470e-01  6.97173481e-01
  7.01256076e-01  7.03774034e-01  7.04119967e-01  7.09142692e-01
  7.11861229e-01  7.14541042e-01  7.16321049e-01  7.19468464e-01
  7.21005549e-01  7.28114442e-01  7.30153883e-01  7.33369517e-01
  7.38644855e-01  7.40243734e-01  7.43734598e-01  7.45806945e-01
  7.49019437e-01  7.50675974e-01  7.52916874e-01  7.55461362e-01
  7.61645215e-01  7.65167452e-01  7.68738833e-01  7.71148136e-01
  7.75651557e-01  7.78313223e-01  7.80442309e-01  7.83451873e-01
  7.87154336e-01  7.91976684e-01  7.93953697e-01  7.97707006e-01
  7.99007760e-01  8.01510699e-01  8.07144881e-01  8.07786522e-01
  8.14020850e-01  8.16278889e-01  8.17179238e-01  8.25086577e-01
  8.31025256e-01  8.31971762e-01  8.36764677e-01  8.38738567e-01
  8.40925191e-01  8.44054073e-01  8.49066971e-01  8.55602095e-01
  8.55896798e-01  8.61899019e-01  8.64935550e-01  8.69924525e-01
  8.74856106e-01  8.77128948e-01  8.82097775e-01  8.89878821e-01
  8.90718504e-01  8.92852013e-01  8.94256558e-01  8.97231348e-01
  9.01538901e-01  9.03380036e-01  9.07792354e-01  9.09978797e-01
  9.12682784e-01  9.19611308e-01  9.21571918e-01  9.25487636e-01
  9.29256715e-01  9.36047029e-01  9.41161433e-01  9.44122590e-01
  9.49123562e-01  9.53886575e-01  9.56589028e-01  9.62046071e-01
  9.64139340e-01  9.66273497e-01  9.68866506e-01  9.76334599e-01
  9.77186624e-01  9.80039897e-01  9.82748039e-01  9.86297968e-01
  9.90020312e-01  9.95193753e-01  9.98092111e-01  1.00025983e+00
  1.00682049e+00  1.00864887e+00  1.01311432e+00  1.01535856e+00
  1.02203824e+00  1.02503487e+00  1.02711137e+00  1.03191654e+00
  1.03579510e+00  1.03964999e+00  1.04810606e+00  1.04840308e+00
  1.05056680e+00  1.05354119e+00  1.05648649e+00  1.06521376e+00
  1.06856726e+00  1.07081065e+00  1.07407851e+00  1.07936149e+00
  1.08087660e+00  1.08261237e+00  1.08519843e+00  1.09064798e+00
  1.09489852e+00  1.09816881e+00  1.10382213e+00  1.10507177e+00
  1.10775589e+00  1.10911912e+00  1.11167617e+00  1.11733119e+00
  1.12293335e+00  1.12634458e+00  1.12902950e+00  1.13445814e+00
  1.13864665e+00  1.14421785e+00  1.14629228e+00  1.14864476e+00
  1.15523442e+00  1.15941605e+00  1.16747482e+00  1.17165095e+00
  1.17488742e+00  1.17905131e+00  1.18074891e+00  1.18657708e+00
  1.19019846e+00  1.19120596e+00  1.19909188e+00  1.19966123e+00
  1.20263978e+00  1.20665156e+00  1.20910804e+00  1.21258745e+00
  1.21809039e+00  1.22333848e+00  1.22650856e+00  1.22921603e+00
  1.23534653e+00  1.23766686e+00  1.24293897e+00  1.24692609e+00
  1.25117972e+00  1.25638148e+00  1.26085907e+00  1.26420966e+00
  1.26718093e+00  1.27279390e+00  1.27506226e+00  1.27827576e+00
  1.27883694e+00  1.28689465e+00  1.29123907e+00  1.29452566e+00
  1.29526021e+00  1.29757277e+00  1.30240502e+00  1.30858991e+00
  1.31311368e+00  1.31907850e+00  1.32256400e+00  1.32390392e+00
  1.32853932e+00  1.33287765e+00  1.33476132e+00  1.34234112e+00
  1.34412075e+00  1.35126588e+00  1.35786718e+00  1.36231760e+00
  1.36497723e+00  1.36655185e+00  1.37361341e+00  1.37652571e+00
  1.37845953e+00  1.38211926e+00  1.38732254e+00  1.39554965e+00
  1.39906501e+00  1.40294123e+00  1.40921710e+00  1.41216091e+00
  1.41697977e+00  1.41908267e+00  1.42665347e+00  1.42694120e+00
  1.43132431e+00  1.43439937e+00  1.44326989e+00  1.44641680e+00
  1.44827737e+00  1.44928711e+00  1.45195900e+00  1.45583361e+00
  1.46304610e+00  1.46910376e+00  1.47380722e+00  1.48073650e+00
  1.48249681e+00  1.48790620e+00  1.49252252e+00  1.49544121e+00
  1.50200004e+00  1.50722531e+00  1.51074883e+00  1.51685408e+00
  1.51714813e+00  1.52480976e+00  1.52837601e+00  1.53074498e+00
  1.53336470e+00  1.53902565e+00  1.54819917e+00  1.55586942e+00
  1.55963978e+00  1.56126962e+00  1.56334339e+00  1.56774285e+00
  1.57419993e+00  1.57752870e+00  1.58098707e+00  1.58609081e+00
  1.59103058e+00  1.59825491e+00  1.60050433e+00  1.60585757e+00
  1.61066060e+00  1.61605150e+00  1.61913221e+00  1.62256224e+00
  1.63055138e+00  1.63291286e+00  1.63804376e+00  1.64236072e+00
  1.64301337e+00  1.64740431e+00  1.64982425e+00  1.65160315e+00
  1.65289830e+00  1.65857115e+00  1.66085634e+00  1.66620889e+00
  1.66986925e+00  1.67194878e+00  1.67352994e+00  1.67613961e+00
  1.68073184e+00  1.68254331e+00  1.68557340e+00  1.68910246e+00
  1.69339768e+00  1.69753271e+00  1.69955688e+00  1.70467268e+00
  1.70749860e+00  1.71079616e+00  1.71270045e+00  1.71442376e+00
  1.72072104e+00  1.72186096e+00  1.72457283e+00  1.72645007e+00
  1.73438993e+00  1.73696463e+00  1.73961450e+00  1.74694296e+00
  1.74971906e+00  1.75305159e+00  1.75784031e+00  1.76122466e+00
  1.76337545e+00  1.76894142e+00  1.76989139e+00  1.77230536e+00
  1.77725141e+00  1.78192068e+00  1.78565477e+00  1.79067340e+00
  1.79396284e+00  1.79499357e+00  1.79922109e+00  1.80440097e+00
  1.80483271e+00  1.80978106e+00  1.81372144e+00  1.81428038e+00
  1.81917007e+00  1.82247775e+00  1.82641306e+00  1.83055221e+00
  1.83319819e+00  1.83698166e+00  1.84145001e+00  1.84408766e+00
  1.85232272e+00  1.85494052e+00  1.85571736e+00  1.86531508e+00
  1.86626022e+00  1.86897881e+00  1.87166367e+00  1.87725429e+00
  1.88363623e+00  1.89061217e+00  1.89383770e+00  1.89610997e+00
  1.90346486e+00  1.90743354e+00  1.91430571e+00  1.91923026e+00
  1.92270265e+00  1.92751521e+00  1.93161746e+00  1.93556558e+00
  1.93828860e+00  1.94270617e+00  1.94733185e+00  1.94862956e+00
  1.95441788e+00  1.95912864e+00  1.96329214e+00  1.96855387e+00
  1.96980458e+00  1.97654512e+00  1.98352628e+00  1.98545161e+00
  1.98741332e+00  1.99119167e+00  1.99436378e+00  1.99578303e+00
  2.00348473e+00  2.00396796e+00  2.00566104e+00  2.01007851e+00
  2.02111441e+00  2.02301919e+00  2.02792518e+00  2.03148739e+00
  2.03676182e+00  2.03959903e+00  2.04319135e+00  2.04996761e+00
  2.05575727e+00  2.05748108e+00  2.06567074e+00  2.06758519e+00
  2.06938075e+00  2.07458434e+00  2.07587439e+00  2.08152639e+00
  2.08282798e+00  2.08633939e+00  2.08928029e+00  2.09725259e+00
  2.10104832e+00  2.10674695e+00  2.10954074e+00  2.11668995e+00
  2.11977330e+00  2.12165309e+00  2.12539585e+00  2.12979067e+00
  2.13352993e+00  2.13885942e+00  2.14303686e+00  2.14720502e+00
  2.14914089e+00  2.15321252e+00  2.15498930e+00  2.16436086e+00
  2.16550177e+00  2.16963914e+00  2.17460968e+00  2.17857296e+00
  2.18482635e+00  2.18830811e+00  2.19288792e+00  2.19505454e+00
  2.20081284e+00  2.21047441e+00  2.21163049e+00  2.21798047e+00
  2.21986600e+00  2.22271679e+00  2.22620917e+00  2.23390599e+00
  2.23601704e+00  2.24079224e+00  2.24945060e+00  2.25060129e+00
  2.25376971e+00  2.25473124e+00  2.26480008e+00  2.26508254e+00
  2.27323685e+00  2.27763276e+00  2.28621973e+00  2.28882366e+00
  2.29020545e+00  2.29497501e+00  2.29570923e+00  2.30144169e+00
  2.30561101e+00  2.30900948e+00  2.31079989e+00  2.31425820e+00
  2.31729466e+00  2.32267241e+00  2.33096422e+00  2.33652347e+00
  2.33790995e+00  2.34111917e+00  2.34596929e+00  2.34954202e+00
  2.35359020e+00  2.36217360e+00  2.36515429e+00  2.36874534e+00
  2.37518928e+00  2.37948488e+00  2.38088000e+00  2.38546015e+00
  2.38913640e+00  2.39096667e+00  2.39552703e+00  2.40466708e+00
  2.40528714e+00  2.40849835e+00  2.41241151e+00  2.41804735e+00
  2.42016501e+00  2.42555261e+00  2.42851223e+00  2.43467284e+00
  2.43621099e+00  2.43830723e+00  2.44547338e+00  2.45052037e+00
  2.45366257e+00  2.46079339e+00  2.46271720e+00  2.46896399e+00
  2.47096683e+00  2.47470741e+00  2.47616264e+00  2.48000700e+00
  2.48485803e+00  2.49050073e+00  2.49334199e+00  2.49483471e+00
  2.50062560e+00  2.50545220e+00  2.51036610e+00  2.51412926e+00
  2.52070680e+00  2.52095471e+00  2.52623376e+00  2.53055086e+00
  2.53316544e+00  2.53640275e+00  2.54061925e+00  2.54672692e+00
  2.55039187e+00  2.55141233e+00  2.55439414e+00  2.55640409e+00
  2.56051195e+00  2.56424451e+00  2.56871620e+00  2.56957990e+00
  2.57534087e+00  2.58136418e+00  2.58805517e+00  2.59107693e+00
  2.60163703e+00  2.60257432e+00  2.60664483e+00  2.61201928e+00
  2.61892881e+00  2.62288478e+00  2.62483731e+00  2.63313323e+00
  2.63431415e+00  2.63568595e+00  2.64103942e+00  2.64261765e+00
  2.64456284e+00  2.65011667e+00  2.65512607e+00  2.65783162e+00
  2.66110440e+00  2.66245766e+00  2.67137548e+00  2.67514357e+00
  2.67952180e+00  2.68166465e+00  2.69017985e+00  2.69172432e+00
  2.69350288e+00  2.69904347e+00  2.70033635e+00  2.70278455e+00
  2.70615265e+00  2.71291383e+00  2.71456810e+00  2.71734746e+00
  2.72245329e+00  2.72376274e+00  2.72858060e+00  2.73079742e+00
  2.73707875e+00  2.74239570e+00  2.74434908e+00  2.74755473e+00
  2.75077986e+00  2.75290011e+00  2.75526717e+00  2.75895047e+00
  2.76306105e+00  2.77066600e+00  2.77805930e+00  2.78213351e+00
  2.78366437e+00  2.78489777e+00  2.78953051e+00  2.79348885e+00
  2.79583759e+00  2.80039260e+00  2.80165183e+00  2.80368045e+00
  2.81715527e+00  2.81841019e+00  2.82027554e+00  2.82724654e+00
  2.82863305e+00  2.83273676e+00  2.83687302e+00  2.84055687e+00
  2.84475042e+00  2.84642185e+00  2.85350698e+00  2.85539087e+00
  2.86203636e+00  2.86387592e+00  2.87039664e+00  2.87504884e+00
  2.88149769e+00  2.88343490e+00  2.88974155e+00  2.88995498e+00
  2.89839058e+00  2.89929908e+00  2.90291091e+00  2.90832297e+00
  2.90888676e+00  2.91277469e+00  2.91586013e+00  2.92080444e+00
  2.92407620e+00  2.93059594e+00  2.93388375e+00  2.93657684e+00
  2.94055485e+00  2.94279539e+00  2.94765579e+00  2.94996971e+00
  2.95236781e+00  2.95816861e+00  2.95910016e+00  2.96393497e+00
  2.96998199e+00  2.97468255e+00  2.97890882e+00  2.98237387e+00
  2.98555294e+00  2.98889052e+00  2.99625405e+00  2.99997150e+00
  3.00283334e+00  3.00416165e+00  3.01382105e+00  3.02095706e+00
  3.03248122e+00  3.03495216e+00  3.04042613e+00  3.04417769e+00
  3.04700378e+00  3.04968077e+00  3.05559601e+00  3.05857037e+00
  3.06209751e+00  3.06325899e+00  3.06928960e+00  3.07573862e+00
  3.07806463e+00  3.08333028e+00  3.08510388e+00  3.08955620e+00
  3.09395019e+00  3.09834324e+00  3.10074181e+00  3.10440381e+00
  3.10685403e+00  3.11067729e+00  3.11623443e+00  3.11706657e+00
  3.12020465e+00  3.12293143e+00  3.12929654e+00  3.13618370e+00
  3.13873202e+00  3.14208023e+00  3.14478809e+00  3.14575139e+00
  3.14970251e+00  3.15346188e+00  3.15713976e+00  3.15961229e+00
  3.16241886e+00  3.16905303e+00  3.16985186e+00  3.17496948e+00
  3.17677659e+00  3.18088244e+00  3.18308129e+00  3.18597168e+00
  3.19172091e+00  3.19552935e+00  3.19961161e+00  3.20202756e+00
  3.20584976e+00  3.20854503e+00  3.21184839e+00  3.21755478e+00
  3.21912653e+00  3.22056881e+00  3.22474499e+00  3.23026219e+00
  3.23149841e+00  3.23299936e+00  3.23760811e+00  3.24076401e+00
  3.24411354e+00  3.24765143e+00  3.25048979e+00  3.25266574e+00
  3.25750148e+00  3.25853079e+00  3.26282668e+00  3.26644966e+00
  3.27016776e+00  3.27080842e+00  3.27588867e+00  3.28160053e+00
  3.28410239e+00  3.28767766e+00  3.29372581e+00  3.29833710e+00
  3.29893742e+00  3.30338125e+00  3.30629851e+00  3.30833896e+00
  3.31301404e+00  3.31359067e+00  3.31731777e+00  3.32643374e+00
  3.32872001e+00  3.33144348e+00  3.33606939e+00  3.33839521e+00
  3.34077726e+00  3.34305457e+00  3.34498046e+00  3.35080219e+00
  3.35356976e+00  3.35598541e+00  3.35787209e+00  3.35926377e+00
  3.36499817e+00  3.36623445e+00  3.37056121e+00  3.37343779e+00
  3.37919168e+00  3.38022078e+00  3.38048716e+00  3.38468358e+00
  3.38650672e+00  3.39359006e+00  3.39600445e+00  3.39762371e+00
  3.40065214e+00  3.40194459e+00  3.40618055e+00  3.40670342e+00
  3.40983727e+00  3.41426647e+00  3.41615369e+00  3.42172483e+00
  3.42378553e+00  3.42721628e+00  3.43163620e+00  3.43448897e+00
  3.43751824e+00  3.43884630e+00  3.44516228e+00  3.44894045e+00
  3.45123123e+00  3.45539580e+00  3.45833200e+00  3.46039303e+00
  3.46443623e+00  3.46604970e+00  3.46853881e+00  3.47152417e+00
  3.47332635e+00  3.47810914e+00  3.48024337e+00  3.48508508e+00
  3.48621911e+00  3.48954383e+00  3.49476376e+00  3.49783673e+00
  3.50029232e+00  3.50331764e+00  3.50649455e+00  3.50893000e+00
  3.51306975e+00  3.51616309e+00  3.52098811e+00  3.52247906e+00
  3.52642026e+00  3.52920457e+00  3.53276182e+00  3.53484500e+00
  3.54094183e+00  3.54517428e+00  3.54779708e+00  3.55239559e+00
  3.55545584e+00  3.55740382e+00  3.56186019e+00  3.56582794e+00
  3.56995102e+00  3.57427571e+00  3.57729458e+00  3.57785211e+00
  3.58336506e+00  3.58436287e+00  3.58965037e+00  3.59014626e+00
  3.59558151e+00  3.59668424e+00  3.60808110e+00  3.60977781e+00
  3.61671124e+00  3.62012701e+00  3.62321954e+00  3.62564020e+00
  3.62868487e+00  3.63725604e+00  3.64101876e+00  3.64344500e+00
  3.64756051e+00  3.65413370e+00  3.65622108e+00  3.65814234e+00
  3.66190028e+00  3.67103808e+00  3.67662767e+00  3.68004856e+00
  3.68396928e+00  3.68673995e+00  3.69282607e+00  3.69523009e+00
  3.69913567e+00  3.70468510e+00  3.70965832e+00  3.71412884e+00
  3.72123687e+00  3.72308271e+00  3.72565542e+00  3.72800039e+00
  3.73618115e+00  3.74069593e+00  3.74235257e+00  3.74536219e+00
  3.75612388e+00  3.76425905e+00  3.76525018e+00  3.76933415e+00
  3.77450244e+00  3.78207925e+00  3.78619411e+00  3.78967204e+00
  3.79444399e+00  3.80036420e+00  3.80256861e+00  3.80909791e+00
  3.81424538e+00  3.81859344e+00  3.82410798e+00  3.82739618e+00
  3.83066621e+00  3.83307197e+00  3.83954093e+00  3.84294880e+00
  3.84885459e+00  3.85008734e+00  3.85272960e+00  3.85771089e+00
  3.86000348e+00  3.86711711e+00  3.87341956e+00  3.87913364e+00
  3.88183177e+00  3.88861769e+00  3.89201027e+00  3.89842788e+00
  3.90288875e+00  3.90943079e+00  3.91105353e+00  3.91146734e+00
  3.92144114e+00  3.92559777e+00  3.93302267e+00  3.93668520e+00
  3.94312022e+00  3.94471428e+00  3.95108267e+00  3.95746996e+00
  3.96328520e+00  3.97075923e+00  3.97438465e+00  3.98124794e+00
  3.98296710e+00  3.98801433e+00  3.99155709e+00  3.99520196e+00
  3.99993427e+00  4.00406657e+00  4.01279942e+00  4.01605299e+00
  4.02242511e+00  4.03203197e+00  4.03673642e+00  4.04308302e+00
  4.04422540e+00  4.05112964e+00  4.06180818e+00  4.06553550e+00
  4.06934937e+00  4.07277150e+00  4.07443027e+00  4.07882572e+00
  4.08539099e+00  4.08839326e+00  4.09019282e+00  4.10173119e+00
  4.10931408e+00  4.11266679e+00  4.12144098e+00  4.12770631e+00
  4.12865022e+00  4.13493172e+00  4.13761486e+00  4.15012591e+00
  4.15748652e+00  4.16438724e+00  4.16967355e+00  4.17600272e+00
  4.18150697e+00  4.18679783e+00  4.19234760e+00  4.20021628e+00
  4.20825111e+00  4.21337756e+00  4.22152998e+00  4.22387635e+00
  4.23214076e+00  4.23395343e+00  4.23745094e+00  4.24699009e+00
  4.25466153e+00  4.25723448e+00  4.27004988e+00  4.27212659e+00
  4.28308454e+00  4.28900468e+00  4.29349589e+00  4.29785821e+00
  4.30476075e+00  4.31104617e+00  4.31668734e+00  4.32916388e+00
  4.33380628e+00  4.33761885e+00  4.34140831e+00  4.35860331e+00
  4.36598441e+00  4.36730973e+00  4.37996829e+00  4.38265175e+00
  4.38846735e+00  4.39525527e+00  4.40041132e+00  4.41097648e+00
  4.41958358e+00  4.42605994e+00  4.44409587e+00  4.44684193e+00
  4.45056010e+00  4.45182317e+00  4.45448175e+00  4.45975357e+00
  4.47014895e+00  4.47273653e+00  4.47573546e+00  4.48245592e+00
  4.48868272e+00  4.49147326e+00  4.49701076e+00  4.50231203e+00
  4.50591066e+00  4.51727246e+00  4.51978046e+00  4.53316793e+00
  4.53760012e+00  4.54395722e+00  4.55016585e+00  4.55522280e+00
  4.56144628e+00  4.57036693e+00  4.57561796e+00  4.58225574e+00
  4.59177808e+00  4.60255309e+00  4.60866738e+00  4.61199230e+00
  4.62291145e+00  4.63300794e+00  4.63752615e+00  4.64015046e+00
  4.65033474e+00  4.65743528e+00  4.66092973e+00  4.66655106e+00
  4.67449692e+00  4.67882620e+00  4.68793346e+00  4.70262281e+00
  4.70790205e+00  4.71107036e+00  4.71765682e+00  4.72792674e+00
  4.73601040e+00  4.74309121e+00  4.75355466e+00  4.77168235e+00
  4.77451142e+00  4.78299807e+00  4.80025247e+00  4.80258778e+00
  4.82327888e+00  4.83243417e+00  4.83892463e+00  4.85272419e+00
  4.86379384e+00  4.86962866e+00  4.87903764e+00  4.88650527e+00
  4.89066674e+00  4.89557731e+00  4.90573057e+00  4.91713248e+00
  4.92167031e+00  4.92564427e+00  4.93596129e+00  4.94136370e+00
  4.95056759e+00  4.95255075e+00  4.95766587e+00  4.96226886e+00
  4.97682419e+00  4.97729768e+00  4.99551158e+00  5.00781490e+00
  5.01618881e+00  5.02102199e+00  5.03409271e+00  5.04183965e+00
  5.05438335e+00  5.06491050e+00  5.08047426e+00  5.08783835e+00
  5.09580358e+00  5.11007946e+00  5.11580559e+00  5.13907809e+00
  5.14332078e+00  5.15061604e+00  5.16029581e+00  5.17555991e+00
  5.18756674e+00  5.19685234e+00  5.20288490e+00  5.21449372e+00
  5.22169844e+00  5.22638198e+00  5.24018127e+00  5.24538021e+00
  5.25288797e+00  5.25834839e+00  5.26068721e+00  5.26363838e+00
  5.26618170e+00  5.26982308e+00  5.28009334e+00  5.28299990e+00
  5.29725804e+00  5.31166026e+00  5.31367298e+00  5.32094069e+00
  5.33371155e+00  5.33939259e+00  5.34269942e+00  5.34821130e+00
  5.35752853e+00  5.37264025e+00  5.38071231e+00  5.38542504e+00
  5.39357240e+00  5.40249035e+00  5.40677575e+00  5.41480137e+00
  5.41952014e+00  5.42743506e+00  5.43840867e+00  5.44045182e+00
  5.45174030e+00  5.45622679e+00  5.46050505e+00  5.46820406e+00
  5.48519957e+00  5.52411122e+00  5.53270165e+00  5.54801040e+00
  5.54969103e+00  5.56776674e+00  5.57334014e+00  5.58924795e+00
  5.60292979e+00  5.61857867e+00  5.65808778e+00  5.66644988e+00
  5.67902408e+00  5.68246395e+00  5.69852053e+00  5.69970573e+00
  5.74201269e+00  5.74515139e+00  5.76503565e+00  5.77764500e+00
  5.79882873e+00  5.81312698e+00  5.82103714e+00  5.82368867e+00
  5.85612751e+00  5.86327266e+00  5.86778366e+00  5.88166695e+00
  5.92589383e+00  5.93860148e+00  5.94620044e+00  5.99567178e+00
  6.00564140e+00  6.02925414e+00  6.03092379e+00  6.04927758e+00
  6.05591190e+00  6.11150770e+00  6.14229533e+00  6.17189712e+00
  6.18356853e+00  6.19389923e+00  6.21019962e+00  6.27013833e+00
  6.27324692e+00  6.29773585e+00  6.31506092e+00  6.33616910e+00
  6.39969766e+00  6.40740784e+00  6.45293058e+00  6.48316305e+00
  6.50750493e+00  6.51597755e+00  6.52191205e+00  6.52587782e+00
  6.55418691e+00  6.56777219e+00  6.61226526e+00  6.68725664e+00
  6.69610652e+00  6.72049365e+00  6.73451661e+00  6.76898416e+00
  6.77453197e+00  6.82873345e+00  6.83019332e+00  6.83870375e+00
  6.89611999e+00  6.90305010e+00  6.91727613e+00  6.94450034e+00
  6.97190931e+00  6.97631760e+00  6.98772194e+00  7.03492039e+00
  7.15734125e+00  7.17271882e+00  7.18613679e+00  7.21107035e+00
  7.21457750e+00  7.23245530e+00  7.23308738e+00  7.24266081e+00
  7.35240349e+00  7.40261821e+00  2.23711581e+01  2.23744947e+01
  2.24644006e+01  2.24675618e+01  2.24789079e+01  2.25375899e+01
  2.25555023e+01  2.25705425e+01  2.25960075e+01  2.26092158e+01
  2.26501099e+01  2.26977297e+01  2.27199071e+01  2.27300349e+01
  2.27596544e+01  2.27759602e+01  2.27938351e+01  2.28511078e+01
  2.28700426e+01  2.28845068e+01  2.30613826e+01  2.31193753e+01
  2.32410529e+01  2.33149035e+01  2.33224637e+01  2.33724285e+01
  2.33940174e+01  2.34152792e+01  2.34586534e+01  2.34620482e+01
  2.35374164e+01  2.36391749e+01  2.37858602e+01  3.25550823e+01
  3.25943263e+01  3.26964220e+01  3.27361736e+01  4.38221541e+01
  4.38879240e+01  4.39879200e+01  4.40119615e+01  4.40807362e+01
  4.41120650e+01]
nelec by numeric integration = 314.00147833467196
    CPU time for vxc    542.50 sec, wall time     36.65 sec
    CPU time for df vj and vk   4073.58 sec, wall time    300.03 sec
    CPU time for df vj and vk   3348.70 sec, wall time    255.92 sec
E1 = -13530.13000787033  Ecoul = 6388.86932934854  Exc = -273.0695536915354
Extra cycle  E= -1952.24384921916  delta_E= -1.82e-12  |g|= 7.57e-06  |ddm|= 1.32e-05
    CPU time for scf_cycle  60217.58 sec, wall time   4586.57 sec
    CPU time for SCF  60217.60 sec, wall time   4586.59 sec
converged SCF energy = -1952.24384921916
SCF Done after  4586.5995 seconds
after SCF memory used: 38957.02734375 MB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
a_x = 0.56
beta = 8.0
alpha = 4.58
hdiag (222312,)
n_occ =  157
n_vir =  1416
max_vir =  373
Q-Gamma tensors building time = 58.7295
after Q matrix memory used: 40925.90234375 MB
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   sTDA
Preconditioner:  sTDA
A matrix size =  222312 * 222312
sTDA nstate = 28
sTDA A diagonalization: threshold = 0.001 ; in 11 steps  173.1342 seconds
sTDA excitation energies:
[4.24869614 4.37236677 4.42076625 4.73018737 4.97482242 5.02035907
 5.17627939 5.34809937 5.43312707 5.56125866 5.57845371 5.6651389
 5.83528882 5.85430153 6.0132161  6.02247727 6.03847831 6.10477319
 6.13405021 6.24334127 6.28569573 6.30607101 6.45576153 6.58236399
 6.61296132 6.65397899 6.6679057  6.72512203]
Intial guess time: 173.9117 seconds
    CPU time for df vj and vk 116251.64 sec, wall time   8138.55 sec
    CPU time for df vj and vk  87781.12 sec, wall time   5934.68 sec
Iteration  0
subspace size:  28
maximum residual norm 0.1344259451715057
sTDA Preconditioning Done after  18 steps;  142.9092 seconds
subgencost 11.6599 8.16 %
mvcost 36.0361 25.22 %
GScost 86.3143 60.4 %
subcost 0.2201 0.15 %
m,new_m 28 48
    CPU time for df vj and vk  82833.59 sec, wall time   5833.44 sec
    CPU time for df vj and vk  62972.00 sec, wall time   4222.55 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.04108395738625544
sTDA Preconditioning Done after  19 steps;  144.3052 seconds
subgencost 13.5134 9.36 %
mvcost 37.9026 26.27 %
GScost 84.2317 58.37 %
subcost 0.2677 0.19 %
m,new_m 48 68
    CPU time for df vj and vk  82696.98 sec, wall time   5817.86 sec
    CPU time for df vj and vk  62908.70 sec, wall time   4222.30 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.015437037444028327
sTDA Preconditioning Done after  17 steps;  129.459 seconds
subgencost 11.2405 8.68 %
mvcost 33.9407 26.22 %
GScost 75.9864 58.7 %
subcost 0.3193 0.25 %
m,new_m 68 88
    CPU time for df vj and vk  82330.83 sec, wall time   5774.88 sec
    CPU time for df vj and vk  63029.06 sec, wall time   4230.54 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.0055279094229121585
sTDA Preconditioning Done after  18 steps;  121.9186 seconds
subgencost 10.895 8.94 %
mvcost 34.0908 27.96 %
GScost 67.8585 55.66 %
subcost 0.4087 0.34 %
m,new_m 88 108
    CPU time for df vj and vk  82835.85 sec, wall time   5837.48 sec
    CPU time for df vj and vk  63030.43 sec, wall time   4231.30 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.0019288322729076267
sTDA Preconditioning Done after  17 steps;  142.4812 seconds
subgencost 11.2292 7.88 %
mvcost 37.7205 26.47 %
GScost 85.2937 59.86 %
subcost 0.1763 0.12 %
m,new_m 108 128
    CPU time for df vj and vk  82762.30 sec, wall time   5809.14 sec
    CPU time for df vj and vk  63045.72 sec, wall time   4241.81 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.0005508131161858722
sTDA Preconditioning Done after  16 steps;  116.6224 seconds
subgencost 9.0729 7.78 %
mvcost 33.7494 28.94 %
GScost 65.6762 56.32 %
subcost 0.2609 0.22 %
m,new_m 128 147
    CPU time for df vj and vk  78265.56 sec, wall time   5509.01 sec
    CPU time for df vj and vk  60041.80 sec, wall time   4031.53 sec
new generated guesses: 19
Iteration  6
subspace size:  147
maximum residual norm 0.00014550566669472453
sTDA Preconditioning Done after  21 steps;  58.7296 seconds
subgencost 8.1038 13.8 %
mvcost 20.7414 35.32 %
GScost 23.7842 40.5 %
subcost 0.1582 0.27 %
m,new_m 147 161
    CPU time for df vj and vk  57845.02 sec, wall time   4071.41 sec
    CPU time for df vj and vk  44021.71 sec, wall time   2986.47 sec
new generated guesses: 14
Iteration  7
subspace size:  161
maximum residual norm 3.5142042978400945e-05
sTDA Preconditioning Done after  21 steps;  21.5675 seconds
subgencost 1.8028 8.36 %
mvcost 14.0152 64.98 %
GScost 4.0804 18.92 %
subcost 0.0493 0.23 %
m,new_m 161 165
    CPU time for df vj and vk  16537.91 sec, wall time   1171.50 sec
    CPU time for df vj and vk  12680.26 sec, wall time    870.91 sec
new generated guesses: 4
Iteration  8
subspace size:  165
maximum residual norm 9.255640484978944e-06
Davidson procedure aborted
Davidson done after  91571.9617 seconds
Total steps = 9
Final subspace shape =  (165, 165)
Preconditioning time: 880.8534 0.96 %
In-house Davidson time: 91572.2463 seconds
Excited State energies (eV) =
[4.31502419 4.3405357  4.45094354 4.79236594 4.98590969 5.2495
 5.4222284  5.44028358 5.77687659 5.80059747 5.85162229 5.90608867
 5.94298705 6.02453114 6.05106944 6.13747286 6.3029329  6.34178363
 6.38102699 6.46914774]
|---------------   In-house Developed Davidson Done   -----------|
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 20
Initial guess:   Adiag
Preconditioner:  Adiag
A matrix size =  222312 * 222312
Intial guess time: 0.0147 seconds
    CPU time for df vj and vk 116225.65 sec, wall time   8111.82 sec
    CPU time for df vj and vk  88037.07 sec, wall time   5952.66 sec
Iteration  0
subspace size:  28
maximum residual norm 0.160625437140374
m,new_m 28 48
    CPU time for df vj and vk  82654.28 sec, wall time   5803.59 sec
    CPU time for df vj and vk  63101.12 sec, wall time   4241.17 sec
new generated guesses: 20
Iteration  1
subspace size:  48
maximum residual norm 0.04623917465513827
m,new_m 48 68
    CPU time for df vj and vk  82721.66 sec, wall time   5832.76 sec
    CPU time for df vj and vk  63106.25 sec, wall time   4235.27 sec
new generated guesses: 20
Iteration  2
subspace size:  68
maximum residual norm 0.0573199694393872
m,new_m 68 88
    CPU time for df vj and vk  82872.03 sec, wall time   5854.00 sec
    CPU time for df vj and vk  63105.75 sec, wall time   4247.51 sec
new generated guesses: 20
Iteration  3
subspace size:  88
maximum residual norm 0.04190199313526771
m,new_m 88 108
    CPU time for df vj and vk  82741.74 sec, wall time   5825.69 sec
    CPU time for df vj and vk  62998.49 sec, wall time   4228.31 sec
new generated guesses: 20
Iteration  4
subspace size:  108
maximum residual norm 0.037008324165384465
m,new_m 108 128
    CPU time for df vj and vk  82409.39 sec, wall time   5805.81 sec
    CPU time for df vj and vk  63018.50 sec, wall time   4238.13 sec
new generated guesses: 20
Iteration  5
subspace size:  128
maximum residual norm 0.03770973996691138
m,new_m 128 148
    CPU time for df vj and vk  82497.08 sec, wall time   5812.00 sec
    CPU time for df vj and vk  63072.12 sec, wall time   4249.71 sec
new generated guesses: 20
Iteration  6
subspace size:  148
maximum residual norm 0.06326308313545605
m,new_m 148 168
