curpath /scratch/pbsjobs/job.15971902.hpc
lib.num_threads() =  16
at beginning memory used: 51.84765625 MB
mol.max_memory 60000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul6_GS.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
#from einsum2 import einsum2 as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

# from pyscf.tools import molden
# from pyscf.dft import xcfun

# wb97x methanol, sTDA[ 6.46739329  8.18181719  8.38358186  9.45195086  9.52132657  9.98634407
#  10.57628203 11.22108803 11.23872459 11.57456576]

# wb97x methanol, sTDDFT [6.46636223 8.18031038 8.38140358 9.45010938 9.50610109]
# truncate 40 eV         [6.46748128 8.18219018 8.38315179 9.45216734 9.51268853]
#
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA',  help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=bool,  default=False, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default='NA',  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='NA',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=bool,  default=True,  help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default='3',   help='0-9, 9 is best')

parser.add_argument('-n',  '--nstates',                     type=int,   default = 4,      help='number of excited states')
parser.add_argument('-pytd',  '--pytd',                     type=bool,  default = False , help='whether to compare with PySCF TDDFT')

parser.add_argument('-TDA','--TDA',                         type=bool,  default = False, help='perform TDA')
parser.add_argument('-TDDFT','--TDDFT',                     type=bool,  default = False, help='perform TDDFT')
parser.add_argument('-dynpol','--dynpol',                   type=bool,  default = False, help='perform dynamic polarizability')
parser.add_argument('-omega','--dynpol_omega',              type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
parser.add_argument('-stapol','--stapol',                   type=bool,  default = False, help='perform static polarizability')

parser.add_argument('-sTDA','--sTDA',                       type=bool,  default = False, help='perform sTDA calculation')
parser.add_argument('-sTDDFT','--sTDDFT',                   type=bool,  default = False, help='perform sTDDFT calculation')
parser.add_argument('-TT','--Truncate_test',                type=bool,  default = False, help='test the wall time for different virtual truncation')

parser.add_argument('-TV','--truncate_virtual',             type=float, default = 0, help='the threshold to truncate virtual orbitals, in eV')

parser.add_argument('-o1', '--TDA_options',                 type=int,   default = [0], nargs='+', help='0-7')
parser.add_argument('-o2', '--TDDFT_options',               type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o3', '--dynpol_options',              type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o4', '--stapol_options',              type=int,   default = [0], nargs='+', help='0-3')

parser.add_argument('-t1',  '--TDA_tolerance',              type=float, default= 1e-5, help='residual norm conv for TDA')
parser.add_argument('-t2',  '--TDDFT_tolerance',            type=float, default= 1e-5, help='residual norm conv for TDDFT')
parser.add_argument('-t3',  '--dynpol_tolerance',           type=float, default= 1e-5, help='residual norm conv for dynamic polarizability')
parser.add_argument('-t4',  '--stapol_tolerance',           type=float, default= 1e-5, help='residual norm conv for static polarizability')

parser.add_argument('-max',  '--max',                       type=int,   default= 30,   help='max iterations')

parser.add_argument('-it1', '--TDA_initialTOL',             type=float, default= 1e-3, help='conv for sTDA inital guess')
parser.add_argument('-it2', '--TDDFT_initialTOL',           type=float, default= 1e-3, help='conv for sTDDFT inital guess')
parser.add_argument('-it3', '--dynpol_initprecTOL',         type=float, default= 1e-2, help='conv for s-dynamic polarizability inital guess and precond')
parser.add_argument('-it4', '--stapol_initprecTOL',         type=float, default= 1e-2, help='conv for s-static polarizability inital guess and precond')

parser.add_argument('-pt1', '--TDA_precondTOL',             type=float, default= 1e-2, help='conv for TDA preconditioner')
parser.add_argument('-pt2', '--TDDFT_precondTOL',           type=float, default= 1e-2, help='conv for TDDFT preconditioner')

parser.add_argument('-ei1', '--TDA_extrainitial',           type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
parser.add_argument('-ei2', '--TDDFT_extrainitial',         type=int,   default= 8,    help='number of extral TDDFT initial guess vectors, 0-8')
parser.add_argument('-ei3n','--TDDFT_extrainitial_3n',      type=bool,  default= False,help='number of extral TDDFT initial guess vectors, 3state')

parser.add_argument('-et', '--eigensolver_tol',             type=float, default= 1e-5, help='conv for new guess generator in new_ES')
parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')

parser.add_argument('-be', '--beta',                        type=float, default= [],    nargs='+', help='beta = 0.83')
parser.add_argument('-al', '--alpha',                       type=float, default= [],    nargs='+', help='alpha = 0.83')

args = parser.parse_args()
################################################


########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

# info = psutil.virtual_memory()
# print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

f = open(args.xyzfile)
atom_coordinates = f.readlines()
del atom_coordinates[:2]
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile == True:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'
    # to use the chk file as scf input


mf.conv_tol = 1e-10

print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
kernel_t = kernel_1 - kernel_0
print ('SCF Done after ', round(kernel_t, 4), 'seconds')

show_memory_info('after SCF')

#################################################################
# Collect everything needed from PySCF
Qstart = time.time()
Natm = mol.natm
mo_occ = mf.mo_occ
n_occ = len(np.where(mo_occ > 0)[0])
#mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
n_vir = len(np.where(mo_occ == 0)[0])
#################################################
# generate matrix vector multiplication function
td = tddft.TDA(mf)
TDA_vind, hdiag = td.gen_vind(mf)

TD = tddft.TDDFT(mf)
TDDFT_vind, Hdiag = TD.gen_vind(mf)

A_size = n_occ * n_vir

# return AV
def TDA_matrix_vector(V):
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1
#################################################

##################################################################################################
# create a function for dictionary of chemical hardness, by mappig two iteratable subject, list
# list of elements
elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', 'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb','Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
#list of chemical hardness, they are floats, containing elements 1-94, in Hartree
hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
HARDNESS = dict(zip(elements,hardness))
#function to return chemical hardness from dictionary HARDNESS
def Hardness(atom_id):
    atom = mol.atom_pure_symbol(atom_id)
    return HARDNESS[atom]

################################################################################
# This block is the function to produce orthonormalized coefficient matrix C
def matrix_power(S,a):
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    #X == S^a
    return X

def matrix_power2(S):
    s,ket = np.linalg.eigh(S)
    s_sqrt = s**0.5
    s_inv = 1/s_sqrt

    S1 = np.dot(ket*s_sqrt,ket.T)
    S2 = np.dot(ket*s_inv,ket.T)

    #S1 == S^1/2
    #S2 == S^-1/2
    return S1, S2

def orthonormalize(C):
    X = matrix_power(mf.get_ovlp(), 0.5)
    # S = mf.get_ovlp() #.get_ovlp() is basis overlap matrix
    # S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
    C = np.dot(X,C)
    return C

################################################################################
def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']# NA is for Hartree-Fork
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    DF_ax = dict(zip(hybride_F, hybride_paramt))
    #Zhao, Y. and Truhlar, D.G., 2006. Density functional for spectroscopy: no long-range self-interaction error, good performance for Rydberg and charge-transfer states, and better performance on average than B3LYP for ground states. The Journal of Physical Chemistry A, 110(49), pp.13126-13130.

    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]

    elif args.functional in hybride_F:
        beta1 = 0.2
        beta2 = 1.83
        alpha1 = 1.42
        alpha2 = 0.48

        a_x = DF_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)
    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

# creat \eta matrix

def gen_gammaJK():
    Natm = mol.natm
    a = [Hardness(atom_id) for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2

    #Inter-particle distance array
    # unit == ’Bohr’, Its value is 5.29177210903(80)×10^(−11) m
    R = pyscf.gto.mole.inter_distance(mol, coords=None)
    # creat GammaK and GammaK matrix
    GammaJ = (R**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

GammaJ, GammaK = gen_gammaJK()

def generateQ():
    N_bf = len(mo_occ)
    C = mf.mo_coeff
    # mf.mo_coeff is the coefficient matrix
    C = orthonormalize(C)
    # C is orthonormalized coefficient matrix, N_bf * N_bf
    # np.dot(C.T,C) is a an identity matrix
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    #N_bf is number Atomic orbitals = n_occ+n_vir
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

q_tensors = generateQ()

''' if no truncation, max_vir = n_vir and n_occ + max_vir = N_bf '''
print('hdiag', hdiag.shape)
delta_diag_A = hdiag.reshape(n_occ, n_vir)

def gen_maxvir(tol_eV = args.truncate_virtual):
    if tol_eV != 0:
        homo_vir = delta_diag_A[-1,:].tolist()
        # print(delta_diag_A[-1,:]*27.211386245988)
        tol = tol_eV/27.211386245988
        for i in range(len(homo_vir)):
            if homo_vir[i] >= tol:
                max_vir = i
                break
            else:
                max_vir = n_vir
    else:
        max_vir = n_vir
    return max_vir

max_vir = gen_maxvir()
print('n_occ = ', n_occ)
print('n_vir = ', n_vir)
print('max_vir = ', max_vir)

A_reduced_size = n_occ * max_vir

def gen_QJK(max_vir=max_vir):

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)


    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()
# pre-calculate and store the Q-Gamma rank 3 tensor
Qend = time.time()

Q_time = Qend - Qstart
print('Q-Gamma tensors building time =', round(Q_time, 4))
################################################################################

show_memory_info('after Q matrix')


################################################################################
# This block is to define on-the-fly two electron intergeral (pq|rs)
# A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v

# iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
# ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)

max_vir_hdiag = delta_diag_A[:,:max_vir]

def gen_iajb_ijab_ibja_delta_fly(max_vir=max_vir, \
                                q_ij=q_ij, \
                                q_ab=q_ab, \
                                q_ia=q_ia , \
                                GK_q_jb=GK_q_jb, \
                                GJ_q_ab=GJ_q_ab):

    def iajb_fly(V):
        start = time.time()
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        end = time.time()
        # print('iajb =', round(end - start,4))
        return iajb_V


    def ijab_fly(V):
        start = time.time()
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        end = time.time()
        # print('ijab =', round(end - start,4))
        return ijab_V

    def ibja_fly(V):
        start = time.time()
        # the Forck exchange energy in B matrix
        ''' (ib|ja) '''
        # GK_q_jb_V = einsum("Aja,jbm->Abam", GK_q_jb, V)
        # ibja_V = einsum("Aib,Abam->iam", q_ia, GK_q_jb_V)
        # [ 6.46636595  8.18031516  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]

        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        #[ 6.46636595  8.18031515  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]
        end = time.time()
        # print('ibja =', round(end - start,4))
        return ibja_V

    def delta_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_diag_A, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir=max_vir, \
                            iajb_fly = iajb_fly, \
                            ijab_fly = ijab_fly, \
                            ibja_fly = ibja_fly, \
                            delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        # sTDA_A * V
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''''return AX+BY and AY+BX'''''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        '''sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        '''sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)'''

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        ''' return (A+B)X '''
        ''' sTDA_A = delta_fly(V) + 4*iajb_fly(V) \
                    - ijab_fly(V) - a_x*ibja_fly(V)'''
        X = X.reshape(n_occ, max_vir, -1)

        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)

        U = U.reshape(n_occ*max_vir, -1)
        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

################################################################################

################################################################################
# orthonormalization of guess_vectors
def Gram_Schmidt_bvec(A, bvec):
    ''' orthonormalize vector b against all A vectors'''
    ''' b = b - A*(A.T*b)'''
    if A.shape[1] != 0:
        # suppose A is orthonormalized
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)

    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    # V is a vectors holder
    # count is the amount of vectors that already sit in the holder
    nvec = np.shape(vecs)[1]
    # amount of new vectors intended to fill in the V
    # count will be final amount of vectors in V
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize

        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count

    return V, new_count


def S_symmetry_orthogonal(x,y):

    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    # print('x.Ty', np.dot(new_x.T,new_y))
    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A


################################################################################
# define the orthonormality of a matrix A as the norm of (A.T*A - I)
def check_orthonormal(A):
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c
################################################################################

################################################################################
def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    # put X_new into V, and Y_new into W
    # m is the amount of vectors that already on V or W
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]
    # amount of new vectors intended to fill in the V_holder and W_holder
    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):

        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)

        # x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m
################################################################################



################################################################################
def solve_AX_Xla_B(A, omega, Q):
    ''' AX - XΩ  = Q '''

    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)

    X *= Qnorm
    return X
################################################################################
def TDA_A_diag_initial_guess(m, V, hdiag = hdiag):
    # m is the amount of initial guesses
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V

def sTDA_initial_guess(m, V):
    sTDA_A_eigenkets = Davidson0(m)
    # print('sTDA_A_eigenkets', sTDA_A_eigenkets.shape)
    #diagonalize sTDA_A amtrix
    V[:, :m] = sTDA_A_eigenkets[:,:m]
    return V
################################################################################

################################################################################
def TDA_A_diag_preconditioner(arg1, arg2, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None, arg8=None, hdiag = hdiag):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    # preconditioners for each corresponding residual
    residual = arg1
    sub_eigenvalue = arg2
    current_dic = arg3

    k = np.shape(residual)[1]
    t = 1e-14

    # print('hdiag in preconditioner', hdiag.reshape(-1,1).shape)
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    D = np.where( abs(D) < t, np.sign(D)*t, D) # force all values not in domain (-t, t)

    new_guess = residual/D

    return new_guess, current_dic
################################################################################


################################################################################
# sTDA preconditioner
def sTDA_preconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """ (sTDA_A - λ*I)^-1 B = X """
    """ AX - Xλ = B """
    """ columns in B are residuals (in Davidson's loop) to be preconditioned, """
    residuals = arg1
    eigen_lambda = arg2
    current_dic = arg3

    precondition_start = time.time()

    # N_rows = np.shape(B)[0]
    A_reduced_size = n_occ*max_vir
    residuals = residuals.reshape(n_occ,n_vir,-1)
    B = residuals[:,:max_vir,:]


    B = B.reshape(A_reduced_size,-1)
    # B = B.reshape(A_reduced_size, -1)
    N_vectors = B.shape[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = args.TDA_precondTOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors

    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    hdiag_m_lambda = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    hdiag_m_lambda = np.where( abs(hdiag_m_lambda) < t, np.sign(hdiag_m_lambda)*t, hdiag_m_lambda) # <t: returns np.sign(D)*t; else: D

    hdiag_m_lambda = hdiag_m_lambda.reshape(n_occ, n_vir, -1)
    D = hdiag_m_lambda[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count

    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0
    ####################################################################################
    for i in range(max):
        substart = time.time()
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        subend = time.time()
        subgencost += subend - substart
        #project sTDA_A matrix and vector B into subspace
        sub_A = symmetrize(sub_A)
        # size of subspace
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append({'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        GSstart = time.time()
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart


        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________')
        print('sTDA preconditioning failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('sTDA Preconditioning Done after ', i, 'steps; ', \
                round(precondition_time, 4), 'seconds')
        print('subgencost',round(subgencost,4),round(subgencost/precondition_time *100, 2),"%")
        print('mvcost',round(mvcost,4),round(mvcost/precondition_time *100, 2),"%")
        print('GScost', round(GScost,4), round(GScost/precondition_time *100, 2),"%")
        print('subcost', round(subcost,4), round(subcost/precondition_time *100, 2),"%")
    full_guess *= bnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = B2'''
        B2 = residuals[:,max_vir:,:]
        B2 = B2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = hdiag_m_lambda[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (B2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)
    return U, current_dic
################################################################################

################################################################################
# K_inv # exacty the same function with sTDA_preconditioner, just no dic
# used in Jacobi_precodnitioner
def K_inv(B, eigen_lambda):
    # to solve K^(-1)y and K^(-1)u
    # K = A-λ*I
    # (sTDA_A - eigen_lambda*I)^-1 B = X
    # AX - Xλ = B
    # columns in B are residuals or current guess
    precondition_start = time.time()

    N_rows = np.shape(B)[0]
    B = B.reshape(N_rows, -1)
    N_vectors = np.shape(B)[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = 1e-2    # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((N_rows, (max+1)*N_vectors))
    W = np.zeros_like(V)
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors
    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    D = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    D= np.where( abs(D) < t, np.sign(D)*t, D) # <t: returns np.sign(D)*t; else: D
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count
    ############################################################################
    for i in range(0, max):
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        #project sTDA_A matrix and vector B into subspace
        # size of subspace
        m = np.shape(sub_A)[0]
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ K inverse Failed Due to Iteration Limit _________________')
        print('K inverse  failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('K inverse Done after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
    return full_guess*bnorm
################################################################################

################################################################################
def Jacobi_preconditioner(arg1, arg2, arg3, arg4, arg5=None, arg6=None, arg7=None, arg8=None):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """    (1-uu*)(A-λ*I)(1-uu*)t = -B"""
    """    B is residual, we want to solve t """
    """    z approximates t """
    """    z = (A-λ*I)^(-1)*(-B) + α(A-λ*I)^(-1) * u"""
    """    where α = [u*(A-λ*I)^(-1)y]/[u*(A-λ*I)^(-1)u] """
    """    first is to solve (A-λ*I)^(-1)y and (A-λ*I)^(-1)u """

    B = arg1
    eigen_lambda = arg2
    current_dic = arg3
    current_guess = arg4

    u = current_guess
    K_inv_y = K_inv(-B, eigen_lambda)
    K_inv_u = K_inv(current_guess, eigen_lambda)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d

    z = K_inv_y -  Alpha*K_inv_u
    return z, current_dic
################################################################################

################################################################################
# original simple Davidson, to solve eigenvalues and eigenkets of sTDA_A matrix
def Davidson0(k):
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    tol = args.TDA_initialTOL # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    V = TDA_A_diag_initial_guess(m, V, hdiag = max_vir_hdiag)
    W[:, :m] = sTDA_mv(V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ############################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index], hdiag = max_vir_hdiag)
        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        m = new_m
    ############################################################################


    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 4), 'seconds' )
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*27.211386245988)

    # U = np.zeros((n_occ * n_vir, k))
    # U[:n_occ * max_vir,:] = full_guess

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    return U
################################################################################


################################################################################
def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    ''' [ a b ] x - [ σ   π] x  Ω = p '''
    ''' [ b a ] y   [-π  -σ] y    = q '''

    ##############################
    ''' normalize the RHS '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)
    # print('pqnorm', pqnorm)
    p /= pqnorm
    q /= pqnorm
    ##############################
    d = abs(np.diag(sigma))
    # d is an one-dimension matrix
    d_mh = d**(-0.5)
    # d_h = d**0.5

    ''' LU = d^−1/2 (σ − π) d^−1/2 '''
    ''' A = PLU '''
    ''' P is identity matrix only when A is diagonally dominant '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True) # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T '''
    ''' M = G^T (a ̃+ b ̃) G '''
    a_p_b_tilde = np.linalg.multi_dot([L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde) + np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    ''' (x ̃+ y ̃) = GZ '''
    ''' x + y = d^-1/2 L^-T (x ̃+ y ̃) '''
    ''' x - y = d^-1/2 U^-1 (x ̃- y ̃) '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)
    # x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z])
    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    x *= pqnorm
    y *= pqnorm

    return x, y
################################################################################

################################################################################
def Qx(V, x):
    """ Qx = (1 - V*V.T)*x = x - V*V.T*x  """
    return x - einsum('ij, jk, kl -> il', V, V.T, x)
################################################################################

################################################################################
def on_the_fly_Hx(W, V, sub_A, x):
    """ on-the-fly compute H'x """
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q"""
    """ K approximates H, here K = sTDA_A"""
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)"""
    """ H′x ≡ a + b − c + d """
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx
################################################################################

################################################################################
# to diagonalize the H'
def new_ES(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    current_dic = arg3
    return_index = arg5
    W_H = arg6
    V_H = arg7
    sub_A_H = arg8

    """ new eigenvalue solver """
    """ the traditional Davidson to diagonalize the H' matrix """
    """ W_H, V_H, sub_A_H are from the exact H """

    sTDA_D_start = time.time()
    tol = args.eigensolver_tol # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    k = args.nstates
    m = min([k+8, 2*k, A_size])
    # m is the amount of initial guesses
    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    # sTDA as initial guess
    V = sTDA_initial_guess(m, V)

    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ###########################################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
#             print(sub_eigenvalue[:k]*27.211386245988)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
#             print(r_norms)
        # largest residual norm
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals

        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index])
        # Y doesn't matter

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
#             print(check_orthonormal(V[:,:new_m]))
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m
    ###########################################################################################
    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('H_app diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 2), 'seconds' )
#         print('H_app', sub_eigenvalue[:k]*27.211386245988)

    return full_guess[:,return_index], current_dic
################################################################################

################################################################################
# a dictionary for TDA initial guess and precodnitioner
TDA_i_key = ['sTDA', 'Adiag']
TDA_i_func = [sTDA_initial_guess, TDA_A_diag_initial_guess]
TDA_i_lib = dict(zip(TDA_i_key, TDA_i_func))

TDA_p_key = ['sTDA', 'Adiag', 'Jacobi', 'new_ES']
TDA_p_func = [sTDA_preconditioner, TDA_A_diag_preconditioner, \
Jacobi_preconditioner, new_ES]
TDA_p_lib = dict(zip(TDA_p_key, TDA_p_func))
################################################################################

################################################################################
#Davidson frame, where we can choose different initial guess and preconditioner
def Davidson(k, tol, init,prec):
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)
    max = args.max
    # Maximum number of iterations

    m = min([k + args.TDA_extrainitial, 2*k, A_size])
    # amount of initila guess
    #################################################
    # generate initial guess

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    init_start = time.time()
    V = initial_guess(m, V)
    init_end = time.time()
    init_time = init_end - init_start

    print('Intial guess time:', round(init_time, 4), 'seconds')
    #generate initial guess and put in holders V and W
    # m is size of subspace

    # W = Av, create transformed guess vectors
    W[:, :m] = TDA_matrix_vector(V[:, :m])

    # time cost for preconditioning
    Pcost = 0
    ###########################################################################################
    for ii in range(max):
        print('Iteration ', ii)

        # sub_A is subspace A matrix
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # print(sub_eigenvalue[:k])
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        # largest residual norm
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm', max_norm)
        if max_norm < tol or ii == (max-1):
            print('Davidson procedure aborted')
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        ########################################
        # generate new guess
        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                    arg1 = residual[:,index],
                                    arg2 = sub_eigenvalue[:k][index],
                                    arg3 = current_dic,
                                    arg4 = full_guess[:,index],
                                    arg5 = index,
                                    arg6 = W[:,:m],
                                    arg7 = V[:,:m],
                                    arg8 = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('m,new_m',m,new_m)
        W[:, m:new_m] = TDA_matrix_vector(V[:, m:new_m])
        print('new generated guesses:', new_m - m)
        m = new_m

    energies = sub_eigenvalue[:k]*27.211386245988


    D_end = time.time()
    Dcost = D_end - D_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDA_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDA_precondTOL
    Davidson_dic['total time'] = Dcost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sub_A)[0]
    Davidson_dic['excitation energy(eV)'] = energies.tolist()
    # Davidson_dic['semiempirical_difference'] = difference
    # Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    ###########################################################################################
    if ii == max-1:
        print('============ Davidson Failed Due to Iteration Limit ==============')
        print('Davidson failed after ', round(Dcost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Davidson done after ', round(Dcost, 4), 'seconds')
        print('Total steps =', ii+1)
        print('Final subspace shape = ', np.shape(sub_A))
        print('Preconditioning time:', round(Pcost, 4), round(Pcost/Dcost*100,2), '%')
    return energies, full_guess, Davidson_dic
################################################################################



def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder = TDA_A_diag_initial_guess(new_m, V_holder, hdiag = hdiag)
    energies = hdiag[Dsort][:new_m]*27.211386245988
    return V_holder, W_holder, new_m, energies, V_holder[:,:new_m], W_holder[:,:new_m]

################################################################################
def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag = hdiag):
    # preconditioners for each corresponding residual
    hdiag = hdiag.reshape(-1,1)
    # print('hdiag', hdiag.shape)
    k = R_x.shape[1]
#     print('omega.shape',omega.shape)
    t = 1e-14

    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    # force all values not in domain (-t, t)
    D_y_inv = D_y**-1

#     print('R_x.shape, D_x.shape',R_x.shape, D_x.shape)
    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new
################################################################################

################################################################################
def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  w = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    # print(d)
    # d is an one-dimension matrix
    d_mh = d**(-0.5)


    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    M = np.linalg.multi_dot([G.T, L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    # print(omega*27.211386245988)
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([L_inv.T, G, Z])     * (np.array(omega)**-0.5).reshape(1,-1)
    x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z]) * (np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    # norm = np.linalg.multi_dot([x.T, sigma, x])
    # norm += np.linalg.multi_dot([x.T, pi, y])
    # norm -= np.linalg.multi_dot([y.T, pi, x])
    # norm -= np.linalg.multi_dot([y.T, sigma, y])
    # print(norm)

    return omega, x, y
################################################################################

################################################################################
def sTDDFT_eigen_solver(k):
    ''' [ A' B' ] x - [ σ   π] x  w = 0'''
    ''' [ B' A' ] y   [-π  -σ] y    = 0'''
    tol=args.TDDFT_initialTOL
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    # new_m = min([3*k, A_size])
    # print('initial new_m = ', new_m)
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)
#     print('initial guess done')
    ##############################

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        ###############################################################
        # print('ii = ', ii)
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        # show_memory_info('before sTDDFT_mv')
        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start
        # show_memory_info('after sTDDFT_mv')

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)
        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        ########################################################################
        # preconditioning step
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTD-DFT Failed Due to Iteration Limit==================')
        print('sTD-DFT failed after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Converged after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('final subspace', sigma.shape)
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_cost * 100,2),'%')

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*27.211386245988
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y
################################################################################

################################################################################
def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    # energies, X_new, Y_new = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup
################################################################################

################################################################################
def sTDDFT_preconditioner(Rx, Ry, omega):
    ''' [ A B ] - [1  0]X  w = P'''
    ''' [ B A ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''
    tol = args.TDDFT_precondTOL
    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    # print('pqnorm', pqnorm)
    P /= pqnorm
    Q /= pqnorm

    ##############################

    ##############################
    # setting up initial guess
    X_new, Y_new  = TDDFT_A_diag_preconditioner(P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = \
            VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start
    print('new_m =', new_m)
    print('diagonal initial guess done')
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    symmetrycost = 0
    for ii in range(max):
#         print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        symmetrystart = time.time()
        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
        # solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                                  a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        # U1x = np.dot(U1,x)
        # U2x = np.dot(U2,x)
        # Vx = np.dot(V,x)
        # Wx = np.dot(W,x)
        #
        # U1y = np.dot(U1,y)
        # U2y = np.dot(U2,y)
        # Vy = np.dot(V,y)
        # Wy = np.dot(W,y)
        #
        # X_full = Vx + Wy
        # Y_full = Wx + Vy
        #
        # R_x = U1x + U2y - X_full*omega - P
        # R_y = U2x + U1y + Y_full*omega - Q

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################

        ########################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index], \
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_precond_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit==========')
        print('sTDDFT_precond failed after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT_precond Converged after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sTDDFT_precond_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_precond_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_precond_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_precond_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_precond_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_precond_cost * 100,2),'%')
        print('symmetrycost', round(symmetrycost,4), round(symmetrycost/sTDDFT_precond_cost * 100,2),'%')
        print('final subspace', sigma.shape)

    show_memory_info('preconditioner at end')
    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_diag_A[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)
    print(X.shape, Y.shape)
    return X, Y
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
TDDFT_i_key = ['sTDDFT', 'Adiag']
TDDFT_i_func = [sTDDFT_initial_guess, TDDFT_A_diag_initial_guess]
TDDFT_i_lib = dict(zip(TDDFT_i_key, TDDFT_i_func))

TDDFT_p_key = ['sTDDFT', 'Adiag']
TDDFT_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
TDDFT_p_lib = dict(zip(TDDFT_p_key, TDDFT_p_func))
################################################################################

################################################################################
def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.TDDFT_tolerance):

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    if args.TDDFT_extrainitial_3n == True:
        new_m = min([k + args.TDDFT_extrainitial, 3*k, A_size])
    else:
        new_m = min([k + args.TDDFT_extrainitial, 2*k, A_size])

    # new_m = k

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    ##############################
    # setting up initial guess
    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig = initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')
    ##############################
    Pcost = 0
    VWGScost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '____________________||||')
        show_memory_info('beginning of step '+ str(ii))
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        print('Maximum residual norm: ', np.max(r_norms))
        # print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        P_start = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        VWGScost_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        VWGScost_end = time.time()
        VWGScost += VWGScost_end - VWGScost_start
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################



    omega *= 27.211386245988

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['initial_energies'] = initial_energies
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDDFT_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDDFT_precondTOL
    Davidson_dic['total time'] = TDDFT_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['excitation energy(eV)'] = omega.tolist()
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    if ii == (max -1):
        print('============================ TDDFT Failed Due to Iteration Limit============================')
        print('TDDFT failed after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('================================== TDDFT Calculation Done ==================================')
        print('TDDFT Converged after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('Initial guess',init)
        print('preconditioner', prec)
        print('Final subspace ', sigma.shape)
        print('preconditioning cost', round(Pcost,4), round(Pcost/TDDFT_cost * 100, 2), "%")
        print('VWGScost',round(VWGScost,4))
        # print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))

    # need normalize
    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic
# end of TDDFT module
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
dynpol_i_key = ['sTDDFT', 'Adiag']
dynpol_i_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_i_lib = dict(zip(dynpol_i_key, dynpol_i_func))

dynpol_p_key = ['sTDDFT', 'Adiag']
dynpol_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_p_lib = dict(zip(dynpol_p_key, dynpol_p_func))
################################################################################

################################################################################
def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P
################################################################################

################################################################################
def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        # 0,1,2   3,4,5   6,7,8
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]
        # convert nm to Hartree

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P
    #P, Q, omega

    max = args.max
    tol = args.dynpol_tolerance

    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P) + np.dot(W.T, Q)
        q = np.dot(W.T, P) + np.dot(V.T, Q)
        subgenend = time.time()
        subgencost += subgenend - subgenstart
        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R_x = U1x + U2y - (Vx + Wy)omega - P
#         R_y = U2x + U1y + (Wx + Vy)omega - Q
#         R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
#         R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega + P
        R_y = U2x + U1y + Y_full*omega + Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)
        print('maximum residual norm: ', np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        Pend = time.time()
        Pcost += Pend - Pstart
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('============================ Dynamic polarizability Failed Due to Iteration Limit============================')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

     # np.dot(-P.T, X_full) + np.dot(-P.T, Y_full)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)


    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.dynpol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.dynpol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.dynpol_initprecTOL
    Davidson_dic['total time'] = dp_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    Davidson_dic['Dynamic polarizability tensor alpha'] = [i.tolist() for i in alpha_omega]
    Davidson_dic['Dynamic polarizability tensor alpha initial guess '] = [i.tolist() for i in alpha_omega_ig]
    Davidson_dic['overlap'] = overlap
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    show_memory_info('Total Dynamic polarizability')

    return alpha_omega, Davidson_dic
################################################################################

###############################################################################
def stapol_A_diag_initprec(P):
    d = hdiag.reshape(-1,1)
    return -P/d
###############################################################################

###############################################################################
def stapol_sTDDFT_initprec(P):
    '''(A* + B*)X = -P'''
    '''residual = (A* + B*)X + P'''
    '''X_ig = -P/d'''
    '''X_new = (residual - P)/D = Ux/D'''
    ssp_start = time.time()
    max = 30
    tol = args.stapol_initprecTOL
    m = 0
    npvec = P.shape[1]

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]
    pnorm = np.linalg.norm(P_origin, axis=0, keepdims = True)
    # print('pnorm', pnorm)
    P /= pnorm

    # print('vectors to be preconditioned', npvec)
    V_holder = np.zeros((A_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

    X_ig = stapol_A_diag_initprec(P)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    # V_holder[:,0] = X_new[:,0]/np.linalg.norm(X_new[:,0])
    # if npvec >= 2:
    #     V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 1, X_new[:, 1:])
    # else:
    #     new_m = 1
    # print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        # creating the subspace
        MV_start = time.time()
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ###############################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = stapol_A_diag_initprec(-residual[:,index])

        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    X_full = np.dot(V,x)
    # alpha = np.dot(X_full.T, P)*-4

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('============================ sTDDFT Static polarizability Failed Due to Iteration Limit============================')
        print('sTDDFT Static polarizability failed after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Static polarizability Converged after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        # print('initial_cost', round(initial_cost,4), round(initial_cost/ssp_cost * 100,2),'%')
        # print('Pcost', round(Pcost,4), round(Pcost/ssp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/ssp_cost * 100,2),'%')
        # print('GScost', round(GScost,4), round(GScost/ssp_cost * 100,2),'%')
        # print('subcost', round(subcost,4), round(subcost/ssp_cost * 100,2),'%')
        # print('subgencost', round(subgencost,4), round(subgencost/ssp_cost * 100,2),'%')

    X_full *= pnorm
    return X_full
################################################################################

################################################################################
# a dictionary for static_polarizability initial guess and precodnitioner
stapol_i_key = ['sTDDFT', 'Adiag']
stapol_i_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_i_lib = dict(zip(stapol_i_key, stapol_i_func))

stapol_p_key = ['sTDDFT', 'Adiag']
stapol_p_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_p_lib = dict(zip(stapol_p_key, stapol_p_func))
################################################################################

################################################################################
# Static polarizability
def static_polarizability(init, prec):
    '''(A+B)X = -P'''
    '''residual = (A+B)X + P'''
    '''X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    # pnorm is constant
    print('pnorm', pnorm)

    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.stapol_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

#     X_new = -P/d3
    X_ig = initial_guess(P)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ########################################################################
        # creating the subspace

        MV_start = time.time()
        U_holder[:, m:new_m] = static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # print('check_orthonormal(V)',check_orthonormal(V))
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()
        subgencost += subgenend - subgenstart

        # print('a_p_b.shape', a_p_b.shape)
        ########################################################################

        ########################################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        # print('x.shape', x.shape)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ########################################################################

        ########################################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index])
        # X_new = X_new/np.linalg.norm(X_new, axis=0)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    print('V.shape', V.shape)
    X_full = np.dot(V,x)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start



    if ii == (max -1):
        print('============================ Static polarizability Failed Due to Iteration Limit============================')
        print('Static polarizability failed after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Static polarizability Converged after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sp_cost * 100,2),'%')

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.stapol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.stapol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.stapol_initprecTOL
    Davidson_dic['total time'] = sp_cost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(a_p_b)[0]
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    return tensor_alpha, Davidson_dic
################################################################################

TDA_combo = [            # option
['sTDA','sTDA'],     # 0
['Adiag','Adiag'],   # 1
['Adiag','sTDA'],    # 2
['sTDA','Adiag'],    # 3
['sTDA','Jacobi'],   # 4
['Adiag','Jacobi'],  # 5
['Adiag','new_ES'],  # 6
['sTDA','new_ES']]   # 7

TDDFT_combo = [         # option
['sTDDFT','sTDDFT'],     # 0
['Adiag','Adiag'],       # 1
['Adiag','sTDDFT'],      # 2
['sTDDFT','Adiag']]      # 3

dynpol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

stapol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

if args.TDA == True:
    for option in args.TDA_options:
        init, prec = TDA_combo[option]
        print('-------------------------------------------------------------------')
        print('|---------------   In-house Developed Davidson Starts   -----------|')
        print('Residual conv =', args.TDA_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, eigenkets, Davidson_dic = Davidson(args.nstates, args.TDA_tolerance, init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Davidson time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDA_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Davidson Done   -----------|')

if args.TDDFT == True:
    for option in args.TDDFT_options:
        init, prec = TDDFT_combo[option]
        print('----------------------------------------------------------------------------')
        print('|---------------   In-house Developed TDDFT Eigensolver Starts   -----------|')
        print('Residual conv =', args.TDDFT_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, X, Y, Davidson_dic = TDDFT_eigen_solver(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house TDDFT Eigensolver time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDDFT_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed TDDFT Eigensolver Done   -----------|')

if args.dynpol == True:
    args.TDDFT_precondTOL = args.dynpol_initprecTOL
    print('args.TDDFT_precondTOL', args.TDDFT_precondTOL)
    for option in args.dynpol_options:
        init,prec = dynpol_combo[option]
        print('---------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Dynamic Polarizability Starts   -----------|')
        print('Residual conv =', args.dynpol_tolerance)
        print('Perturbation wavelength omega (nm) =', args.dynpol_omega)

        total_start = time.time()
        alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Dynamic Polarizability time:', round(total_time, 4), 'seconds')
        print('Dynamic polarizability tensor alpha')
        for i in range(len(args.dynpol_omega)):
            print(args.dynpol_omega[i],'nm')
            print(alpha_omega[i])

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Dynamic_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Dynamic Polarizability Done   -----------|')

if args.stapol == True:
    for option in args.stapol_options:
        init,prec = stapol_combo[option]
        print('--------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Static Polarizability Starts   -----------|')
        print('Residual conv =', args.stapol_tolerance)

        total_start = time.time()
        tensor_alpha, Davidson_dic = static_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Static Polarizability time:', round(total_time, 4), 'seconds')
        print('Static polarizability tensor alpha')
        print(tensor_alpha)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Static_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Static Polarizability Done   -----------|')


if args.sTDA == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDA   --------------------|')
    print('Convergence =', args.TDA_initialTOL)

    total_start = time.time()
    X = Davidson0(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDA time:', round(total_time, 4), 'seconds')
    print('|---------------------------   In-house Developed sTDA done  ----------------|')

if args.sTDDFT == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDDFT   --------------------|')
    print('Convergence =', args.TDDFT_initialTOL)

    total_start = time.time()
    energies, X, Y = sTDDFT_eigen_solver(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDDFT time:', round(total_time, 4), 'seconds')

    print('|---------------------------   In-house Developed sTDDFT done  ----------------|')


if args.Truncate_test == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   Test the Truncation efficiency  ----------------|')

    n_state = 40
    X = np.random.rand(A_size,n_state)
    Y = np.random.rand(A_size,n_state)
    print('n_vir = ', n_vir)
    print('A_size =', A_size)
    print('n_state =', n_state)
    print("virtual tuning: -------------------------------------------- ")
    print("{:<8} {:<8} {:<8} {:<8}".format(\
            'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
    for vir_trunc in [40, 50, 60, 70, 10000000]:
        del max_vir, sTDA_mv, sTDDFT_mv
        max_vir = gen_maxvir(tol_eV = vir_trunc)
        q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
        # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
        iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                        max_vir=max_vir, \
                                        q_ij = q_ij, \
                                        q_ab = q_ab, \
                                        q_ia = q_ia , \
                                        GK_q_jb = GK_q_jb, \
                                        GJ_q_ab = GJ_q_ab)


        sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                        max_vir=max_vir, \
                                        iajb_fly = iajb_fly, \
                                        ijab_fly = ijab_fly, \
                                        ibja_fly = ibja_fly, \
                                        delta_fly = delta_fly)


        sTDA_start = time.time()
        sTDA_X = sTDA_mv(X)
        sTDA_end = time.time()
        sTDA_mv_time = sTDA_end - sTDA_start

        sTDDFT_start = time.time()
        sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
        sTDDFT_end = time.time()
        sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

        print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))

    print('|-------------------------------------   Test done  --------------------------|')

if args.pytd == True:
    print('-----------------------------------------------------------------')
    print('|----------------------    PySCF TTDDFT    ----------------------|')
    TD.nstates = args.nstates
    TD.conv_tol = 1e-10
    start = time.time()
    TD.kernel()
    end = time.time()
    pyscf_time = end-start
    print('Built-in TDDFT time:', round(pyscf_time, 4), 'seconds')
    print('|---------------------------------------------------------------|')

if args.verbose > 3:
    for key in vars(args):
        print(key,'=', vars(args)[key])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt160', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Wed Jul  7 15:19:21 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 60000 
[INPUT] num. atoms = 99
[INPUT] num. electrons = 306
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O    -15.853325647192  -2.513110726611   0.486804451917 AA  -29.958443636737  -4.749090994002   0.919927090342 Bohr
[INPUT]  2 C     13.229870973341  -1.479924819805   0.701062589411 AA   25.000832802947  -2.796652594378   1.324816290165 Bohr
[INPUT]  3 C     14.649169931334  -0.864901660676   0.738182734535 AA   27.682919122434  -1.634427263359   1.394963198153 Bohr
[INPUT]  4 C     14.634717411663   0.612377578686   1.124929069746 AA   27.655607818446   1.157225908541   2.125807851382 Bohr
[INPUT]  5 C     12.225763064377  -0.531441537190   0.002888078564 AA   23.103343855496  -1.004278956506   0.005457677512 Bohr
[INPUT]  6 C     13.865448247569   1.396662598766   0.062782369477 AA   26.201899782237   2.639309800091   0.118641483764 Bohr
[INPUT]  7 C     12.550040842881   0.757332002463  -0.331684094349 AA   23.716140045151   1.431150070024  -0.626792098193 Bohr
[INPUT]  8 C     12.733463871550  -1.762011541262   2.139975299929 AA   24.062759334273  -3.329719241309   4.043967230200 Bohr
[INPUT]  9 C     13.332925996647  -2.825067138102  -0.058442510541 AA   25.195578572757  -5.338603174522  -0.110440338954 Bohr
[INPUT] 10 C     10.906671757014  -1.115679796527  -0.262109682090 AA   20.610622551285  -2.108329258147  -0.495315513748 Bohr
[INPUT] 11 C     11.672230520618   1.664652389771  -1.162004325327 AA   22.057318946758   3.145737109270  -2.195869930428 Bohr
[INPUT] 12 C      9.698108730175  -0.491083766356  -0.110831758790 AA   18.326769426284  -0.928013822633  -0.209441670017 Bohr
[INPUT] 13 C      8.401243375247  -1.081006136908  -0.362928774276 AA   15.876049085033  -2.042805537731  -0.685835986106 Bohr
[INPUT] 14 C    -15.864482597194  -1.171704276158   1.017267294060 AA  -29.979527216626  -2.214200180921   1.922356581251 Bohr
[INPUT] 15 C      8.334726284921  -2.503059879436  -0.865346010339 AA   15.750350001714  -4.730097645521  -1.635266962525 Bohr
[INPUT] 16 C    -14.945566515032  -0.363583055951   0.078711359722 AA  -28.243027489881  -0.687072399280   0.148742912766 Bohr
[INPUT] 17 C      7.273600489902  -0.310234438127  -0.132808509186 AA   13.745112865417  -0.586258122469  -0.250971709373 Bohr
[INPUT] 18 C    -13.505718848774  -0.882385928520  -0.015094213485 AA  -25.522109739560  -1.667467741072  -0.028523929553 Bohr
[INPUT] 19 C    -12.691385100754  -0.154472022874  -1.107335651943 AA  -23.983241981810  -0.291909817139  -2.092561110139 Bohr
[INPUT] 20 C    -15.351967546227  -1.184338035966   2.467915589908 AA  -29.011014135580  -2.238074526882   4.663684563470 Bohr
[INPUT] 21 C    -17.296777645249  -0.613450767036   0.956560607872 AA  -32.686172587021  -1.159253940602   1.807637570426 Bohr
[INPUT] 22 C    -11.260357145442  -0.629171358180  -1.215754977463 AA  -21.278991069674  -1.188961552381  -2.297443941982 Bohr
[INPUT] 23 C      5.907771482351  -0.680528218307  -0.318057094925 AA   11.164070108159  -1.286011952639  -0.601040801382 Bohr
[INPUT] 24 C    -11.066594452968  -2.039649882225  -1.709899829589 AA  -20.912832647741  -3.854379667407  -3.231242378363 Bohr
[INPUT] 25 C    -10.233381030699   0.200936105903  -0.857461921405 AA  -19.338287476341   0.379714208694  -1.620368193699 Bohr
[INPUT] 26 C      4.850973062684   0.171117850118  -0.061833943670 AA    9.167010526115   0.323365871748  -0.116849218739 Bohr
[INPUT] 27 C     -8.823424746317  -0.091552900859  -0.876372103039 AA  -16.673856251250  -0.173009908533  -1.656103257954 Bohr
[INPUT] 28 C      3.457838147249  -0.127338749524  -0.227820652785 AA    6.534367081374  -0.240635361645  -0.430518639284 Bohr
[INPUT] 29 C     -7.857661716861   0.810051534719  -0.497566547820 AA  -14.848828624346   1.530775547402  -0.940264504125 Bohr
[INPUT] 30 C      3.056638710179  -1.495746190187  -0.727824642854 AA    5.776210023983  -2.826550651315  -1.375389241703 Bohr
[INPUT] 31 C      2.527626766119   0.862624472168   0.078882648971 AA    4.776522333086   1.630124000745   0.149066602536 Bohr
[INPUT] 32 C     -6.434732668704   0.584895893192  -0.493774692639 AA  -12.159882428642   1.105293049517  -0.933098936330 Bohr
[INPUT] 33 C      1.113168042848   0.791133915426  -0.013349688321 AA    2.103582731600   1.495026428009  -0.025227254775 Bohr
[INPUT] 34 C     -5.910380534788  -0.759173483883  -0.941310829636 AA  -11.169000502710  -1.434629965571  -1.778819666100 Bohr
[INPUT] 35 C     -5.602135341060   1.616700252479  -0.079139890041 AA  -10.586501507351   3.055120702700  -0.149552717707 Bohr
[INPUT] 36 C      0.269190790871   1.842685898875   0.315896322202 AA    0.508696870001   3.482171682472   0.596957532719 Bohr
[INPUT] 37 C     -4.181532802968   1.613259741350  -0.001327681659 AA   -7.901951778494   3.048619078938  -0.002508954715 Bohr
[INPUT] 38 C     -3.447186049819   2.704615835799   0.426484700391 AA   -6.514237534579   5.110983201822   0.805939280056 Bohr
[INPUT] 39 C     -1.145088074012   1.790331138513   0.225961104252 AA   -2.163902848389   3.383235524070   0.427004601841 Bohr
[INPUT] 40 C     -2.018706027430   2.826078399010   0.545879756556 AA   -3.814801517851   5.340514180679   1.031563236835 Bohr
[INPUT] 41 C     -1.476569197299   4.153383921630   1.042798210486 AA   -2.790311386864   7.848758102052   1.970603021005 Bohr
[INPUT] 42 H     15.107961469245  -0.964404583690  -0.265203707678 AA   28.549909477354  -1.822460536449  -0.501162374731 Bohr
[INPUT] 43 H     15.274325444576  -1.455860987373   1.433066194806 AA   28.864291827724  -2.751178541574   2.708102626557 Bohr
[INPUT] 44 H     15.662908344329   1.003641143074   1.224904419176 AA   29.598607084948   1.896606887756   2.314733881012 Bohr
[INPUT] 45 H     14.147747915799   0.740614189896   2.109788247694 AA   26.735368840247   1.399557982869   3.986921968968 Bohr
[INPUT] 46 H     14.490456701870   1.516531181445  -0.848409926948 AA   27.382994586404   2.865828592294  -1.603262403294 Bohr
[INPUT] 47 H     13.662617811476   2.429991156410   0.408727603552 AA   25.818605808295   4.592017770731   0.772383230263 Bohr
[INPUT] 48 H     13.395600347430  -2.489784239273   2.644185969014 AA   25.314015930771  -4.705010321484   4.996787303853 Bohr
[INPUT] 49 H     11.710021876905  -2.175465603560   2.123856978556 AA   22.128734260016  -4.111034184140   4.013508017217 Bohr
[INPUT] 50 H     12.708386565135  -0.838144965371   2.743163903380 AA   24.015370093207  -1.583864437235   5.183828492180 Bohr
[INPUT] 51 H     14.145726573673  -3.432568425575   0.378686236174 AA   26.731549057224  -6.486614228167   0.715613273511 Bohr
[INPUT] 52 H     13.563015227923  -2.660248983242  -1.125822026861 AA   25.630384204080  -5.027142001481  -2.127495295771 Bohr
[INPUT] 53 H     12.406382330983  -3.419739661775   0.010730425670 AA   23.444664802201  -6.462371378067   0.020277565717 Bohr
[INPUT] 54 H     10.895026218280  -2.175565264148  -0.544086438943 AA   20.588615672506  -4.111222515357  -1.028174357693 Bohr
[INPUT] 55 H     11.163183260802   2.424318736820  -0.536306404592 AA   21.095359041244   4.581298451241  -1.013472223529 Bohr
[INPUT] 56 H     10.899746324894   1.113756693081  -1.720180238807 AA   20.597535381285   2.104695119324  -3.250669536235 Bohr
[INPUT] 57 H     12.298839404293   2.226477881762  -1.881101658814 AA   23.241438124124   4.207433418932  -3.554766947623 Bohr
[INPUT] 58 H      9.683397881685   0.542154678821   0.258031073603 AA   18.298969951579   1.024523860122   0.487608060737 Bohr
[INPUT] 59 H    -15.402696397073  -0.391775250514  -0.928568626383 AA  -29.106877770293  -0.740347925854  -1.754740391727 Bohr
[INPUT] 60 H    -14.951932191360   0.694584928923   0.402208332082 AA  -28.255056874738   1.312575285915   0.760063592652 Bohr
[INPUT] 61 H      8.814912165535  -3.194262930994  -0.147682559536 AA   16.657769804957  -6.036282109430  -0.279079590898 Bohr
[INPUT] 62 H      7.301218727104  -2.845013179981  -1.022344818305 AA   13.797303769773  -5.376295730942  -1.931951711465 Bohr
[INPUT] 63 H      8.878293320116  -2.607029994736  -1.822390800417 AA   16.777542828575  -4.926572688578  -3.443819504714 Bohr
[INPUT] 64 H    -12.984857828887  -0.757825174077   0.952119550549 AA  -24.537825063010  -1.432082029307   1.799245188381 Bohr
[INPUT] 65 H    -13.543648490756  -1.965694283170  -0.222347142176 AA  -25.593786374907  -3.714623839814  -0.420175203292 Bohr
[INPUT] 66 H      7.447011131683   0.711846345577   0.233790289470 AA   14.072811485468   1.345194635913   0.441799617681 Bohr
[INPUT] 67 H    -12.703942949437   0.932578204934  -0.905947713136 AA  -24.006972876535   1.762317397063  -1.711993061003 Bohr
[INPUT] 68 H    -13.203735543521  -0.305129273325  -2.080252349973 AA  -24.951443998441  -0.576610759171  -3.931107211431 Bohr
[INPUT] 69 H    -15.284552988447  -0.161987305705   2.880296996993 AA  -28.883619084568  -0.306111643439   5.442972481724 Bohr
[INPUT] 70 H    -16.042318392936  -1.761235589995   3.111510351747 AA  -30.315588165723  -3.328252905928   5.879902398551 Bohr
[INPUT] 71 H    -14.356995982520  -1.654660390239   2.526551263470 AA  -27.130790378444  -3.126854966717   4.774489927633 Bohr
[INPUT] 72 H    -17.973649889727  -1.214562316335   1.592065689853 AA  -33.965275750403  -2.295190139090   3.008568126140 Bohr
[INPUT] 73 H    -17.338908603618   0.431291646829   1.312541704015 AA  -32.765788559703   0.815023092320   2.480344347659 Bohr
[INPUT] 74 H    -17.672677200564  -0.649570559301  -0.079881444352 AA  -33.396519796910  -1.227510455660  -0.150954052259 Bohr
[INPUT] 75 H      5.691253901755  -1.691047499818  -0.683874217489 AA   10.754911179679  -3.195616638287  -1.292334974705 Bohr
[INPUT] 76 H    -16.395073357706  -3.061036372297   1.082907139801 AA  -30.982198438219  -5.784520400973   2.046397912559 Bohr
[INPUT] 77 H    -11.520069996927  -2.768662807894  -1.011625313526 AA  -21.769777230012  -5.232014438188  -1.911694783242 Bohr
[INPUT] 78 H    -11.578464673328  -2.180318056588  -2.681333336857 AA  -21.880127175541  -4.120203991395  -5.066985655326 Bohr
[INPUT] 79 H    -10.007481067071  -2.309446224927  -1.838659733563 AA  -18.911398413534  -4.364220864523  -3.474563332699 Bohr
[INPUT] 80 H    -10.504603346082   1.210576087200  -0.515600306864 AA  -19.850823371284   2.287657257756  -0.974343369715 Bohr
[INPUT] 81 H      5.088824337365   1.180057197481   0.304256943872 AA    9.616484293641   2.229984914560   0.574962295415 Bohr
[INPUT] 82 H     -8.512437300498  -1.088229191421  -1.211097094377 AA  -16.086175150473  -2.056455132543  -2.288641818628 Bohr
[INPUT] 83 H     -8.188786629407   1.803659950828  -0.163112179300 AA  -15.474564022079   3.408423328911  -0.308237346458 Bohr
[INPUT] 84 H      3.426556860509  -2.285366380406  -0.048141781144 AA    6.475254016611  -4.318716553257  -0.090974781511 Bohr
[INPUT] 85 H      3.496507380302  -1.694384046259  -1.722527228252 AA    6.607441341290  -3.201921797262  -3.255104703502 Bohr
[INPUT] 86 H      1.965894655195  -1.607701685790  -0.812822939689 AA    3.715002488065  -3.038115876145  -1.536012743775 Bohr
[INPUT] 87 H      2.936772181197   1.819163375798   0.434929178034 AA    5.549695112705   3.437720556097   0.821897030066 Bohr
[INPUT] 88 H      0.651374423076  -0.141092309282  -0.364529970955 AA    1.230919264160  -0.266625822826  -0.688861809300 Bohr
[INPUT] 89 H     -6.219123824681  -0.973550628083  -1.981145674101 AA  -11.752440763405  -1.839744055476  -3.743822736918 Bohr
[INPUT] 90 H     -4.813151333071  -0.818528740503  -0.895792438318 AA   -9.095537815590  -1.546795144636  -1.692802372877 Bohr
[INPUT] 91 H     -6.320380241813  -1.569235276255  -0.310312037288 AA  -11.943787660138  -2.965424897129  -0.586404763630 Bohr
[INPUT] 92 H     -6.096918629058   2.550417913370   0.224807102003 AA  -11.521506412679   4.819591359455   0.424823853642 Bohr
[INPUT] 93 H      0.735741539061   2.772657578343   0.666810185260 AA    1.390350007292   5.239563460268   1.260088627213 Bohr
[INPUT] 94 H     -3.650406019683   0.700465216370  -0.296925164254 AA   -6.898267620665   1.323687418723  -0.561107239931 Bohr
[INPUT] 95 H     -4.022724475868   3.596629985720   0.711987205612 AA   -7.601847533976   6.796645644409   1.345460822800 Bohr
[INPUT] 96 H     -1.572607838722   0.843926050949  -0.129877001253 AA   -2.971798116529   1.594789105680  -0.245431962248 Bohr
[INPUT] 97 H     -0.887782290540   4.028791946339   1.970097909507 AA   -1.677665387360   7.613313391434   3.722945487547 Bohr
[INPUT] 98 H     -2.294790660097   4.860122329293   1.255627479456 AA   -4.336525860793   9.184300134247   2.372792050650 Bohr
[INPUT] 99 H     -0.810000989547   4.623550544445   0.296551738972 AA   -1.530680030870   8.737244252085   0.560401568420 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1

nuclear repulsion = 3675.37063388578
number of shells = 683
number of NR pGTOs = 2350
number of NR cGTOs = 1619
basis = def2-tzvp
ecp = {}
CPU time:         3.78
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 99_Carotenoid_B_wb97x.chk
max_memory 60000 MB (current use 56 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7fe5611c5048>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7fe562991f28>
Set gradient conv threshold to 1e-05
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
tot grids = 1151734
Drop grids 212499
    CPU time for setting up grids    621.92 sec, wall time     47.14 sec
nelec by numeric integration = 306.00013789809185
    CPU time for vxc   1015.65 sec, wall time     73.53 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 60000
_cderi_to_save = /tmp/job.15971902.hpc/tmpg43f7_rl
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
num shells = 1373, num cGTOs = 4121
size of aux basis 4121
int3c2e [1/9], AO [0:196], nrow = 149331
int3c2e [2/9], AO [196:274], nrow = 145965
int3c2e [3/9], AO [274:337], nrow = 147915
int3c2e [4/9], AO [337:388], nrow = 149205
int3c2e [5/9], AO [388:435], nrow = 148737
int3c2e [6/9], AO [435:494], nrow = 149292
int3c2e [7/9], AO [494:566], nrow = 149958
int3c2e [8/9], AO [566:632], nrow = 149250
int3c2e [9/9], AO [632:683], nrow = 121737
    CPU time for cholesky_eri   1753.97 sec, wall time    209.61 sec
    CPU time for df vj and vk   6291.54 sec, wall time    545.12 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7fe59a93c128> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 60000
_cderi_to_save = /tmp/job.15971902.hpc/tmptw9vlr4f
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
num shells = 1373, num cGTOs = 4121
size of aux basis 4121
    CPU time for 2c2e      1.62 sec, wall time      0.30 sec
    CPU time for Cholesky 2c2e    121.98 sec, wall time      9.49 sec
erifile 43233.906 MB, IO buf size 3651.1071 MB
int3c2e [1/13], AO [0:170], nrow = 110685
    CPU time for gen CD eri [1/13]    216.86 sec, wall time     16.72 sec
int3c2e [2/13], AO [170:238], nrow = 108768
    CPU time for gen CD eri [2/13]    206.48 sec, wall time     16.18 sec
int3c2e [3/13], AO [238:291], nrow = 109813
    CPU time for gen CD eri [3/13]    213.10 sec, wall time     16.61 sec
int3c2e [4/13], AO [291:335], nrow = 108314
    CPU time for gen CD eri [4/13]    207.66 sec, wall time     15.95 sec
int3c2e [5/13], AO [335:372], nrow = 105823
    CPU time for gen CD eri [5/13]    203.36 sec, wall time     16.63 sec
int3c2e [6/13], AO [372:406], nrow = 106967
    CPU time for gen CD eri [6/13]    204.70 sec, wall time     17.08 sec
int3c2e [7/13], AO [406:439], nrow = 110391
    CPU time for gen CD eri [7/13]    216.36 sec, wall time     24.71 sec
int3c2e [8/13], AO [439:483], nrow = 109779
    CPU time for gen CD eri [8/13]    214.94 sec, wall time     30.50 sec
int3c2e [9/13], AO [483:538], nrow = 110160
    CPU time for gen CD eri [9/13]    216.39 sec, wall time     25.27 sec
int3c2e [10/13], AO [538:588], nrow = 109326
    CPU time for gen CD eri [10/13]    213.18 sec, wall time     25.85 sec
int3c2e [11/13], AO [588:637], nrow = 110449
    CPU time for gen CD eri [11/13]    215.90 sec, wall time     18.76 sec
int3c2e [12/13], AO [637:682], nrow = 106061
    CPU time for gen CD eri [12/13]    211.27 sec, wall time     17.51 sec
int3c2e [13/13], AO [682:683], nrow = 4854
    CPU time for gen CD eri [13/13]     17.13 sec, wall time      5.65 sec
    CPU time for df vj and vk   6659.12 sec, wall time    587.73 sec
E1 = -9514.108553366166  Ecoul = 4451.179053880666  Exc = -246.86700627031877
init E= -1634.42587187004
cond(S) = 984278.0677890362
    CPU time for initialize scf  14630.96 sec, wall time   1258.11 sec
  HOMO = -0.230709264471143  LUMO = -0.0377019097281952
  mo_energy =
[-1.91917508e+01 -1.03188923e+01 -1.02765008e+01 -1.02762832e+01
 -1.02758978e+01 -1.02734241e+01 -1.02713346e+01 -1.02711733e+01
 -1.02667089e+01 -1.02663595e+01 -1.02655189e+01 -1.02645250e+01
 -1.02636905e+01 -1.02634530e+01 -1.02633347e+01 -1.02629496e+01
 -1.02624447e+01 -1.02614398e+01 -1.02602245e+01 -1.02595251e+01
 -1.02588028e+01 -1.02577454e+01 -1.02566873e+01 -1.02566217e+01
 -1.02565347e+01 -1.02565265e+01 -1.02563778e+01 -1.02562103e+01
 -1.02550961e+01 -1.02543698e+01 -1.02538749e+01 -1.02534145e+01
 -1.02527300e+01 -1.02521677e+01 -1.02510199e+01 -1.02507114e+01
 -1.02496797e+01 -1.02479623e+01 -1.02461265e+01 -1.02448318e+01
 -1.02408324e+01 -1.14616550e+00 -9.83888590e-01 -9.72180663e-01
 -9.68183560e-01 -9.61363936e-01 -9.54231903e-01 -9.49104101e-01
 -9.29973070e-01 -9.21856665e-01 -9.16391794e-01 -9.07315125e-01
 -8.98711304e-01 -8.83670846e-01 -8.75388085e-01 -8.59977634e-01
 -8.48790384e-01 -8.34106479e-01 -8.20812990e-01 -8.17180970e-01
 -8.15897524e-01 -8.13864502e-01 -8.07427982e-01 -8.05958903e-01
 -8.02294726e-01 -7.96720720e-01 -7.83988707e-01 -7.58231464e-01
 -7.42499465e-01 -7.25456379e-01 -7.14451843e-01 -6.93128944e-01
 -6.82983581e-01 -6.82394282e-01 -6.78192790e-01 -6.64844184e-01
 -6.53925870e-01 -6.48584752e-01 -6.46109741e-01 -6.36105769e-01
 -6.25326744e-01 -6.11883998e-01 -6.07867658e-01 -6.03717085e-01
 -5.95387670e-01 -5.87981414e-01 -5.82657389e-01 -5.79945063e-01
 -5.73043651e-01 -5.71691307e-01 -5.63252295e-01 -5.57665196e-01
 -5.56033598e-01 -5.50628182e-01 -5.48384609e-01 -5.39528300e-01
 -5.35346672e-01 -5.31553405e-01 -5.31175968e-01 -5.30637566e-01
 -5.29227486e-01 -5.28322657e-01 -5.26883858e-01 -5.26455721e-01
 -5.24315759e-01 -5.21122528e-01 -5.18374395e-01 -5.05658253e-01
 -5.02824838e-01 -5.02284345e-01 -5.00158941e-01 -4.96987841e-01
 -4.92767298e-01 -4.91033634e-01 -4.84621388e-01 -4.83516853e-01
 -4.82569142e-01 -4.77734063e-01 -4.76135459e-01 -4.73114269e-01
 -4.69990765e-01 -4.69702295e-01 -4.66222726e-01 -4.64623631e-01
 -4.61912704e-01 -4.58564657e-01 -4.53520911e-01 -4.52448191e-01
 -4.51009277e-01 -4.50140933e-01 -4.47708646e-01 -4.45116635e-01
 -4.42563775e-01 -4.41841577e-01 -4.40627384e-01 -4.38156042e-01
 -4.37791322e-01 -4.33627775e-01 -4.31160534e-01 -4.22542503e-01
 -4.20376275e-01 -4.16972926e-01 -4.10530068e-01 -4.08220520e-01
 -3.97267062e-01 -3.90211687e-01 -3.79136530e-01 -3.75895867e-01
 -3.49688049e-01 -3.26256700e-01 -2.98423735e-01 -2.67340718e-01
 -2.30709264e-01 -3.77019097e-02  7.57175311e-03  4.65529228e-02
  8.07448969e-02  9.75688237e-02  1.04059807e-01  1.08668456e-01
  1.12146907e-01  1.15772846e-01  1.21110732e-01  1.24086854e-01
  1.26959274e-01  1.28726724e-01  1.31344566e-01  1.35614847e-01
  1.38068274e-01  1.39794186e-01  1.42909509e-01  1.43790102e-01
  1.45718067e-01  1.47226266e-01  1.50794726e-01  1.52822889e-01
  1.56049206e-01  1.56625560e-01  1.58152007e-01  1.58737216e-01
  1.64363699e-01  1.65980161e-01  1.67041698e-01  1.69324717e-01
  1.70033034e-01  1.72975316e-01  1.75099507e-01  1.79050431e-01
  1.80491935e-01  1.82851271e-01  1.84466205e-01  1.88055706e-01
  1.92775049e-01  1.96319435e-01  1.97904038e-01  1.99633038e-01
  1.99703594e-01  2.02950014e-01  2.05254893e-01  2.06313255e-01
  2.07686901e-01  2.10472576e-01  2.11648702e-01  2.14789446e-01
  2.16112269e-01  2.16903310e-01  2.18104180e-01  2.21074260e-01
  2.23901503e-01  2.25075834e-01  2.26423965e-01  2.27868572e-01
  2.30374627e-01  2.32697360e-01  2.33794059e-01  2.35985186e-01
  2.39002918e-01  2.39273162e-01  2.40332069e-01  2.44572517e-01
  2.46174078e-01  2.49036465e-01  2.52341666e-01  2.53568157e-01
  2.54948063e-01  2.56031080e-01  2.57616528e-01  2.59388618e-01
  2.63928845e-01  2.65264154e-01  2.67126159e-01  2.67920545e-01
  2.68814371e-01  2.69739666e-01  2.72095779e-01  2.74869276e-01
  2.77693162e-01  2.79224815e-01  2.82975414e-01  2.85820215e-01
  2.89617864e-01  2.90593689e-01  2.90753171e-01  2.94866545e-01
  2.96088478e-01  2.97783574e-01  2.98307067e-01  3.02357644e-01
  3.03205801e-01  3.05643158e-01  3.10294659e-01  3.15187599e-01
  3.17914135e-01  3.20185040e-01  3.20945624e-01  3.24168172e-01
  3.24705289e-01  3.25102079e-01  3.27161454e-01  3.33061458e-01
  3.36940390e-01  3.39986402e-01  3.41394409e-01  3.42433213e-01
  3.45610718e-01  3.47091549e-01  3.49587003e-01  3.52014968e-01
  3.54646475e-01  3.56692635e-01  3.59237964e-01  3.61917387e-01
  3.63847778e-01  3.65618151e-01  3.66709971e-01  3.70008414e-01
  3.72551929e-01  3.74381334e-01  3.75872671e-01  3.79413704e-01
  3.81430993e-01  3.84431482e-01  3.90296642e-01  3.91663042e-01
  3.93187251e-01  3.94649364e-01  3.97963802e-01  4.02792985e-01
  4.04196057e-01  4.08775224e-01  4.09007759e-01  4.12441045e-01
  4.14745514e-01  4.15897680e-01  4.16630029e-01  4.20879920e-01
  4.22062859e-01  4.22904469e-01  4.24945348e-01  4.26258104e-01
  4.29497651e-01  4.30573767e-01  4.32317962e-01  4.33963420e-01
  4.35576166e-01  4.39131788e-01  4.41797663e-01  4.45284561e-01
  4.49261005e-01  4.50104237e-01  4.52176840e-01  4.54147964e-01
  4.54664276e-01  4.56986389e-01  4.59146632e-01  4.60157756e-01
  4.62824184e-01  4.64687524e-01  4.69070955e-01  4.69508947e-01
  4.72502725e-01  4.76157350e-01  4.78246103e-01  4.78859376e-01
  4.80546060e-01  4.83368333e-01  4.84591756e-01  4.86505350e-01
  4.88280956e-01  4.90878975e-01  4.93175206e-01  4.93730825e-01
  4.96280089e-01  4.98241704e-01  4.99595142e-01  5.01247013e-01
  5.03612943e-01  5.04568668e-01  5.07696316e-01  5.08906151e-01
  5.13393438e-01  5.14221101e-01  5.15119017e-01  5.15435387e-01
  5.17533692e-01  5.18876808e-01  5.21323480e-01  5.23618943e-01
  5.24446401e-01  5.24961977e-01  5.27168879e-01  5.29144823e-01
  5.29950778e-01  5.33018121e-01  5.35117243e-01  5.35228165e-01
  5.36783403e-01  5.37535860e-01  5.39708332e-01  5.40945376e-01
  5.41457830e-01  5.41632379e-01  5.47250279e-01  5.50437887e-01
  5.50893811e-01  5.53508838e-01  5.54244243e-01  5.54756750e-01
  5.58631524e-01  5.61755884e-01  5.63405271e-01  5.64467643e-01
  5.67277039e-01  5.68842616e-01  5.69919893e-01  5.71393177e-01
  5.72240557e-01  5.73763011e-01  5.76042955e-01  5.76680509e-01
  5.79300889e-01  5.81753291e-01  5.82476464e-01  5.83520083e-01
  5.84816071e-01  5.85784028e-01  5.86733432e-01  5.89160953e-01
  5.94167954e-01  5.97600348e-01  5.98921830e-01  6.01154073e-01
  6.02722219e-01  6.04468176e-01  6.06003592e-01  6.12344909e-01
  6.14463483e-01  6.15785114e-01  6.17353773e-01  6.19171772e-01
  6.23164571e-01  6.26180991e-01  6.27072894e-01  6.31576794e-01
  6.36929404e-01  6.37607766e-01  6.38074399e-01  6.39619808e-01
  6.48916811e-01  6.52662934e-01  6.53343410e-01  6.57906280e-01
  6.59610702e-01  6.63736593e-01  6.66404577e-01  6.70242476e-01
  6.72404481e-01  6.74484373e-01  6.77301356e-01  6.79478192e-01
  6.82486924e-01  6.83677767e-01  6.85063462e-01  6.86408364e-01
  6.90689218e-01  6.94810109e-01  6.95726732e-01  6.99071015e-01
  7.04669133e-01  7.06586610e-01  7.08828378e-01  7.11550495e-01
  7.12839929e-01  7.18515940e-01  7.21462376e-01  7.24834035e-01
  7.25002064e-01  7.28247362e-01  7.29862332e-01  7.32379266e-01
  7.35148999e-01  7.36858248e-01  7.39418926e-01  7.42767187e-01
  7.46666792e-01  7.50446462e-01  7.51568286e-01  7.52998861e-01
  7.57819819e-01  7.59541184e-01  7.63462306e-01  7.64095994e-01
  7.67560227e-01  7.69914842e-01  7.73722117e-01  7.75591001e-01
  7.82700522e-01  7.86418739e-01  7.88684501e-01  7.91062499e-01
  7.94164807e-01  7.98106054e-01  8.00323173e-01  8.02429307e-01
  8.03876180e-01  8.06747678e-01  8.10111265e-01  8.13275502e-01
  8.15417915e-01  8.19784547e-01  8.23023410e-01  8.25841317e-01
  8.28596251e-01  8.30299507e-01  8.33047950e-01  8.36801464e-01
  8.37221431e-01  8.40963826e-01  8.43392395e-01  8.48302448e-01
  8.49914793e-01  8.52398509e-01  8.57391622e-01  8.59796556e-01
  8.63375437e-01  8.68143417e-01  8.72847400e-01  8.74430230e-01
  8.77952747e-01  8.84430492e-01  8.87496209e-01  8.92357942e-01
  8.94310000e-01  8.99884722e-01  9.02290410e-01  9.03837957e-01
  9.07953630e-01  9.12366163e-01  9.15559018e-01  9.17566104e-01
  9.24362465e-01  9.27676676e-01  9.30426191e-01  9.34403309e-01
  9.36096294e-01  9.40979998e-01  9.48681510e-01  9.52559004e-01
  9.60654744e-01  9.62865924e-01  9.64001118e-01  9.67866898e-01
  9.72691655e-01  9.77062828e-01  9.78567091e-01  9.80659768e-01
  9.84505366e-01  9.89348412e-01  9.89695311e-01  9.93580428e-01
  9.95034138e-01  1.00071014e+00  1.00297253e+00  1.00703889e+00
  1.00934330e+00  1.01385947e+00  1.01513910e+00  1.01645182e+00
  1.01930634e+00  1.02731646e+00  1.03307098e+00  1.03514548e+00
  1.03629897e+00  1.03870673e+00  1.04239852e+00  1.04616608e+00
  1.04875109e+00  1.05319422e+00  1.05445784e+00  1.06092873e+00
  1.06600149e+00  1.07140921e+00  1.07278567e+00  1.07781264e+00
  1.07856974e+00  1.08085360e+00  1.08301376e+00  1.08316688e+00
  1.08919625e+00  1.09410776e+00  1.09902752e+00  1.10703422e+00
  1.11037999e+00  1.11213617e+00  1.11612309e+00  1.11688595e+00
  1.12430617e+00  1.12624343e+00  1.12745902e+00  1.13286800e+00
  1.13746069e+00  1.14086273e+00  1.14262044e+00  1.14406035e+00
  1.14595266e+00  1.14947585e+00  1.15595238e+00  1.15886119e+00
  1.16111120e+00  1.16641304e+00  1.16710816e+00  1.17407097e+00
  1.17787902e+00  1.17989301e+00  1.18579977e+00  1.18699953e+00
  1.19136651e+00  1.19337129e+00  1.19467520e+00  1.19742682e+00
  1.19985389e+00  1.20432669e+00  1.20660948e+00  1.21208738e+00
  1.21880852e+00  1.22187513e+00  1.22359935e+00  1.22999063e+00
  1.23190528e+00  1.23433044e+00  1.23679942e+00  1.24271456e+00
  1.24770597e+00  1.24983436e+00  1.25340296e+00  1.25972306e+00
  1.26351626e+00  1.27065856e+00  1.27215732e+00  1.27907730e+00
  1.28245077e+00  1.28550404e+00  1.28652075e+00  1.29339176e+00
  1.29586592e+00  1.29894775e+00  1.30539742e+00  1.30738659e+00
  1.30912207e+00  1.31341595e+00  1.32051758e+00  1.32293752e+00
  1.32522048e+00  1.32968296e+00  1.33076334e+00  1.33338601e+00
  1.33744848e+00  1.34134195e+00  1.34596552e+00  1.34904636e+00
  1.35225301e+00  1.35525518e+00  1.36079146e+00  1.36475321e+00
  1.36712626e+00  1.37176886e+00  1.37294303e+00  1.37537617e+00
  1.37997287e+00  1.38218366e+00  1.38780072e+00  1.39022447e+00
  1.39348860e+00  1.39875671e+00  1.40658054e+00  1.40770796e+00
  1.40983252e+00  1.41483882e+00  1.41739303e+00  1.41896568e+00
  1.42641778e+00  1.42995056e+00  1.43399488e+00  1.43957643e+00
  1.44319945e+00  1.44588697e+00  1.45587325e+00  1.45633286e+00
  1.46149491e+00  1.46600239e+00  1.46841095e+00  1.47507424e+00
  1.47721156e+00  1.47773223e+00  1.48137477e+00  1.48430262e+00
  1.48540502e+00  1.49262167e+00  1.49862983e+00  1.50084037e+00
  1.50394691e+00  1.51333894e+00  1.52085220e+00  1.53096981e+00
  1.53597998e+00  1.54080211e+00  1.54556472e+00  1.54590025e+00
  1.55079249e+00  1.55225296e+00  1.55727376e+00  1.56062011e+00
  1.56329754e+00  1.57048618e+00  1.57583670e+00  1.58235776e+00
  1.58603085e+00  1.59170951e+00  1.59807698e+00  1.60285684e+00
  1.60719917e+00  1.61368676e+00  1.61532380e+00  1.61928532e+00
  1.61955885e+00  1.62716047e+00  1.62901797e+00  1.63249067e+00
  1.63408353e+00  1.63817033e+00  1.64004622e+00  1.64143682e+00
  1.64294735e+00  1.64469314e+00  1.64603241e+00  1.64667261e+00
  1.65070355e+00  1.65227709e+00  1.65256813e+00  1.65499123e+00
  1.65594662e+00  1.65846213e+00  1.66099079e+00  1.66233271e+00
  1.66435482e+00  1.66705327e+00  1.67108343e+00  1.67169467e+00
  1.67358854e+00  1.67515543e+00  1.67770707e+00  1.68122950e+00
  1.68433592e+00  1.68636300e+00  1.68810847e+00  1.69185431e+00
  1.69647566e+00  1.69913700e+00  1.70013650e+00  1.70364398e+00
  1.70798046e+00  1.71274286e+00  1.71416783e+00  1.71476037e+00
  1.71559093e+00  1.71676030e+00  1.71716024e+00  1.72124634e+00
  1.72418656e+00  1.72628633e+00  1.72837377e+00  1.72982031e+00
  1.73021184e+00  1.73389790e+00  1.73616711e+00  1.73854306e+00
  1.73914403e+00  1.74366056e+00  1.74798377e+00  1.75147264e+00
  1.75602876e+00  1.75701069e+00  1.75973772e+00  1.76489947e+00
  1.76654515e+00  1.76927740e+00  1.77146304e+00  1.77417263e+00
  1.77682272e+00  1.78041106e+00  1.78136558e+00  1.79001757e+00
  1.79048553e+00  1.79770630e+00  1.79897250e+00  1.80221562e+00
  1.81137223e+00  1.81178586e+00  1.81509960e+00  1.81930861e+00
  1.82732160e+00  1.82826195e+00  1.82977895e+00  1.83352982e+00
  1.84318748e+00  1.84376183e+00  1.84993592e+00  1.85480003e+00
  1.85943759e+00  1.85968669e+00  1.86889894e+00  1.87147625e+00
  1.87699684e+00  1.88178924e+00  1.88645219e+00  1.89040711e+00
  1.89604828e+00  1.89861904e+00  1.90216843e+00  1.90542804e+00
  1.91132701e+00  1.91402903e+00  1.91958298e+00  1.92533501e+00
  1.92908203e+00  1.93076638e+00  1.93607253e+00  1.94056180e+00
  1.94260127e+00  1.95054406e+00  1.95159360e+00  1.95580989e+00
  1.96623968e+00  1.96945692e+00  1.98035424e+00  1.98180831e+00
  1.98250646e+00  1.98779005e+00  1.98991939e+00  1.99158073e+00
  1.99655241e+00  1.99734050e+00  2.00643442e+00  2.00675548e+00
  2.01254947e+00  2.01604122e+00  2.02136577e+00  2.02412201e+00
  2.02672925e+00  2.03561393e+00  2.03644738e+00  2.04105126e+00
  2.04796378e+00  2.05664578e+00  2.05789262e+00  2.06583794e+00
  2.06696042e+00  2.06878401e+00  2.07318066e+00  2.07649674e+00
  2.08341887e+00  2.08689421e+00  2.08805425e+00  2.09273794e+00
  2.09972472e+00  2.10522673e+00  2.10789766e+00  2.11294075e+00
  2.11537042e+00  2.11818645e+00  2.12118815e+00  2.12390661e+00
  2.12426454e+00  2.12914903e+00  2.13219729e+00  2.13505028e+00
  2.14697603e+00  2.14928936e+00  2.14996792e+00  2.15049320e+00
  2.15447909e+00  2.15938579e+00  2.16619181e+00  2.17033898e+00
  2.17285968e+00  2.17590147e+00  2.17852620e+00  2.18276279e+00
  2.18609786e+00  2.18767340e+00  2.18907419e+00  2.19087447e+00
  2.20091851e+00  2.20546122e+00  2.20876066e+00  2.21295627e+00
  2.22178877e+00  2.22288471e+00  2.22954595e+00  2.23191014e+00
  2.23862641e+00  2.24113440e+00  2.24359733e+00  2.25443982e+00
  2.25812649e+00  2.25901921e+00  2.26115491e+00  2.26652089e+00
  2.27044272e+00  2.27293854e+00  2.27569174e+00  2.28031093e+00
  2.28282096e+00  2.28772230e+00  2.28959974e+00  2.29223729e+00
  2.29439162e+00  2.29973217e+00  2.30266636e+00  2.30948825e+00
  2.31948769e+00  2.32728450e+00  2.32995874e+00  2.33650639e+00
  2.34229596e+00  2.34428277e+00  2.35201685e+00  2.35403251e+00
  2.35631291e+00  2.36308431e+00  2.36680285e+00  2.36949478e+00
  2.37914293e+00  2.38297037e+00  2.38463899e+00  2.38853643e+00
  2.39234439e+00  2.39566886e+00  2.39640083e+00  2.40181044e+00
  2.40448613e+00  2.40573143e+00  2.41381199e+00  2.42002209e+00
  2.42034144e+00  2.42222268e+00  2.42542473e+00  2.42787877e+00
  2.43145303e+00  2.43529449e+00  2.43696665e+00  2.43978553e+00
  2.44295620e+00  2.44956095e+00  2.45984054e+00  2.46152065e+00
  2.46560781e+00  2.47013312e+00  2.47437286e+00  2.47726288e+00
  2.47905947e+00  2.48196111e+00  2.48483719e+00  2.48719977e+00
  2.49023082e+00  2.49371006e+00  2.49679860e+00  2.50094734e+00
  2.50388956e+00  2.50614270e+00  2.50671901e+00  2.51448412e+00
  2.52007918e+00  2.52200904e+00  2.52397864e+00  2.52769688e+00
  2.52873094e+00  2.53250613e+00  2.53505573e+00  2.53802701e+00
  2.54506966e+00  2.54916738e+00  2.55357427e+00  2.55667513e+00
  2.56201575e+00  2.56438731e+00  2.56780848e+00  2.57284379e+00
  2.57399389e+00  2.58521019e+00  2.58777523e+00  2.59223181e+00
  2.59913518e+00  2.60188539e+00  2.60581351e+00  2.60602498e+00
  2.61367284e+00  2.61881004e+00  2.62190589e+00  2.62327100e+00
  2.62383850e+00  2.62570345e+00  2.62694656e+00  2.62859942e+00
  2.63039966e+00  2.63342602e+00  2.63407491e+00  2.63769203e+00
  2.63898185e+00  2.64259100e+00  2.64439005e+00  2.64843985e+00
  2.65626819e+00  2.65825462e+00  2.66138169e+00  2.66244030e+00
  2.66510176e+00  2.66823450e+00  2.67085819e+00  2.67274713e+00
  2.67664276e+00  2.68135430e+00  2.68299693e+00  2.68652744e+00
  2.68753238e+00  2.69023445e+00  2.69334355e+00  2.69442953e+00
  2.70008700e+00  2.70226804e+00  2.70555483e+00  2.70668562e+00
  2.70891564e+00  2.71084387e+00  2.71426140e+00  2.71514414e+00
  2.71928945e+00  2.72270208e+00  2.72693568e+00  2.72975214e+00
  2.73352719e+00  2.73390781e+00  2.74018013e+00  2.74194961e+00
  2.74330071e+00  2.74929883e+00  2.75504576e+00  2.75808817e+00
  2.76223261e+00  2.76536137e+00  2.77221386e+00  2.77547559e+00
  2.78051746e+00  2.78260205e+00  2.78767562e+00  2.79122939e+00
  2.79673660e+00  2.80123117e+00  2.80342856e+00  2.80358241e+00
  2.80703321e+00  2.81203465e+00  2.81817845e+00  2.81935820e+00
  2.82302388e+00  2.82498537e+00  2.82902169e+00  2.83150603e+00
  2.83257533e+00  2.83929121e+00  2.84357489e+00  2.84420540e+00
  2.84851110e+00  2.85111172e+00  2.85236485e+00  2.86425013e+00
  2.86577487e+00  2.86745148e+00  2.86880948e+00  2.87011085e+00
  2.87238029e+00  2.87414221e+00  2.87902564e+00  2.88123086e+00
  2.88313032e+00  2.88661047e+00  2.89103145e+00  2.89481974e+00
  2.89637567e+00  2.89851362e+00  2.90189626e+00  2.90600446e+00
  2.91183380e+00  2.91564981e+00  2.91625971e+00  2.92263467e+00
  2.92331617e+00  2.92767733e+00  2.93386681e+00  2.93769146e+00
  2.94180795e+00  2.94683390e+00  2.94856140e+00  2.95263248e+00
  2.95328254e+00  2.95466021e+00  2.95549836e+00  2.95711790e+00
  2.96310229e+00  2.96607589e+00  2.97030191e+00  2.97670560e+00
  2.97710512e+00  2.97814081e+00  2.98391716e+00  2.98617397e+00
  2.99269804e+00  2.99549469e+00  3.00299503e+00  3.00400810e+00
  3.00630586e+00  3.00782749e+00  3.01331174e+00  3.01497657e+00
  3.01868091e+00  3.01911235e+00  3.02299648e+00  3.02425179e+00
  3.02634397e+00  3.02971273e+00  3.03676265e+00  3.04359686e+00
  3.04456732e+00  3.04755998e+00  3.04907450e+00  3.05230438e+00
  3.05933911e+00  3.06512134e+00  3.07108235e+00  3.07617597e+00
  3.08296970e+00  3.08703891e+00  3.09018294e+00  3.09116029e+00
  3.09790062e+00  3.09896789e+00  3.10310605e+00  3.10466025e+00
  3.10804139e+00  3.11338380e+00  3.11683302e+00  3.12217763e+00
  3.12654070e+00  3.13224021e+00  3.13396939e+00  3.13720855e+00
  3.14037651e+00  3.14569003e+00  3.14766846e+00  3.14907351e+00
  3.15630004e+00  3.16077726e+00  3.16362852e+00  3.16597097e+00
  3.16960430e+00  3.17353394e+00  3.17855262e+00  3.17888468e+00
  3.18057491e+00  3.18414749e+00  3.18621243e+00  3.19116988e+00
  3.19265914e+00  3.19594227e+00  3.19774867e+00  3.20377313e+00
  3.20587193e+00  3.20881974e+00  3.21382190e+00  3.21426378e+00
  3.21792505e+00  3.22220161e+00  3.22496930e+00  3.22830271e+00
  3.22927207e+00  3.23253471e+00  3.23499283e+00  3.23722118e+00
  3.24184667e+00  3.24231036e+00  3.24574120e+00  3.24939251e+00
  3.25077170e+00  3.25312423e+00  3.25720101e+00  3.25802044e+00
  3.25948565e+00  3.26478854e+00  3.26700480e+00  3.26825450e+00
  3.27140886e+00  3.27289598e+00  3.27432753e+00  3.27568158e+00
  3.27876154e+00  3.28178928e+00  3.28752544e+00  3.28946830e+00
  3.29011405e+00  3.29275400e+00  3.29536798e+00  3.29943379e+00
  3.30524159e+00  3.30691017e+00  3.31001221e+00  3.31277216e+00
  3.31665226e+00  3.31862162e+00  3.32054667e+00  3.32467125e+00
  3.32649022e+00  3.33051639e+00  3.33265944e+00  3.33741053e+00
  3.34100681e+00  3.34241999e+00  3.34495184e+00  3.34954938e+00
  3.35085871e+00  3.35436693e+00  3.35792854e+00  3.36128879e+00
  3.36424770e+00  3.36548990e+00  3.36633633e+00  3.36834166e+00
  3.37094977e+00  3.37628746e+00  3.38041572e+00  3.38281461e+00
  3.38529426e+00  3.38882743e+00  3.38947223e+00  3.39366629e+00
  3.39542280e+00  3.39604269e+00  3.40137673e+00  3.40611360e+00
  3.40763262e+00  3.41150871e+00  3.41385769e+00  3.41902000e+00
  3.42086538e+00  3.42486748e+00  3.42725172e+00  3.42993055e+00
  3.43423090e+00  3.43541803e+00  3.43678195e+00  3.43838149e+00
  3.44310494e+00  3.44660790e+00  3.44762140e+00  3.44864358e+00
  3.45313811e+00  3.45614105e+00  3.45980412e+00  3.46123976e+00
  3.46490998e+00  3.46657232e+00  3.46696046e+00  3.46928613e+00
  3.47230273e+00  3.47637796e+00  3.47762336e+00  3.48388192e+00
  3.48821138e+00  3.49009190e+00  3.49253646e+00  3.49494837e+00
  3.49812255e+00  3.50045375e+00  3.50176550e+00  3.50277201e+00
  3.50534375e+00  3.51251605e+00  3.51463899e+00  3.51619477e+00
  3.52406956e+00  3.52480079e+00  3.53064048e+00  3.53514943e+00
  3.53774329e+00  3.53895964e+00  3.54116413e+00  3.54452758e+00
  3.54916715e+00  3.55178924e+00  3.55682620e+00  3.55926538e+00
  3.56171183e+00  3.56863939e+00  3.57346809e+00  3.57826767e+00
  3.58069244e+00  3.58660122e+00  3.58794071e+00  3.58980178e+00
  3.59573981e+00  3.60178027e+00  3.60398331e+00  3.60637968e+00
  3.60840928e+00  3.61248594e+00  3.61503029e+00  3.61760917e+00
  3.62177434e+00  3.62515067e+00  3.62606671e+00  3.62837473e+00
  3.62960675e+00  3.63649789e+00  3.64178952e+00  3.64484968e+00
  3.64639881e+00  3.65166893e+00  3.65458672e+00  3.65708123e+00
  3.66168299e+00  3.66875207e+00  3.67072736e+00  3.67492041e+00
  3.67616351e+00  3.67855425e+00  3.68492291e+00  3.68781951e+00
  3.69085384e+00  3.69156877e+00  3.69563986e+00  3.70242469e+00
  3.70655771e+00  3.70776144e+00  3.71206786e+00  3.71685594e+00
  3.71895546e+00  3.72242684e+00  3.72551408e+00  3.73128550e+00
  3.73158281e+00  3.73869262e+00  3.74421092e+00  3.74684519e+00
  3.74821472e+00  3.75613179e+00  3.76269533e+00  3.76328973e+00
  3.77032709e+00  3.77490914e+00  3.77645915e+00  3.78113189e+00
  3.79239881e+00  3.79929547e+00  3.80113204e+00  3.80948890e+00
  3.81278840e+00  3.81446467e+00  3.81566486e+00  3.81859998e+00
  3.82454526e+00  3.82726679e+00  3.83465028e+00  3.84488918e+00
  3.84656049e+00  3.85306193e+00  3.85461941e+00  3.86596943e+00
  3.86807327e+00  3.87051980e+00  3.87345213e+00  3.87593530e+00
  3.88291953e+00  3.88425502e+00  3.89162656e+00  3.90228374e+00
  3.90262760e+00  3.90945520e+00  3.92021075e+00  3.92496801e+00
  3.92787274e+00  3.93006492e+00  3.93212464e+00  3.94556374e+00
  3.94861818e+00  3.95002223e+00  3.95742852e+00  3.96316357e+00
  3.97285651e+00  3.98114494e+00  3.98486135e+00  3.98842614e+00
  3.98982938e+00  3.99702469e+00  3.99847422e+00  4.01025833e+00
  4.01557142e+00  4.01850933e+00  4.02288103e+00  4.03199194e+00
  4.03517252e+00  4.04171772e+00  4.04423095e+00  4.04957412e+00
  4.05667654e+00  4.05835037e+00  4.06473580e+00  4.07014939e+00
  4.07023286e+00  4.07436087e+00  4.08034363e+00  4.08157471e+00
  4.09163055e+00  4.09741009e+00  4.10043449e+00  4.10554672e+00
  4.10829750e+00  4.11374744e+00  4.11918510e+00  4.12556234e+00
  4.12837317e+00  4.14243235e+00  4.14285623e+00  4.14508665e+00
  4.15435335e+00  4.15698582e+00  4.16351530e+00  4.17778598e+00
  4.18154785e+00  4.18686283e+00  4.18945693e+00  4.19706256e+00
  4.19900378e+00  4.21117957e+00  4.21372310e+00  4.22896261e+00
  4.23186969e+00  4.23602875e+00  4.24089941e+00  4.24272535e+00
  4.24546106e+00  4.25575626e+00  4.26637025e+00  4.27108884e+00
  4.28016635e+00  4.28482891e+00  4.30154423e+00  4.30734062e+00
  4.31517143e+00  4.31827566e+00  4.32313542e+00  4.33359589e+00
  4.33842671e+00  4.34313393e+00  4.34495732e+00  4.34736027e+00
  4.35476373e+00  4.35660230e+00  4.35756399e+00  4.36389686e+00
  4.37391681e+00  4.37794954e+00  4.37972742e+00  4.38779325e+00
  4.39342015e+00  4.39710148e+00  4.39956443e+00  4.40345394e+00
  4.40710743e+00  4.41223239e+00  4.41602041e+00  4.42232562e+00
  4.42659758e+00  4.43560275e+00  4.44027340e+00  4.44411716e+00
  4.44689073e+00  4.45840372e+00  4.46892181e+00  4.47223044e+00
  4.47688337e+00  4.48397006e+00  4.49028930e+00  4.49327891e+00
  4.49971873e+00  4.50814763e+00  4.51016687e+00  4.51234028e+00
  4.51564752e+00  4.51808470e+00  4.52348600e+00  4.52757384e+00
  4.53976085e+00  4.54226779e+00  4.54727854e+00  4.55455005e+00
  4.55872945e+00  4.56151956e+00  4.57157833e+00  4.57504987e+00
  4.57687604e+00  4.58033426e+00  4.58577524e+00  4.58705080e+00
  4.59181691e+00  4.60024640e+00  4.61623557e+00  4.61729580e+00
  4.62586211e+00  4.63473709e+00  4.63567200e+00  4.64005455e+00
  4.64720622e+00  4.65920561e+00  4.67248787e+00  4.68762562e+00
  4.68913539e+00  4.69562117e+00  4.70422238e+00  4.71326953e+00
  4.71811364e+00  4.72500698e+00  4.73574451e+00  4.73770228e+00
  4.74182622e+00  4.75194112e+00  4.75655587e+00  4.75952710e+00
  4.76705585e+00  4.78108437e+00  4.79535449e+00  4.79612664e+00
  4.79805618e+00  4.80479474e+00  4.81383117e+00  4.83204115e+00
  4.83896839e+00  4.84007264e+00  4.85203275e+00  4.87467797e+00
  4.87969145e+00  4.88843475e+00  4.90181678e+00  4.91240862e+00
  4.92003009e+00  4.93453994e+00  4.94555476e+00  4.95034804e+00
  4.96467132e+00  4.97237881e+00  4.98726667e+00  4.99578116e+00
  5.00264317e+00  5.00984256e+00  5.01682076e+00  5.02191592e+00
  5.03297979e+00  5.05390744e+00  5.06221225e+00  5.06874350e+00
  5.07704881e+00  5.09570669e+00  5.10267759e+00  5.12980153e+00
  5.13289840e+00  5.14758499e+00  5.16512548e+00  5.18202432e+00
  5.20154254e+00  5.20559539e+00  5.21526229e+00  5.22961914e+00
  5.23693222e+00  5.23889912e+00  5.26975808e+00  5.27412052e+00
  5.28212681e+00  5.28893483e+00  5.30648773e+00  5.32140209e+00
  5.32646081e+00  5.34173931e+00  5.37073110e+00  5.37661635e+00
  5.40598378e+00  5.41831824e+00  5.42117574e+00  5.44792705e+00
  5.45014255e+00  5.48034053e+00  5.48704396e+00  5.52988139e+00
  5.53355181e+00  5.57690404e+00  5.61453829e+00  5.62340802e+00
  5.65970506e+00  5.67984263e+00  5.72327611e+00  5.74218746e+00
  5.75767602e+00  5.87245620e+00  5.88155808e+00  6.02599424e+00
  6.38419535e+00  6.61576464e+00  6.86189834e+00  6.95851673e+00
  7.12398653e+00  7.28190587e+00  2.23452702e+01  2.23966357e+01
  2.24046476e+01  2.24209404e+01  2.24417659e+01  2.24490488e+01
  2.24568612e+01  2.24655427e+01  2.24692608e+01  2.24826089e+01
  2.24961683e+01  2.25257657e+01  2.25472652e+01  2.25677179e+01
  2.25772765e+01  2.25905414e+01  2.26029707e+01  2.26162036e+01
  2.26368650e+01  2.26532657e+01  2.26634139e+01  2.26655504e+01
  2.26714542e+01  2.27012638e+01  2.27169794e+01  2.27493150e+01
  2.27595388e+01  2.27695746e+01  2.27967045e+01  2.28081872e+01
  2.28332490e+01  2.28549035e+01  2.29001905e+01  2.29111499e+01
  2.30501327e+01  2.30827907e+01  2.31239732e+01  2.31585678e+01
  2.31758632e+01  2.33100213e+01  4.41180259e+01]
nelec by numeric integration = 306.00013739943495
    CPU time for vxc    636.26 sec, wall time     46.09 sec
    CPU time for df vj and vk   4595.04 sec, wall time    351.55 sec
    CPU time for df vj and vk   4025.92 sec, wall time    310.15 sec
E1 = -9514.108531056523  Ecoul = 4451.179030022907  Exc = -246.86700460562577
cycle= 1 E= -1634.42587175347  delta_E= 1.17e-07  |g|= 2.81e-06  |ddm|= 0.000152
    CPU time for cycle= 1   9283.02 sec, wall time    712.18 sec
  HOMO = -0.230709358542017  LUMO = -0.0377019218534453
  mo_energy =
[-1.91917525e+01 -1.03188915e+01 -1.02765002e+01 -1.02762835e+01
 -1.02758982e+01 -1.02734241e+01 -1.02713349e+01 -1.02711745e+01
 -1.02667083e+01 -1.02663599e+01 -1.02655197e+01 -1.02645248e+01
 -1.02636907e+01 -1.02634535e+01 -1.02633345e+01 -1.02629497e+01
 -1.02624444e+01 -1.02614391e+01 -1.02602241e+01 -1.02595251e+01
 -1.02588033e+01 -1.02577456e+01 -1.02566879e+01 -1.02566226e+01
 -1.02565348e+01 -1.02565266e+01 -1.02563776e+01 -1.02562111e+01
 -1.02550962e+01 -1.02543697e+01 -1.02538753e+01 -1.02534143e+01
 -1.02527292e+01 -1.02521673e+01 -1.02510194e+01 -1.02507118e+01
 -1.02496800e+01 -1.02479624e+01 -1.02461264e+01 -1.02448317e+01
 -1.02408326e+01 -1.14616593e+00 -9.83888826e-01 -9.72180669e-01
 -9.68183602e-01 -9.61363976e-01 -9.54232046e-01 -9.49104188e-01
 -9.29972962e-01 -9.21856795e-01 -9.16391885e-01 -9.07315215e-01
 -8.98711327e-01 -8.83670856e-01 -8.75388115e-01 -8.59977618e-01
 -8.48790549e-01 -8.34106614e-01 -8.20812744e-01 -8.17180880e-01
 -8.15897610e-01 -8.13864597e-01 -8.07428123e-01 -8.05959048e-01
 -8.02294661e-01 -7.96720807e-01 -7.83988819e-01 -7.58231458e-01
 -7.42499556e-01 -7.25456431e-01 -7.14451924e-01 -6.93129087e-01
 -6.82983657e-01 -6.82394341e-01 -6.78192826e-01 -6.64844387e-01
 -6.53925934e-01 -6.48584636e-01 -6.46109764e-01 -6.36105760e-01
 -6.25326825e-01 -6.11884162e-01 -6.07867635e-01 -6.03717161e-01
 -5.95387768e-01 -5.87981437e-01 -5.82657440e-01 -5.79945144e-01
 -5.73043710e-01 -5.71691222e-01 -5.63252395e-01 -5.57665300e-01
 -5.56033592e-01 -5.50628217e-01 -5.48384615e-01 -5.39528417e-01
 -5.35346750e-01 -5.31553472e-01 -5.31176025e-01 -5.30637608e-01
 -5.29227578e-01 -5.28322575e-01 -5.26883933e-01 -5.26455760e-01
 -5.24315810e-01 -5.21122560e-01 -5.18374452e-01 -5.05658347e-01
 -5.02824771e-01 -5.02284403e-01 -5.00159042e-01 -4.96987934e-01
 -4.92767427e-01 -4.91033655e-01 -4.84621354e-01 -4.83516835e-01
 -4.82569208e-01 -4.77734116e-01 -4.76135484e-01 -4.73114298e-01
 -4.69990680e-01 -4.69702374e-01 -4.66222744e-01 -4.64623741e-01
 -4.61912718e-01 -4.58564748e-01 -4.53521027e-01 -4.52448269e-01
 -4.51009389e-01 -4.50141020e-01 -4.47708639e-01 -4.45116753e-01
 -4.42563795e-01 -4.41841553e-01 -4.40627466e-01 -4.38155989e-01
 -4.37791428e-01 -4.33627815e-01 -4.31160608e-01 -4.22542574e-01
 -4.20376240e-01 -4.16973057e-01 -4.10530087e-01 -4.08220673e-01
 -3.97267218e-01 -3.90211859e-01 -3.79136799e-01 -3.75895944e-01
 -3.49688119e-01 -3.26256811e-01 -2.98423841e-01 -2.67340801e-01
 -2.30709359e-01 -3.77019219e-02  7.57172753e-03  4.65528496e-02
  8.07448214e-02  9.75688665e-02  1.04059705e-01  1.08668354e-01
  1.12146911e-01  1.15772796e-01  1.21110703e-01  1.24086824e-01
  1.26959237e-01  1.28726729e-01  1.31344524e-01  1.35614866e-01
  1.38068202e-01  1.39794265e-01  1.42909455e-01  1.43790087e-01
  1.45718039e-01  1.47226266e-01  1.50794741e-01  1.52822771e-01
  1.56049200e-01  1.56625471e-01  1.58152025e-01  1.58737252e-01
  1.64363748e-01  1.65980083e-01  1.67041656e-01  1.69324696e-01
  1.70032939e-01  1.72975289e-01  1.75099470e-01  1.79050456e-01
  1.80491987e-01  1.82851220e-01  1.84466220e-01  1.88055680e-01
  1.92775135e-01  1.96319386e-01  1.97904044e-01  1.99633038e-01
  1.99703563e-01  2.02949965e-01  2.05254860e-01  2.06313264e-01
  2.07686907e-01  2.10472569e-01  2.11648726e-01  2.14789404e-01
  2.16112189e-01  2.16903336e-01  2.18104120e-01  2.21074275e-01
  2.23901545e-01  2.25075754e-01  2.26423963e-01  2.27868510e-01
  2.30374569e-01  2.32697307e-01  2.33794160e-01  2.35985110e-01
  2.39002880e-01  2.39273096e-01  2.40332155e-01  2.44572423e-01
  2.46174083e-01  2.49036392e-01  2.52341615e-01  2.53568235e-01
  2.54948117e-01  2.56030961e-01  2.57616509e-01  2.59388638e-01
  2.63928774e-01  2.65264185e-01  2.67126164e-01  2.67920517e-01
  2.68814460e-01  2.69739642e-01  2.72095798e-01  2.74869208e-01
  2.77693041e-01  2.79224762e-01  2.82975388e-01  2.85820181e-01
  2.89617845e-01  2.90593670e-01  2.90753167e-01  2.94866539e-01
  2.96088483e-01  2.97783682e-01  2.98306981e-01  3.02357572e-01
  3.03205787e-01  3.05643066e-01  3.10294609e-01  3.15187674e-01
  3.17914143e-01  3.20184968e-01  3.20945615e-01  3.24168061e-01
  3.24705213e-01  3.25102044e-01  3.27161407e-01  3.33061552e-01
  3.36940305e-01  3.39986426e-01  3.41394313e-01  3.42433279e-01
  3.45610731e-01  3.47091457e-01  3.49586925e-01  3.52014921e-01
  3.54646510e-01  3.56692582e-01  3.59237901e-01  3.61917426e-01
  3.63847766e-01  3.65618144e-01  3.66709925e-01  3.70008306e-01
  3.72551837e-01  3.74381254e-01  3.75872623e-01  3.79413730e-01
  3.81430996e-01  3.84431427e-01  3.90296594e-01  3.91662981e-01
  3.93187194e-01  3.94649368e-01  3.97963806e-01  4.02792973e-01
  4.04196061e-01  4.08775107e-01  4.09007795e-01  4.12441051e-01
  4.14745425e-01  4.15897641e-01  4.16629991e-01  4.20879845e-01
  4.22062792e-01  4.22904499e-01  4.24945366e-01  4.26258092e-01
  4.29497608e-01  4.30573748e-01  4.32317908e-01  4.33963414e-01
  4.35576175e-01  4.39131714e-01  4.41797608e-01  4.45284466e-01
  4.49261039e-01  4.50104269e-01  4.52176829e-01  4.54147914e-01
  4.54664253e-01  4.56986390e-01  4.59146568e-01  4.60157682e-01
  4.62824174e-01  4.64687511e-01  4.69070960e-01  4.69508924e-01
  4.72502660e-01  4.76157381e-01  4.78246017e-01  4.78859332e-01
  4.80546046e-01  4.83368332e-01  4.84591746e-01  4.86505319e-01
  4.88280957e-01  4.90878954e-01  4.93175215e-01  4.93730765e-01
  4.96280092e-01  4.98241722e-01  4.99595095e-01  5.01246965e-01
  5.03612839e-01  5.04568633e-01  5.07696302e-01  5.08906146e-01
  5.13393390e-01  5.14221056e-01  5.15118979e-01  5.15435318e-01
  5.17533710e-01  5.18876803e-01  5.21323481e-01  5.23618935e-01
  5.24446345e-01  5.24961950e-01  5.27168841e-01  5.29144748e-01
  5.29950756e-01  5.33018114e-01  5.35117284e-01  5.35228133e-01
  5.36783367e-01  5.37535783e-01  5.39708322e-01  5.40945340e-01
  5.41457788e-01  5.41632329e-01  5.47250304e-01  5.50437904e-01
  5.50893802e-01  5.53508878e-01  5.54244157e-01  5.54756749e-01
  5.58631417e-01  5.61755814e-01  5.63405169e-01  5.64467705e-01
  5.67277038e-01  5.68842575e-01  5.69919911e-01  5.71393169e-01
  5.72240568e-01  5.73762939e-01  5.76042881e-01  5.76680525e-01
  5.79300818e-01  5.81753284e-01  5.82476383e-01  5.83520092e-01
  5.84816005e-01  5.85783981e-01  5.86733414e-01  5.89160874e-01
  5.94167938e-01  5.97600334e-01  5.98921732e-01  6.01154020e-01
  6.02722202e-01  6.04468090e-01  6.06003607e-01  6.12344890e-01
  6.14463434e-01  6.15784986e-01  6.17353666e-01  6.19171756e-01
  6.23164499e-01  6.26180921e-01  6.27072929e-01  6.31576778e-01
  6.36929328e-01  6.37607706e-01  6.38074286e-01  6.39619804e-01
  6.48916832e-01  6.52662936e-01  6.53343336e-01  6.57906168e-01
  6.59610660e-01  6.63736563e-01  6.66404549e-01  6.70242482e-01
  6.72404478e-01  6.74484406e-01  6.77301293e-01  6.79478103e-01
  6.82486889e-01  6.83677721e-01  6.85063410e-01  6.86408325e-01
  6.90689178e-01  6.94810010e-01  6.95726652e-01  6.99071024e-01
  7.04669139e-01  7.06586613e-01  7.08828330e-01  7.11550419e-01
  7.12839874e-01  7.18515867e-01  7.21462327e-01  7.24833985e-01
  7.25002034e-01  7.28247372e-01  7.29862270e-01  7.32379252e-01
  7.35148962e-01  7.36858169e-01  7.39418927e-01  7.42767131e-01
  7.46666743e-01  7.50446408e-01  7.51568282e-01  7.52998870e-01
  7.57819859e-01  7.59541170e-01  7.63462266e-01  7.64095971e-01
  7.67560206e-01  7.69914833e-01  7.73722090e-01  7.75590974e-01
  7.82700455e-01  7.86418647e-01  7.88684511e-01  7.91062440e-01
  7.94164787e-01  7.98105973e-01  8.00323107e-01  8.02429225e-01
  8.03876200e-01  8.06747598e-01  8.10111287e-01  8.13275441e-01
  8.15417887e-01  8.19784454e-01  8.23023388e-01  8.25841216e-01
  8.28596252e-01  8.30299477e-01  8.33047872e-01  8.36801441e-01
  8.37221372e-01  8.40963781e-01  8.43392449e-01  8.48302415e-01
  8.49914734e-01  8.52398490e-01  8.57391594e-01  8.59796594e-01
  8.63375495e-01  8.68143372e-01  8.72847344e-01  8.74430190e-01
  8.77952722e-01  8.84430422e-01  8.87496137e-01  8.92357965e-01
  8.94309895e-01  8.99884649e-01  9.02290448e-01  9.03837858e-01
  9.07953622e-01  9.12366205e-01  9.15558929e-01  9.17565969e-01
  9.24362396e-01  9.27676619e-01  9.30426177e-01  9.34403288e-01
  9.36096245e-01  9.40980009e-01  9.48681557e-01  9.52558907e-01
  9.60654769e-01  9.62865851e-01  9.64001140e-01  9.67866947e-01
  9.72691631e-01  9.77062799e-01  9.78567019e-01  9.80659742e-01
  9.84505384e-01  9.89348326e-01  9.89695343e-01  9.93580385e-01
  9.95034129e-01  1.00071012e+00  1.00297245e+00  1.00703883e+00
  1.00934328e+00  1.01385945e+00  1.01513911e+00  1.01645180e+00
  1.01930630e+00  1.02731644e+00  1.03307095e+00  1.03514549e+00
  1.03629900e+00  1.03870671e+00  1.04239853e+00  1.04616609e+00
  1.04875110e+00  1.05319411e+00  1.05445780e+00  1.06092866e+00
  1.06600139e+00  1.07140920e+00  1.07278560e+00  1.07781258e+00
  1.07856977e+00  1.08085356e+00  1.08301368e+00  1.08316676e+00
  1.08919619e+00  1.09410771e+00  1.09902744e+00  1.10703412e+00
  1.11037999e+00  1.11213616e+00  1.11612313e+00  1.11688603e+00
  1.12430617e+00  1.12624341e+00  1.12745893e+00  1.13286795e+00
  1.13746060e+00  1.14086272e+00  1.14262044e+00  1.14406030e+00
  1.14595257e+00  1.14947579e+00  1.15595226e+00  1.15886113e+00
  1.16111117e+00  1.16641307e+00  1.16710808e+00  1.17407091e+00
  1.17787900e+00  1.17989289e+00  1.18579977e+00  1.18699942e+00
  1.19136642e+00  1.19337125e+00  1.19467518e+00  1.19742676e+00
  1.19985384e+00  1.20432663e+00  1.20660952e+00  1.21208733e+00
  1.21880857e+00  1.22187516e+00  1.22359924e+00  1.22999058e+00
  1.23190525e+00  1.23433038e+00  1.23679945e+00  1.24271446e+00
  1.24770588e+00  1.24983437e+00  1.25340292e+00  1.25972301e+00
  1.26351615e+00  1.27065855e+00  1.27215734e+00  1.27907726e+00
  1.28245072e+00  1.28550400e+00  1.28652074e+00  1.29339171e+00
  1.29586588e+00  1.29894764e+00  1.30539743e+00  1.30738661e+00
  1.30912197e+00  1.31341588e+00  1.32051752e+00  1.32293747e+00
  1.32522039e+00  1.32968299e+00  1.33076326e+00  1.33338593e+00
  1.33744847e+00  1.34134185e+00  1.34596551e+00  1.34904634e+00
  1.35225295e+00  1.35525519e+00  1.36079143e+00  1.36475315e+00
  1.36712627e+00  1.37176878e+00  1.37294297e+00  1.37537609e+00
  1.37997278e+00  1.38218362e+00  1.38780082e+00  1.39022442e+00
  1.39348844e+00  1.39875669e+00  1.40658044e+00  1.40770802e+00
  1.40983246e+00  1.41483878e+00  1.41739296e+00  1.41896564e+00
  1.42641773e+00  1.42995064e+00  1.43399490e+00  1.43957636e+00
  1.44319942e+00  1.44588697e+00  1.45587320e+00  1.45633276e+00
  1.46149484e+00  1.46600234e+00  1.46841090e+00  1.47507420e+00
  1.47721155e+00  1.47773220e+00  1.48137477e+00  1.48430257e+00
  1.48540499e+00  1.49262164e+00  1.49862974e+00  1.50084030e+00
  1.50394678e+00  1.51333882e+00  1.52085226e+00  1.53096984e+00
  1.53598003e+00  1.54080195e+00  1.54556463e+00  1.54590023e+00
  1.55079255e+00  1.55225285e+00  1.55727369e+00  1.56062008e+00
  1.56329751e+00  1.57048607e+00  1.57583671e+00  1.58235775e+00
  1.58603080e+00  1.59170950e+00  1.59807696e+00  1.60285675e+00
  1.60719912e+00  1.61368671e+00  1.61532388e+00  1.61928530e+00
  1.61955880e+00  1.62716048e+00  1.62901798e+00  1.63249056e+00
  1.63408356e+00  1.63817028e+00  1.64004627e+00  1.64143685e+00
  1.64294740e+00  1.64469314e+00  1.64603241e+00  1.64667260e+00
  1.65070362e+00  1.65227708e+00  1.65256815e+00  1.65499126e+00
  1.65594662e+00  1.65846203e+00  1.66099071e+00  1.66233265e+00
  1.66435469e+00  1.66705327e+00  1.67108339e+00  1.67169463e+00
  1.67358843e+00  1.67515536e+00  1.67770709e+00  1.68122943e+00
  1.68433584e+00  1.68636298e+00  1.68810845e+00  1.69185428e+00
  1.69647558e+00  1.69913690e+00  1.70013662e+00  1.70364393e+00
  1.70798040e+00  1.71274281e+00  1.71416781e+00  1.71476044e+00
  1.71559087e+00  1.71676030e+00  1.71716028e+00  1.72124624e+00
  1.72418653e+00  1.72628635e+00  1.72837376e+00  1.72982029e+00
  1.73021179e+00  1.73389789e+00  1.73616701e+00  1.73854307e+00
  1.73914393e+00  1.74366059e+00  1.74798378e+00  1.75147257e+00
  1.75602873e+00  1.75701061e+00  1.75973773e+00  1.76489940e+00
  1.76654501e+00  1.76927736e+00  1.77146292e+00  1.77417255e+00
  1.77682261e+00  1.78041096e+00  1.78136551e+00  1.79001747e+00
  1.79048551e+00  1.79770634e+00  1.79897253e+00  1.80221566e+00
  1.81137219e+00  1.81178586e+00  1.81509959e+00  1.81930863e+00
  1.82732168e+00  1.82826190e+00  1.82977887e+00  1.83352974e+00
  1.84318746e+00  1.84376176e+00  1.84993586e+00  1.85479996e+00
  1.85943753e+00  1.85968654e+00  1.86889892e+00  1.87147618e+00
  1.87699680e+00  1.88178911e+00  1.88645224e+00  1.89040711e+00
  1.89604833e+00  1.89861899e+00  1.90216829e+00  1.90542805e+00
  1.91132699e+00  1.91402899e+00  1.91958287e+00  1.92533499e+00
  1.92908191e+00  1.93076631e+00  1.93607251e+00  1.94056186e+00
  1.94260116e+00  1.95054399e+00  1.95159347e+00  1.95580978e+00
  1.96623960e+00  1.96945693e+00  1.98035417e+00  1.98180833e+00
  1.98250644e+00  1.98779005e+00  1.98991925e+00  1.99158063e+00
  1.99655236e+00  1.99734039e+00  2.00643432e+00  2.00675552e+00
  2.01254945e+00  2.01604111e+00  2.02136574e+00  2.02412193e+00
  2.02672933e+00  2.03561391e+00  2.03644727e+00  2.04105117e+00
  2.04796363e+00  2.05664571e+00  2.05789260e+00  2.06583787e+00
  2.06696028e+00  2.06878392e+00  2.07318067e+00  2.07649678e+00
  2.08341893e+00  2.08689409e+00  2.08805430e+00  2.09273786e+00
  2.09972472e+00  2.10522664e+00  2.10789768e+00  2.11294066e+00
  2.11537032e+00  2.11818654e+00  2.12118809e+00  2.12390657e+00
  2.12426450e+00  2.12914889e+00  2.13219721e+00  2.13505017e+00
  2.14697602e+00  2.14928926e+00  2.14996795e+00  2.15049306e+00
  2.15447910e+00  2.15938579e+00  2.16619174e+00  2.17033894e+00
  2.17285971e+00  2.17590139e+00  2.17852619e+00  2.18276275e+00
  2.18609785e+00  2.18767334e+00  2.18907407e+00  2.19087435e+00
  2.20091851e+00  2.20546118e+00  2.20876065e+00  2.21295626e+00
  2.22178862e+00  2.22288473e+00  2.22954600e+00  2.23191005e+00
  2.23862647e+00  2.24113444e+00  2.24359719e+00  2.25443973e+00
  2.25812647e+00  2.25901916e+00  2.26115488e+00  2.26652091e+00
  2.27044264e+00  2.27293840e+00  2.27569173e+00  2.28031084e+00
  2.28282082e+00  2.28772221e+00  2.28959989e+00  2.29223724e+00
  2.29439160e+00  2.29973213e+00  2.30266623e+00  2.30948822e+00
  2.31948764e+00  2.32728439e+00  2.32995873e+00  2.33650634e+00
  2.34229598e+00  2.34428274e+00  2.35201673e+00  2.35403244e+00
  2.35631275e+00  2.36308432e+00  2.36680275e+00  2.36949481e+00
  2.37914283e+00  2.38297036e+00  2.38463892e+00  2.38853649e+00
  2.39234428e+00  2.39566885e+00  2.39640084e+00  2.40181032e+00
  2.40448604e+00  2.40573142e+00  2.41381186e+00  2.42002211e+00
  2.42034135e+00  2.42222268e+00  2.42542460e+00  2.42787867e+00
  2.43145287e+00  2.43529455e+00  2.43696671e+00  2.43978558e+00
  2.44295610e+00  2.44956083e+00  2.45984041e+00  2.46152081e+00
  2.46560789e+00  2.47013321e+00  2.47437286e+00  2.47726279e+00
  2.47905944e+00  2.48196110e+00  2.48483710e+00  2.48719980e+00
  2.49023070e+00  2.49370999e+00  2.49679859e+00  2.50094721e+00
  2.50388958e+00  2.50614266e+00  2.50671895e+00  2.51448414e+00
  2.52007906e+00  2.52200910e+00  2.52397857e+00  2.52769690e+00
  2.52873087e+00  2.53250606e+00  2.53505563e+00  2.53802692e+00
  2.54506958e+00  2.54916738e+00  2.55357431e+00  2.55667498e+00
  2.56201571e+00  2.56438726e+00  2.56780854e+00  2.57284375e+00
  2.57399384e+00  2.58521022e+00  2.58777510e+00  2.59223167e+00
  2.59913506e+00  2.60188527e+00  2.60581356e+00  2.60602484e+00
  2.61367284e+00  2.61881002e+00  2.62190580e+00  2.62327101e+00
  2.62383839e+00  2.62570332e+00  2.62694666e+00  2.62859949e+00
  2.63039959e+00  2.63342602e+00  2.63407493e+00  2.63769193e+00
  2.63898176e+00  2.64259092e+00  2.64439007e+00  2.64843975e+00
  2.65626816e+00  2.65825452e+00  2.66138170e+00  2.66244034e+00
  2.66510160e+00  2.66823451e+00  2.67085811e+00  2.67274712e+00
  2.67664278e+00  2.68135428e+00  2.68299690e+00  2.68652736e+00
  2.68753236e+00  2.69023436e+00  2.69334363e+00  2.69442941e+00
  2.70008691e+00  2.70226815e+00  2.70555480e+00  2.70668563e+00
  2.70891561e+00  2.71084367e+00  2.71426131e+00  2.71514408e+00
  2.71928950e+00  2.72270198e+00  2.72693563e+00  2.72975204e+00
  2.73352714e+00  2.73390779e+00  2.74018000e+00  2.74194952e+00
  2.74330072e+00  2.74929870e+00  2.75504581e+00  2.75808807e+00
  2.76223263e+00  2.76536125e+00  2.77221387e+00  2.77547547e+00
  2.78051744e+00  2.78260193e+00  2.78767552e+00  2.79122949e+00
  2.79673651e+00  2.80123114e+00  2.80342864e+00  2.80358244e+00
  2.80703317e+00  2.81203453e+00  2.81817838e+00  2.81935828e+00
  2.82302396e+00  2.82498522e+00  2.82902169e+00  2.83150598e+00
  2.83257530e+00  2.83929109e+00  2.84357484e+00  2.84420533e+00
  2.84851101e+00  2.85111164e+00  2.85236481e+00  2.86425018e+00
  2.86577483e+00  2.86745142e+00  2.86880946e+00  2.87011080e+00
  2.87238029e+00  2.87414210e+00  2.87902566e+00  2.88123082e+00
  2.88313024e+00  2.88661035e+00  2.89103142e+00  2.89481976e+00
  2.89637559e+00  2.89851367e+00  2.90189628e+00  2.90600446e+00
  2.91183380e+00  2.91564970e+00  2.91625956e+00  2.92263465e+00
  2.92331606e+00  2.92767732e+00  2.93386673e+00  2.93769133e+00
  2.94180780e+00  2.94683396e+00  2.94856142e+00  2.95263234e+00
  2.95328242e+00  2.95466023e+00  2.95549838e+00  2.95711783e+00
  2.96310218e+00  2.96607586e+00  2.97030182e+00  2.97670560e+00
  2.97710513e+00  2.97814087e+00  2.98391713e+00  2.98617390e+00
  2.99269802e+00  2.99549459e+00  3.00299491e+00  3.00400798e+00
  3.00630584e+00  3.00782755e+00  3.01331169e+00  3.01497652e+00
  3.01868083e+00  3.01911228e+00  3.02299639e+00  3.02425167e+00
  3.02634385e+00  3.02971272e+00  3.03676278e+00  3.04359690e+00
  3.04456737e+00  3.04755988e+00  3.04907436e+00  3.05230427e+00
  3.05933911e+00  3.06512123e+00  3.07108225e+00  3.07617598e+00
  3.08296966e+00  3.08703885e+00  3.09018288e+00  3.09116023e+00
  3.09790049e+00  3.09896790e+00  3.10310592e+00  3.10466020e+00
  3.10804148e+00  3.11338379e+00  3.11683293e+00  3.12217760e+00
  3.12654072e+00  3.13224026e+00  3.13396933e+00  3.13720847e+00
  3.14037647e+00  3.14568997e+00  3.14766844e+00  3.14907348e+00
  3.15629996e+00  3.16077731e+00  3.16362850e+00  3.16597087e+00
  3.16960422e+00  3.17353389e+00  3.17855254e+00  3.17888481e+00
  3.18057477e+00  3.18414742e+00  3.18621248e+00  3.19116989e+00
  3.19265917e+00  3.19594216e+00  3.19774858e+00  3.20377306e+00
  3.20587191e+00  3.20881972e+00  3.21382182e+00  3.21426377e+00
  3.21792501e+00  3.22220159e+00  3.22496928e+00  3.22830269e+00
  3.22927210e+00  3.23253477e+00  3.23499282e+00  3.23722108e+00
  3.24184658e+00  3.24231024e+00  3.24574112e+00  3.24939245e+00
  3.25077161e+00  3.25312423e+00  3.25720095e+00  3.25802042e+00
  3.25948570e+00  3.26478862e+00  3.26700477e+00  3.26825440e+00
  3.27140878e+00  3.27289598e+00  3.27432758e+00  3.27568147e+00
  3.27876160e+00  3.28178920e+00  3.28752534e+00  3.28946823e+00
  3.29011406e+00  3.29275398e+00  3.29536783e+00  3.29943378e+00
  3.30524152e+00  3.30691003e+00  3.31001210e+00  3.31277211e+00
  3.31665218e+00  3.31862156e+00  3.32054658e+00  3.32467118e+00
  3.32649016e+00  3.33051635e+00  3.33265950e+00  3.33741055e+00
  3.34100671e+00  3.34241996e+00  3.34495173e+00  3.34954943e+00
  3.35085873e+00  3.35436680e+00  3.35792840e+00  3.36128870e+00
  3.36424762e+00  3.36548981e+00  3.36633631e+00  3.36834160e+00
  3.37094972e+00  3.37628747e+00  3.38041578e+00  3.38281451e+00
  3.38529412e+00  3.38882730e+00  3.38947212e+00  3.39366625e+00
  3.39542271e+00  3.39604260e+00  3.40137674e+00  3.40611352e+00
  3.40763268e+00  3.41150861e+00  3.41385763e+00  3.41902003e+00
  3.42086532e+00  3.42486736e+00  3.42725168e+00  3.42993057e+00
  3.43423077e+00  3.43541802e+00  3.43678200e+00  3.43838150e+00
  3.44310490e+00  3.44660791e+00  3.44762131e+00  3.44864349e+00
  3.45313807e+00  3.45614098e+00  3.45980397e+00  3.46123977e+00
  3.46490997e+00  3.46657223e+00  3.46696042e+00  3.46928614e+00
  3.47230273e+00  3.47637785e+00  3.47762337e+00  3.48388179e+00
  3.48821132e+00  3.49009182e+00  3.49253632e+00  3.49494827e+00
  3.49812246e+00  3.50045373e+00  3.50176548e+00  3.50277196e+00
  3.50534365e+00  3.51251599e+00  3.51463895e+00  3.51619473e+00
  3.52406944e+00  3.52480068e+00  3.53064042e+00  3.53514939e+00
  3.53774320e+00  3.53895962e+00  3.54116418e+00  3.54452759e+00
  3.54916712e+00  3.55178912e+00  3.55682606e+00  3.55926526e+00
  3.56171174e+00  3.56863943e+00  3.57346814e+00  3.57826766e+00
  3.58069242e+00  3.58660126e+00  3.58794065e+00  3.58980164e+00
  3.59573972e+00  3.60178014e+00  3.60398329e+00  3.60637957e+00
  3.60840929e+00  3.61248589e+00  3.61503020e+00  3.61760917e+00
  3.62177438e+00  3.62515056e+00  3.62606664e+00  3.62837473e+00
  3.62960677e+00  3.63649783e+00  3.64178940e+00  3.64484961e+00
  3.64639875e+00  3.65166882e+00  3.65458676e+00  3.65708126e+00
  3.66168294e+00  3.66875200e+00  3.67072726e+00  3.67492045e+00
  3.67616347e+00  3.67855414e+00  3.68492295e+00  3.68781957e+00
  3.69085376e+00  3.69156877e+00  3.69563980e+00  3.70242469e+00
  3.70655770e+00  3.70776125e+00  3.71206783e+00  3.71685575e+00
  3.71895537e+00  3.72242679e+00  3.72551420e+00  3.73128538e+00
  3.73158272e+00  3.73869262e+00  3.74421079e+00  3.74684507e+00
  3.74821459e+00  3.75613185e+00  3.76269541e+00  3.76328977e+00
  3.77032702e+00  3.77490913e+00  3.77645900e+00  3.78113197e+00
  3.79239876e+00  3.79929540e+00  3.80113197e+00  3.80948879e+00
  3.81278835e+00  3.81446468e+00  3.81566472e+00  3.81859989e+00
  3.82454524e+00  3.82726674e+00  3.83465015e+00  3.84488929e+00
  3.84656049e+00  3.85306187e+00  3.85461930e+00  3.86596941e+00
  3.86807325e+00  3.87051966e+00  3.87345204e+00  3.87593515e+00
  3.88291952e+00  3.88425489e+00  3.89162644e+00  3.90228369e+00
  3.90262749e+00  3.90945512e+00  3.92021076e+00  3.92496803e+00
  3.92787261e+00  3.93006480e+00  3.93212468e+00  3.94556362e+00
  3.94861809e+00  3.95002217e+00  3.95742840e+00  3.96316363e+00
  3.97285639e+00  3.98114497e+00  3.98486124e+00  3.98842610e+00
  3.98982926e+00  3.99702458e+00  3.99847419e+00  4.01025819e+00
  4.01557140e+00  4.01850927e+00  4.02288091e+00  4.03199182e+00
  4.03517250e+00  4.04171764e+00  4.04423086e+00  4.04957411e+00
  4.05667656e+00  4.05835026e+00  4.06473576e+00  4.07014938e+00
  4.07023279e+00  4.07436080e+00  4.08034360e+00  4.08157465e+00
  4.09163041e+00  4.09740998e+00  4.10043446e+00  4.10554671e+00
  4.10829750e+00  4.11374750e+00  4.11918498e+00  4.12556227e+00
  4.12837311e+00  4.14243230e+00  4.14285626e+00  4.14508652e+00
  4.15435347e+00  4.15698574e+00  4.16351522e+00  4.17778587e+00
  4.18154783e+00  4.18686288e+00  4.18945679e+00  4.19706241e+00
  4.19900372e+00  4.21117959e+00  4.21372296e+00  4.22896245e+00
  4.23186972e+00  4.23602859e+00  4.24089947e+00  4.24272519e+00
  4.24546110e+00  4.25575646e+00  4.26637009e+00  4.27108865e+00
  4.28016628e+00  4.28482895e+00  4.30154425e+00  4.30734062e+00
  4.31517139e+00  4.31827556e+00  4.32313530e+00  4.33359576e+00
  4.33842657e+00  4.34313386e+00  4.34495731e+00  4.34736031e+00
  4.35476376e+00  4.35660216e+00  4.35756395e+00  4.36389677e+00
  4.37391671e+00  4.37794944e+00  4.37972738e+00  4.38779318e+00
  4.39342000e+00  4.39710154e+00  4.39956436e+00  4.40345396e+00
  4.40710734e+00  4.41223233e+00  4.41602044e+00  4.42232547e+00
  4.42659762e+00  4.43560266e+00  4.44027335e+00  4.44411706e+00
  4.44689066e+00  4.45840368e+00  4.46892173e+00  4.47223033e+00
  4.47688349e+00  4.48397012e+00  4.49028942e+00  4.49327880e+00
  4.49971864e+00  4.50814753e+00  4.51016681e+00  4.51234021e+00
  4.51564749e+00  4.51808467e+00  4.52348589e+00  4.52757380e+00
  4.53976080e+00  4.54226777e+00  4.54727843e+00  4.55454992e+00
  4.55872942e+00  4.56151970e+00  4.57157829e+00  4.57504973e+00
  4.57687595e+00  4.58033419e+00  4.58577511e+00  4.58705070e+00
  4.59181693e+00  4.60024628e+00  4.61623549e+00  4.61729570e+00
  4.62586213e+00  4.63473701e+00  4.63567186e+00  4.64005446e+00
  4.64720609e+00  4.65920562e+00  4.67248787e+00  4.68762553e+00
  4.68913531e+00  4.69562110e+00  4.70422236e+00  4.71326940e+00
  4.71811365e+00  4.72500692e+00  4.73574451e+00  4.73770224e+00
  4.74182607e+00  4.75194107e+00  4.75655579e+00  4.75952700e+00
  4.76705573e+00  4.78108428e+00  4.79535448e+00  4.79612655e+00
  4.79805603e+00  4.80479467e+00  4.81383114e+00  4.83204099e+00
  4.83896826e+00  4.84007276e+00  4.85203265e+00  4.87467789e+00
  4.87969139e+00  4.88843465e+00  4.90181678e+00  4.91240852e+00
  4.92003015e+00  4.93453979e+00  4.94555474e+00  4.95034793e+00
  4.96467121e+00  4.97237864e+00  4.98726656e+00  4.99578113e+00
  5.00264308e+00  5.00984263e+00  5.01682071e+00  5.02191595e+00
  5.03297978e+00  5.05390728e+00  5.06221209e+00  5.06874350e+00
  5.07704867e+00  5.09570653e+00  5.10267770e+00  5.12980146e+00
  5.13289824e+00  5.14758504e+00  5.16512539e+00  5.18202416e+00
  5.20154257e+00  5.20559531e+00  5.21526213e+00  5.22961893e+00
  5.23693223e+00  5.23889908e+00  5.26975805e+00  5.27412046e+00
  5.28212670e+00  5.28893461e+00  5.30648770e+00  5.32140198e+00
  5.32646070e+00  5.34173932e+00  5.37073104e+00  5.37661629e+00
  5.40598371e+00  5.41831803e+00  5.42117533e+00  5.44792712e+00
  5.45014251e+00  5.48034029e+00  5.48704377e+00  5.52988128e+00
  5.53355144e+00  5.57690399e+00  5.61453779e+00  5.62340781e+00
  5.65970492e+00  5.67984263e+00  5.72327594e+00  5.74218736e+00
  5.75767602e+00  5.87245576e+00  5.88155765e+00  6.02599383e+00
  6.38419472e+00  6.61576383e+00  6.86189759e+00  6.95851597e+00
  7.12398579e+00  7.28190521e+00  2.23452700e+01  2.23966360e+01
  2.24046477e+01  2.24209404e+01  2.24417658e+01  2.24490488e+01
  2.24568611e+01  2.24655426e+01  2.24692610e+01  2.24826088e+01
  2.24961681e+01  2.25257655e+01  2.25472651e+01  2.25677179e+01
  2.25772763e+01  2.25905413e+01  2.26029704e+01  2.26162033e+01
  2.26368649e+01  2.26532657e+01  2.26634140e+01  2.26655508e+01
  2.26714545e+01  2.27012635e+01  2.27169793e+01  2.27493151e+01
  2.27595387e+01  2.27695745e+01  2.27967044e+01  2.28081872e+01
  2.28332488e+01  2.28549033e+01  2.29001903e+01  2.29111495e+01
  2.30501326e+01  2.30827904e+01  2.31239731e+01  2.31585677e+01
  2.31758632e+01  2.33100210e+01  4.41180244e+01]
nelec by numeric integration = 306.0001373994512
    CPU time for vxc    637.62 sec, wall time     46.33 sec
    CPU time for df vj and vk   4614.59 sec, wall time    355.64 sec
    CPU time for df vj and vk   3982.78 sec, wall time    311.44 sec
E1 = -9514.108550237954  Ecoul = 4451.179050781337  Exc = -246.86700618261554
cycle= 2 E= -1634.42587175346  delta_E= 1e-11  |g|= 3.09e-06  |ddm|= 8.49e-06
    CPU time for cycle= 2   9270.18 sec, wall time    718.11 sec
  HOMO = -0.230709351493909  LUMO = -0.0377018814219672
  mo_energy =
[-1.91917503e+01 -1.03188922e+01 -1.02765008e+01 -1.02762830e+01
 -1.02758980e+01 -1.02734244e+01 -1.02713346e+01 -1.02711730e+01
 -1.02667089e+01 -1.02663594e+01 -1.02655189e+01 -1.02645251e+01
 -1.02636906e+01 -1.02634529e+01 -1.02633350e+01 -1.02629500e+01
 -1.02624445e+01 -1.02614399e+01 -1.02602248e+01 -1.02595250e+01
 -1.02588029e+01 -1.02577456e+01 -1.02566870e+01 -1.02566218e+01
 -1.02565348e+01 -1.02565264e+01 -1.02563778e+01 -1.02562103e+01
 -1.02550963e+01 -1.02543700e+01 -1.02538746e+01 -1.02534144e+01
 -1.02527300e+01 -1.02521677e+01 -1.02510198e+01 -1.02507113e+01
 -1.02496799e+01 -1.02479624e+01 -1.02461266e+01 -1.02448318e+01
 -1.02408325e+01 -1.14616528e+00 -9.83888708e-01 -9.72180673e-01
 -9.68183589e-01 -9.61363906e-01 -9.54231920e-01 -9.49104078e-01
 -9.29972968e-01 -9.21856696e-01 -9.16391922e-01 -9.07315191e-01
 -8.98711295e-01 -8.83670847e-01 -8.75388117e-01 -8.59977520e-01
 -8.48790522e-01 -8.34106522e-01 -8.20812902e-01 -8.17180871e-01
 -8.15897676e-01 -8.13864334e-01 -8.07428078e-01 -8.05958997e-01
 -8.02294654e-01 -7.96720848e-01 -7.83988768e-01 -7.58231448e-01
 -7.42499509e-01 -7.25456326e-01 -7.14451899e-01 -6.93129025e-01
 -6.82983437e-01 -6.82394289e-01 -6.78192798e-01 -6.64844256e-01
 -6.53925961e-01 -6.48584654e-01 -6.46109809e-01 -6.36105741e-01
 -6.25326770e-01 -6.11884111e-01 -6.07867528e-01 -6.03717055e-01
 -5.95387731e-01 -5.87981429e-01 -5.82657334e-01 -5.79945074e-01
 -5.73043652e-01 -5.71691259e-01 -5.63252387e-01 -5.57665286e-01
 -5.56033482e-01 -5.50628167e-01 -5.48384564e-01 -5.39528353e-01
 -5.35346753e-01 -5.31553467e-01 -5.31176016e-01 -5.30637553e-01
 -5.29227589e-01 -5.28322612e-01 -5.26883925e-01 -5.26455666e-01
 -5.24315651e-01 -5.21122424e-01 -5.18374331e-01 -5.05658373e-01
 -5.02824770e-01 -5.02284413e-01 -5.00159037e-01 -4.96987958e-01
 -4.92767370e-01 -4.91033670e-01 -4.84621334e-01 -4.83516801e-01
 -4.82569196e-01 -4.77733981e-01 -4.76135432e-01 -4.73114168e-01
 -4.69990675e-01 -4.69702403e-01 -4.66222715e-01 -4.64623688e-01
 -4.61912650e-01 -4.58564661e-01 -4.53520839e-01 -4.52448193e-01
 -4.51009377e-01 -4.50140944e-01 -4.47708649e-01 -4.45116703e-01
 -4.42563717e-01 -4.41841612e-01 -4.40627442e-01 -4.38156018e-01
 -4.37791462e-01 -4.33627789e-01 -4.31160446e-01 -4.22542361e-01
 -4.20376215e-01 -4.16973021e-01 -4.10529946e-01 -4.08220610e-01
 -3.97267164e-01 -3.90211798e-01 -3.79136345e-01 -3.75895894e-01
 -3.49688062e-01 -3.26256752e-01 -2.98423773e-01 -2.67340797e-01
 -2.30709351e-01 -3.77018814e-02  7.57175546e-03  4.65529133e-02
  8.07448736e-02  9.75689129e-02  1.04059700e-01  1.08668398e-01
  1.12146940e-01  1.15772777e-01  1.21110778e-01  1.24086840e-01
  1.26959253e-01  1.28726778e-01  1.31344489e-01  1.35614896e-01
  1.38068254e-01  1.39794226e-01  1.42909433e-01  1.43790133e-01
  1.45718062e-01  1.47226313e-01  1.50794753e-01  1.52822814e-01
  1.56049230e-01  1.56625434e-01  1.58152035e-01  1.58737262e-01
  1.64363778e-01  1.65980078e-01  1.67041646e-01  1.69324731e-01
  1.70032914e-01  1.72975290e-01  1.75099459e-01  1.79050513e-01
  1.80491972e-01  1.82851253e-01  1.84466258e-01  1.88055661e-01
  1.92775110e-01  1.96319358e-01  1.97904160e-01  1.99633097e-01
  1.99703545e-01  2.02949939e-01  2.05254834e-01  2.06313319e-01
  2.07686934e-01  2.10472601e-01  2.11648747e-01  2.14789393e-01
  2.16112197e-01  2.16903335e-01  2.18104112e-01  2.21074372e-01
  2.23901553e-01  2.25075726e-01  2.26423970e-01  2.27868517e-01
  2.30374574e-01  2.32697286e-01  2.33794121e-01  2.35985121e-01
  2.39002905e-01  2.39273072e-01  2.40332132e-01  2.44572404e-01
  2.46174206e-01  2.49036380e-01  2.52341664e-01  2.53568257e-01
  2.54948080e-01  2.56030961e-01  2.57616522e-01  2.59388630e-01
  2.63928735e-01  2.65264240e-01  2.67126178e-01  2.67920505e-01
  2.68814422e-01  2.69739658e-01  2.72095893e-01  2.74869206e-01
  2.77693125e-01  2.79224766e-01  2.82975519e-01  2.85820172e-01
  2.89617844e-01  2.90593697e-01  2.90753206e-01  2.94866599e-01
  2.96088470e-01  2.97783615e-01  2.98306952e-01  3.02357597e-01
  3.03205860e-01  3.05643085e-01  3.10294640e-01  3.15187660e-01
  3.17914222e-01  3.20184952e-01  3.20945743e-01  3.24168061e-01
  3.24705223e-01  3.25102070e-01  3.27161426e-01  3.33061545e-01
  3.36940329e-01  3.39986433e-01  3.41394338e-01  3.42433305e-01
  3.45610744e-01  3.47091457e-01  3.49586935e-01  3.52014932e-01
  3.54646575e-01  3.56692559e-01  3.59237925e-01  3.61917454e-01
  3.63847795e-01  3.65618199e-01  3.66709923e-01  3.70008349e-01
  3.72551842e-01  3.74381256e-01  3.75872618e-01  3.79413770e-01
  3.81430996e-01  3.84431449e-01  3.90296635e-01  3.91663018e-01
  3.93187214e-01  3.94649379e-01  3.97963856e-01  4.02793007e-01
  4.04196069e-01  4.08775130e-01  4.09007843e-01  4.12441067e-01
  4.14745415e-01  4.15897656e-01  4.16630042e-01  4.20879881e-01
  4.22062803e-01  4.22904544e-01  4.24945407e-01  4.26258102e-01
  4.29497620e-01  4.30573769e-01  4.32317942e-01  4.33963434e-01
  4.35576194e-01  4.39131743e-01  4.41797646e-01  4.45284486e-01
  4.49261052e-01  4.50104282e-01  4.52176818e-01  4.54147923e-01
  4.54664276e-01  4.56986439e-01  4.59146558e-01  4.60157705e-01
  4.62824186e-01  4.64687519e-01  4.69070957e-01  4.69508966e-01
  4.72502655e-01  4.76157371e-01  4.78245997e-01  4.78859334e-01
  4.80546112e-01  4.83368324e-01  4.84591787e-01  4.86505393e-01
  4.88281047e-01  4.90878983e-01  4.93175223e-01  4.93730790e-01
  4.96280092e-01  4.98241733e-01  4.99595107e-01  5.01247010e-01
  5.03612860e-01  5.04568633e-01  5.07696327e-01  5.08906202e-01
  5.13393406e-01  5.14221108e-01  5.15119015e-01  5.15435323e-01
  5.17533749e-01  5.18876844e-01  5.21323499e-01  5.23618975e-01
  5.24446409e-01  5.24961970e-01  5.27168835e-01  5.29144763e-01
  5.29950765e-01  5.33018121e-01  5.35117287e-01  5.35228156e-01
  5.36783383e-01  5.37535784e-01  5.39708313e-01  5.40945306e-01
  5.41457775e-01  5.41632345e-01  5.47250361e-01  5.50437941e-01
  5.50893783e-01  5.53508952e-01  5.54244147e-01  5.54756817e-01
  5.58631426e-01  5.61755874e-01  5.63405197e-01  5.64467707e-01
  5.67277094e-01  5.68842562e-01  5.69919909e-01  5.71393139e-01
  5.72240562e-01  5.73762929e-01  5.76042871e-01  5.76680524e-01
  5.79300805e-01  5.81753356e-01  5.82476346e-01  5.83520186e-01
  5.84816021e-01  5.85783989e-01  5.86733488e-01  5.89160863e-01
  5.94168077e-01  5.97600335e-01  5.98921755e-01  6.01154128e-01
  6.02722345e-01  6.04468066e-01  6.06003638e-01  6.12344919e-01
  6.14463456e-01  6.15785014e-01  6.17353672e-01  6.19171845e-01
  6.23164501e-01  6.26180919e-01  6.27072961e-01  6.31576818e-01
  6.36929377e-01  6.37607771e-01  6.38074296e-01  6.39619831e-01
  6.48916899e-01  6.52663029e-01  6.53343369e-01  6.57906192e-01
  6.59610735e-01  6.63736577e-01  6.66404563e-01  6.70242487e-01
  6.72404533e-01  6.74484438e-01  6.77301317e-01  6.79478096e-01
  6.82486927e-01  6.83677774e-01  6.85063462e-01  6.86408393e-01
  6.90689206e-01  6.94810029e-01  6.95726658e-01  6.99071072e-01
  7.04669164e-01  7.06586660e-01  7.08828376e-01  7.11550451e-01
  7.12839864e-01  7.18515874e-01  7.21462377e-01  7.24834035e-01
  7.25002082e-01  7.28247401e-01  7.29862312e-01  7.32379259e-01
  7.35148999e-01  7.36858210e-01  7.39419001e-01  7.42767127e-01
  7.46666775e-01  7.50446405e-01  7.51568284e-01  7.52998890e-01
  7.57819878e-01  7.59541186e-01  7.63462269e-01  7.64095990e-01
  7.67560242e-01  7.69914882e-01  7.73722102e-01  7.75591011e-01
  7.82700505e-01  7.86418699e-01  7.88684591e-01  7.91062454e-01
  7.94164818e-01  7.98105953e-01  8.00323126e-01  8.02429255e-01
  8.03876247e-01  8.06747639e-01  8.10111324e-01  8.13275447e-01
  8.15417900e-01  8.19784478e-01  8.23023456e-01  8.25841238e-01
  8.28596308e-01  8.30299486e-01  8.33047912e-01  8.36801460e-01
  8.37221416e-01  8.40963805e-01  8.43392459e-01  8.48302455e-01
  8.49914730e-01  8.52398494e-01  8.57391593e-01  8.59796599e-01
  8.63375488e-01  8.68143370e-01  8.72847340e-01  8.74430250e-01
  8.77952766e-01  8.84430416e-01  8.87496139e-01  8.92358067e-01
  8.94309867e-01  8.99884638e-01  9.02290457e-01  9.03837853e-01
  9.07953730e-01  9.12366266e-01  9.15558906e-01  9.17566000e-01
  9.24362421e-01  9.27676691e-01  9.30426223e-01  9.34403303e-01
  9.36096271e-01  9.40980082e-01  9.48681582e-01  9.52558907e-01
  9.60654755e-01  9.62865853e-01  9.64001142e-01  9.67866978e-01
  9.72691649e-01  9.77062828e-01  9.78567034e-01  9.80659719e-01
  9.84505432e-01  9.89348301e-01  9.89695375e-01  9.93580363e-01
  9.95034173e-01  1.00071015e+00  1.00297245e+00  1.00703888e+00
  1.00934326e+00  1.01385958e+00  1.01513911e+00  1.01645177e+00
  1.01930628e+00  1.02731644e+00  1.03307097e+00  1.03514552e+00
  1.03629902e+00  1.03870671e+00  1.04239857e+00  1.04616614e+00
  1.04875112e+00  1.05319416e+00  1.05445784e+00  1.06092869e+00
  1.06600137e+00  1.07140934e+00  1.07278566e+00  1.07781264e+00
  1.07856979e+00  1.08085361e+00  1.08301366e+00  1.08316677e+00
  1.08919617e+00  1.09410771e+00  1.09902744e+00  1.10703415e+00
  1.11038006e+00  1.11213615e+00  1.11612313e+00  1.11688605e+00
  1.12430616e+00  1.12624345e+00  1.12745897e+00  1.13286796e+00
  1.13746059e+00  1.14086274e+00  1.14262043e+00  1.14406032e+00
  1.14595261e+00  1.14947592e+00  1.15595231e+00  1.15886126e+00
  1.16111121e+00  1.16641312e+00  1.16710806e+00  1.17407094e+00
  1.17787910e+00  1.17989290e+00  1.18579983e+00  1.18699944e+00
  1.19136644e+00  1.19337129e+00  1.19467523e+00  1.19742677e+00
  1.19985383e+00  1.20432661e+00  1.20660951e+00  1.21208734e+00
  1.21880862e+00  1.22187524e+00  1.22359926e+00  1.22999060e+00
  1.23190525e+00  1.23433039e+00  1.23679953e+00  1.24271446e+00
  1.24770590e+00  1.24983445e+00  1.25340292e+00  1.25972304e+00
  1.26351618e+00  1.27065855e+00  1.27215741e+00  1.27907727e+00
  1.28245074e+00  1.28550402e+00  1.28652076e+00  1.29339173e+00
  1.29586594e+00  1.29894765e+00  1.30539748e+00  1.30738666e+00
  1.30912199e+00  1.31341591e+00  1.32051756e+00  1.32293747e+00
  1.32522042e+00  1.32968302e+00  1.33076333e+00  1.33338596e+00
  1.33744855e+00  1.34134185e+00  1.34596553e+00  1.34904638e+00
  1.35225295e+00  1.35525523e+00  1.36079146e+00  1.36475318e+00
  1.36712638e+00  1.37176881e+00  1.37294300e+00  1.37537610e+00
  1.37997279e+00  1.38218368e+00  1.38780078e+00  1.39022443e+00
  1.39348849e+00  1.39875667e+00  1.40658046e+00  1.40770805e+00
  1.40983246e+00  1.41483886e+00  1.41739297e+00  1.41896567e+00
  1.42641775e+00  1.42995066e+00  1.43399500e+00  1.43957634e+00
  1.44319941e+00  1.44588705e+00  1.45587325e+00  1.45633280e+00
  1.46149484e+00  1.46600238e+00  1.46841092e+00  1.47507430e+00
  1.47721160e+00  1.47773227e+00  1.48137479e+00  1.48430259e+00
  1.48540501e+00  1.49262166e+00  1.49862977e+00  1.50084032e+00
  1.50394680e+00  1.51333883e+00  1.52085225e+00  1.53096990e+00
  1.53598006e+00  1.54080199e+00  1.54556465e+00  1.54590023e+00
  1.55079260e+00  1.55225289e+00  1.55727374e+00  1.56062016e+00
  1.56329749e+00  1.57048612e+00  1.57583683e+00  1.58235776e+00
  1.58603080e+00  1.59170948e+00  1.59807698e+00  1.60285675e+00
  1.60719913e+00  1.61368670e+00  1.61532391e+00  1.61928526e+00
  1.61955877e+00  1.62716049e+00  1.62901793e+00  1.63249057e+00
  1.63408354e+00  1.63817029e+00  1.64004622e+00  1.64143685e+00
  1.64294742e+00  1.64469313e+00  1.64603241e+00  1.64667260e+00
  1.65070364e+00  1.65227708e+00  1.65256814e+00  1.65499121e+00
  1.65594667e+00  1.65846202e+00  1.66099071e+00  1.66233269e+00
  1.66435471e+00  1.66705339e+00  1.67108346e+00  1.67169473e+00
  1.67358844e+00  1.67515545e+00  1.67770711e+00  1.68122947e+00
  1.68433586e+00  1.68636300e+00  1.68810850e+00  1.69185437e+00
  1.69647557e+00  1.69913687e+00  1.70013659e+00  1.70364407e+00
  1.70798043e+00  1.71274290e+00  1.71416781e+00  1.71476041e+00
  1.71559091e+00  1.71676029e+00  1.71716028e+00  1.72124624e+00
  1.72418652e+00  1.72628637e+00  1.72837378e+00  1.72982028e+00
  1.73021179e+00  1.73389802e+00  1.73616698e+00  1.73854317e+00
  1.73914393e+00  1.74366063e+00  1.74798382e+00  1.75147253e+00
  1.75602876e+00  1.75701059e+00  1.75973779e+00  1.76489940e+00
  1.76654503e+00  1.76927754e+00  1.77146300e+00  1.77417259e+00
  1.77682264e+00  1.78041094e+00  1.78136569e+00  1.79001747e+00
  1.79048563e+00  1.79770635e+00  1.79897250e+00  1.80221569e+00
  1.81137215e+00  1.81178584e+00  1.81509959e+00  1.81930859e+00
  1.82732168e+00  1.82826190e+00  1.82977890e+00  1.83352972e+00
  1.84318751e+00  1.84376177e+00  1.84993583e+00  1.85479995e+00
  1.85943758e+00  1.85968660e+00  1.86889902e+00  1.87147625e+00
  1.87699692e+00  1.88178916e+00  1.88645230e+00  1.89040712e+00
  1.89604832e+00  1.89861901e+00  1.90216832e+00  1.90542814e+00
  1.91132702e+00  1.91402904e+00  1.91958291e+00  1.92533502e+00
  1.92908194e+00  1.93076634e+00  1.93607256e+00  1.94056188e+00
  1.94260122e+00  1.95054402e+00  1.95159352e+00  1.95580983e+00
  1.96623965e+00  1.96945701e+00  1.98035420e+00  1.98180841e+00
  1.98250652e+00  1.98779008e+00  1.98991928e+00  1.99158063e+00
  1.99655247e+00  1.99734044e+00  2.00643433e+00  2.00675553e+00
  2.01254959e+00  2.01604114e+00  2.02136576e+00  2.02412192e+00
  2.02672933e+00  2.03561406e+00  2.03644727e+00  2.04105139e+00
  2.04796365e+00  2.05664577e+00  2.05789266e+00  2.06583806e+00
  2.06696031e+00  2.06878390e+00  2.07318074e+00  2.07649681e+00
  2.08341894e+00  2.08689414e+00  2.08805430e+00  2.09273784e+00
  2.09972476e+00  2.10522666e+00  2.10789775e+00  2.11294068e+00
  2.11537034e+00  2.11818655e+00  2.12118812e+00  2.12390663e+00
  2.12426457e+00  2.12914895e+00  2.13219720e+00  2.13505013e+00
  2.14697616e+00  2.14928925e+00  2.14996805e+00  2.15049307e+00
  2.15447911e+00  2.15938585e+00  2.16619183e+00  2.17033894e+00
  2.17285964e+00  2.17590136e+00  2.17852621e+00  2.18276274e+00
  2.18609793e+00  2.18767337e+00  2.18907412e+00  2.19087441e+00
  2.20091857e+00  2.20546121e+00  2.20876063e+00  2.21295628e+00
  2.22178867e+00  2.22288478e+00  2.22954601e+00  2.23191006e+00
  2.23862646e+00  2.24113447e+00  2.24359720e+00  2.25443983e+00
  2.25812655e+00  2.25901916e+00  2.26115494e+00  2.26652098e+00
  2.27044266e+00  2.27293850e+00  2.27569177e+00  2.28031080e+00
  2.28282085e+00  2.28772218e+00  2.28959985e+00  2.29223727e+00
  2.29439166e+00  2.29973229e+00  2.30266626e+00  2.30948824e+00
  2.31948781e+00  2.32728442e+00  2.32995884e+00  2.33650634e+00
  2.34229606e+00  2.34428277e+00  2.35201675e+00  2.35403248e+00
  2.35631283e+00  2.36308440e+00  2.36680272e+00  2.36949482e+00
  2.37914281e+00  2.38297051e+00  2.38463913e+00  2.38853655e+00
  2.39234427e+00  2.39566891e+00  2.39640091e+00  2.40181034e+00
  2.40448605e+00  2.40573140e+00  2.41381189e+00  2.42002223e+00
  2.42034141e+00  2.42222277e+00  2.42542461e+00  2.42787865e+00
  2.43145292e+00  2.43529460e+00  2.43696673e+00  2.43978567e+00
  2.44295605e+00  2.44956082e+00  2.45984042e+00  2.46152075e+00
  2.46560792e+00  2.47013319e+00  2.47437288e+00  2.47726279e+00
  2.47905947e+00  2.48196117e+00  2.48483713e+00  2.48719982e+00
  2.49023071e+00  2.49371004e+00  2.49679863e+00  2.50094722e+00
  2.50388964e+00  2.50614269e+00  2.50671895e+00  2.51448425e+00
  2.52007906e+00  2.52200907e+00  2.52397878e+00  2.52769701e+00
  2.52873101e+00  2.53250612e+00  2.53505566e+00  2.53802686e+00
  2.54506956e+00  2.54916735e+00  2.55357440e+00  2.55667501e+00
  2.56201574e+00  2.56438742e+00  2.56780861e+00  2.57284381e+00
  2.57399387e+00  2.58521032e+00  2.58777510e+00  2.59223168e+00
  2.59913513e+00  2.60188527e+00  2.60581355e+00  2.60602486e+00
  2.61367294e+00  2.61881017e+00  2.62190582e+00  2.62327106e+00
  2.62383836e+00  2.62570332e+00  2.62694661e+00  2.62859954e+00
  2.63039981e+00  2.63342604e+00  2.63407500e+00  2.63769196e+00
  2.63898173e+00  2.64259090e+00  2.64439007e+00  2.64843972e+00
  2.65626829e+00  2.65825452e+00  2.66138176e+00  2.66244040e+00
  2.66510165e+00  2.66823454e+00  2.67085812e+00  2.67274715e+00
  2.67664289e+00  2.68135441e+00  2.68299694e+00  2.68652735e+00
  2.68753236e+00  2.69023431e+00  2.69334364e+00  2.69442942e+00
  2.70008688e+00  2.70226803e+00  2.70555481e+00  2.70668563e+00
  2.70891564e+00  2.71084386e+00  2.71426137e+00  2.71514417e+00
  2.71928950e+00  2.72270199e+00  2.72693582e+00  2.72975203e+00
  2.73352718e+00  2.73390792e+00  2.74018004e+00  2.74194953e+00
  2.74330075e+00  2.74929874e+00  2.75504582e+00  2.75808805e+00
  2.76223274e+00  2.76536128e+00  2.77221395e+00  2.77547549e+00
  2.78051750e+00  2.78260197e+00  2.78767551e+00  2.79122949e+00
  2.79673649e+00  2.80123114e+00  2.80342863e+00  2.80358246e+00
  2.80703317e+00  2.81203461e+00  2.81817836e+00  2.81935821e+00
  2.82302399e+00  2.82498528e+00  2.82902177e+00  2.83150601e+00
  2.83257532e+00  2.83929108e+00  2.84357496e+00  2.84420536e+00
  2.84851099e+00  2.85111162e+00  2.85236492e+00  2.86425023e+00
  2.86577488e+00  2.86745138e+00  2.86880948e+00  2.87011085e+00
  2.87238028e+00  2.87414208e+00  2.87902573e+00  2.88123091e+00
  2.88313026e+00  2.88661035e+00  2.89103148e+00  2.89481979e+00
  2.89637566e+00  2.89851363e+00  2.90189631e+00  2.90600458e+00
  2.91183384e+00  2.91564975e+00  2.91625957e+00  2.92263478e+00
  2.92331613e+00  2.92767731e+00  2.93386673e+00  2.93769133e+00
  2.94180784e+00  2.94683395e+00  2.94856149e+00  2.95263238e+00
  2.95328244e+00  2.95466030e+00  2.95549844e+00  2.95711783e+00
  2.96310221e+00  2.96607585e+00  2.97030183e+00  2.97670562e+00
  2.97710517e+00  2.97814083e+00  2.98391727e+00  2.98617392e+00
  2.99269805e+00  2.99549463e+00  3.00299490e+00  3.00400801e+00
  3.00630589e+00  3.00782755e+00  3.01331166e+00  3.01497655e+00
  3.01868093e+00  3.01911238e+00  3.02299648e+00  3.02425174e+00
  3.02634384e+00  3.02971276e+00  3.03676276e+00  3.04359686e+00
  3.04456742e+00  3.04755989e+00  3.04907440e+00  3.05230428e+00
  3.05933915e+00  3.06512122e+00  3.07108224e+00  3.07617607e+00
  3.08296969e+00  3.08703889e+00  3.09018295e+00  3.09116031e+00
  3.09790057e+00  3.09896789e+00  3.10310600e+00  3.10466022e+00
  3.10804143e+00  3.11338387e+00  3.11683293e+00  3.12217763e+00
  3.12654079e+00  3.13224022e+00  3.13396931e+00  3.13720845e+00
  3.14037653e+00  3.14569004e+00  3.14766844e+00  3.14907349e+00
  3.15629996e+00  3.16077729e+00  3.16362850e+00  3.16597084e+00
  3.16960419e+00  3.17353393e+00  3.17855258e+00  3.17888472e+00
  3.18057478e+00  3.18414742e+00  3.18621247e+00  3.19116997e+00
  3.19265915e+00  3.19594214e+00  3.19774860e+00  3.20377308e+00
  3.20587193e+00  3.20881975e+00  3.21382188e+00  3.21426378e+00
  3.21792503e+00  3.22220160e+00  3.22496938e+00  3.22830270e+00
  3.22927208e+00  3.23253469e+00  3.23499287e+00  3.23722112e+00
  3.24184666e+00  3.24231025e+00  3.24574121e+00  3.24939251e+00
  3.25077168e+00  3.25312427e+00  3.25720090e+00  3.25802048e+00
  3.25948570e+00  3.26478861e+00  3.26700480e+00  3.26825441e+00
  3.27140881e+00  3.27289610e+00  3.27432756e+00  3.27568149e+00
  3.27876161e+00  3.28178924e+00  3.28752535e+00  3.28946828e+00
  3.29011412e+00  3.29275395e+00  3.29536787e+00  3.29943378e+00
  3.30524172e+00  3.30691008e+00  3.31001214e+00  3.31277215e+00
  3.31665224e+00  3.31862162e+00  3.32054660e+00  3.32467125e+00
  3.32649020e+00  3.33051636e+00  3.33265956e+00  3.33741054e+00
  3.34100671e+00  3.34242004e+00  3.34495173e+00  3.34954948e+00
  3.35085880e+00  3.35436682e+00  3.35792847e+00  3.36128874e+00
  3.36424776e+00  3.36548982e+00  3.36633632e+00  3.36834163e+00
  3.37094980e+00  3.37628754e+00  3.38041578e+00  3.38281451e+00
  3.38529416e+00  3.38882737e+00  3.38947225e+00  3.39366629e+00
  3.39542270e+00  3.39604262e+00  3.40137683e+00  3.40611357e+00
  3.40763270e+00  3.41150865e+00  3.41385765e+00  3.41902009e+00
  3.42086537e+00  3.42486739e+00  3.42725166e+00  3.42993062e+00
  3.43423080e+00  3.43541796e+00  3.43678203e+00  3.43838158e+00
  3.44310486e+00  3.44660787e+00  3.44762134e+00  3.44864349e+00
  3.45313805e+00  3.45614100e+00  3.45980402e+00  3.46123976e+00
  3.46491003e+00  3.46657228e+00  3.46696046e+00  3.46928623e+00
  3.47230282e+00  3.47637787e+00  3.47762340e+00  3.48388183e+00
  3.48821142e+00  3.49009188e+00  3.49253635e+00  3.49494833e+00
  3.49812253e+00  3.50045379e+00  3.50176553e+00  3.50277198e+00
  3.50534367e+00  3.51251602e+00  3.51463899e+00  3.51619476e+00
  3.52406946e+00  3.52480071e+00  3.53064045e+00  3.53514951e+00
  3.53774322e+00  3.53895964e+00  3.54116421e+00  3.54452764e+00
  3.54916729e+00  3.55178912e+00  3.55682608e+00  3.55926532e+00
  3.56171173e+00  3.56863951e+00  3.57346814e+00  3.57826779e+00
  3.58069255e+00  3.58660131e+00  3.58794064e+00  3.58980167e+00
  3.59573978e+00  3.60178016e+00  3.60398330e+00  3.60637957e+00
  3.60840935e+00  3.61248594e+00  3.61503021e+00  3.61760921e+00
  3.62177444e+00  3.62515058e+00  3.62606664e+00  3.62837479e+00
  3.62960683e+00  3.63649797e+00  3.64178942e+00  3.64484969e+00
  3.64639882e+00  3.65166886e+00  3.65458673e+00  3.65708135e+00
  3.66168294e+00  3.66875201e+00  3.67072731e+00  3.67492045e+00
  3.67616345e+00  3.67855415e+00  3.68492294e+00  3.68781963e+00
  3.69085378e+00  3.69156885e+00  3.69563978e+00  3.70242468e+00
  3.70655774e+00  3.70776134e+00  3.71206788e+00  3.71685585e+00
  3.71895541e+00  3.72242681e+00  3.72551418e+00  3.73128536e+00
  3.73158274e+00  3.73869273e+00  3.74421082e+00  3.74684508e+00
  3.74821462e+00  3.75613190e+00  3.76269542e+00  3.76328978e+00
  3.77032702e+00  3.77490913e+00  3.77645906e+00  3.78113198e+00
  3.79239883e+00  3.79929544e+00  3.80113204e+00  3.80948881e+00
  3.81278848e+00  3.81446474e+00  3.81566478e+00  3.81859992e+00
  3.82454530e+00  3.82726683e+00  3.83465016e+00  3.84488926e+00
  3.84656052e+00  3.85306191e+00  3.85461933e+00  3.86596943e+00
  3.86807328e+00  3.87051974e+00  3.87345205e+00  3.87593523e+00
  3.88291962e+00  3.88425489e+00  3.89162646e+00  3.90228372e+00
  3.90262748e+00  3.90945518e+00  3.92021088e+00  3.92496804e+00
  3.92787266e+00  3.93006481e+00  3.93212470e+00  3.94556367e+00
  3.94861816e+00  3.95002229e+00  3.95742839e+00  3.96316361e+00
  3.97285640e+00  3.98114507e+00  3.98486130e+00  3.98842622e+00
  3.98982932e+00  3.99702458e+00  3.99847435e+00  4.01025823e+00
  4.01557150e+00  4.01850946e+00  4.02288097e+00  4.03199179e+00
  4.03517264e+00  4.04171764e+00  4.04423084e+00  4.04957417e+00
  4.05667658e+00  4.05835030e+00  4.06473587e+00  4.07014943e+00
  4.07023284e+00  4.07436080e+00  4.08034364e+00  4.08157464e+00
  4.09163049e+00  4.09741001e+00  4.10043445e+00  4.10554677e+00
  4.10829761e+00  4.11374756e+00  4.11918497e+00  4.12556230e+00
  4.12837316e+00  4.14243229e+00  4.14285634e+00  4.14508654e+00
  4.15435345e+00  4.15698598e+00  4.16351523e+00  4.17778585e+00
  4.18154800e+00  4.18686295e+00  4.18945680e+00  4.19706244e+00
  4.19900376e+00  4.21117970e+00  4.21372299e+00  4.22896250e+00
  4.23186977e+00  4.23602864e+00  4.24089943e+00  4.24272524e+00
  4.24546115e+00  4.25575636e+00  4.26637015e+00  4.27108874e+00
  4.28016630e+00  4.28482892e+00  4.30154423e+00  4.30734061e+00
  4.31517144e+00  4.31827562e+00  4.32313536e+00  4.33359582e+00
  4.33842658e+00  4.34313393e+00  4.34495734e+00  4.34736032e+00
  4.35476373e+00  4.35660219e+00  4.35756401e+00  4.36389678e+00
  4.37391670e+00  4.37794949e+00  4.37972738e+00  4.38779325e+00
  4.39342005e+00  4.39710159e+00  4.39956441e+00  4.40345401e+00
  4.40710743e+00  4.41223236e+00  4.41602054e+00  4.42232559e+00
  4.42659763e+00  4.43560267e+00  4.44027352e+00  4.44411705e+00
  4.44689063e+00  4.45840378e+00  4.46892170e+00  4.47223034e+00
  4.47688344e+00  4.48397018e+00  4.49028941e+00  4.49327881e+00
  4.49971867e+00  4.50814756e+00  4.51016682e+00  4.51234021e+00
  4.51564761e+00  4.51808479e+00  4.52348591e+00  4.52757381e+00
  4.53976080e+00  4.54226780e+00  4.54727843e+00  4.55454992e+00
  4.55872954e+00  4.56151967e+00  4.57157845e+00  4.57504977e+00
  4.57687600e+00  4.58033436e+00  4.58577511e+00  4.58705074e+00
  4.59181696e+00  4.60024631e+00  4.61623552e+00  4.61729574e+00
  4.62586217e+00  4.63473719e+00  4.63567192e+00  4.64005451e+00
  4.64720612e+00  4.65920559e+00  4.67248794e+00  4.68762556e+00
  4.68913534e+00  4.69562107e+00  4.70422236e+00  4.71326941e+00
  4.71811373e+00  4.72500701e+00  4.73574457e+00  4.73770228e+00
  4.74182611e+00  4.75194123e+00  4.75655583e+00  4.75952710e+00
  4.76705582e+00  4.78108434e+00  4.79535450e+00  4.79612672e+00
  4.79805612e+00  4.80479475e+00  4.81383111e+00  4.83204105e+00
  4.83896829e+00  4.84007275e+00  4.85203265e+00  4.87467799e+00
  4.87969145e+00  4.88843469e+00  4.90181678e+00  4.91240852e+00
  4.92003016e+00  4.93453986e+00  4.94555478e+00  4.95034800e+00
  4.96467127e+00  4.97237877e+00  4.98726678e+00  4.99578131e+00
  5.00264311e+00  5.00984261e+00  5.01682070e+00  5.02191592e+00
  5.03297987e+00  5.05390735e+00  5.06221217e+00  5.06874352e+00
  5.07704869e+00  5.09570657e+00  5.10267765e+00  5.12980164e+00
  5.13289828e+00  5.14758501e+00  5.16512543e+00  5.18202425e+00
  5.20154260e+00  5.20559531e+00  5.21526221e+00  5.22961905e+00
  5.23693235e+00  5.23889908e+00  5.26975805e+00  5.27412049e+00
  5.28212672e+00  5.28893476e+00  5.30648771e+00  5.32140205e+00
  5.32646068e+00  5.34173935e+00  5.37073110e+00  5.37661639e+00
  5.40598374e+00  5.41831825e+00  5.42117591e+00  5.44792706e+00
  5.45014247e+00  5.48034042e+00  5.48704411e+00  5.52988142e+00
  5.53355199e+00  5.57690409e+00  5.61453851e+00  5.62340793e+00
  5.65970497e+00  5.67984267e+00  5.72327600e+00  5.74218738e+00
  5.75767598e+00  5.87245642e+00  5.88155830e+00  6.02599445e+00
  6.38419558e+00  6.61576492e+00  6.86189861e+00  6.95851699e+00
  7.12398680e+00  7.28190612e+00  2.23452703e+01  2.23966358e+01
  2.24046476e+01  2.24209404e+01  2.24417660e+01  2.24490486e+01
  2.24568611e+01  2.24655426e+01  2.24692608e+01  2.24826090e+01
  2.24961682e+01  2.25257656e+01  2.25472653e+01  2.25677179e+01
  2.25772764e+01  2.25905414e+01  2.26029709e+01  2.26162036e+01
  2.26368649e+01  2.26532655e+01  2.26634138e+01  2.26655504e+01
  2.26714542e+01  2.27012637e+01  2.27169794e+01  2.27493150e+01
  2.27595387e+01  2.27695746e+01  2.27967045e+01  2.28081872e+01
  2.28332490e+01  2.28549034e+01  2.29001904e+01  2.29111497e+01
  2.30501328e+01  2.30827906e+01  2.31239732e+01  2.31585677e+01
  2.31758632e+01  2.33100212e+01  4.41180264e+01]
nelec by numeric integration = 306.00013739946877
    CPU time for vxc    663.46 sec, wall time     48.61 sec
    CPU time for df vj and vk   4581.13 sec, wall time    346.54 sec
    CPU time for df vj and vk   4031.48 sec, wall time    311.62 sec
E1 = -9514.108529883972  Ecoul = 4451.179028918597  Exc = -246.86700467385822
Extra cycle  E= -1634.42587175346  delta_E=    0  |g|= 3.62e-06  |ddm|= 5.34e-06
    CPU time for scf_cycle  42488.25 sec, wall time   3399.10 sec
    CPU time for SCF  42488.25 sec, wall time   3399.10 sec
converged SCF energy = -1634.42587175346
SCF Done after  3399.1025 seconds
after SCF memory used: 42841.359375 MB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
a_x = 0.56
beta = 8.0
alpha = 4.58
hdiag (224298,)
n_occ =  153
n_vir =  1466
max_vir =  438
Q-Gamma tensors building time = 62.1577
after Q matrix memory used: 45365.79296875 MB
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 5
Initial guess:   sTDA
Preconditioner:  sTDA
A matrix size =  224298 * 224298
sTDA nstate = 10
sTDA A diagonalization: threshold = 0.001 ; in 6 steps  27.1045 seconds
sTDA excitation energies:
[2.22356593 3.67009804 4.02241945 4.5553318  4.85694383 5.18027163
 5.36961211 5.45136195 5.55760972 5.69795384]
Intial guess time: 27.584 seconds
    CPU time for df vj and vk  46307.51 sec, wall time   3325.53 sec
    CPU time for df vj and vk  38134.32 sec, wall time   2609.98 sec
Iteration  0
subspace size:  10
maximum residual norm 0.13426775700269503
sTDA Preconditioning Done after  9 steps;  15.3612 seconds
subgencost 0.5232 3.41 %
mvcost 11.0259 71.78 %
GScost 0.9112 5.93 %
subcost 0.011 0.07 %
m,new_m 10 15
    CPU time for df vj and vk  23122.64 sec, wall time   1666.32 sec
    CPU time for df vj and vk  19175.31 sec, wall time   1347.72 sec
new generated guesses: 5
Iteration  1
subspace size:  15
maximum residual norm 0.03456777295532858
sTDA Preconditioning Done after  10 steps;  15.8069 seconds
subgencost 0.5112 3.23 %
mvcost 11.2877 71.41 %
GScost 1.1699 7.4 %
subcost 0.0122 0.08 %
m,new_m 15 20
    CPU time for df vj and vk  23049.04 sec, wall time   1657.50 sec
    CPU time for df vj and vk  19226.86 sec, wall time   1354.61 sec
new generated guesses: 5
Iteration  2
subspace size:  20
maximum residual norm 0.011570204903708331
sTDA Preconditioning Done after  7 steps;  12.9493 seconds
subgencost 0.3452 2.67 %
mvcost 9.5214 73.53 %
GScost 0.7302 5.64 %
subcost 0.0087 0.07 %
m,new_m 20 25
    CPU time for df vj and vk  23042.75 sec, wall time   1652.44 sec
    CPU time for df vj and vk  19180.65 sec, wall time   1349.08 sec
new generated guesses: 5
Iteration  3
subspace size:  25
maximum residual norm 0.0033798328735520447
sTDA Preconditioning Done after  11 steps;  14.7157 seconds
subgencost 0.6087 4.14 %
mvcost 10.6346 72.27 %
GScost 0.8545 5.81 %
subcost 0.0133 0.09 %
m,new_m 25 30
    CPU time for df vj and vk  23001.71 sec, wall time   1652.83 sec
    CPU time for df vj and vk  19139.87 sec, wall time   1344.70 sec
new generated guesses: 5
Iteration  4
subspace size:  30
maximum residual norm 0.0011900878388181294
sTDA Preconditioning Done after  8 steps;  13.9469 seconds
subgencost 0.4639 3.33 %
mvcost 10.1915 73.07 %
GScost 0.8247 5.91 %
subcost 0.0108 0.08 %
m,new_m 30 35
    CPU time for df vj and vk  23048.08 sec, wall time   1657.43 sec
    CPU time for df vj and vk  19131.16 sec, wall time   1343.50 sec
new generated guesses: 5
Iteration  5
subspace size:  35
maximum residual norm 0.00036887739777469094
sTDA Preconditioning Done after  7 steps;  12.9079 seconds
subgencost 0.3192 2.47 %
mvcost 9.1971 71.25 %
GScost 0.7037 5.45 %
subcost 0.0082 0.06 %
m,new_m 35 40
    CPU time for df vj and vk  23026.52 sec, wall time   1659.73 sec
    CPU time for df vj and vk  19160.17 sec, wall time   1350.55 sec
new generated guesses: 5
Iteration  6
subspace size:  40
maximum residual norm 0.00012590840326769567
sTDA Preconditioning Done after  11 steps;  11.8718 seconds
subgencost 0.4113 3.46 %
mvcost 9.3737 78.96 %
GScost 0.4627 3.9 %
subcost 0.0112 0.09 %
m,new_m 40 43
    CPU time for df vj and vk  13842.52 sec, wall time   1002.92 sec
    CPU time for df vj and vk  11598.30 sec, wall time    826.37 sec
new generated guesses: 3
Iteration  7
subspace size:  43
maximum residual norm 3.841743398218792e-05
sTDA Preconditioning Done after  7 steps;  8.115 seconds
subgencost 0.14 1.73 %
mvcost 6.8749 84.72 %
GScost 0.2121 2.61 %
subcost 0.005 0.06 %
m,new_m 43 45
    CPU time for df vj and vk   9227.80 sec, wall time    678.40 sec
    CPU time for df vj and vk   7824.83 sec, wall time    569.19 sec
new generated guesses: 2
Iteration  8
subspace size:  45
maximum residual norm 1.0796708239078142e-05
sTDA Preconditioning Done after  12 steps;  6.2969 seconds
subgencost 0.1738 2.76 %
mvcost 5.1706 82.11 %
GScost 0.1228 1.95 %
subcost 0.0063 0.1 %
m,new_m 45 46
    CPU time for df vj and vk   4652.71 sec, wall time    354.09 sec
    CPU time for df vj and vk   4036.84 sec, wall time    317.99 sec
new generated guesses: 1
Iteration  9
subspace size:  46
maximum residual norm 6.723221255190805e-06
Davidson procedure aborted
Davidson done after  30718.0693 seconds
Total steps = 10
Final subspace shape =  (46, 46)
Preconditioning time: 112.5252 0.37 %
In-house Davidson time: 30718.2573 seconds
Excited State energies (eV) =
[2.43960236 3.74969185 4.03490452 4.57500564 4.87967948]
|---------------   In-house Developed Davidson Done   -----------|
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 5
Initial guess:   Adiag
Preconditioner:  Adiag
A matrix size =  224298 * 224298
Intial guess time: 0.041 seconds
    CPU time for df vj and vk  46127.61 sec, wall time   3289.70 sec
    CPU time for df vj and vk  38135.01 sec, wall time   2645.78 sec
Iteration  0
subspace size:  10
maximum residual norm 0.14648095469120623
m,new_m 10 15
    CPU time for df vj and vk  23062.47 sec, wall time   1664.50 sec
    CPU time for df vj and vk  19135.16 sec, wall time   1346.38 sec
new generated guesses: 5
Iteration  1
subspace size:  15
maximum residual norm 0.035526946365180716
m,new_m 15 20
    CPU time for df vj and vk  23073.35 sec, wall time   1661.19 sec
    CPU time for df vj and vk  19230.42 sec, wall time   1352.52 sec
new generated guesses: 5
Iteration  2
subspace size:  20
maximum residual norm 0.017313275949423026
m,new_m 20 25
    CPU time for df vj and vk  23046.79 sec, wall time   1657.22 sec
    CPU time for df vj and vk  19207.60 sec, wall time   1351.46 sec
new generated guesses: 5
Iteration  3
subspace size:  25
maximum residual norm 0.008039491958458355
m,new_m 25 30
    CPU time for df vj and vk  23056.11 sec, wall time   1659.29 sec
    CPU time for df vj and vk  19140.75 sec, wall time   1342.78 sec
new generated guesses: 5
Iteration  4
subspace size:  30
maximum residual norm 0.004267100893079627
m,new_m 30 35
    CPU time for df vj and vk  23053.53 sec, wall time   1659.64 sec
    CPU time for df vj and vk  19179.79 sec, wall time   1347.40 sec
new generated guesses: 5
Iteration  5
subspace size:  35
maximum residual norm 0.001954629937685036
m,new_m 35 40
    CPU time for df vj and vk  23019.26 sec, wall time   1656.57 sec
    CPU time for df vj and vk  19200.28 sec, wall time   1345.08 sec
new generated guesses: 5
Iteration  6
subspace size:  40
maximum residual norm 0.0009252183929921179
m,new_m 40 45
    CPU time for df vj and vk  22981.92 sec, wall time   1649.41 sec
    CPU time for df vj and vk  19211.49 sec, wall time   1349.16 sec
new generated guesses: 5
Iteration  7
subspace size:  45
maximum residual norm 0.000393861438022908
m,new_m 45 50
    CPU time for df vj and vk  23030.80 sec, wall time   1654.66 sec
    CPU time for df vj and vk  19113.22 sec, wall time   1338.33 sec
new generated guesses: 5
Iteration  8
subspace size:  50
maximum residual norm 0.00017317026534511103
m,new_m 50 54
    CPU time for df vj and vk  18433.74 sec, wall time   1332.13 sec
    CPU time for df vj and vk  15357.29 sec, wall time   1083.23 sec
new generated guesses: 4
Iteration  9
subspace size:  54
maximum residual norm 6.440357626301093e-05
m,new_m 54 57
    CPU time for df vj and vk  13893.82 sec, wall time   1012.37 sec
    CPU time for df vj and vk  11612.78 sec, wall time    829.40 sec
new generated guesses: 3
Iteration  10
subspace size:  57
maximum residual norm 3.4782887122028804e-05
m,new_m 57 59
    CPU time for df vj and vk   9236.44 sec, wall time    682.69 sec
    CPU time for df vj and vk   7787.87 sec, wall time    565.26 sec
new generated guesses: 2
Iteration  11
subspace size:  59
maximum residual norm 1.0369109066059683e-05
m,new_m 59 60
    CPU time for df vj and vk   4647.79 sec, wall time    353.13 sec
    CPU time for df vj and vk   4114.66 sec, wall time    321.50 sec
new generated guesses: 1
Iteration  12
subspace size:  60
maximum residual norm 6.00503828259818e-06
Davidson procedure aborted
Davidson done after  39891.7637 seconds
Total steps = 13
Final subspace shape =  (60, 60)
Preconditioning time: 0.6867 0.0 %
In-house Davidson time: 39891.8815 seconds
Excited State energies (eV) =
[2.43960236 3.74969185 4.03490452 4.57500564 4.87967948]
|---------------   In-house Developed Davidson Done   -----------|
xyzfile = 99_Carotenoid_B.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 5
pytd = False
TDA = True
TDDFT = False
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
TDA_options = [0, 1]
TDDFT_options = [0]
dynpol_options = [0]
stapol_options = [0]
TDA_tolerance = 1e-05
TDDFT_tolerance = 1e-05
dynpol_tolerance = 1e-05
stapol_tolerance = 1e-05
max = 35
TDA_initialTOL = 0.001
TDDFT_initialTOL = 0.001
dynpol_initprecTOL = 0.01
stapol_initprecTOL = 0.01
TDA_precondTOL = 0.01
TDDFT_precondTOL = 0.01
TDA_extrainitial = 8
TDDFT_extrainitial = 8
TDDFT_extrainitial_3n = False
eigensolver_tol = 1e-05
memory = 60000
verbose = 5
beta = []
alpha = []
