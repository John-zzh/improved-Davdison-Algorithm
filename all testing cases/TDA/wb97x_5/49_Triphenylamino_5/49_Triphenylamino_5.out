curpath /scratch/pbsjobs/job.15971894.hpc
lib.num_threads() =  16
at beginning memory used: 51.84375 MB
mol.max_memory 50000
#INFO: **** input file is /home/zzz6/bench/scripts/Davidson_Jul6_GS.py ****
import time
import numpy as np
import scipy
from opt_einsum import contract as einsum
#from einsum2 import einsum2 as einsum
import pyscf
from pyscf import gto, scf, dft, tddft, data, lib
import argparse
import os
import psutil
import yaml

# from pyscf.tools import molden
# from pyscf.dft import xcfun

# wb97x methanol, sTDA[ 6.46739329  8.18181719  8.38358186  9.45195086  9.52132657  9.98634407
#  10.57628203 11.22108803 11.23872459 11.57456576]

# wb97x methanol, sTDDFT [6.46636223 8.18031038 8.38140358 9.45010938 9.50610109]
# truncate 40 eV         [6.46748128 8.18219018 8.38315179 9.45216734 9.51268853]
#
print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA',  help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=bool,  default=False, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default='NA',  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='NA',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=bool,  default=True,  help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default='3',   help='0-9, 9 is best')

parser.add_argument('-n',  '--nstates',                     type=int,   default = 4,      help='number of excited states')
parser.add_argument('-pytd',  '--pytd',                     type=bool,  default = False , help='whether to compare with PySCF TDDFT')

parser.add_argument('-TDA','--TDA',                         type=bool,  default = False, help='perform TDA')
parser.add_argument('-TDDFT','--TDDFT',                     type=bool,  default = False, help='perform TDDFT')
parser.add_argument('-dynpol','--dynpol',                   type=bool,  default = False, help='perform dynamic polarizability')
parser.add_argument('-omega','--dynpol_omega',              type=float, default = [], nargs='+', help='dynamic polarizability with perurbation omega, a list')
parser.add_argument('-stapol','--stapol',                   type=bool,  default = False, help='perform static polarizability')

parser.add_argument('-sTDA','--sTDA',                       type=bool,  default = False, help='perform sTDA calculation')
parser.add_argument('-sTDDFT','--sTDDFT',                   type=bool,  default = False, help='perform sTDDFT calculation')
parser.add_argument('-TT','--Truncate_test',                type=bool,  default = False, help='test the wall time for different virtual truncation')

parser.add_argument('-TV','--truncate_virtual',             type=float, default = 0, help='the threshold to truncate virtual orbitals, in eV')

parser.add_argument('-o1', '--TDA_options',                 type=int,   default = [0], nargs='+', help='0-7')
parser.add_argument('-o2', '--TDDFT_options',               type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o3', '--dynpol_options',              type=int,   default = [0], nargs='+', help='0-3')
parser.add_argument('-o4', '--stapol_options',              type=int,   default = [0], nargs='+', help='0-3')

parser.add_argument('-t1',  '--TDA_tolerance',              type=float, default= 1e-5, help='residual norm conv for TDA')
parser.add_argument('-t2',  '--TDDFT_tolerance',            type=float, default= 1e-5, help='residual norm conv for TDDFT')
parser.add_argument('-t3',  '--dynpol_tolerance',           type=float, default= 1e-5, help='residual norm conv for dynamic polarizability')
parser.add_argument('-t4',  '--stapol_tolerance',           type=float, default= 1e-5, help='residual norm conv for static polarizability')

parser.add_argument('-max',  '--max',                       type=int,   default= 30,   help='max iterations')

parser.add_argument('-it1', '--TDA_initialTOL',             type=float, default= 1e-3, help='conv for sTDA inital guess')
parser.add_argument('-it2', '--TDDFT_initialTOL',           type=float, default= 1e-3, help='conv for sTDDFT inital guess')
parser.add_argument('-it3', '--dynpol_initprecTOL',         type=float, default= 1e-2, help='conv for s-dynamic polarizability inital guess and precond')
parser.add_argument('-it4', '--stapol_initprecTOL',         type=float, default= 1e-2, help='conv for s-static polarizability inital guess and precond')

parser.add_argument('-pt1', '--TDA_precondTOL',             type=float, default= 1e-2, help='conv for TDA preconditioner')
parser.add_argument('-pt2', '--TDDFT_precondTOL',           type=float, default= 1e-2, help='conv for TDDFT preconditioner')

parser.add_argument('-ei1', '--TDA_extrainitial',           type=int,   default= 8,    help='number of extral TDA initial guess vectors, 0-8')
parser.add_argument('-ei2', '--TDDFT_extrainitial',         type=int,   default= 8,    help='number of extral TDDFT initial guess vectors, 0-8')
parser.add_argument('-ei3n','--TDDFT_extrainitial_3n',      type=bool,  default= False,help='number of extral TDDFT initial guess vectors, 3state')

parser.add_argument('-et', '--eigensolver_tol',             type=float, default= 1e-5, help='conv for new guess generator in new_ES')
parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')

parser.add_argument('-be', '--beta',                        type=float, default= [],    nargs='+', help='beta = 0.83')
parser.add_argument('-al', '--alpha',                       type=float, default= [],    nargs='+', help='alpha = 0.83')

args = parser.parse_args()
################################################


########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

# info = psutil.virtual_memory()
# print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

f = open(args.xyzfile)
atom_coordinates = f.readlines()
del atom_coordinates[:2]
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile == True:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'
    # to use the chk file as scf input


mf.conv_tol = 1e-10

print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
kernel_t = kernel_1 - kernel_0
print ('SCF Done after ', round(kernel_t, 4), 'seconds')

show_memory_info('after SCF')

#################################################################
# Collect everything needed from PySCF
Qstart = time.time()
Natm = mol.natm
mo_occ = mf.mo_occ
n_occ = len(np.where(mo_occ > 0)[0])
#mf.mo_occ is an array of occupance [2,2,2,2,2,0,0,0,0.....]
n_vir = len(np.where(mo_occ == 0)[0])
#################################################
# generate matrix vector multiplication function
td = tddft.TDA(mf)
TDA_vind, hdiag = td.gen_vind(mf)

TD = tddft.TDDFT(mf)
TDDFT_vind, Hdiag = TD.gen_vind(mf)

A_size = n_occ * n_vir

# return AV
def TDA_matrix_vector(V):
    return TDA_vind(V.T).T

def TDDFT_matrix_vector(X, Y):
    '''return AX + BY and AY + BX'''
    XY = np.vstack((X,Y)).T
    U = TDDFT_vind(XY)
    U1 = U[:,:A_size].T
    U2 = -U[:,A_size:].T
    return U1, U2

def static_polarizability_matrix_vector(X):
    '''return (A+B)X '''
    U1, U2 = TDDFT_matrix_vector(X,X)
    return U1
#################################################

##################################################################################################
# create a function for dictionary of chemical hardness, by mappig two iteratable subject, list
# list of elements
elements = ['H' , 'He', 'Li', 'Be', 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P' , 'S' , 'Cl', 'Ar', 'K' , 'Ca','Sc', 'Ti', 'V' , 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn','Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y' , 'Zr','Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn','Sb', 'Te', 'I' , 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd','Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb','Lu', 'Hf', 'Ta', 'W' , 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg','Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U' , 'Np', 'Pu']
#list of chemical hardness, they are floats, containing elements 1-94, in Hartree
hardness = [0.47259288,0.92203391,0.17452888,0.25700733,0.33949086,0.42195412,0.50438193,0.58691863,0.66931351,0.75191607,0.17964105,0.22157276,0.26348578,0.30539645,0.34734014,0.38924725,0.43115670,0.47308269,0.17105469,0.20276244,0.21007322,0.21739647,0.22471039,0.23201501,0.23933969,0.24665638,0.25398255,0.26128863,0.26859476,0.27592565,0.30762999,0.33931580,0.37235985,0.40273549,0.43445776,0.46611708,0.15585079,0.18649324,0.19356210,0.20063311,0.20770522,0.21477254,0.22184614,0.22891872,0.23598621,0.24305612,0.25013018,0.25719937,0.28784780,0.31848673,0.34912431,0.37976593,0.41040808,0.44105777,0.05019332,0.06762570,0.08504445,0.10247736,0.11991105,0.13732772,0.15476297,0.17218265,0.18961288,0.20704760,0.22446752,0.24189645,0.25932503,0.27676094,0.29418231,0.31159587,0.32902274,0.34592298,0.36388048,0.38130586,0.39877476,0.41614298,0.43364510,0.45104014,0.46848986,0.48584550,0.12526730,0.14268677,0.16011615,0.17755889,0.19497557,0.21240778,0.07263525,0.09422158,0.09920295,0.10418621,0.14235633,0.16394294,0.18551941,0.22370139]
HARDNESS = dict(zip(elements,hardness))
#function to return chemical hardness from dictionary HARDNESS
def Hardness(atom_id):
    atom = mol.atom_pure_symbol(atom_id)
    return HARDNESS[atom]

################################################################################
# This block is the function to produce orthonormalized coefficient matrix C
def matrix_power(S,a):
    s,ket = np.linalg.eigh(S)
    s = s**a
    X = np.dot(ket*s,ket.T)
    #X == S^a
    return X

def matrix_power2(S):
    s,ket = np.linalg.eigh(S)
    s_sqrt = s**0.5
    s_inv = 1/s_sqrt

    S1 = np.dot(ket*s_sqrt,ket.T)
    S2 = np.dot(ket*s_inv,ket.T)

    #S1 == S^1/2
    #S2 == S^-1/2
    return S1, S2

def orthonormalize(C):
    X = matrix_power(mf.get_ovlp(), 0.5)
    # S = mf.get_ovlp() #.get_ovlp() is basis overlap matrix
    # S = np.dot(np.linalg.inv(c.T), np.linalg.inv(c))
    C = np.dot(X,C)
    return C

################################################################################
def gen_alpha_beta_ax():
    RSH_F = [
    'lc-b3lyp',
    'wb97',
    'wb97x',
    'wb97x-d3',
    'cam-b3lyp']
    RSH_paramt = [
    [0.53, 8.00, 4.50],
    [0.61, 8.00, 4.41],
    [0.56, 8.00, 4.58],
    [0.51, 8.00, 4.51],
    [0.38, 1.86, 0.90]]
    RSH_F_paramt = dict(zip(RSH_F, RSH_paramt))

    hybride_F = ['b3lyp', 'tpssh', 'm05-2x', 'pbe0', 'm06', 'm06-2x', 'NA']# NA is for Hartree-Fork
    hybride_paramt = [0.2, 0.1, 0.56, 0.25, 0.27, 0.54, 1]
    DF_ax = dict(zip(hybride_F, hybride_paramt))
    #Zhao, Y. and Truhlar, D.G., 2006. Density functional for spectroscopy: no long-range self-interaction error, good performance for Rydberg and charge-transfer states, and better performance on average than B3LYP for ground states. The Journal of Physical Chemistry A, 110(49), pp.13126-13130.

    if args.functional in RSH_F:
        a_x, beta, alpha = RSH_F_paramt[args.functional]

    elif args.functional in hybride_F:
        beta1 = 0.2
        beta2 = 1.83
        alpha1 = 1.42
        alpha2 = 0.48

        a_x = DF_ax[args.functional]
        beta = beta1 + beta2 * a_x
        alpha = alpha1 + alpha2 * a_x

    if args.beta != []:
        beta = args.beta[0]

    if args.alpha != []:
        alpha = args.alpha[0]

    print('a_x =', a_x)
    print('beta =', beta)
    print('alpha =', alpha)
    return a_x, beta, alpha

a_x, beta, alpha = gen_alpha_beta_ax()

# creat \eta matrix

def gen_gammaJK():
    Natm = mol.natm
    a = [Hardness(atom_id) for atom_id in range(Natm)]
    a = np.asarray(a).reshape(1,-1)
    eta = (a+a.T)/2

    #Inter-particle distance array
    # unit == ’Bohr’, Its value is 5.29177210903(80)×10^(−11) m
    R = pyscf.gto.mole.inter_distance(mol, coords=None)
    # creat GammaK and GammaK matrix
    GammaJ = (R**beta + (a_x * eta)**(-beta))**(-1/beta)
    GammaK = (R**alpha + eta**(-alpha)) **(-1/alpha)
    return GammaJ, GammaK

GammaJ, GammaK = gen_gammaJK()

def generateQ():
    N_bf = len(mo_occ)
    C = mf.mo_coeff
    # mf.mo_coeff is the coefficient matrix
    C = orthonormalize(C)
    # C is orthonormalized coefficient matrix, N_bf * N_bf
    # np.dot(C.T,C) is a an identity matrix
    aoslice = mol.aoslice_by_atom()
    q = np.zeros([Natm, N_bf, N_bf])
    #N_bf is number Atomic orbitals = n_occ+n_vir
    for atom_id in range(Natm):
        shst, shend, atstart, atend = aoslice[atom_id]
        q[atom_id,:, :] = np.dot(C[atstart:atend, :].T, C[atstart:atend, :])
    return q

q_tensors = generateQ()

''' if no truncation, max_vir = n_vir and n_occ + max_vir = N_bf '''
print('hdiag', hdiag.shape)
delta_diag_A = hdiag.reshape(n_occ, n_vir)

def gen_maxvir(tol_eV = args.truncate_virtual):
    if tol_eV != 0:
        homo_vir = delta_diag_A[-1,:].tolist()
        # print(delta_diag_A[-1,:]*27.211386245988)
        tol = tol_eV/27.211386245988
        for i in range(len(homo_vir)):
            if homo_vir[i] >= tol:
                max_vir = i
                break
            else:
                max_vir = n_vir
    else:
        max_vir = n_vir
    return max_vir

max_vir = gen_maxvir()
print('n_occ = ', n_occ)
print('n_vir = ', n_vir)
print('max_vir = ', max_vir)

A_reduced_size = n_occ * max_vir

def gen_QJK(max_vir=max_vir):

    q_ij = np.zeros((Natm, n_occ, n_occ))
    q_ij[:,:,:] = q_tensors[:,:n_occ,:n_occ]

    q_ab = np.zeros((Natm, max_vir, max_vir))
    q_ab[:,:,:] = q_tensors[:,n_occ:n_occ+max_vir,n_occ:n_occ+max_vir]

    q_ia = np.zeros((Natm, n_occ, max_vir))
    q_ia[:,:,:] = q_tensors[:,:n_occ,n_occ:n_occ+max_vir]

    GK_q_jb = einsum("Bjb,AB->Ajb", q_ia, GammaK)
    GJ_q_ab = einsum("Bab,AB->Aab", q_ab, GammaJ)


    return q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab

q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK()
# pre-calculate and store the Q-Gamma rank 3 tensor
Qend = time.time()

Q_time = Qend - Qstart
print('Q-Gamma tensors building time =', round(Q_time, 4))
################################################################################

show_memory_info('after Q matrix')


################################################################################
# This block is to define on-the-fly two electron intergeral (pq|rs)
# A_iajb * v = delta_ia_ia*v + 2(ia|jb)*v - (ij|ab)*v

# iajb_v = einsum('Aia,Bjb,AB,jbm -> iam', q_ia, q_ia, GammaK, V)
# ijab_v = einsum('Aij,Bab,AB,jbm -> iam', q_ij, q_ab, GammaJ, V)

max_vir_hdiag = delta_diag_A[:,:max_vir]

def gen_iajb_ijab_ibja_delta_fly(max_vir=max_vir, \
                                q_ij=q_ij, \
                                q_ab=q_ab, \
                                q_ia=q_ia , \
                                GK_q_jb=GK_q_jb, \
                                GJ_q_ab=GJ_q_ab):

    def iajb_fly(V):
        start = time.time()
        GK_q_jb_V = einsum("Ajb,jbm->Am", GK_q_jb, V)
        iajb_V = einsum("Aia,Am->iam", q_ia, GK_q_jb_V)
        end = time.time()
        # print('iajb =', round(end - start,4))
        return iajb_V


    def ijab_fly(V):
        start = time.time()
        GJ_q_ab_V = einsum("Aab,jbm->Ajam", GJ_q_ab, V)
        ijab_V = einsum("Aij,Ajam->iam", q_ij, GJ_q_ab_V)
        end = time.time()
        # print('ijab =', round(end - start,4))
        return ijab_V

    def ibja_fly(V):
        start = time.time()
        # the Forck exchange energy in B matrix
        ''' (ib|ja) '''
        # GK_q_jb_V = einsum("Aja,jbm->Abam", GK_q_jb, V)
        # ibja_V = einsum("Aib,Abam->iam", q_ia, GK_q_jb_V)
        # [ 6.46636595  8.18031516  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]

        q_ib_V = einsum("Aib,jbm->Ajim", q_ia, V)
        ibja_V = einsum("Aja,Ajim->iam", GK_q_jb, q_ib_V)
        #[ 6.46636595  8.18031515  8.38140638  9.45011397  9.50610571  9.979084 10.57322403 11.2055107  11.23419534 11.57308169]
        end = time.time()
        # print('ibja =', round(end - start,4))
        return ibja_V

    def delta_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_v = einsum("ia,iam->iam", delta_diag_A, V)
        return delta_v

    def delta_max_vir_fly(V):
        '''delta_diag_A.shape = (n_occ, n_vir)'''
        delta_max_vir_v = einsum("ia,iam->iam", max_vir_hdiag, V)
        return delta_max_vir_v

    return iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly

iajb_fly, ijab_fly, ibja_fly, delta_fly, delta_max_vir_fly = \
                                                gen_iajb_ijab_ibja_delta_fly()

def gen_sTDA_sTDDFT_stapol_fly(max_vir=max_vir, \
                            iajb_fly = iajb_fly, \
                            ijab_fly = ijab_fly, \
                            ibja_fly = ibja_fly, \
                            delta_max_vir_fly = delta_max_vir_fly):

    def sTDA_mv(V):
        # sTDA_A * V
        V = V.reshape(n_occ, max_vir, -1)
        '''MV =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        MV = delta_max_vir_fly(V) + 2*iajb_fly(V) - ijab_fly(V)
        MV = MV.reshape(n_occ*max_vir,-1)
        return MV

    def sTDDFT_mv(X, Y):
        '''''return AX+BY and AY+BX'''''
        X = X.reshape(n_occ, max_vir,-1)
        Y = Y.reshape(n_occ, max_vir,-1)

        X_max_vir = X[:,:max_vir,:]
        Y_max_vir = Y[:,:max_vir,:]

        iajb_X = iajb_fly(X_max_vir)
        iajb_Y = iajb_fly(Y_max_vir)

        ijab_X = ijab_fly(X_max_vir)
        ijab_Y = ijab_fly(Y_max_vir)

        ibja_X = ibja_fly(X_max_vir)
        ibja_Y = ibja_fly(Y_max_vir)

        delta_X = delta_max_vir_fly(X_max_vir)
        delta_Y = delta_max_vir_fly(Y_max_vir)

        '''sTDA_A =  delta_fly(V) + 2*iajb_fly(V) - ijab_fly(V)'''
        '''sTDDFT_B = 2*iajb_fly(V) - a_x*ibja_fly(V)'''

        AX = delta_X + 2*iajb_X - ijab_X
        AY = delta_Y + 2*iajb_Y - ijab_Y

        BX = 2*iajb_X - a_x*ibja_X
        BY = 2*iajb_Y - a_x*ibja_Y

        U1 = np.zeros_like(X)
        U2 = np.zeros_like(X)

        U1[:,:max_vir,:] = AX + BY
        U2[:,:max_vir,:] = AY + BX

        U1 = U1.reshape(n_occ*max_vir,-1)
        U2 = U2.reshape(n_occ*max_vir,-1)

        return U1, U2

    def sTDDFT_stapol_mv(X):
        ''' return (A+B)X '''
        ''' sTDA_A = delta_fly(V) + 4*iajb_fly(V) \
                    - ijab_fly(V) - a_x*ibja_fly(V)'''
        X = X.reshape(n_occ, max_vir, -1)

        U = delta_max_vir_fly(X) + 4*iajb_fly(X) - ijab_fly(X) - a_x*ibja_fly(X)

        U = U.reshape(n_occ*max_vir, -1)
        return U

    return sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv

sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly()

################################################################################

################################################################################
# orthonormalization of guess_vectors
def Gram_Schmidt_bvec(A, bvec):
    ''' orthonormalize vector b against all A vectors'''
    ''' b = b - A*(A.T*b)'''
    if A.shape[1] != 0:
        # suppose A is orthonormalized
        projections_coeff = np.dot(A.T, bvec)
        bvec -= np.dot(A, projections_coeff)
    return bvec

def VW_Gram_Schmidt(x, y, V, W):
    m = np.dot(V.T,x)
    m += np.dot(W.T,y)

    n = np.dot(W.T,x)
    n += np.dot(V.T,y)

    x -= np.dot(V,m)
    x -= np.dot(W,n)

    y -= np.dot(W,m)
    y -= np.dot(V,n)

    return x, y

def Gram_Schmidt_fill_holder(V, count, vecs):
    # V is a vectors holder
    # count is the amount of vectors that already sit in the holder
    nvec = np.shape(vecs)[1]
    # amount of new vectors intended to fill in the V
    # count will be final amount of vectors in V
    for j in range(nvec):
        vec = vecs[:, j].reshape(-1,1)
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #single orthonormalize
        vec = Gram_Schmidt_bvec(V[:, :count], vec)   #double orthonormalize

        norm = np.linalg.norm(vec)
        if  norm > 1e-14:
            vec = vec/norm
            V[:, count] = vec[:,0]
            count += 1
    new_count = count

    return V, new_count


def S_symmetry_orthogonal(x,y):

    x_p_y = x + y
    x_p_y_norm = np.linalg.norm(x_p_y)

    x_m_y = x - y
    x_m_y_norm = np.linalg.norm(x_m_y)

    a = x_p_y_norm/x_m_y_norm

    x_p_y /= 2
    x_m_y *= a/2

    new_x = x_p_y + x_m_y
    new_y = x_p_y - x_m_y

    # print('x.Ty', np.dot(new_x.T,new_y))
    return new_x, new_y

def symmetrize(A):
    A = (A + A.T)/2
    return A

def anti_symmetrize(A):
    A = (A - A.T)/2
    return A


################################################################################
# define the orthonormality of a matrix A as the norm of (A.T*A - I)
def check_orthonormal(A):
    n = np.shape(A)[1]
    B = np.dot(A.T, A)
    c = np.linalg.norm(B - np.eye(n))
    return c
################################################################################

################################################################################
def VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new):
    # put X_new into V, and Y_new into W
    # m is the amount of vectors that already on V or W
    VWGSstart = time.time()
    nvec = np.shape(X_new)[1]
    # amount of new vectors intended to fill in the V_holder and W_holder
    GScost = 0
    normcost = 0
    symmetrycost = 0
    for j in range(0, nvec):

        V = V_holder[:,:m]
        W = W_holder[:,:m]

        x_tmp = X_new[:,j].reshape(-1,1)
        y_tmp = Y_new[:,j].reshape(-1,1)

        GSstart = time.time()
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        GSend = time.time()
        GScost += GSend - GSstart

        symmetrystart = time.time()
        x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # x_tmp,y_tmp = S_symmetry_orthogonal(x_tmp,y_tmp)

        # x_tmp,y_tmp = VW_Gram_Schmidt(x_tmp, y_tmp, V, W)
        normstart = time.time()
        xy_norm = (np.dot(x_tmp.T, x_tmp)+np.dot(y_tmp.T, y_tmp))**0.5

        if  xy_norm > 1e-14:
            x_tmp = x_tmp/xy_norm
            y_tmp = y_tmp/xy_norm

            V_holder[:,m] = x_tmp[:,0]
            W_holder[:,m] = y_tmp[:,0]
            m += 1
        else:
            print('vector kicked out during GS orthonormalization')
        normend = time.time()
        normcost += normend - normstart

    VWGSend = time.time()
    VWGScost = VWGSend - VWGSstart
    # print('GScost',round(GScost/VWGScost *100, 2),'%')
    # print('normcost',round(normcost/VWGScost *100, 2),'%')
    # print('symmetrycost', round(symmetrycost/VWGScost *100, 2),'%')
    # print('check VW orthonormalization')
    # VW = np.vstack((V_holder[:,:m], W_holder[:,:m]))
    # WV = np.vstack((W_holder[:,:m], V_holder[:,:m]))
    # VWWV = np.hstack((VW,WV))
    # print('check_orthonormal VWWV:',check_orthonormal(VWWV))
    return V_holder, W_holder, m
################################################################################



################################################################################
def solve_AX_Xla_B(A, omega, Q):
    ''' AX - XΩ  = Q '''

    Qnorm = np.linalg.norm(Q, axis=0, keepdims = True)
    Q /= Qnorm
    N_vectors = len(omega)
    a, u = np.linalg.eigh(A)
    ub = np.dot(u.T, Q)
    ux = np.zeros_like(Q)
    for k in range(N_vectors):
        ux[:, k] = ub[:, k]/(a - omega[k])
    X = np.dot(u, ux)

    X *= Qnorm
    return X
################################################################################
def TDA_A_diag_initial_guess(m, V, hdiag = hdiag):
    # m is the amount of initial guesses
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    for j in range(m):
        V[Dsort[j], j] = 1.0
    return V

def sTDA_initial_guess(m, V):
    sTDA_A_eigenkets = Davidson0(m)
    # print('sTDA_A_eigenkets', sTDA_A_eigenkets.shape)
    #diagonalize sTDA_A amtrix
    V[:, :m] = sTDA_A_eigenkets[:,:m]
    return V
################################################################################

################################################################################
def TDA_A_diag_preconditioner(arg1, arg2, arg3=None, arg4=None, arg5=None, arg6=None, arg7=None, arg8=None, hdiag = hdiag):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    # preconditioners for each corresponding residual
    residual = arg1
    sub_eigenvalue = arg2
    current_dic = arg3

    k = np.shape(residual)[1]
    t = 1e-14

    # print('hdiag in preconditioner', hdiag.reshape(-1,1).shape)
    D = np.repeat(hdiag.reshape(-1,1), k, axis=1) - sub_eigenvalue
    D = np.where( abs(D) < t, np.sign(D)*t, D) # force all values not in domain (-t, t)

    new_guess = residual/D

    return new_guess, current_dic
################################################################################


################################################################################
# sTDA preconditioner
def sTDA_preconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """ (sTDA_A - λ*I)^-1 B = X """
    """ AX - Xλ = B """
    """ columns in B are residuals (in Davidson's loop) to be preconditioned, """
    residuals = arg1
    eigen_lambda = arg2
    current_dic = arg3

    precondition_start = time.time()

    # N_rows = np.shape(B)[0]
    A_reduced_size = n_occ*max_vir
    residuals = residuals.reshape(n_occ,n_vir,-1)
    B = residuals[:,:max_vir,:]


    B = B.reshape(A_reduced_size,-1)
    # B = B.reshape(A_reduced_size, -1)
    N_vectors = B.shape[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = args.TDA_precondTOL # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((A_reduced_size, (max+1)*N_vectors))
    W = np.zeros((A_reduced_size, (max+1)*N_vectors))
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors

    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    hdiag_m_lambda = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    hdiag_m_lambda = np.where( abs(hdiag_m_lambda) < t, np.sign(hdiag_m_lambda)*t, hdiag_m_lambda) # <t: returns np.sign(D)*t; else: D

    hdiag_m_lambda = hdiag_m_lambda.reshape(n_occ, n_vir, -1)
    D = hdiag_m_lambda[:,:max_vir,:].reshape(A_reduced_size,-1)
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count

    current_dic['preconditioning'] = []
    mvcost = 0
    GScost = 0
    subcost = 0
    subgencost = 0
    ####################################################################################
    for i in range(max):
        substart = time.time()
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        subend = time.time()
        subgencost += subend - substart
        #project sTDA_A matrix and vector B into subspace
        sub_A = symmetrize(sub_A)
        # size of subspace
        m = np.shape(sub_A)[0]

        substart = time.time()
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        subend = time.time()
        subcost += subend - substart

        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        current_dic['preconditioning'].append({'precondition residual norms': r_norms})

        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        GSstart = time.time()
        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        GSend = time.time()
        GScost += GSend - GSstart


        mvstart = time.time()
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        mvend = time.time()
        mvcost += mvend - mvstart

        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ sTDA Preconditioner Failed Due to Iteration Limit _________________')
        print('sTDA preconditioning failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('sTDA Preconditioning Done after ', i, 'steps; ', \
                round(precondition_time, 4), 'seconds')
        print('subgencost',round(subgencost,4),round(subgencost/precondition_time *100, 2),"%")
        print('mvcost',round(mvcost,4),round(mvcost/precondition_time *100, 2),"%")
        print('GScost', round(GScost,4), round(GScost/precondition_time *100, 2),"%")
        print('subcost', round(subcost,4), round(subcost/precondition_time *100, 2),"%")
    full_guess *= bnorm

    U = np.zeros((n_occ,n_vir,N_vectors))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,-1)

    if max_vir < n_vir:
        ''' DX2 - X2*Omega = B2'''
        B2 = residuals[:,max_vir:,:]
        B2 = B2.reshape(n_occ*(n_vir-max_vir),-1)

        D2 = hdiag_m_lambda[:,max_vir:,:]
        D2 = D2.reshape(n_occ*(n_vir-max_vir),-1)
        X2 = (B2/D2).reshape(n_occ,n_vir-max_vir,-1)
        U[:,max_vir:,:] = X2

    U = U.reshape(A_size, -1)
    return U, current_dic
################################################################################

################################################################################
# K_inv # exacty the same function with sTDA_preconditioner, just no dic
# used in Jacobi_precodnitioner
def K_inv(B, eigen_lambda):
    # to solve K^(-1)y and K^(-1)u
    # K = A-λ*I
    # (sTDA_A - eigen_lambda*I)^-1 B = X
    # AX - Xλ = B
    # columns in B are residuals or current guess
    precondition_start = time.time()

    N_rows = np.shape(B)[0]
    B = B.reshape(N_rows, -1)
    N_vectors = np.shape(B)[1]

    #number of vectors to be preconditioned
    bnorm = np.linalg.norm(B, axis=0, keepdims = True)
    #norm of each vectors in B, shape (1,-1)
    B = B/bnorm

    start = time.time()
    tol = 1e-2    # Convergence tolerance
    max = 30   # Maximum number of iterations

    V = np.zeros((N_rows, (max+1)*N_vectors))
    W = np.zeros_like(V)
    count = 0

    # now V and W are empty holders, 0 vectors
    # W = sTDA_mv(V)
    # count is the amount of vectors that already sit in the holder
    # in each iteration, V and W will be filled/updated with new guess vectors
    ###########################################
    #initial guess: (diag(A) - λ)^-1 B.
    # D is preconditioner for each state
    t = 1e-10
    D = np.repeat(hdiag.reshape(-1,1), N_vectors, axis=1) - eigen_lambda
    D= np.where( abs(D) < t, np.sign(D)*t, D) # <t: returns np.sign(D)*t; else: D
    inv_D = 1/D

    # generate initial guess
    init = B*inv_D
    V, new_count = Gram_Schmidt_fill_holder(V, count, init)
    W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
    count = new_count
    ############################################################################
    for i in range(0, max):
        sub_B = np.dot(V[:,:count].T, B)
        sub_A = np.dot(V[:,:count].T, W[:,:count])
        #project sTDA_A matrix and vector B into subspace
        # size of subspace
        m = np.shape(sub_A)[0]
        sub_guess = solve_AX_Xla_B(sub_A, eigen_lambda, sub_B)
        full_guess = np.dot(V[:,:count], sub_guess)
        residual = np.dot(W[:,:count], sub_guess) - full_guess*eigen_lambda - B
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)

        if max_norm < tol or i == (max-1):
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess = residual[:,index]*inv_D[:,index]

        V, new_count = Gram_Schmidt_fill_holder(V, count, new_guess)
        W[:, count:new_count] = sTDA_mv(V[:, count:new_count])
        count = new_count

    precondition_end = time.time()
    precondition_time = precondition_end - precondition_start
    if i == (max -1):
        print('_________________ K inverse Failed Due to Iteration Limit _________________')
        print('K inverse  failed after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
        print('orthonormality of V', check_orthonormal(V[:,:count]))
    else:
        print('K inverse Done after ', i, 'steps; ', round(precondition_time, 4), 'seconds')
    return full_guess*bnorm
################################################################################

################################################################################
def Jacobi_preconditioner(arg1, arg2, arg3, arg4, arg5=None, arg6=None, arg7=None, arg8=None):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    """    (1-uu*)(A-λ*I)(1-uu*)t = -B"""
    """    B is residual, we want to solve t """
    """    z approximates t """
    """    z = (A-λ*I)^(-1)*(-B) + α(A-λ*I)^(-1) * u"""
    """    where α = [u*(A-λ*I)^(-1)y]/[u*(A-λ*I)^(-1)u] """
    """    first is to solve (A-λ*I)^(-1)y and (A-λ*I)^(-1)u """

    B = arg1
    eigen_lambda = arg2
    current_dic = arg3
    current_guess = arg4

    u = current_guess
    K_inv_y = K_inv(-B, eigen_lambda)
    K_inv_u = K_inv(current_guess, eigen_lambda)
    n = np.multiply(u, K_inv_y).sum(axis=0)
    d = np.multiply(u, K_inv_u).sum(axis=0)
    Alpha = n/d

    z = K_inv_y -  Alpha*K_inv_u
    return z, current_dic
################################################################################

################################################################################
# original simple Davidson, to solve eigenvalues and eigenkets of sTDA_A matrix
def Davidson0(k):
    print('sTDA nstate =', k)
    sTDA_D_start = time.time()
    tol = args.TDA_initialTOL # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    m = min([k+8, 2*k, A_size])
    V = np.zeros((A_reduced_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    V = TDA_A_diag_initial_guess(m, V, hdiag = max_vir_hdiag)
    W[:, :m] = sTDA_mv(V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ############################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])
        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals
        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index], hdiag = max_vir_hdiag)
        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        W[:, m:new_m] = sTDA_mv(V[:, m:new_m])
        m = new_m
    ############################################################################


    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('sTDA A diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 4), 'seconds' )
    print('sTDA excitation energies:')
    print(sub_eigenvalue[:k]*27.211386245988)

    # U = np.zeros((n_occ * n_vir, k))
    # U[:n_occ * max_vir,:] = full_guess

    U = np.zeros((n_occ,n_vir,k))
    U[:,:max_vir,:] = full_guess.reshape(n_occ,max_vir,k)
    U = U.reshape(A_size, k)
    return U
################################################################################


################################################################################
def sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, p, q, omega):
    ''' [ a b ] x - [ σ   π] x  Ω = p '''
    ''' [ b a ] y   [-π  -σ] y    = q '''

    ##############################
    ''' normalize the RHS '''
    pq = np.vstack((p,q))
    pqnorm = np.linalg.norm(pq, axis=0, keepdims = True)
    # print('pqnorm', pqnorm)
    p /= pqnorm
    q /= pqnorm
    ##############################
    d = abs(np.diag(sigma))
    # d is an one-dimension matrix
    d_mh = d**(-0.5)
    # d_h = d**0.5

    ''' LU = d^−1/2 (σ − π) d^−1/2 '''
    ''' A = PLU '''
    ''' P is identity matrix only when A is diagonally dominant '''
    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))
    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    p_p_q_tilde = np.dot(L_inv, d_mh.reshape(-1,1)*(p+q))
    p_m_q_tilde = np.dot(U_inv.T, d_mh.reshape(-1,1)*(p-q))

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True) # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' a ̃+ b ̃= L^−1 d^−1/2 (a+b) d^−1/2 L^−T '''
    ''' M = G^T (a ̃+ b ̃) G '''
    a_p_b_tilde = np.linalg.multi_dot([L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T])
    M = np.linalg.multi_dot([G.T, a_p_b_tilde, G])
    T = np.dot(G.T, p_p_q_tilde) + np.dot(G_inv, p_m_q_tilde * omega.reshape(1,-1))

    Z = solve_AX_Xla_B(M, omega**2, T)

    ''' (x ̃+ y ̃) = GZ '''
    ''' x + y = d^-1/2 L^-T (x ̃+ y ̃) '''
    ''' x - y = d^-1/2 U^-1 (x ̃- y ̃) '''
    x_p_y_tilde = np.dot(G,Z)
    x_p_y = d_mh.reshape(-1,1) * np.dot(L_inv.T, x_p_y_tilde)
    # x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z])
    x_m_y_tilde = (np.dot(a_p_b_tilde, x_p_y_tilde) - p_p_q_tilde)/omega
    x_m_y = d_mh.reshape(-1,1) * np.dot(U_inv, x_m_y_tilde)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    x *= pqnorm
    y *= pqnorm

    return x, y
################################################################################

################################################################################
def Qx(V, x):
    """ Qx = (1 - V*V.T)*x = x - V*V.T*x  """
    return x - einsum('ij, jk, kl -> il', V, V.T, x)
################################################################################

################################################################################
def on_the_fly_Hx(W, V, sub_A, x):
    """ on-the-fly compute H'x """
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + Q*K*Q"""
    """ K approximates H, here K = sTDA_A"""
    """ H′ ≡ W*V.T + V*W.T − V*a*V.T + (1-V*V.T)sTDA_A(1-V*V.T)"""
    """ H′x ≡ a + b − c + d """
    a = einsum('ij, jk, kl -> il', W, V.T, x)
    b = einsum('ij, jk, kl -> il', V, W.T, x)
    c = einsum('ij, jk, kl, lm -> im', V, sub_A, V.T, x)
    d = Qx(V, sTDA_mv(Qx(V, x)))
    Hx = a + b - c + d
    return Hx
################################################################################

################################################################################
# to diagonalize the H'
def new_ES(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    """ residual[:,index], sub_eigenvalue[:k][index], current_dic, full_guess[:,index], index, W[:,:m], V[:,:m], sub_A """
    current_dic = arg3
    return_index = arg5
    W_H = arg6
    V_H = arg7
    sub_A_H = arg8

    """ new eigenvalue solver """
    """ the traditional Davidson to diagonalize the H' matrix """
    """ W_H, V_H, sub_A_H are from the exact H """

    sTDA_D_start = time.time()
    tol = args.eigensolver_tol # Convergence tolerance
    max = 30
    #################################################
    # m is size of subspace
    k = args.nstates
    m = min([k+8, 2*k, A_size])
    # m is the amount of initial guesses
    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)
    # positions of hdiag with lowest values set as 1

    # sTDA as initial guess
    V = sTDA_initial_guess(m, V)

    W[:,:m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, :m])
    # create transformed guess vectors

    #generate initial guess and put in holders V and W
    ###########################################################################################
    for i in range(max):
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
#             print(sub_eigenvalue[:k]*27.211386245988)
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - np.dot(V[:,:m], sub_eigenket[:,:k] * sub_eigenvalue[:k])

        r_norms = np.linalg.norm(residual, axis=0).tolist()
#             print(r_norms)
        # largest residual norm
        max_norm = np.max(r_norms)
        if max_norm < tol or i == (max-1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ########################################
        # preconditioning step
        # only generate new guess from unconverged residuals

        new_guess, Y = TDA_A_diag_preconditioner(residual[:,index], sub_eigenvalue[:k][index])
        # Y doesn't matter

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
#             print(check_orthonormal(V[:,:new_m]))
        W[:, m:new_m] = on_the_fly_Hx(W_H, V_H, sub_A_H, V[:, m:new_m])
        m = new_m
    ###########################################################################################
    full_guess = np.dot(V[:,:m], sub_eigenket[:,:k])

    sTDA_D_end = time.time()
    sTDA_D = sTDA_D_end - sTDA_D_start
    print('H_app diagonalization:','threshold =', tol, '; in', i, 'steps ', round(sTDA_D, 2), 'seconds' )
#         print('H_app', sub_eigenvalue[:k]*27.211386245988)

    return full_guess[:,return_index], current_dic
################################################################################

################################################################################
# a dictionary for TDA initial guess and precodnitioner
TDA_i_key = ['sTDA', 'Adiag']
TDA_i_func = [sTDA_initial_guess, TDA_A_diag_initial_guess]
TDA_i_lib = dict(zip(TDA_i_key, TDA_i_func))

TDA_p_key = ['sTDA', 'Adiag', 'Jacobi', 'new_ES']
TDA_p_func = [sTDA_preconditioner, TDA_A_diag_preconditioner, \
Jacobi_preconditioner, new_ES]
TDA_p_lib = dict(zip(TDA_p_key, TDA_p_func))
################################################################################

################################################################################
#Davidson frame, where we can choose different initial guess and preconditioner
def Davidson(k, tol, init,prec):
    D_start = time.time()
    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = TDA_i_lib[init]
    new_guess_generator = TDA_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)
    max = args.max
    # Maximum number of iterations

    m = min([k + args.TDA_extrainitial, 2*k, A_size])
    # amount of initila guess
    #################################################
    # generate initial guess

    V = np.zeros((A_size, max*k + m))
    W = np.zeros_like(V)

    init_start = time.time()
    V = initial_guess(m, V)
    init_end = time.time()
    init_time = init_end - init_start

    print('Intial guess time:', round(init_time, 4), 'seconds')
    #generate initial guess and put in holders V and W
    # m is size of subspace

    # W = Av, create transformed guess vectors
    W[:, :m] = TDA_matrix_vector(V[:, :m])

    # time cost for preconditioning
    Pcost = 0
    ###########################################################################################
    for ii in range(max):
        print('Iteration ', ii)

        # sub_A is subspace A matrix
        sub_A = np.dot(V[:,:m].T, W[:,:m])
        sub_A = symmetrize(sub_A)
        print('subspace size: ', np.shape(sub_A)[0])

        sub_eigenvalue, sub_eigenket = np.linalg.eigh(sub_A)
        # print(sub_eigenvalue[:k])
        # Diagonalize the subspace Hamiltonian, and sorted.
        #sub_eigenvalue[:k] are smallest k eigenvalues
        full_guess = np.dot(V[:,:m], sub_eigenket[:, :k])

        residual = np.dot(W[:,:m], sub_eigenket[:,:k]) - full_guess * sub_eigenvalue[:k]

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        # largest residual norm
        max_norm = np.max(r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms

        print('maximum residual norm', max_norm)
        if max_norm < tol or ii == (max-1):
            print('Davidson procedure aborted')
            break

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]

        ########################################
        # generate new guess
        P_start = time.time()
        new_guess, current_dic = new_guess_generator(
                                    arg1 = residual[:,index],
                                    arg2 = sub_eigenvalue[:k][index],
                                    arg3 = current_dic,
                                    arg4 = full_guess[:,index],
                                    arg5 = index,
                                    arg6 = W[:,:m],
                                    arg7 = V[:,:m],
                                    arg8 = sub_A)
        P_end = time.time()

        iteration_list[ii] = current_dic

        Pcost += P_end - P_start

        # orthonormalize the new guesses against old guesses and put into V holder
        V, new_m = Gram_Schmidt_fill_holder(V, m, new_guess)
        print('m,new_m',m,new_m)
        W[:, m:new_m] = TDA_matrix_vector(V[:, m:new_m])
        print('new generated guesses:', new_m - m)
        m = new_m

    energies = sub_eigenvalue[:k]*27.211386245988


    D_end = time.time()
    Dcost = D_end - D_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDA_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDA_precondTOL
    Davidson_dic['total time'] = Dcost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sub_A)[0]
    Davidson_dic['excitation energy(eV)'] = energies.tolist()
    # Davidson_dic['semiempirical_difference'] = difference
    # Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    ###########################################################################################
    if ii == max-1:
        print('============ Davidson Failed Due to Iteration Limit ==============')
        print('Davidson failed after ', round(Dcost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', max_norm)
    else:
        print('Davidson done after ', round(Dcost, 4), 'seconds')
        print('Total steps =', ii+1)
        print('Final subspace shape = ', np.shape(sub_A))
        print('Preconditioning time:', round(Pcost, 4), round(Pcost/Dcost*100,2), '%')
    return energies, full_guess, Davidson_dic
################################################################################



def TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = hdiag):
    hdiag = hdiag.reshape(-1,)
    Dsort = hdiag.argsort()
    V_holder = TDA_A_diag_initial_guess(new_m, V_holder, hdiag = hdiag)
    energies = hdiag[Dsort][:new_m]*27.211386245988
    return V_holder, W_holder, new_m, energies, V_holder[:,:new_m], W_holder[:,:new_m]

################################################################################
def TDDFT_A_diag_preconditioner(R_x, R_y, omega, hdiag = hdiag):
    # preconditioners for each corresponding residual
    hdiag = hdiag.reshape(-1,1)
    # print('hdiag', hdiag.shape)
    k = R_x.shape[1]
#     print('omega.shape',omega.shape)
    t = 1e-14

    d = np.repeat(hdiag.reshape(-1,1), k, axis=1)

    D_x = d - omega
    D_x = np.where( abs(D_x) < t, np.sign(D_x)*t, D_x)
    D_x_inv = D_x**-1

    D_y = d + omega
    D_y = np.where( abs(D_y) < t, np.sign(D_y)*t, D_y)
    # force all values not in domain (-t, t)
    D_y_inv = D_y**-1

#     print('R_x.shape, D_x.shape',R_x.shape, D_x.shape)
    X_new = R_x*D_x_inv
    Y_new = R_y*D_y_inv

    return X_new, Y_new
################################################################################

################################################################################
def TDDFT_subspace_eigen_solver(a, b, sigma, pi, k):
    ''' [ a b ] x - [ σ   π] x  w = 0 '''
    ''' [ b a ] y   [-π  -σ] y    = 0 '''

    d = abs(np.diag(sigma))
    # print(d)
    # d is an one-dimension matrix
    d_mh = d**(-0.5)


    s_m_p = d_mh.reshape(-1,1) * (sigma - pi) * d_mh.reshape(1,-1)

    '''LU = d^−1/2 (σ − π) d^−1/2'''
    ''' A = PLU '''
    ''' if A is diagonally dominant, P is identity matrix (in fact not always) '''
    P_permutation, L, U = scipy.linalg.lu(s_m_p)
    # print(np.diag(P_permutation))

    L = np.dot(P_permutation, L)

    L_inv = np.linalg.inv(L)
    U_inv = np.linalg.inv(U)

    ''' a ̃−b ̃= U^-T d^−1/2 (a−b) d^-1/2 U^-1 = GG^T '''
    GGT = np.linalg.multi_dot([U_inv.T, d_mh.reshape(-1,1)*(a-b)*d_mh.reshape(1,-1), U_inv])

    G = scipy.linalg.cholesky(GGT, lower=True)
    # lower triangle matrix
    G_inv = np.linalg.inv(G)

    ''' M = G^T L^−1 d^−1/2 (a+b) d^−1/2 L^−T G '''
    M = np.linalg.multi_dot([G.T, L_inv, d_mh.reshape(-1,1)*(a+b)*d_mh.reshape(1,-1), L_inv.T, G])

    omega2, Z = np.linalg.eigh(M)
    omega = (omega2**0.5)[:k]
    # print(omega*27.211386245988)
    Z = Z[:,:k]

    ''' It requires Z^T Z = 1/Ω '''
    ''' x+y = d^−1/2 L^−T GZ Ω^-0.5 '''
    ''' x−y = d^−1/2 U^−1 G^−T Z Ω^0.5 '''

    x_p_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([L_inv.T, G, Z])     * (np.array(omega)**-0.5).reshape(1,-1)
    x_m_y = d_mh.reshape(-1,1) * np.linalg.multi_dot([U_inv, G_inv.T, Z]) * (np.array(omega)**0.5).reshape(1,-1)

    x = (x_p_y + x_m_y)/2
    y = x_p_y - x

    # norm = np.linalg.multi_dot([x.T, sigma, x])
    # norm += np.linalg.multi_dot([x.T, pi, y])
    # norm -= np.linalg.multi_dot([y.T, pi, x])
    # norm -= np.linalg.multi_dot([y.T, sigma, y])
    # print(norm)

    return omega, x, y
################################################################################

################################################################################
def sTDDFT_eigen_solver(k):
    ''' [ A' B' ] x - [ σ   π] x  w = 0'''
    ''' [ B' A' ] y   [-π  -σ] y    = 0'''
    tol=args.TDDFT_initialTOL
    max = 30
    sTDDFT_start = time.time()
    print('setting initial guess')
    m = 0
    new_m = min([k+8, 2*k, A_reduced_size])
    # new_m = min([3*k, A_size])
    # print('initial new_m = ', new_m)
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    V_holder, W_holder, new_m, energies, Xig, Yig = \
    TDDFT_A_diag_initial_guess(V_holder, W_holder, new_m, hdiag = max_vir_hdiag)
#     print('initial guess done')
    ##############################

    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        ###############################################################
        # print('ii = ', ii)
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        # show_memory_info('before sTDDFT_mv')
        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start
        # show_memory_info('after sTDDFT_mv')

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)
        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        subcost_start = time.time()
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        ########################################################################
        # preconditioning step
        X_new, Y_new = TDDFT_A_diag_preconditioner(\
                R_x[:,index], R_y[:,index], omega[index], hdiag = max_vir_hdiag)
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GScost_start = time.time()
        V_holder, W_holder, new_m = \
                VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GScost_end = time.time()
        GScost += GScost_end - GScost_start

        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========= sTD-DFT Failed Due to Iteration Limit==================')
        print('sTD-DFT failed after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Converged after ', ii+1, 'iterations  ', round(sTDDFT_cost, 4), 'seconds')
        print('final subspace', sigma.shape)
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_cost * 100,2),'%')

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,-1)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,-1)

    X = X.reshape(A_size, -1)
    Y = Y.reshape(A_size, -1)

    energies = omega*27.211386245988
    print('sTDDFT excitation energy:')
    print(energies)
    return energies, X, Y
################################################################################

################################################################################
def sTDDFT_initial_guess(V_holder, W_holder, new_m):
    energies, X_new_backup, Y_new_backup = sTDDFT_eigen_solver(new_m)
    # energies, X_new, Y_new = sTDDFT_eigen_solver(new_m)
    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder\
                            (V_holder, W_holder, 0,  X_new_backup, Y_new_backup)
    return V_holder, W_holder, new_m, energies, X_new_backup, Y_new_backup
################################################################################

################################################################################
def sTDDFT_preconditioner(Rx, Ry, omega):
    ''' [ A B ] - [1  0]X  w = P'''
    ''' [ B A ]   [0 -1]Y    = Q'''
    ''' P = Rx '''
    ''' Q = Ry '''
    tol = args.TDDFT_precondTOL
    print('sTDDFT_preconditioner conv', tol)
    max = 30
    sTDDFT_start = time.time()
    k = len(omega)
    m = 0

    Rx = Rx.reshape(n_occ,n_vir,-1)
    Ry = Ry.reshape(n_occ,n_vir,-1)

    P = Rx[:,:max_vir,:].reshape(A_reduced_size,-1)
    Q = Ry[:,:max_vir,:].reshape(A_reduced_size,-1)

    initial_start = time.time()
    V_holder = np.zeros((A_reduced_size, (max+1)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    '''normalzie the RHS'''
    PQ = np.vstack((P,Q))
    pqnorm = np.linalg.norm(PQ, axis=0, keepdims = True)

    # print('pqnorm', pqnorm)
    P /= pqnorm
    Q /= pqnorm

    ##############################

    ##############################
    # setting up initial guess
    X_new, Y_new  = TDDFT_A_diag_preconditioner(P, Q, omega, hdiag = max_vir_hdiag)
    V_holder, W_holder, new_m = \
            VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0,  X_new, Y_new)
    initial_end = time.time()
    initial_cost = initial_end - initial_start
    print('new_m =', new_m)
    print('diagonal initial guess done')
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    symmetrycost = 0
    for ii in range(max):
#         print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]

        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = \
                                        sTDDFT_mv(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1)
        a += np.dot(W.T, U2)

        b = np.dot(V.T, U2)
        b += np.dot(W.T, U1)

        sigma = np.dot(V.T, V)
        sigma -= np.dot(W.T, W)

        pi = np.dot(V.T, W)
        pi -= np.dot(W.T, V)

        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P)
        p += np.dot(W.T, Q)

        q = np.dot(W.T, P)
        q += np.dot(V.T, Q)

        subgenend = time.time()
        subgencost += subgenend - subgenstart

        symmetrystart = time.time()
        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        symmetryend = time.time()
        symmetrycost += symmetryend - symmetrystart
        # print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
        # solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(\
                                                  a, b, sigma, pi, p, q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        # U1x = np.dot(U1,x)
        # U2x = np.dot(U2,x)
        # Vx = np.dot(V,x)
        # Wx = np.dot(W,x)
        #
        # U1y = np.dot(U1,y)
        # U2y = np.dot(U2,y)
        # Vy = np.dot(V,y)
        # Wy = np.dot(W,y)
        #
        # X_full = Vx + Wy
        # Y_full = Wx + Vy
        #
        # R_x = U1x + U2y - X_full*omega - P
        # R_y = U2x + U1y + Y_full*omega - Q

        X_full = np.dot(V,x)
        X_full += np.dot(W,y)

        Y_full = np.dot(W,x)
        Y_full += np.dot(V,y)

        R_x = np.dot(U1,x)
        R_x += np.dot(U2,y)
        R_x -= X_full*omega
        R_x -= P

        R_y = np.dot(U2,x)
        R_y += np.dot(U1,y)
        R_y += Y_full*omega
        R_y -= Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
#         print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################

        ########################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = TDDFT_A_diag_preconditioner(R_x[:,index], R_y[:,index], \
                                            omega[index], hdiag = max_vir_hdiag)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(\
                                            V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start

#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    sTDDFT_end = time.time()

    sTDDFT_precond_cost = sTDDFT_end - sTDDFT_start

    if ii == (max -1):
        print('========== sTDDFT_precond Failed Due to Iteration Limit==========')
        print('sTDDFT_precond failed after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT_precond Converged after ', ii+1, 'iterations  ', round(sTDDFT_precond_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sTDDFT_precond_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sTDDFT_precond_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sTDDFT_precond_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sTDDFT_precond_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sTDDFT_precond_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sTDDFT_precond_cost * 100,2),'%')
        print('symmetrycost', round(symmetrycost,4), round(symmetrycost/sTDDFT_precond_cost * 100,2),'%')
        print('final subspace', sigma.shape)

    show_memory_info('preconditioner at end')
    X_full *=  pqnorm
    Y_full *=  pqnorm

    X = np.zeros((n_occ,n_vir,k))
    Y = np.zeros((n_occ,n_vir,k))

    X[:,:max_vir,:] = X_full.reshape(n_occ,max_vir,k)
    Y[:,:max_vir,:] = Y_full.reshape(n_occ,max_vir,k)

    if max_vir < n_vir:
        P2 = Rx[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)
        Q2 = Ry[:,max_vir:,:].reshape(n_occ*(n_vir-max_vir),-1)

        X2, Y2 = TDDFT_A_diag_preconditioner(\
                        P2, Q2, omega, hdiag = delta_diag_A[:,max_vir:])
        X[:,max_vir:,:] = X2.reshape(n_occ,n_vir-max_vir,-1)
        Y[:,max_vir:,:] = Y2.reshape(n_occ,n_vir-max_vir,-1)

    X = X.reshape(A_size,-1)
    Y = Y.reshape(A_size,-1)
    print(X.shape, Y.shape)
    return X, Y
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
TDDFT_i_key = ['sTDDFT', 'Adiag']
TDDFT_i_func = [sTDDFT_initial_guess, TDDFT_A_diag_initial_guess]
TDDFT_i_lib = dict(zip(TDDFT_i_key, TDDFT_i_func))

TDDFT_p_key = ['sTDDFT', 'Adiag']
TDDFT_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
TDDFT_p_lib = dict(zip(TDDFT_p_key, TDDFT_p_func))
################################################################################

################################################################################
def TDDFT_eigen_solver(init, prec, k=args.nstates, tol=args.TDDFT_tolerance):

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    TDDFT_start = time.time()
    max = args.max
    m = 0

    if args.TDDFT_extrainitial_3n == True:
        new_m = min([k + args.TDDFT_extrainitial, 3*k, A_size])
    else:
        new_m = min([k + args.TDDFT_extrainitial, 2*k, A_size])

    # new_m = k

    initial_guess = TDDFT_i_lib[init]
    new_guess_generator = TDDFT_p_lib[prec]

    V_holder = np.zeros((A_size, (max+3)*k))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)
    # set up initial guess VW, transformed vectors U1&U2

    ##############################
    # setting up initial guess
    init_start = time.time()
    V_holder, W_holder, new_m, initial_energies, X_ig, Y_ig = initial_guess(V_holder, W_holder, new_m)
    init_end = time.time()
    init_time = init_end - init_start

    initial_energies = initial_energies.tolist()[:k]

    print('new_m =', new_m)
    print('initial guess done')
    ##############################
    Pcost = 0
    VWGScost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '____________________||||')
        show_memory_info('beginning of step '+ str(ii))
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)

        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the eigenvalue omega in the subspace
        omega, x, y = TDDFT_subspace_eigen_solver(a, b, sigma, pi, k)
        ###############################################################
        # compute the residual
        # R_x = U1x + U2y - (Vx + Wy)omega
        # R_y = U2x + U1y + (Wx + Vy)omega
        # R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega
        # R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega
        R_y = U2x + U1y + Y_full*omega

        residual = np.vstack((R_x, R_y))

        r_norms = np.linalg.norm(residual, axis=0).tolist()

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        print('Maximum residual norm: ', np.max(r_norms))
        # print('r_norms', r_norms)
        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        index = [i for i,R in enumerate(r_norms) if R > tol]
        print('unconverged states', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        P_start = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        P_end = time.time()
        Pcost += P_end - P_start
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        VWGScost_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        VWGScost_end = time.time()
        VWGScost += VWGScost_end - VWGScost_start
        print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################



    omega *= 27.211386245988

    difference = np.mean((np.array(initial_energies) - np.array(omega))**2)
    difference = float(difference)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    TDDFT_end = time.time()
    TDDFT_cost = TDDFT_end - TDDFT_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['initial_energies'] = initial_energies
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['nstate'] = k
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = tol
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = init_time
    Davidson_dic['initial guess threshold'] = args.TDDFT_initialTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.TDDFT_precondTOL
    Davidson_dic['total time'] = TDDFT_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['excitation energy(eV)'] = omega.tolist()
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    if ii == (max -1):
        print('============================ TDDFT Failed Due to Iteration Limit============================')
        print('TDDFT failed after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('================================== TDDFT Calculation Done ==================================')
        print('TDDFT Converged after ', ii+1, 'iterations  ', round(TDDFT_cost, 4), 'seconds')
        print('Initial guess',init)
        print('preconditioner', prec)
        print('Final subspace ', sigma.shape)
        print('preconditioning cost', round(Pcost,4), round(Pcost/TDDFT_cost * 100, 2), "%")
        print('VWGScost',round(VWGScost,4))
        # print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))

    # need normalize
    show_memory_info('Total TDDFT')
    return omega, X_full, Y_full, Davidson_dic
# end of TDDFT module
################################################################################

################################################################################
# a dictionary for TDDFT initial guess and precodnitioner
dynpol_i_key = ['sTDDFT', 'Adiag']
dynpol_i_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_i_lib = dict(zip(dynpol_i_key, dynpol_i_func))

dynpol_p_key = ['sTDDFT', 'Adiag']
dynpol_p_func = [sTDDFT_preconditioner, TDDFT_A_diag_preconditioner]
dynpol_p_lib = dict(zip(dynpol_p_key, dynpol_p_func))
################################################################################

################################################################################
def gen_P():
    mo_coeff = mf.mo_coeff
    mo_occ = mf.mo_occ
    occidx = mo_occ > 0
    orbo = mo_coeff[:, occidx]
    orbv = mo_coeff[:,~occidx]
    int_r= mol.intor_symmetric('int1e_r')
    P = lib.einsum("xpq,pi,qa->iax", int_r, orbo, orbv.conj())
    return P
################################################################################

################################################################################
def dynamic_polarizability(init, prec):
    ''' [ A B ] - [1  0]X  w = -P'''
    ''' [ B A ]   [0 -1]Y    = -Q'''
    dp_start = time.time()
    initial_guess = dynpol_i_lib[init]
    new_guess_generator = dynpol_p_lib[prec]

    print('Initial guess:  ', init)
    print('Preconditioner: ', prec)
    print('A matrix size = ', A_size,'*', A_size)

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    k = len(args.dynpol_omega)
    omega =  np.zeros([3*k])
    for jj in range(k):
        # 0,1,2   3,4,5   6,7,8
        omega[3*jj:3*(jj+1)] = 45.56337117/args.dynpol_omega[jj]
        # convert nm to Hartree

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    pqnorm = pnorm * (2**0.5)
    print('pqnorm', pqnorm)
    P /= pqnorm

    P = np.tile(P,k)
    Q = P
    #P, Q, omega

    max = args.max
    tol = args.dynpol_tolerance

    m = 0
    V_holder = np.zeros((A_size, (max+1)*k*3))
    W_holder = np.zeros_like(V_holder)

    U1_holder = np.zeros_like(V_holder)
    U2_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()
    X_ig, Y_ig = initial_guess(-P, -Q, omega)

    alpha_omega_ig = []
    X_p_Y = X_ig + Y_ig
    X_p_Y *= np.tile(pqnorm,k)
    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega_ig.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)
    print('initial guess of tensor alpha')
    for i in range(k):
        print(args.dynpol_omega[i],'nm')
        print(alpha_omega_ig[i])

    V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, 0, X_ig, Y_ig)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ###############################################################
        # creating the subspace
        V = V_holder[:,:new_m]
        W = W_holder[:,:new_m]
        # U1 = AV + BW
        # U2 = AW + BV

        MV_start = time.time()
        U1_holder[:, m:new_m], U2_holder[:, m:new_m] = TDDFT_matrix_vector(V[:, m:new_m], W[:, m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        U1 = U1_holder[:,:new_m]
        U2 = U2_holder[:,:new_m]

        subgenstart = time.time()
        a = np.dot(V.T, U1) + np.dot(W.T, U2)
        b = np.dot(V.T, U2) + np.dot(W.T, U1)

        sigma = np.dot(V.T, V) - np.dot(W.T, W)
        pi = np.dot(V.T, W) - np.dot(W.T, V)

        a = symmetrize(a)
        b = symmetrize(b)
        sigma = symmetrize(sigma)
        pi = anti_symmetrize(pi)
        # p = VP + WQ
        # q = WP + VQ
        p = np.dot(V.T, P) + np.dot(W.T, Q)
        q = np.dot(W.T, P) + np.dot(V.T, Q)
        subgenend = time.time()
        subgencost += subgenend - subgenstart
        print('sigma.shape', sigma.shape)
        ###############################################################

        ###############################################################
#         solve the x & y in the subspace
        subcost_start = time.time()
        x, y = sTDDFT_preconditioner_subspace_eigen_solver(a, b, sigma, pi, -p, -q, omega)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R_x = U1x + U2y - (Vx + Wy)omega - P
#         R_y = U2x + U1y + (Wx + Vy)omega - Q
#         R_x = np.dot(U1,x) + np.dot(U2,y) - (np.dot(V,x) + np.dot(W,y))*omega - P
#         R_y = np.dot(U2,x) + np.dot(U1,y) + (np.dot(W,x) + np.dot(V,y))*omega - Q

        U1x = np.dot(U1,x)
        U2x = np.dot(U2,x)
        Vx = np.dot(V,x)
        Wx = np.dot(W,x)

        U1y = np.dot(U1,y)
        U2y = np.dot(U2,y)
        Vy = np.dot(V,y)
        Wy = np.dot(W,y)

        X_full = Vx + Wy
        Y_full = Wx + Vy

        R_x = U1x + U2y - X_full*omega + P
        R_y = U2x + U1y + Y_full*omega + Q

        residual = np.vstack((R_x,R_y))
#         print('residual.shape', residual.shape)
        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)
        print('maximum residual norm: ', np.max(r_norms))

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        if np.max(r_norms) < tol or ii == (max -1):
            break
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ###############################################################

        #####################################################################################
        # preconditioning step
        Pstart = time.time()
        X_new, Y_new = new_guess_generator(R_x[:,index], R_y[:,index], omega[index])
        Pend = time.time()
        Pcost += Pend - Pstart
        #####################################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, W_holder, new_m = VW_Gram_Schmidt_fill_holder(V_holder, W_holder, m, X_new, Y_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################

    dp_end = time.time()
    dp_cost = dp_end - dp_start

    if ii == (max -1):
        print('============================ Dynamic polarizability Failed Due to Iteration Limit============================')
        print('dynamic polarizability failed after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Dynamic polarizability Converged after ', ii+1, 'iterations  ', round(dp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/dp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/dp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/dp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/dp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/dp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/dp_cost * 100,2),'%')

    print('Wavelength we look at', args.dynpol_omega)
    alpha_omega = []

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)) + np.linalg.norm(np.dot(Y_ig.T, Y_full)))

    X_p_Y = X_full + Y_full

    X_p_Y *= np.tile(pqnorm,k)

    for jj in range(k):
        X_p_Y_tmp = X_p_Y[:,3*jj:3*(jj+1)]
        # *-1 from the definition of dipole moment. *2 for double occupancy
        alpha_omega.append(np.dot(P_origin.T, X_p_Y_tmp)*-2)

     # np.dot(-P.T, X_full) + np.dot(-P.T, Y_full)

    difference = 0
    for i in range(k):
        difference += np.mean((alpha_omega_ig[i] - alpha_omega[i])**2)

    difference = float(difference)


    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.dynpol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.dynpol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.dynpol_initprecTOL
    Davidson_dic['total time'] = dp_cost
    Davidson_dic['iterations'] = ii + 1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(sigma)[0]
    Davidson_dic['Dynamic polarizability wavelength'] = args.dynpol_omega
    Davidson_dic['Dynamic polarizability tensor alpha'] = [i.tolist() for i in alpha_omega]
    Davidson_dic['Dynamic polarizability tensor alpha initial guess '] = [i.tolist() for i in alpha_omega_ig]
    Davidson_dic['overlap'] = overlap
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    show_memory_info('Total Dynamic polarizability')

    return alpha_omega, Davidson_dic
################################################################################

###############################################################################
def stapol_A_diag_initprec(P):
    d = hdiag.reshape(-1,1)
    return -P/d
###############################################################################

###############################################################################
def stapol_sTDDFT_initprec(P):
    '''(A* + B*)X = -P'''
    '''residual = (A* + B*)X + P'''
    '''X_ig = -P/d'''
    '''X_new = (residual - P)/D = Ux/D'''
    ssp_start = time.time()
    max = 30
    tol = args.stapol_initprecTOL
    m = 0
    npvec = P.shape[1]

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]
    pnorm = np.linalg.norm(P_origin, axis=0, keepdims = True)
    # print('pnorm', pnorm)
    P /= pnorm

    # print('vectors to be preconditioned', npvec)
    V_holder = np.zeros((A_size, (max+1)*npvec))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

    X_ig = stapol_A_diag_initprec(P)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_ig)
    # V_holder[:,0] = X_new[:,0]/np.linalg.norm(X_new[:,0])
    # if npvec >= 2:
    #     V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 1, X_new[:, 1:])
    # else:
    #     new_m = 1
    # print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        # creating the subspace
        MV_start = time.time()
        U_holder[:, m:new_m] = sTDDFT_stapol_mv(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)

        subgenend = time.time()
        subgencost += subgenend - subgenstart
        ###############################################################

        ###############################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ###############################################################

        ###############################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
        ###############################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = stapol_A_diag_initprec(-residual[:,index])

        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ###############################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    X_full = np.dot(V,x)
    # alpha = np.dot(X_full.T, P)*-4

    ssp_end = time.time()
    ssp_cost = ssp_end - ssp_start

    if ii == (max -1):
        print('============================ sTDDFT Static polarizability Failed Due to Iteration Limit============================')
        print('sTDDFT Static polarizability failed after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('sTDDFT Static polarizability Converged after ', ii+1, 'iterations  ', round(ssp_cost, 4), 'seconds')
        # print('initial_cost', round(initial_cost,4), round(initial_cost/ssp_cost * 100,2),'%')
        # print('Pcost', round(Pcost,4), round(Pcost/ssp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/ssp_cost * 100,2),'%')
        # print('GScost', round(GScost,4), round(GScost/ssp_cost * 100,2),'%')
        # print('subcost', round(subcost,4), round(subcost/ssp_cost * 100,2),'%')
        # print('subgencost', round(subgencost,4), round(subgencost/ssp_cost * 100,2),'%')

    X_full *= pnorm
    return X_full
################################################################################

################################################################################
# a dictionary for static_polarizability initial guess and precodnitioner
stapol_i_key = ['sTDDFT', 'Adiag']
stapol_i_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_i_lib = dict(zip(stapol_i_key, stapol_i_func))

stapol_p_key = ['sTDDFT', 'Adiag']
stapol_p_func = [stapol_sTDDFT_initprec, stapol_A_diag_initprec]
stapol_p_lib = dict(zip(stapol_p_key, stapol_p_func))
################################################################################

################################################################################
# Static polarizability
def static_polarizability(init, prec):
    '''(A+B)X = -P'''
    '''residual = (A+B)X + P'''
    '''X_new = (residual - P)/D'''
    print('initial guess', init)
    print('preconditioner', prec)
    sp_start = time.time()

    P = gen_P()
    P = P.reshape(-1,3)

    P_origin = np.zeros_like(P)
    P_origin[:,:] = P[:,:]

    pnorm = np.linalg.norm(P, axis=0, keepdims = True)
    # pnorm is constant
    print('pnorm', pnorm)

    P /= pnorm

    Davidson_dic = {}
    Davidson_dic['iteration'] = []
    iteration_list = Davidson_dic['iteration']

    initial_guess = stapol_i_lib[init]
    new_guess_generator = stapol_p_lib[prec]

    max = args.max
    tol = args.stapol_tolerance
    m = 0

    V_holder = np.zeros((A_size, (max+1)*3))
    U_holder = np.zeros_like(V_holder)

    ##############################
    # setting up initial guess
    init_start = time.time()

#     X_new = -P/d3
    X_ig = initial_guess(P)

    alpha_init = np.dot((X_ig*pnorm).T, P_origin)*-4
    print('alpha tensor of initial guess:')
    print(alpha_init)

    V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, 0, X_ig)
    print('new_m =', new_m)
    init_end = time.time()
#     print('initial guess done')
    initial_cost = init_end - init_start
    ##############################
    subcost = 0
    Pcost = 0
    MVcost = 0
    GScost = 0
    subgencost = 0
    for ii in range(max):
        print('||||____________________Iteration', ii, '_________')
        ########################################################################
        # creating the subspace

        MV_start = time.time()
        U_holder[:, m:new_m] = static_polarizability_matrix_vector(V_holder[:,m:new_m])
        MV_end = time.time()
        MVcost += MV_end - MV_start

        V = V_holder[:,:new_m]
        # print('check_orthonormal(V)',check_orthonormal(V))
        # U = AX + BX = (A+B)X
#         print(check_orthonormal(V))
        U = U_holder[:,:new_m]

        subgenstart = time.time()
        p = np.dot(V.T, P)
        a_p_b = np.dot(V.T,U)
        a_p_b = symmetrize(a_p_b)
        subgenend = time.time()
        subgencost += subgenend - subgenstart

        # print('a_p_b.shape', a_p_b.shape)
        ########################################################################

        ########################################################################
#         solve the x in the subspace
        subcost_start = time.time()
        x = np.linalg.solve(a_p_b, -p)
        # print('x.shape', x.shape)
        subcost_end = time.time()
        subcost += subcost_end - subcost_start
        ########################################################################

        ########################################################################
        # compute the residual
#         R = Ux + P
        Ux = np.dot(U,x)
        residual = Ux + P

        r_norms = np.linalg.norm(residual, axis=0).tolist()
        print('r_norms', r_norms)

        iteration_list.append({})
        current_dic = iteration_list[ii]
        current_dic['residual norms'] = r_norms
        iteration_list[ii] = current_dic

        # index for unconverged residuals
        index = [r_norms.index(i) for i in r_norms if i > tol]
#         print('index', index)
        ########################################################################
        if np.max(r_norms) < tol or ii == (max -1):
            break

        ########################################################################
        # preconditioning step
        Pstart = time.time()

        X_new = new_guess_generator(-residual[:,index])
        # X_new = X_new/np.linalg.norm(X_new, axis=0)
        Pend = time.time()
        Pcost += Pend - Pstart
        ########################################################################

        ########################################################################
        # GS and symmetric orthonormalization
        m = new_m
        GS_start = time.time()
        V_holder, new_m = Gram_Schmidt_fill_holder(V_holder, m, X_new)
        GS_end = time.time()
        GScost += GS_end - GS_start
#         print('m & new_m', m, new_m)
        if new_m == m:
            print('All new guesses kicked out during GS orthonormalization')
            break
        ###############################################################
    print('V.shape', V.shape)
    X_full = np.dot(V,x)

    overlap = float(np.linalg.norm(np.dot(X_ig.T, X_full)))

    X_full *= pnorm

    tensor_alpha = np.dot(X_full.T, P_origin)*-4
    sp_end = time.time()
    sp_cost = sp_end - sp_start



    if ii == (max -1):
        print('============================ Static polarizability Failed Due to Iteration Limit============================')
        print('Static polarizability failed after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('current residual norms', r_norms)
        print('max_norm = ', np.max(r_norms))
    else:
        print('Static polarizability Converged after ', ii+1, 'iterations  ', round(sp_cost, 4), 'seconds')
        print('initial_cost', round(initial_cost,4), round(initial_cost/sp_cost * 100,2),'%')
        print('Pcost', round(Pcost,4), round(Pcost/sp_cost * 100,2),'%')
        print('MVcost', round(MVcost,4), round(MVcost/sp_cost * 100,2),'%')
        print('GScost', round(GScost,4), round(GScost/sp_cost * 100,2),'%')
        print('subcost', round(subcost,4), round(subcost/sp_cost * 100,2),'%')
        print('subgencost', round(subgencost,4), round(subgencost/sp_cost * 100,2),'%')

    difference = np.mean((alpha_init - tensor_alpha)**2)
    difference = float(difference)

    sp_end = time.time()
    spcost = sp_end - sp_start
    Davidson_dic['initial guess'] = init
    Davidson_dic['preconditioner'] = prec
    Davidson_dic['molecule'] = basename
    Davidson_dic['method'] = args.method
    Davidson_dic['functional'] = args.functional
    Davidson_dic['threshold'] = args.stapol_tolerance
    Davidson_dic['SCF time'] = kernel_t
    Davidson_dic['Initial guess time'] = initial_cost
    Davidson_dic['initial guess threshold'] = args.stapol_initprecTOL
    Davidson_dic['New guess generating time'] = Pcost
    Davidson_dic['preconditioner threshold'] = args.stapol_initprecTOL
    Davidson_dic['total time'] = sp_cost
    Davidson_dic['iterations'] = ii+1
    Davidson_dic['A matrix size'] = A_size
    Davidson_dic['final subspace size'] = np.shape(a_p_b)[0]
    Davidson_dic['semiempirical_difference'] = difference
    Davidson_dic['overlap'] = overlap
    Davidson_dic['ax'] = a_x
    Davidson_dic['alpha'] = alpha
    Davidson_dic['beta'] = beta
    Davidson_dic['virtual truncation tol'] = args.truncate_virtual
    Davidson_dic['n_occ'] = n_occ
    Davidson_dic['n_vir'] = n_vir
    Davidson_dic['max_vir'] = max_vir
    return tensor_alpha, Davidson_dic
################################################################################

TDA_combo = [            # option
['sTDA','sTDA'],     # 0
['Adiag','Adiag'],   # 1
['Adiag','sTDA'],    # 2
['sTDA','Adiag'],    # 3
['sTDA','Jacobi'],   # 4
['Adiag','Jacobi'],  # 5
['Adiag','new_ES'],  # 6
['sTDA','new_ES']]   # 7

TDDFT_combo = [         # option
['sTDDFT','sTDDFT'],     # 0
['Adiag','Adiag'],       # 1
['Adiag','sTDDFT'],      # 2
['sTDDFT','Adiag']]      # 3

dynpol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

stapol_combo = [         # option
['sTDDFT','sTDDFT'],                     # 0
['Adiag','Adiag'],                       # 1
['Adiag','sTDDFT'],                      # 2
['sTDDFT','Adiag']]                      # 3

if args.TDA == True:
    for option in args.TDA_options:
        init, prec = TDA_combo[option]
        print('-------------------------------------------------------------------')
        print('|---------------   In-house Developed Davidson Starts   -----------|')
        print('Residual conv =', args.TDA_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, eigenkets, Davidson_dic = Davidson(args.nstates, args.TDA_tolerance, init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Davidson time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDA_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Davidson Done   -----------|')

if args.TDDFT == True:
    for option in args.TDDFT_options:
        init, prec = TDDFT_combo[option]
        print('----------------------------------------------------------------------------')
        print('|---------------   In-house Developed TDDFT Eigensolver Starts   -----------|')
        print('Residual conv =', args.TDDFT_tolerance)
        print('Number of excited states =', args.nstates)

        total_start = time.time()
        Excitation_energies, X, Y, Davidson_dic = TDDFT_eigen_solver(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house TDDFT Eigensolver time:', round(total_time, 4), 'seconds')

        print('Excited State energies (eV) =')
        print(Excitation_energies)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_TDDFT_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed TDDFT Eigensolver Done   -----------|')

if args.dynpol == True:
    args.TDDFT_precondTOL = args.dynpol_initprecTOL
    print('args.TDDFT_precondTOL', args.TDDFT_precondTOL)
    for option in args.dynpol_options:
        init,prec = dynpol_combo[option]
        print('---------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Dynamic Polarizability Starts   -----------|')
        print('Residual conv =', args.dynpol_tolerance)
        print('Perturbation wavelength omega (nm) =', args.dynpol_omega)

        total_start = time.time()
        alpha_omega, Davidson_dic = dynamic_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Dynamic Polarizability time:', round(total_time, 4), 'seconds')
        print('Dynamic polarizability tensor alpha')
        for i in range(len(args.dynpol_omega)):
            print(args.dynpol_omega[i],'nm')
            print(alpha_omega[i])

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Dynamic_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Dynamic Polarizability Done   -----------|')

if args.stapol == True:
    for option in args.stapol_options:
        init,prec = stapol_combo[option]
        print('--------------------------------------------------------------------------------')
        print('|---------------   In-house Developed Static Polarizability Starts   -----------|')
        print('Residual conv =', args.stapol_tolerance)

        total_start = time.time()
        tensor_alpha, Davidson_dic = static_polarizability(init,prec)
        total_end = time.time()
        total_time = total_end - total_start

        print('In-house Static Polarizability time:', round(total_time, 4), 'seconds')
        print('Static polarizability tensor alpha')
        print(tensor_alpha)

        curpath = os.getcwd()
        yamlpath = os.path.join(curpath, basename + '_Static_Polarizability_i_' + init + '_p_'+ prec + '.yaml')

        with open(yamlpath, "w", encoding="utf-8") as f:
            yaml.dump(Davidson_dic, f)

        print('|---------------   In-house Developed Static Polarizability Done   -----------|')


if args.sTDA == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDA   --------------------|')
    print('Convergence =', args.TDA_initialTOL)

    total_start = time.time()
    X = Davidson0(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDA time:', round(total_time, 4), 'seconds')
    print('|---------------------------   In-house Developed sTDA done  ----------------|')

if args.sTDDFT == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   In-house Developed sTDDFT   --------------------|')
    print('Convergence =', args.TDDFT_initialTOL)

    total_start = time.time()
    energies, X, Y = sTDDFT_eigen_solver(k=args.nstates)
    total_end = time.time()
    total_time = total_end - total_start

    print('In-house sTDDFT time:', round(total_time, 4), 'seconds')

    print('|---------------------------   In-house Developed sTDDFT done  ----------------|')


if args.Truncate_test == True:
    print('--------------------------------------------------------------------------------')
    print('|---------------------------   Test the Truncation efficiency  ----------------|')

    n_state = 40
    X = np.random.rand(A_size,n_state)
    Y = np.random.rand(A_size,n_state)
    print('n_vir = ', n_vir)
    print('A_size =', A_size)
    print('n_state =', n_state)
    print("virtual tuning: -------------------------------------------- ")
    print("{:<8} {:<8} {:<8} {:<8}".format(\
            'eV', 'max_vir', 'sTDA_t', 'sTDDFT_t'))
    for vir_trunc in [40, 50, 60, 70, 10000000]:
        del max_vir, sTDA_mv, sTDDFT_mv
        max_vir = gen_maxvir(tol_eV = vir_trunc)
        q_ij, q_ab, q_ia , GK_q_jb, GJ_q_ab = gen_QJK(max_vir=max_vir)
        # print('q_ab', q_ab.shape, 'GK_q_jb', GK_q_jb.shape)
        iajb_fly, ijab_fly, ibja_fly, delta_fly = gen_iajb_ijab_ibja_delta_fly(\
                                        max_vir=max_vir, \
                                        q_ij = q_ij, \
                                        q_ab = q_ab, \
                                        q_ia = q_ia , \
                                        GK_q_jb = GK_q_jb, \
                                        GJ_q_ab = GJ_q_ab)


        sTDA_mv, sTDDFT_mv, sTDDFT_stapol_mv = gen_sTDA_sTDDFT_stapol_fly(\
                                        max_vir=max_vir, \
                                        iajb_fly = iajb_fly, \
                                        ijab_fly = ijab_fly, \
                                        ibja_fly = ibja_fly, \
                                        delta_fly = delta_fly)


        sTDA_start = time.time()
        sTDA_X = sTDA_mv(X)
        sTDA_end = time.time()
        sTDA_mv_time = sTDA_end - sTDA_start

        sTDDFT_start = time.time()
        sTDDFT_X, sTDDFT_Y = sTDDFT_mv(X, Y)
        sTDDFT_end = time.time()
        sTDDFT_mv_time = sTDDFT_end - sTDDFT_start

        print("{:<8} {:<8} {:<8.4f} {:<8.4f}".format(\
                vir_trunc, max_vir, sTDA_mv_time, sTDDFT_mv_time))

    print('|-------------------------------------   Test done  --------------------------|')

if args.pytd == True:
    print('-----------------------------------------------------------------')
    print('|----------------------    PySCF TTDDFT    ----------------------|')
    TD.nstates = args.nstates
    TD.conv_tol = 1e-10
    start = time.time()
    TD.kernel()
    end = time.time()
    pyscf_time = end-start
    print('Built-in TDDFT time:', round(pyscf_time, 4), 'seconds')
    print('|---------------------------------------------------------------|')

if args.verbose > 3:
    for key in vars(args):
        print(key,'=', vars(args)[key])
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='compt184', release='3.10.0-1127.el7.x86_64', version='#1 SMP Tue Feb 18 16:39:12 EST 2020', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.0 (default, Aug 23 2018, 14:24:33) 
[GCC 6.3.0]
numpy 1.18.1  scipy 1.4.1
Date: Wed Jul  7 14:46:39 2021
PySCF version 1.7.4
PySCF path  /home/zzz6/.local/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 50000 
[INPUT] num. atoms = 49
[INPUT] num. electrons = 212
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 N     -3.450864633004   0.055285985657  -0.008172502421 AA   -6.521189049325   0.104475371419  -0.015443791327 Bohr
[INPUT]  2 C     -4.312710911491  -1.074271985221   0.083467416329 AA   -8.149842477142  -2.030079835361   0.157730557186 Bohr
[INPUT]  3 C     -5.496224910397  -1.125384805020  -0.681088903349 AA  -10.386359799663  -2.126669066236  -1.287071493810 Bohr
[INPUT]  4 C     -3.998410379823  -2.145203102362   0.945135836673 AA   -7.555900551484  -4.053846345032   1.786047881824 Bohr
[INPUT]  5 C     -6.350456242627  -2.229056480219  -0.577886809308 AA  -12.000623064600  -4.212306263801  -1.092047800591 Bohr
[INPUT]  6 H     -5.738116555134  -0.294818975822  -1.350849791611 AA  -10.843468760036  -0.557127120629  -2.552736141571 Bohr
[INPUT]  7 C     -4.850627928716  -3.252334013126   1.026932547631 AA   -9.166358317439  -6.146020550416   1.940621263424 Bohr
[INPUT]  8 H     -3.085848632703  -2.100387210437   1.547030340390 AA   -5.831408777673  -3.969156583264   2.923463649730 Bohr
[INPUT]  9 C     -6.032019991942  -3.300425825770   0.270836626365 AA  -11.398865762672  -6.236900905147   0.511807048332 Bohr
[INPUT] 10 H     -7.266580446838  -2.257143166630  -1.177419248010 AA  -13.731846906643  -4.265382408863  -2.224999912529 Bohr
[INPUT] 11 H     -4.595976508396  -4.077343145085   1.700744389725 AA   -8.685136875803  -7.705061860083   3.213941104470 Bohr
[INPUT] 12 H     -6.699540463916  -4.164847334528   0.343633353654 AA  -12.660296637243  -7.870420812883   0.649372925671 Bohr
[INPUT] 13 C     -4.020033305612   1.359654707788  -0.051203220066 AA   -7.596761959236   2.569375021695  -0.096760062620 Bohr
[INPUT] 14 C     -3.513020058457   2.332189179355  -0.937399564309 AA   -6.638645780587   4.407198819655  -1.771428445830 Bohr
[INPUT] 15 C     -5.106086622953   1.685876419748   0.786640799366 AA   -9.649105285686   3.185844713186   1.486535669210 Bohr
[INPUT] 16 C     -4.078359361060   3.611986680527  -0.971619513367 AA   -7.706982229960   6.825665591772  -1.836094777547 Bohr
[INPUT] 17 H     -2.677484544128   2.075886983853  -1.595602647982 AA   -5.059712491157   3.922857865031  -3.015252008316 Bohr
[INPUT] 18 C     -5.675542555184   2.963028746110   0.731202957790 AA  -10.725221037613   5.599312829361   1.381773331696 Bohr
[INPUT] 19 H     -5.497506260469   0.931292359495   1.475331364771 AA  -10.388781200368   1.759887501345   2.787972222398 Bohr
[INPUT] 20 C     -5.163746993108   3.934740975748  -0.142471156335 AA   -9.758067593521   7.435582815267  -0.269231466124 Bohr
[INPUT] 21 H     -3.676224738232   4.358260815510  -1.665061313298 AA   -6.947057927609   8.235919320737  -3.146509862743 Bohr
[INPUT] 22 H     -6.518584954550   3.204157931037   1.387445234590 AA  -12.318340283810   6.054980949513   2.621891506208 Bohr
[INPUT] 23 H     -5.607823291016   4.934570473266  -0.177993253901 AA  -10.597250174976   9.324986736838  -0.336358501894 Bohr
[INPUT] 24 C     -2.051205069055  -0.116296978027  -0.052478066170 AA   -3.876215805833  -0.219769437585  -0.099169172608 Bohr
[INPUT] 25 C     -1.185554488912   0.829917370568   0.541991653563 AA   -2.240373289793   1.568316536393   1.024215787034 Bohr
[INPUT] 26 C     -1.479487609220  -1.238947305863  -0.695702189776 AA   -2.795826386114  -2.341271090848  -1.314686602937 Bohr
[INPUT] 27 C      0.195470355919   0.655945395468   0.489818723388 AA    0.369385438158   1.239557150103   0.925623237887 Bohr
[INPUT] 28 H     -1.607562005445   1.699098340864   1.053991363783 AA   -3.037851918548   3.210830522937   1.991755015206 Bohr
[INPUT] 29 C     -0.097927902328  -1.408457050055  -0.735716342206 AA   -0.185056915354  -2.661598082817  -1.390302392136 Bohr
[INPUT] 30 H     -2.132571645057  -1.972493532725  -1.176562720831 AA   -4.029976350172  -3.727472559325  -2.223381310743 Bohr
[INPUT] 31 C      0.779704115190  -0.466704605877  -0.144100420229 AA    1.473427235905  -0.881943886182  -0.272310328667 Bohr
[INPUT] 32 H      0.841667220145   1.395264725189   0.976271090710 AA    1.590520534098   2.636668201874   1.844884984772 Bohr
[INPUT] 33 H      0.310975269845  -2.274428811019  -1.264861777226 AA    0.587658091519  -4.298047542646  -2.390242344387 Bohr
[INPUT] 34 C      2.226302399054  -0.656862195528  -0.189361116537 AA    4.207101804674  -1.241289651129  -0.357840648896 Bohr
[INPUT] 35 C      2.962845104195  -1.791000762255  -0.530825739702 AA    5.598965796437  -3.384500929549  -1.003115267907 Bohr
[INPUT] 36 S      3.350286761736   0.622821505973   0.212320343377 AA    6.331124418438   1.176962070778   0.401227299657 Bohr
[INPUT] 37 H      2.514956474047  -2.748048417426  -0.811555467962 AA    4.752578951150  -5.193058885980  -1.533617569342 Bohr
[INPUT] 38 C      4.698787149831  -0.475897138178  -0.106110036575 AA    8.879420830806  -0.899315254620  -0.200518908195 Bohr
[INPUT] 39 N      4.317876760620  -1.680743844130  -0.482521714701 AA    8.159604517196  -3.176145550954  -0.911833889940 Bohr
[INPUT] 40 C      6.092239455152  -0.057129035471   0.042664612281 AA   11.512664055508  -0.107958230801   0.080624432422 Bohr
[INPUT] 41 C      7.133331502903  -0.968578741880  -0.237312334947 AA   13.480042896219  -1.830348552230  -0.448455319031 Bohr
[INPUT] 42 C      6.460448764114   1.239000716428   0.459480217238 AA   12.208478805961   2.341372022189   0.868291770236 Bohr
[INPUT] 43 C      8.457321932578  -0.544510259264  -0.088954909941 AA   15.982022199850  -1.028975262025  -0.168100417223 Bohr
[INPUT] 44 H      6.886425336133  -1.982739972906  -0.562899854903 AA   13.013457862557  -3.746835525019  -1.063726561323 Bohr
[INPUT] 45 C      7.819253042868   1.554237782815   0.573132715551 AA   14.776246749693   2.937083741972   1.083063865419 Bohr
[INPUT] 46 H      5.700054645639   1.992839812792   0.693222228615 AA   10.771542175312   3.765921456306   1.310000155542 Bohr
[INPUT] 47 H      9.280666870350  -1.239835773230  -0.302072055212 AA   17.537918638285  -2.342950050842  -0.570833454235 Bohr
[INPUT] 48 H      8.121627481428   2.559632716701   0.896510403615 AA   15.347651625639   4.837004814042   1.694159130655 Bohr
[INPUT] 49 N      8.813947368030   0.690842843162   0.307928451469 AA   16.655946601907   1.305503768693   0.581900439239 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] N
[INPUT] 0    0    [6    /1   ]  19730.800647      0.00021887984991
                                2957.8958745      0.0016960708803
                                673.22133595      0.0087954603538
                                190.68249494      0.035359382605
                                62.295441898      0.11095789217
                                22.654161182      0.24982972552
[INPUT] 0    0    [2    /1   ]  8.9791477428      0.40623896148
                                3.686300237       0.24338217176
[INPUT] 0    0    [1    /1   ]  0.84660076805        1
[INPUT] 0    0    [1    /1   ]  0.33647133771        1
[INPUT] 0    0    [1    /1   ]  0.13647653675        1
[INPUT] 1    0    [4    /1   ]  49.20038051       0.0055552416751
                                11.346790537      0.038052379723
                                3.4273972411      0.14953671029
                                1.1785525134      0.3494930523
[INPUT] 1    0    [1    /1   ]  0.41642204972        1
[INPUT] 1    0    [1    /1   ]  0.14260826011        1
[INPUT] 2    0    [1    /1   ]  1.654                1
[INPUT] 2    0    [1    /1   ]  0.469                1
[INPUT] 3    0    [1    /1   ]  1.093                1
[INPUT] S
[INPUT] 0    0    [7    /1   ]  60700.928104      0.00054695944225
                                9102.6106854      0.0042297224557
                                2071.4166009      0.021747824159
                                586.02476821      0.085100053589
                                190.55395021      0.24799128459
                                67.63038426       0.46703640406
                                25.127306905      0.3643458755
[INPUT] 0    0    [3    /1   ]  112.5746301       0.02167004024
                                34.795554217      0.09360230176
                                6.5115556215      -0.26068001422
[INPUT] 0    0    [2    /1   ]  3.2399032261      1.2842089435
                                1.5477160881      0.66036416584
[INPUT] 0    0    [1    /1   ]  0.40541030112        1
[INPUT] 0    0    [1    /1   ]  0.14550651059        1
[INPUT] 1    0    [5    /1   ]  564.36716027      0.0024796796317
                                133.42624379      0.01967793025
                                42.468271189      0.089980008258
                                15.61652758       0.25705880575
                                6.1093988469      0.43515167292
[INPUT] 1    0    [1    /1   ]  2.4404160198         1
[INPUT] 1    0    [1    /1   ]  0.83882201296        1
[INPUT] 1    0    [1    /1   ]  0.312887469          1
[INPUT] 1    0    [1    /1   ]  0.10770109004        1
[INPUT] 2    0    [2    /1   ]  3.756              0.2
                                0.812                1
[INPUT] 2    0    [1    /1   ]  0.273                1
[INPUT] 3    0    [1    /1   ]  0.557                1

nuclear repulsion = 2597.55955351967
number of shells = 408
number of NR pGTOs = 1549
number of NR cGTOs = 1050
basis = def2-tzvp
ecp = {}
CPU time:         3.72
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> ********
method = DFHF-RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 49_Triphenylamino_5_wb97x.chk
max_memory 50000 MB (current use 55 MB)
XC functionals = wb97x
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f2b8cdcb048>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f2b8e597f28>
Set gradient conv threshold to 1e-05
atom N rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266
 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
atom S rad-grids = 80, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86  86  86
  86 350 350 350 350 350 350 350 350 350 434 434 434 434 434 434 434 434
 434 434 434 434 434 434 434 434 434 434 350 350 350 350 350 350 350 350
 350 350 350 350 350 350 350 350]
tot grids = 612926
Drop grids 104703
    CPU time for setting up grids    148.69 sec, wall time     10.66 sec
nelec by numeric integration = 212.00017659241826
    CPU time for vxc    240.66 sec, wall time     23.65 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15971894.hpc/tmp79pjj2ix
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for S def2-tzvp
num shells = 877, num cGTOs = 2651
size of aux basis 2651
int3c2e [1/1], AO [0:408], nrow = 551775
    CPU time for cholesky_eri    387.62 sec, wall time     64.79 sec
    CPU time for df vj and vk   1256.09 sec, wall time    133.61 sec
Create RSH-DF object <pyscf.df.df.DF object at 0x7f2bc65794a8> for omega=0.3
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 50000
_cderi_to_save = /tmp/job.15971894.hpc/tmpk_90i75b
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for N def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for S def2-tzvp
num shells = 877, num cGTOs = 2651
size of aux basis 2066
int3c2e [1/2], AO [0:357], nrow = 424581
int3c2e [2/2], AO [357:408], nrow = 127194
    CPU time for cholesky_eri    515.46 sec, wall time     41.56 sec
    CPU time for df vj and vk   1187.71 sec, wall time     87.46 sec
E1 = -7291.057341255452  Ecoul = 3323.0778007954805  Exc = -194.32155062668954
init E= -1564.74153756699
cond(S) = 1464567.6564929257
    CPU time for initialize scf   2849.00 sec, wall time    258.24 sec
  HOMO = -0.272688004827113  LUMO = -0.0146700720504098
  mo_energy =
[-8.88855134e+01 -1.44372162e+01 -1.44088042e+01 -1.43966520e+01
 -1.03428594e+01 -1.03219372e+01 -1.03162129e+01 -1.03161679e+01
 -1.03161567e+01 -1.03050828e+01 -1.03018366e+01 -1.03002352e+01
 -1.02997910e+01 -1.02920564e+01 -1.02817539e+01 -1.02816524e+01
 -1.02812313e+01 -1.02750350e+01 -1.02747706e+01 -1.02747347e+01
 -1.02747263e+01 -1.02747054e+01 -1.02745381e+01 -1.02745215e+01
 -1.02718261e+01 -1.02718193e+01 -1.02714437e+01 -1.02714195e+01
 -1.02695287e+01 -1.02695105e+01 -8.07272653e+00 -6.03392095e+00
 -6.03008371e+00 -6.02740280e+00 -1.11097804e+00 -1.10493759e+00
 -1.07347043e+00 -1.00679889e+00 -9.96948471e-01 -9.81627970e-01
 -9.60041085e-01 -9.45237801e-01 -9.02607373e-01 -8.98794977e-01
 -8.93351623e-01 -8.86827022e-01 -8.83758664e-01 -8.81961570e-01
 -8.68210788e-01 -8.40918145e-01 -7.81418451e-01 -7.67566858e-01
 -7.58618744e-01 -7.54645045e-01 -7.37359655e-01 -7.34199229e-01
 -7.31317504e-01 -7.07425459e-01 -6.92153106e-01 -6.83099024e-01
 -6.62405305e-01 -6.58082095e-01 -6.41392914e-01 -6.18520607e-01
 -6.05098840e-01 -6.03676838e-01 -5.99111241e-01 -5.90921773e-01
 -5.83628855e-01 -5.74287214e-01 -5.70544172e-01 -5.65356582e-01
 -5.56946870e-01 -5.53369903e-01 -5.46645534e-01 -5.43118189e-01
 -5.40966960e-01 -5.39266451e-01 -5.37527446e-01 -5.35566311e-01
 -5.23064044e-01 -5.17265721e-01 -5.03292356e-01 -4.95843367e-01
 -4.93720602e-01 -4.91551407e-01 -4.82375496e-01 -4.74079550e-01
 -4.68064486e-01 -4.67152161e-01 -4.62333079e-01 -4.52853261e-01
 -4.48609506e-01 -4.37351072e-01 -4.12909087e-01 -3.92845054e-01
 -3.88619033e-01 -3.70222801e-01 -3.67677866e-01 -3.67272679e-01
 -3.64777711e-01 -3.61331264e-01 -3.54417069e-01 -3.52392880e-01
 -3.19266825e-01 -2.72688005e-01 -1.46700721e-02  3.35577507e-02
  3.79378411e-02  4.37595723e-02  5.60201445e-02  6.31738566e-02
  6.65097259e-02  7.80157638e-02  8.72770840e-02  1.09075296e-01
  1.16028028e-01  1.25547053e-01  1.31637459e-01  1.35563226e-01
  1.39169144e-01  1.45289452e-01  1.47771976e-01  1.51044842e-01
  1.56899062e-01  1.61281894e-01  1.63905803e-01  1.66103255e-01
  1.70098170e-01  1.72722808e-01  1.79270424e-01  1.83735993e-01
  1.84981678e-01  1.90184835e-01  1.97648758e-01  1.99990540e-01
  2.04230088e-01  2.11504371e-01  2.18774181e-01  2.19108954e-01
  2.21895206e-01  2.28326742e-01  2.34266794e-01  2.38065666e-01
  2.43056476e-01  2.48253666e-01  2.55793596e-01  2.58121985e-01
  2.62281438e-01  2.64585690e-01  2.68331762e-01  2.73004081e-01
  2.76549953e-01  2.77239668e-01  2.79734374e-01  2.82904683e-01
  2.84875362e-01  2.86955333e-01  2.92001083e-01  2.93093561e-01
  3.00637587e-01  3.03692051e-01  3.07408197e-01  3.10757363e-01
  3.11005972e-01  3.12967408e-01  3.14916977e-01  3.17208011e-01
  3.18862720e-01  3.20404615e-01  3.29802937e-01  3.30717455e-01
  3.31788999e-01  3.36392996e-01  3.37984260e-01  3.43725372e-01
  3.45481258e-01  3.51282194e-01  3.56964354e-01  3.57530272e-01
  3.61660905e-01  3.63775834e-01  3.72296841e-01  3.75988914e-01
  3.76889487e-01  3.79158391e-01  3.84126182e-01  3.87396363e-01
  3.87578170e-01  3.92198809e-01  3.98919067e-01  4.01215688e-01
  4.01685626e-01  4.10188714e-01  4.12041520e-01  4.19574254e-01
  4.22009310e-01  4.24079319e-01  4.28444061e-01  4.30558802e-01
  4.35643130e-01  4.43251717e-01  4.45885638e-01  4.47842483e-01
  4.50188015e-01  4.52062118e-01  4.54256962e-01  4.55666629e-01
  4.59526248e-01  4.63417108e-01  4.66578138e-01  4.67690289e-01
  4.69809406e-01  4.70820560e-01  4.71790553e-01  4.77098318e-01
  4.79085697e-01  4.81724334e-01  4.89411087e-01  4.91769564e-01
  4.93037065e-01  4.96232747e-01  4.99909483e-01  5.02134903e-01
  5.02473780e-01  5.06055228e-01  5.07705922e-01  5.10143319e-01
  5.12345347e-01  5.13235588e-01  5.19942943e-01  5.22696862e-01
  5.25316093e-01  5.30203712e-01  5.33770861e-01  5.38934254e-01
  5.47835801e-01  5.50405162e-01  5.52822110e-01  5.58983420e-01
  5.60692596e-01  5.64452610e-01  5.66170328e-01  5.67762062e-01
  5.71262957e-01  5.74910724e-01  5.79473163e-01  5.80042763e-01
  5.86339397e-01  5.89337644e-01  5.96173284e-01  5.99254593e-01
  6.04105752e-01  6.06143073e-01  6.09143636e-01  6.12434981e-01
  6.15264025e-01  6.23513303e-01  6.24739052e-01  6.29508520e-01
  6.33788394e-01  6.45249973e-01  6.46584991e-01  6.51065256e-01
  6.56601004e-01  6.61721905e-01  6.63187151e-01  6.69354326e-01
  6.73493626e-01  6.79396342e-01  6.83621297e-01  6.85198223e-01
  6.97311130e-01  7.00152960e-01  7.04499393e-01  7.11724497e-01
  7.15622784e-01  7.23734825e-01  7.29628969e-01  7.30950826e-01
  7.33358176e-01  7.42903693e-01  7.44815048e-01  7.46163670e-01
  7.51318087e-01  7.55538971e-01  7.56811953e-01  7.58916573e-01
  7.62413417e-01  7.66371934e-01  7.70152739e-01  7.74283932e-01
  7.75425962e-01  7.77285978e-01  7.79661913e-01  7.81391962e-01
  7.86486887e-01  7.88958079e-01  7.93472953e-01  7.98304829e-01
  8.03187958e-01  8.06207510e-01  8.14520506e-01  8.19260779e-01
  8.23083161e-01  8.31117292e-01  8.38465667e-01  8.40486278e-01
  8.44274901e-01  8.47231888e-01  8.48312280e-01  8.54942651e-01
  8.60178314e-01  8.62805386e-01  8.64318121e-01  8.71381988e-01
  8.77177449e-01  8.77368668e-01  8.84533653e-01  8.87309792e-01
  8.89755913e-01  8.96976740e-01  9.06370789e-01  9.10984316e-01
  9.15506406e-01  9.20144985e-01  9.22993843e-01  9.23230034e-01
  9.31269256e-01  9.34393475e-01  9.38214974e-01  9.46266902e-01
  9.50942459e-01  9.57884028e-01  9.62744924e-01  9.71035149e-01
  9.73481791e-01  9.75232264e-01  9.78727851e-01  9.82382821e-01
  9.95802977e-01  1.00425374e+00  1.00995241e+00  1.01574937e+00
  1.02606910e+00  1.03420611e+00  1.04250298e+00  1.04671217e+00
  1.04977434e+00  1.05198615e+00  1.05812505e+00  1.06645282e+00
  1.06974437e+00  1.07181111e+00  1.08056593e+00  1.09102283e+00
  1.09703125e+00  1.10502290e+00  1.11216525e+00  1.11702593e+00
  1.13232278e+00  1.13405427e+00  1.14104970e+00  1.14496519e+00
  1.15207124e+00  1.15415673e+00  1.16020317e+00  1.16365958e+00
  1.16563691e+00  1.17440588e+00  1.17973665e+00  1.18228297e+00
  1.18917301e+00  1.19523615e+00  1.20179543e+00  1.21151358e+00
  1.22074998e+00  1.22697626e+00  1.22926596e+00  1.23171249e+00
  1.23629146e+00  1.24623192e+00  1.25362449e+00  1.26882941e+00
  1.27500598e+00  1.28027925e+00  1.28755073e+00  1.29505970e+00
  1.30210107e+00  1.30997795e+00  1.31126909e+00  1.31176627e+00
  1.31646907e+00  1.32136173e+00  1.32670148e+00  1.32915950e+00
  1.33316877e+00  1.33683265e+00  1.34557390e+00  1.34722866e+00
  1.34838680e+00  1.35458594e+00  1.36030184e+00  1.36436919e+00
  1.36904503e+00  1.37578502e+00  1.38074970e+00  1.38690370e+00
  1.38866906e+00  1.39908961e+00  1.40313382e+00  1.40382669e+00
  1.40784788e+00  1.41174963e+00  1.42099025e+00  1.42218340e+00
  1.43179652e+00  1.43453015e+00  1.44077954e+00  1.45194560e+00
  1.45895188e+00  1.46770793e+00  1.48265141e+00  1.48891951e+00
  1.49317872e+00  1.50136220e+00  1.50762054e+00  1.51430517e+00
  1.51701738e+00  1.51951522e+00  1.52307740e+00  1.53655842e+00
  1.55079700e+00  1.55451369e+00  1.55701133e+00  1.55913006e+00
  1.56004863e+00  1.56333362e+00  1.56691268e+00  1.57293232e+00
  1.57457769e+00  1.57986268e+00  1.58426829e+00  1.58781537e+00
  1.59675497e+00  1.60144588e+00  1.60359245e+00  1.61402193e+00
  1.62159794e+00  1.62651119e+00  1.63355451e+00  1.64023206e+00
  1.64490912e+00  1.64802043e+00  1.65065467e+00  1.65237649e+00
  1.65575641e+00  1.66267118e+00  1.66834985e+00  1.67154508e+00
  1.67564329e+00  1.68094776e+00  1.68308460e+00  1.68674373e+00
  1.69526665e+00  1.69806219e+00  1.70071780e+00  1.70427566e+00
  1.70866021e+00  1.71282814e+00  1.71901474e+00  1.72498267e+00
  1.73420690e+00  1.73658395e+00  1.75076958e+00  1.75457917e+00
  1.75518869e+00  1.75860220e+00  1.76063172e+00  1.76327429e+00
  1.76921829e+00  1.77962025e+00  1.78085372e+00  1.78710544e+00
  1.79285543e+00  1.79739835e+00  1.80232239e+00  1.80728526e+00
  1.81174253e+00  1.81263815e+00  1.81724735e+00  1.81976839e+00
  1.82521518e+00  1.82679415e+00  1.84586217e+00  1.84904223e+00
  1.85287332e+00  1.85453615e+00  1.86152662e+00  1.86823081e+00
  1.87145455e+00  1.87561103e+00  1.88464381e+00  1.89120581e+00
  1.89548638e+00  1.90349392e+00  1.90408314e+00  1.91244599e+00
  1.92285780e+00  1.93428459e+00  1.93565070e+00  1.94395075e+00
  1.94650532e+00  1.96383028e+00  1.97005118e+00  1.97534064e+00
  1.98701478e+00  1.98978116e+00  1.99089705e+00  2.00509146e+00
  2.01338259e+00  2.02001006e+00  2.02503201e+00  2.02976810e+00
  2.03199846e+00  2.03491501e+00  2.04084492e+00  2.04777520e+00
  2.05150268e+00  2.05819543e+00  2.06071221e+00  2.06774302e+00
  2.07736065e+00  2.08771638e+00  2.09732982e+00  2.10228789e+00
  2.11352782e+00  2.12634211e+00  2.12993282e+00  2.13902646e+00
  2.14638010e+00  2.15179218e+00  2.15540586e+00  2.15548404e+00
  2.16009227e+00  2.16530664e+00  2.18277193e+00  2.18636463e+00
  2.20041083e+00  2.20101665e+00  2.20342672e+00  2.20684341e+00
  2.21083214e+00  2.21351505e+00  2.22351373e+00  2.23973672e+00
  2.24449195e+00  2.25133038e+00  2.25445790e+00  2.25730656e+00
  2.26780451e+00  2.27574644e+00  2.28113521e+00  2.28551391e+00
  2.29348436e+00  2.30201566e+00  2.31554638e+00  2.32017922e+00
  2.32564664e+00  2.33057790e+00  2.33445456e+00  2.34303633e+00
  2.35010083e+00  2.36272840e+00  2.37028164e+00  2.37321274e+00
  2.38079040e+00  2.38347039e+00  2.39618489e+00  2.40052561e+00
  2.40534624e+00  2.42175540e+00  2.42499264e+00  2.43953379e+00
  2.45043970e+00  2.46956140e+00  2.47454067e+00  2.47863726e+00
  2.48615906e+00  2.50313382e+00  2.50568815e+00  2.51382406e+00
  2.51781247e+00  2.52414960e+00  2.53377223e+00  2.54100540e+00
  2.55527809e+00  2.56246653e+00  2.57143220e+00  2.57691297e+00
  2.59352201e+00  2.60739851e+00  2.60773281e+00  2.62455902e+00
  2.63061786e+00  2.63497405e+00  2.63683445e+00  2.64297367e+00
  2.64544570e+00  2.65734434e+00  2.66856004e+00  2.67169396e+00
  2.67657313e+00  2.68085747e+00  2.68323258e+00  2.69094413e+00
  2.69274951e+00  2.70003635e+00  2.70408561e+00  2.70555991e+00
  2.71214210e+00  2.71662853e+00  2.73051001e+00  2.73856879e+00
  2.74018588e+00  2.74262223e+00  2.74768566e+00  2.75112508e+00
  2.75336286e+00  2.75446771e+00  2.76026945e+00  2.76611774e+00
  2.77160825e+00  2.77319671e+00  2.77787049e+00  2.79099577e+00
  2.79637143e+00  2.79990959e+00  2.80264219e+00  2.80652906e+00
  2.80802023e+00  2.81367802e+00  2.81902269e+00  2.82187271e+00
  2.82756070e+00  2.82853237e+00  2.83791610e+00  2.84248442e+00
  2.84621096e+00  2.84944803e+00  2.85274911e+00  2.85810191e+00
  2.85915961e+00  2.86468066e+00  2.86702910e+00  2.87400299e+00
  2.88073919e+00  2.88505832e+00  2.88917826e+00  2.89238275e+00
  2.89607267e+00  2.90072968e+00  2.90586139e+00  2.91094427e+00
  2.91259381e+00  2.92094601e+00  2.92206664e+00  2.92877221e+00
  2.93112400e+00  2.93393469e+00  2.94035500e+00  2.94380827e+00
  2.94738131e+00  2.95124854e+00  2.95293506e+00  2.95453767e+00
  2.96040060e+00  2.96307263e+00  2.96782279e+00  2.97282874e+00
  2.97456933e+00  2.99144319e+00  2.99551987e+00  2.99939274e+00
  3.00125215e+00  3.00752927e+00  3.01269314e+00  3.01674739e+00
  3.02358825e+00  3.02777874e+00  3.03026159e+00  3.04051999e+00
  3.04845331e+00  3.05063510e+00  3.06058077e+00  3.06312860e+00
  3.06790599e+00  3.07651873e+00  3.08053720e+00  3.08411847e+00
  3.09310554e+00  3.09549021e+00  3.10020466e+00  3.11506327e+00
  3.11913622e+00  3.12475834e+00  3.13523295e+00  3.14362552e+00
  3.15271469e+00  3.15344028e+00  3.16076641e+00  3.16410520e+00
  3.17913580e+00  3.18104625e+00  3.18683732e+00  3.19383050e+00
  3.19949407e+00  3.20306844e+00  3.20748293e+00  3.21033343e+00
  3.21255109e+00  3.21710176e+00  3.22113108e+00  3.22416005e+00
  3.22631136e+00  3.23450832e+00  3.23661662e+00  3.24362356e+00
  3.24567690e+00  3.24848505e+00  3.25132931e+00  3.25313190e+00
  3.25484913e+00  3.26226530e+00  3.26492165e+00  3.26819000e+00
  3.26974733e+00  3.27513868e+00  3.28580151e+00  3.28913472e+00
  3.29192433e+00  3.30011297e+00  3.30232771e+00  3.31747162e+00
  3.32260939e+00  3.32556045e+00  3.33430470e+00  3.33544849e+00
  3.33945621e+00  3.34655797e+00  3.34775651e+00  3.35279376e+00
  3.36056447e+00  3.36824383e+00  3.37366908e+00  3.37936524e+00
  3.38081826e+00  3.38398728e+00  3.39014329e+00  3.39093729e+00
  3.40120749e+00  3.41214778e+00  3.41733425e+00  3.41786126e+00
  3.42544038e+00  3.42755625e+00  3.42892847e+00  3.43287710e+00
  3.43425092e+00  3.43871961e+00  3.44145025e+00  3.44555294e+00
  3.45325062e+00  3.45928366e+00  3.46888525e+00  3.47236702e+00
  3.47489960e+00  3.47989097e+00  3.48286214e+00  3.48617731e+00
  3.49010199e+00  3.49708585e+00  3.49881951e+00  3.50353254e+00
  3.50593623e+00  3.50913280e+00  3.51402286e+00  3.51594813e+00
  3.52143268e+00  3.52754689e+00  3.53220595e+00  3.53609503e+00
  3.53760383e+00  3.53842091e+00  3.54862028e+00  3.55000560e+00
  3.55243909e+00  3.56090323e+00  3.56129512e+00  3.56850939e+00
  3.57972155e+00  3.58470431e+00  3.59028697e+00  3.59290968e+00
  3.59841203e+00  3.60201354e+00  3.60414614e+00  3.60550362e+00
  3.61383442e+00  3.61695319e+00  3.62367940e+00  3.63335919e+00
  3.63406731e+00  3.63955669e+00  3.64920867e+00  3.65592027e+00
  3.66054771e+00  3.66279829e+00  3.66678916e+00  3.67228681e+00
  3.67845651e+00  3.68358120e+00  3.69507136e+00  3.70384418e+00
  3.70758073e+00  3.72620576e+00  3.74021341e+00  3.74976287e+00
  3.75641274e+00  3.76152003e+00  3.76276876e+00  3.77142250e+00
  3.77450181e+00  3.78980911e+00  3.79515129e+00  3.80642209e+00
  3.81593129e+00  3.82848868e+00  3.83092238e+00  3.83184265e+00
  3.84637883e+00  3.84996492e+00  3.85391465e+00  3.86226023e+00
  3.86601721e+00  3.88040744e+00  3.89296030e+00  3.90364304e+00
  3.91070947e+00  3.91383195e+00  3.92981423e+00  3.96269786e+00
  3.97559196e+00  3.98743741e+00  3.99812066e+00  4.00315746e+00
  4.01204291e+00  4.01417066e+00  4.02065949e+00  4.04422091e+00
  4.04986036e+00  4.06240913e+00  4.08467169e+00  4.08652922e+00
  4.09314573e+00  4.09770015e+00  4.10071517e+00  4.10846669e+00
  4.11523123e+00  4.12291244e+00  4.12326693e+00  4.12604480e+00
  4.13032517e+00  4.13729550e+00  4.15646734e+00  4.15963767e+00
  4.16476870e+00  4.17142897e+00  4.18076386e+00  4.18493684e+00
  4.19085412e+00  4.20126095e+00  4.21441947e+00  4.22015118e+00
  4.22224976e+00  4.23223385e+00  4.24978500e+00  4.25817125e+00
  4.26200787e+00  4.26510595e+00  4.27307138e+00  4.27496243e+00
  4.28043284e+00  4.28389846e+00  4.28818714e+00  4.28962497e+00
  4.29895440e+00  4.30579980e+00  4.32192265e+00  4.32750722e+00
  4.33215300e+00  4.33497684e+00  4.34256550e+00  4.35442245e+00
  4.36841849e+00  4.37813927e+00  4.38385004e+00  4.38980659e+00
  4.39005708e+00  4.39629874e+00  4.39788821e+00  4.40358545e+00
  4.41181182e+00  4.41951399e+00  4.43332000e+00  4.44320081e+00
  4.44963516e+00  4.47026120e+00  4.47588786e+00  4.47812224e+00
  4.50529898e+00  4.51137157e+00  4.53923119e+00  4.55042924e+00
  4.57989520e+00  4.59148078e+00  4.60514949e+00  4.60586907e+00
  4.64928258e+00  4.65688072e+00  4.66228661e+00  4.68185488e+00
  4.68337309e+00  4.70202021e+00  4.70292984e+00  4.73084354e+00
  4.74522703e+00  4.75699975e+00  4.77880491e+00  4.78636193e+00
  4.81435242e+00  4.82023788e+00  4.82312904e+00  4.84576558e+00
  4.85430248e+00  4.85603477e+00  4.87530656e+00  4.89351756e+00
  4.90059193e+00  4.91748096e+00  4.92815701e+00  4.93829471e+00
  4.94089055e+00  4.95958446e+00  4.96256622e+00  4.97927132e+00
  4.98364968e+00  4.98432611e+00  4.99421507e+00  5.00627838e+00
  5.01547006e+00  5.02334147e+00  5.02467973e+00  5.05904816e+00
  5.07181958e+00  5.08227069e+00  5.11708476e+00  5.12622113e+00
  5.15170099e+00  5.15298446e+00  5.16293612e+00  5.18843834e+00
  5.19596761e+00  5.21429675e+00  5.22228239e+00  5.23010958e+00
  5.27337522e+00  5.28850860e+00  5.30434409e+00  5.31338651e+00
  5.32416294e+00  5.33714161e+00  5.34445773e+00  5.35719393e+00
  5.36386454e+00  5.36835377e+00  5.39209043e+00  5.40728603e+00
  5.41342444e+00  5.41716173e+00  5.43774820e+00  5.49037695e+00
  5.51622282e+00  5.54052244e+00  5.56579250e+00  5.60091542e+00
  5.62995227e+00  5.65280062e+00  5.65621981e+00  5.66410069e+00
  5.67922613e+00  5.70113769e+00  5.70994522e+00  5.71910965e+00
  5.73575846e+00  5.75064134e+00  5.80427768e+00  5.86020687e+00
  5.88308143e+00  5.91793414e+00  5.92779682e+00  6.03269363e+00
  6.08234847e+00  6.12968236e+00  6.13150814e+00  6.17181126e+00
  6.24369504e+00  8.98190795e+00  9.54971168e+00  9.58779698e+00
  2.03555067e+01  2.22116597e+01  2.22515092e+01  2.23629668e+01
  2.24616342e+01  2.25988672e+01  2.26104067e+01  2.26160874e+01
  2.26171512e+01  2.26697177e+01  2.27007913e+01  2.27524985e+01
  2.27655704e+01  2.27777552e+01  2.27903701e+01  2.27926633e+01
  2.27992848e+01  2.28079705e+01  2.28355957e+01  2.28536081e+01
  2.28903256e+01  2.30081982e+01  2.30380619e+01  2.31808236e+01
  2.31944901e+01  2.32362212e+01  2.33708428e+01  3.24165486e+01
  3.24961518e+01  3.32640176e+01]
nelec by numeric integration = 212.0001765924431
    CPU time for vxc    175.69 sec, wall time     11.92 sec
    CPU time for df vj and vk    862.87 sec, wall time     66.74 sec
    CPU time for df vj and vk    657.17 sec, wall time     43.20 sec
E1 = -7291.057326918271  Ecoul = 3323.0777859473014  Exc = -194.32155011567937
cycle= 1 E= -1564.74153756698  delta_E= 1.27e-11  |g|= 4.03e-06  |ddm|= 7.87e-06
    CPU time for cycle= 1   1707.00 sec, wall time    123.47 sec
  HOMO = -0.272688211816279  LUMO = -0.0146699917657595
  mo_energy =
[-8.88855138e+01 -1.44372182e+01 -1.44088047e+01 -1.43966532e+01
 -1.03428596e+01 -1.03219387e+01 -1.03162140e+01 -1.03161686e+01
 -1.03161546e+01 -1.03050827e+01 -1.03018373e+01 -1.03002348e+01
 -1.02997907e+01 -1.02920540e+01 -1.02817533e+01 -1.02816505e+01
 -1.02812320e+01 -1.02750348e+01 -1.02747706e+01 -1.02747340e+01
 -1.02747258e+01 -1.02747071e+01 -1.02745379e+01 -1.02745211e+01
 -1.02718263e+01 -1.02718200e+01 -1.02714443e+01 -1.02714201e+01
 -1.02695282e+01 -1.02695099e+01 -8.07272677e+00 -6.03392120e+00
 -6.03008396e+00 -6.02740305e+00 -1.11097919e+00 -1.10493757e+00
 -1.07347085e+00 -1.00679853e+00 -9.96948630e-01 -9.81627877e-01
 -9.60041189e-01 -9.45237610e-01 -9.02607323e-01 -8.98795125e-01
 -8.93351803e-01 -8.86827051e-01 -8.83758644e-01 -8.81961654e-01
 -8.68210733e-01 -8.40918148e-01 -7.81418430e-01 -7.67566893e-01
 -7.58618948e-01 -7.54645205e-01 -7.37359666e-01 -7.34199347e-01
 -7.31317604e-01 -7.07425482e-01 -6.92153024e-01 -6.83098976e-01
 -6.62405430e-01 -6.58082356e-01 -6.41392804e-01 -6.18520665e-01
 -6.05098831e-01 -6.03676963e-01 -5.99111375e-01 -5.90921927e-01
 -5.83629014e-01 -5.74287207e-01 -5.70544128e-01 -5.65356679e-01
 -5.56946919e-01 -5.53369787e-01 -5.46645576e-01 -5.43118197e-01
 -5.40967045e-01 -5.39266531e-01 -5.37527531e-01 -5.35566329e-01
 -5.23064107e-01 -5.17265770e-01 -5.03292529e-01 -4.95843492e-01
 -4.93720720e-01 -4.91551083e-01 -4.82375341e-01 -4.74079533e-01
 -4.68064506e-01 -4.67152224e-01 -4.62333098e-01 -4.52853380e-01
 -4.48609412e-01 -4.37351060e-01 -4.12909237e-01 -3.92845092e-01
 -3.88619079e-01 -3.70222797e-01 -3.67678312e-01 -3.67272641e-01
 -3.64777816e-01 -3.61331409e-01 -3.54417114e-01 -3.52392938e-01
 -3.19266755e-01 -2.72688212e-01 -1.46699918e-02  3.35577585e-02
  3.79378130e-02  4.37593658e-02  5.60199993e-02  6.31738878e-02
  6.65096328e-02  7.80157327e-02  8.72772189e-02  1.09075254e-01
  1.16027981e-01  1.25547101e-01  1.31637438e-01  1.35563273e-01
  1.39169207e-01  1.45289387e-01  1.47771919e-01  1.51044832e-01
  1.56899019e-01  1.61281932e-01  1.63905787e-01  1.66103246e-01
  1.70098147e-01  1.72722788e-01  1.79270441e-01  1.83735964e-01
  1.84981634e-01  1.90184812e-01  1.97648785e-01  1.99990618e-01
  2.04230089e-01  2.11504460e-01  2.18774076e-01  2.19109050e-01
  2.21895345e-01  2.28326654e-01  2.34266739e-01  2.38065590e-01
  2.43056509e-01  2.48253702e-01  2.55793547e-01  2.58121935e-01
  2.62281427e-01  2.64585760e-01  2.68331761e-01  2.73003843e-01
  2.76549860e-01  2.77239574e-01  2.79734338e-01  2.82904684e-01
  2.84875374e-01  2.86955295e-01  2.92001047e-01  2.93093568e-01
  3.00637616e-01  3.03692064e-01  3.07408194e-01  3.10757338e-01
  3.11005980e-01  3.12967390e-01  3.14916973e-01  3.17207929e-01
  3.18862675e-01  3.20404572e-01  3.29802923e-01  3.30717489e-01
  3.31789121e-01  3.36392952e-01  3.37984198e-01  3.43725181e-01
  3.45481106e-01  3.51282215e-01  3.56964290e-01  3.57530212e-01
  3.61660863e-01  3.63775818e-01  3.72296676e-01  3.75988837e-01
  3.76889472e-01  3.79158508e-01  3.84126213e-01  3.87396287e-01
  3.87578024e-01  3.92198821e-01  3.98918965e-01  4.01215612e-01
  4.01685567e-01  4.10188808e-01  4.12041506e-01  4.19574291e-01
  4.22009329e-01  4.24079363e-01  4.28444127e-01  4.30558889e-01
  4.35643051e-01  4.43251697e-01  4.45885558e-01  4.47842447e-01
  4.50187972e-01  4.52062027e-01  4.54256875e-01  4.55666621e-01
  4.59526097e-01  4.63417091e-01  4.66578108e-01  4.67690183e-01
  4.69809285e-01  4.70820485e-01  4.71790528e-01  4.77098273e-01
  4.79085676e-01  4.81724313e-01  4.89411072e-01  4.91769556e-01
  4.93037055e-01  4.96232789e-01  4.99909427e-01  5.02134913e-01
  5.02473798e-01  5.06055231e-01  5.07705966e-01  5.10143284e-01
  5.12345331e-01  5.13235584e-01  5.19942954e-01  5.22696818e-01
  5.25316111e-01  5.30203712e-01  5.33770891e-01  5.38934255e-01
  5.47835757e-01  5.50405051e-01  5.52822068e-01  5.58983451e-01
  5.60692491e-01  5.64452530e-01  5.66170314e-01  5.67761985e-01
  5.71262875e-01  5.74910676e-01  5.79473144e-01  5.80042715e-01
  5.86339393e-01  5.89337673e-01  5.96173139e-01  5.99254479e-01
  6.04105656e-01  6.06142990e-01  6.09143556e-01  6.12434948e-01
  6.15264026e-01  6.23513286e-01  6.24739000e-01  6.29508476e-01
  6.33788322e-01  6.45249874e-01  6.46584989e-01  6.51065294e-01
  6.56600908e-01  6.61721752e-01  6.63186917e-01  6.69354248e-01
  6.73493632e-01  6.79396244e-01  6.83621195e-01  6.85198174e-01
  6.97311049e-01  7.00153000e-01  7.04499346e-01  7.11724453e-01
  7.15622717e-01  7.23734841e-01  7.29628799e-01  7.30950860e-01
  7.33358221e-01  7.42903654e-01  7.44815007e-01  7.46163669e-01
  7.51318083e-01  7.55538942e-01  7.56812013e-01  7.58916543e-01
  7.62413389e-01  7.66371879e-01  7.70152738e-01  7.74283890e-01
  7.75425891e-01  7.77285923e-01  7.79661773e-01  7.81391999e-01
  7.86486844e-01  7.88958092e-01  7.93472957e-01  7.98304825e-01
  8.03187860e-01  8.06207520e-01  8.14520557e-01  8.19260790e-01
  8.23083210e-01  8.31117278e-01  8.38465675e-01  8.40486319e-01
  8.44274908e-01  8.47231769e-01  8.48312265e-01  8.54942560e-01
  8.60178280e-01  8.62805263e-01  8.64318073e-01  8.71381971e-01
  8.77177435e-01  8.77368644e-01  8.84533523e-01  8.87309660e-01
  8.89755853e-01  8.96976620e-01  9.06370709e-01  9.10984223e-01
  9.15506390e-01  9.20145025e-01  9.22993744e-01  9.23229976e-01
  9.31269201e-01  9.34393416e-01  9.38214985e-01  9.46266967e-01
  9.50942409e-01  9.57883900e-01  9.62744853e-01  9.71035043e-01
  9.73481689e-01  9.75232205e-01  9.78727763e-01  9.82382837e-01
  9.95802990e-01  1.00425382e+00  1.00995240e+00  1.01574936e+00
  1.02606902e+00  1.03420615e+00  1.04250301e+00  1.04671215e+00
  1.04977433e+00  1.05198613e+00  1.05812501e+00  1.06645291e+00
  1.06974442e+00  1.07181114e+00  1.08056593e+00  1.09102289e+00
  1.09703125e+00  1.10502290e+00  1.11216523e+00  1.11702596e+00
  1.13232276e+00  1.13405426e+00  1.14104970e+00  1.14496514e+00
  1.15207122e+00  1.15415670e+00  1.16020319e+00  1.16365955e+00
  1.16563700e+00  1.17440590e+00  1.17973655e+00  1.18228297e+00
  1.18917291e+00  1.19523604e+00  1.20179541e+00  1.21151355e+00
  1.22074998e+00  1.22697633e+00  1.22926592e+00  1.23171242e+00
  1.23629151e+00  1.24623199e+00  1.25362435e+00  1.26882933e+00
  1.27500600e+00  1.28027919e+00  1.28755061e+00  1.29505969e+00
  1.30210105e+00  1.30997792e+00  1.31126905e+00  1.31176622e+00
  1.31646900e+00  1.32136171e+00  1.32670145e+00  1.32915944e+00
  1.33316864e+00  1.33683264e+00  1.34557379e+00  1.34722857e+00
  1.34838676e+00  1.35458597e+00  1.36030177e+00  1.36436908e+00
  1.36904492e+00  1.37578499e+00  1.38074971e+00  1.38690371e+00
  1.38866898e+00  1.39908960e+00  1.40313381e+00  1.40382662e+00
  1.40784786e+00  1.41174960e+00  1.42099017e+00  1.42218353e+00
  1.43179670e+00  1.43453022e+00  1.44077951e+00  1.45194541e+00
  1.45895183e+00  1.46770802e+00  1.48265132e+00  1.48891956e+00
  1.49317845e+00  1.50136193e+00  1.50762044e+00  1.51430504e+00
  1.51701730e+00  1.51951523e+00  1.52307735e+00  1.53655843e+00
  1.55079707e+00  1.55451375e+00  1.55701133e+00  1.55912998e+00
  1.56004864e+00  1.56333371e+00  1.56691265e+00  1.57293227e+00
  1.57457761e+00  1.57986268e+00  1.58426843e+00  1.58781540e+00
  1.59675491e+00  1.60144578e+00  1.60359233e+00  1.61402188e+00
  1.62159805e+00  1.62651126e+00  1.63355453e+00  1.64023209e+00
  1.64490904e+00  1.64802043e+00  1.65065460e+00  1.65237640e+00
  1.65575637e+00  1.66267106e+00  1.66834975e+00  1.67154499e+00
  1.67564318e+00  1.68094767e+00  1.68308451e+00  1.68674366e+00
  1.69526655e+00  1.69806212e+00  1.70071765e+00  1.70427580e+00
  1.70866023e+00  1.71282823e+00  1.71901476e+00  1.72498267e+00
  1.73420693e+00  1.73658395e+00  1.75076948e+00  1.75457912e+00
  1.75518863e+00  1.75860209e+00  1.76063171e+00  1.76327427e+00
  1.76921821e+00  1.77962031e+00  1.78085378e+00  1.78710549e+00
  1.79285536e+00  1.79739825e+00  1.80232228e+00  1.80728516e+00
  1.81174251e+00  1.81263797e+00  1.81724723e+00  1.81976825e+00
  1.82521507e+00  1.82679408e+00  1.84586224e+00  1.84904220e+00
  1.85287326e+00  1.85453603e+00  1.86152668e+00  1.86823086e+00
  1.87145446e+00  1.87561095e+00  1.88464380e+00  1.89120579e+00
  1.89548635e+00  1.90349377e+00  1.90408305e+00  1.91244601e+00
  1.92285784e+00  1.93428456e+00  1.93565054e+00  1.94395066e+00
  1.94650532e+00  1.96383020e+00  1.97005111e+00  1.97534050e+00
  1.98701471e+00  1.98978111e+00  1.99089694e+00  2.00509141e+00
  2.01338251e+00  2.02001020e+00  2.02503191e+00  2.02976800e+00
  2.03199833e+00  2.03491492e+00  2.04084498e+00  2.04777521e+00
  2.05150257e+00  2.05819534e+00  2.06071187e+00  2.06774284e+00
  2.07736060e+00  2.08771621e+00  2.09732979e+00  2.10228799e+00
  2.11352782e+00  2.12634201e+00  2.12993272e+00  2.13902634e+00
  2.14637996e+00  2.15179209e+00  2.15540592e+00  2.15548416e+00
  2.16009232e+00  2.16530661e+00  2.18277202e+00  2.18636457e+00
  2.20041079e+00  2.20101663e+00  2.20342661e+00  2.20684319e+00
  2.21083193e+00  2.21351534e+00  2.22351366e+00  2.23973664e+00
  2.24449189e+00  2.25133049e+00  2.25445788e+00  2.25730658e+00
  2.26780464e+00  2.27574646e+00  2.28113515e+00  2.28551386e+00
  2.29348429e+00  2.30201599e+00  2.31554626e+00  2.32017930e+00
  2.32564649e+00  2.33057801e+00  2.33445446e+00  2.34303614e+00
  2.35010061e+00  2.36272836e+00  2.37028153e+00  2.37321256e+00
  2.38079024e+00  2.38347002e+00  2.39618477e+00  2.40052567e+00
  2.40534616e+00  2.42175535e+00  2.42499257e+00  2.43953370e+00
  2.45043947e+00  2.46956138e+00  2.47454052e+00  2.47863718e+00
  2.48615916e+00  2.50313373e+00  2.50568820e+00  2.51382414e+00
  2.51781248e+00  2.52414929e+00  2.53377206e+00  2.54100535e+00
  2.55527786e+00  2.56246636e+00  2.57143209e+00  2.57691293e+00
  2.59352187e+00  2.60739855e+00  2.60773279e+00  2.62455899e+00
  2.63061784e+00  2.63497400e+00  2.63683443e+00  2.64297369e+00
  2.64544572e+00  2.65734440e+00  2.66856004e+00  2.67169386e+00
  2.67657317e+00  2.68085749e+00  2.68323278e+00  2.69094413e+00
  2.69274944e+00  2.70003632e+00  2.70408570e+00  2.70555994e+00
  2.71214208e+00  2.71662856e+00  2.73051004e+00  2.73856875e+00
  2.74018582e+00  2.74262224e+00  2.74768563e+00  2.75112500e+00
  2.75336277e+00  2.75446765e+00  2.76026941e+00  2.76611762e+00
  2.77160814e+00  2.77319666e+00  2.77787053e+00  2.79099589e+00
  2.79637138e+00  2.79990966e+00  2.80264228e+00  2.80652905e+00
  2.80802036e+00  2.81367813e+00  2.81902286e+00  2.82187284e+00
  2.82756077e+00  2.82853237e+00  2.83791605e+00  2.84248438e+00
  2.84621091e+00  2.84944792e+00  2.85274908e+00  2.85810188e+00
  2.85915950e+00  2.86468054e+00  2.86702911e+00  2.87400293e+00
  2.88073927e+00  2.88505822e+00  2.88917829e+00  2.89238280e+00
  2.89607268e+00  2.90072964e+00  2.90586147e+00  2.91094437e+00
  2.91259377e+00  2.92094598e+00  2.92206657e+00  2.92877215e+00
  2.93112402e+00  2.93393463e+00  2.94035506e+00  2.94380821e+00
  2.94738140e+00  2.95124854e+00  2.95293498e+00  2.95453769e+00
  2.96040069e+00  2.96307248e+00  2.96782280e+00  2.97282860e+00
  2.97456917e+00  2.99144314e+00  2.99551981e+00  2.99939265e+00
  3.00125204e+00  3.00752930e+00  3.01269310e+00  3.01674728e+00
  3.02358820e+00  3.02777865e+00  3.03026150e+00  3.04051978e+00
  3.04845311e+00  3.05063508e+00  3.06058063e+00  3.06312868e+00
  3.06790598e+00  3.07651861e+00  3.08053725e+00  3.08411842e+00
  3.09310542e+00  3.09549013e+00  3.10020461e+00  3.11506328e+00
  3.11913623e+00  3.12475842e+00  3.13523310e+00  3.14362533e+00
  3.15271475e+00  3.15344041e+00  3.16076661e+00  3.16410506e+00
  3.17913594e+00  3.18104640e+00  3.18683738e+00  3.19383080e+00
  3.19949423e+00  3.20306854e+00  3.20748294e+00  3.21033341e+00
  3.21255115e+00  3.21710181e+00  3.22113104e+00  3.22416001e+00
  3.22631124e+00  3.23450837e+00  3.23661662e+00  3.24362362e+00
  3.24567697e+00  3.24848501e+00  3.25132940e+00  3.25313183e+00
  3.25484911e+00  3.26226522e+00  3.26492162e+00  3.26818998e+00
  3.26974731e+00  3.27513875e+00  3.28580158e+00  3.28913479e+00
  3.29192433e+00  3.30011307e+00  3.30232772e+00  3.31747156e+00
  3.32260945e+00  3.32556052e+00  3.33430474e+00  3.33544852e+00
  3.33945613e+00  3.34655794e+00  3.34775650e+00  3.35279383e+00
  3.36056450e+00  3.36824387e+00  3.37366905e+00  3.37936514e+00
  3.38081830e+00  3.38398723e+00  3.39014326e+00  3.39093727e+00
  3.40120748e+00  3.41214769e+00  3.41733416e+00  3.41786113e+00
  3.42544027e+00  3.42755617e+00  3.42892848e+00  3.43287713e+00
  3.43425097e+00  3.43871964e+00  3.44145020e+00  3.44555299e+00
  3.45325065e+00  3.45928358e+00  3.46888518e+00  3.47236696e+00
  3.47489953e+00  3.47989077e+00  3.48286214e+00  3.48617723e+00
  3.49010202e+00  3.49708581e+00  3.49881940e+00  3.50353252e+00
  3.50593613e+00  3.50913277e+00  3.51402272e+00  3.51594816e+00
  3.52143267e+00  3.52754685e+00  3.53220595e+00  3.53609498e+00
  3.53760369e+00  3.53842074e+00  3.54862015e+00  3.55000571e+00
  3.55243889e+00  3.56090328e+00  3.56129513e+00  3.56850952e+00
  3.57972145e+00  3.58470428e+00  3.59028695e+00  3.59290952e+00
  3.59841194e+00  3.60201348e+00  3.60414596e+00  3.60550356e+00
  3.61383426e+00  3.61695313e+00  3.62367912e+00  3.63335923e+00
  3.63406729e+00  3.63955680e+00  3.64920850e+00  3.65592025e+00
  3.66054746e+00  3.66279815e+00  3.66678897e+00  3.67228670e+00
  3.67845645e+00  3.68358138e+00  3.69507139e+00  3.70384411e+00
  3.70758092e+00  3.72620568e+00  3.74021342e+00  3.74976277e+00
  3.75641267e+00  3.76152001e+00  3.76276865e+00  3.77142240e+00
  3.77450182e+00  3.78980903e+00  3.79515116e+00  3.80642197e+00
  3.81593123e+00  3.82848856e+00  3.83092225e+00  3.83184267e+00
  3.84637886e+00  3.84996490e+00  3.85391460e+00  3.86226020e+00
  3.86601739e+00  3.88040758e+00  3.89296026e+00  3.90364297e+00
  3.91070939e+00  3.91383185e+00  3.92981431e+00  3.96269802e+00
  3.97559211e+00  3.98743753e+00  3.99812069e+00  4.00315753e+00
  4.01204302e+00  4.01417091e+00  4.02065941e+00  4.04422091e+00
  4.04986046e+00  4.06240913e+00  4.08467163e+00  4.08652893e+00
  4.09314561e+00  4.09770004e+00  4.10071500e+00  4.10846661e+00
  4.11523112e+00  4.12291235e+00  4.12326666e+00  4.12604462e+00
  4.13032515e+00  4.13729544e+00  4.15646735e+00  4.15963758e+00
  4.16476852e+00  4.17142889e+00  4.18076366e+00  4.18493678e+00
  4.19085407e+00  4.20126086e+00  4.21441925e+00  4.22015130e+00
  4.22224985e+00  4.23223391e+00  4.24978502e+00  4.25817108e+00
  4.26200778e+00  4.26510585e+00  4.27307130e+00  4.27496239e+00
  4.28043285e+00  4.28389853e+00  4.28818702e+00  4.28962506e+00
  4.29895434e+00  4.30579983e+00  4.32192262e+00  4.32750715e+00
  4.33215299e+00  4.33497685e+00  4.34256563e+00  4.35442242e+00
  4.36841844e+00  4.37813920e+00  4.38385000e+00  4.38980649e+00
  4.39005685e+00  4.39629862e+00  4.39788808e+00  4.40358549e+00
  4.41181171e+00  4.41951389e+00  4.43331979e+00  4.44320097e+00
  4.44963514e+00  4.47026103e+00  4.47588808e+00  4.47812199e+00
  4.50529898e+00  4.51137168e+00  4.53923115e+00  4.55042908e+00
  4.57989505e+00  4.59148091e+00  4.60514934e+00  4.60586881e+00
  4.64928271e+00  4.65688052e+00  4.66228663e+00  4.68185483e+00
  4.68337303e+00  4.70202012e+00  4.70292991e+00  4.73084340e+00
  4.74522719e+00  4.75699980e+00  4.77880493e+00  4.78636186e+00
  4.81435250e+00  4.82023782e+00  4.82312903e+00  4.84576563e+00
  4.85430259e+00  4.85603472e+00  4.87530656e+00  4.89351745e+00
  4.90059183e+00  4.91748093e+00  4.92815682e+00  4.93829411e+00
  4.94089042e+00  4.95958425e+00  4.96256616e+00  4.97927114e+00
  4.98364938e+00  4.98432572e+00  4.99421511e+00  5.00627838e+00
  5.01547022e+00  5.02334094e+00  5.02467957e+00  5.05904816e+00
  5.07181937e+00  5.08227052e+00  5.11708458e+00  5.12622097e+00
  5.15170071e+00  5.15298426e+00  5.16293588e+00  5.18843834e+00
  5.19596738e+00  5.21429667e+00  5.22228230e+00  5.23010942e+00
  5.27337473e+00  5.28850851e+00  5.30434404e+00  5.31338608e+00
  5.32416274e+00  5.33714093e+00  5.34445753e+00  5.35719368e+00
  5.36386427e+00  5.36835342e+00  5.39209023e+00  5.40728578e+00
  5.41342412e+00  5.41716146e+00  5.43774790e+00  5.49037692e+00
  5.51622268e+00  5.54052247e+00  5.56579242e+00  5.60091523e+00
  5.62995208e+00  5.65280005e+00  5.65621954e+00  5.66410047e+00
  5.67922555e+00  5.70113738e+00  5.70994495e+00  5.71910915e+00
  5.73575825e+00  5.75064087e+00  5.80427748e+00  5.86020647e+00
  5.88308137e+00  5.91793369e+00  5.92779618e+00  6.03269345e+00
  6.08234734e+00  6.12968127e+00  6.13150697e+00  6.17181103e+00
  6.24369419e+00  8.98190778e+00  9.54971153e+00  9.58779682e+00
  2.03555065e+01  2.22116599e+01  2.22515093e+01  2.23629671e+01
  2.24616341e+01  2.25988673e+01  2.26104070e+01  2.26160878e+01
  2.26171513e+01  2.26697182e+01  2.27007914e+01  2.27524988e+01
  2.27655702e+01  2.27777551e+01  2.27903698e+01  2.27926630e+01
  2.27992849e+01  2.28079704e+01  2.28355956e+01  2.28536079e+01
  2.28903267e+01  2.30081981e+01  2.30380621e+01  2.31808233e+01
  2.31944900e+01  2.32362206e+01  2.33708433e+01  3.24165476e+01
  3.24961513e+01  3.32640157e+01]
nelec by numeric integration = 212.0001765924042
    CPU time for vxc    173.77 sec, wall time     11.79 sec
    CPU time for df vj and vk    855.16 sec, wall time     66.27 sec
    CPU time for df vj and vk    658.28 sec, wall time     43.05 sec
E1 = -7291.057352342603  Ecoul = 3323.0778121392177  Exc = -194.32155088326857
Extra cycle  E= -1564.74153756699  delta_E= -5.46e-12  |g|= 5.38e-06  |ddm|= 8.96e-06
    CPU time for scf_cycle   6256.13 sec, wall time    504.50 sec
    CPU time for SCF   6256.14 sec, wall time    504.50 sec
converged SCF energy = -1564.74153756699
SCF Done after  504.5016 seconds
after SCF memory used: 20955.47265625 MB
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
Converting <class 'pyscf.df.df_jk.density_fit.<locals>.DFHF'> to RHF
a_x = 0.56
beta = 8.0
alpha = 4.58
hdiag (100064,)
n_occ =  106
n_vir =  944
max_vir =  268
Q-Gamma tensors building time = 21.5504
after Q matrix memory used: 21581.4375 MB
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 5
Initial guess:   sTDA
Preconditioner:  sTDA
A matrix size =  100064 * 100064
sTDA nstate = 10
sTDA A diagonalization: threshold = 0.001 ; in 10 steps  7.0325 seconds
sTDA excitation energies:
[3.48630174 4.22440661 4.4382301  4.47530941 4.67577415 4.7577511
 4.91464282 4.91541064 4.92831754 5.15695292]
Intial guess time: 7.1377 seconds
    CPU time for df vj and vk   8437.62 sec, wall time    595.01 sec
    CPU time for df vj and vk   6523.47 sec, wall time    428.87 sec
Iteration  0
subspace size:  10
maximum residual norm 0.12556071047094988
sTDA Preconditioning Done after  15 steps;  3.0173 seconds
subgencost 0.3375 11.18 %
mvcost 1.6348 54.18 %
GScost 0.5843 19.36 %
subcost 0.0267 0.88 %
m,new_m 10 15
    CPU time for df vj and vk   4206.83 sec, wall time    299.69 sec
    CPU time for df vj and vk   3280.17 sec, wall time    216.36 sec
new generated guesses: 5
Iteration  1
subspace size:  15
maximum residual norm 0.051176650447565544
sTDA Preconditioning Done after  11 steps;  2.8933 seconds
subgencost 0.2607 9.01 %
mvcost 1.6535 57.15 %
GScost 0.5466 18.89 %
subcost 0.0106 0.37 %
m,new_m 15 20
    CPU time for df vj and vk   4215.07 sec, wall time    300.20 sec
    CPU time for df vj and vk   3259.56 sec, wall time    213.61 sec
new generated guesses: 5
Iteration  2
subspace size:  20
maximum residual norm 0.02255793091339183
sTDA Preconditioning Done after  9 steps;  2.5365 seconds
subgencost 0.1755 6.92 %
mvcost 1.5196 59.91 %
GScost 0.4713 18.58 %
subcost 0.0084 0.33 %
m,new_m 20 25
    CPU time for df vj and vk   4211.01 sec, wall time    301.46 sec
    CPU time for df vj and vk   3258.17 sec, wall time    213.65 sec
new generated guesses: 5
Iteration  3
subspace size:  25
maximum residual norm 0.007799808983032585
sTDA Preconditioning Done after  10 steps;  2.3233 seconds
subgencost 0.1904 8.2 %
mvcost 1.2895 55.5 %
GScost 0.4198 18.07 %
subcost 0.0091 0.39 %
m,new_m 25 30
    CPU time for df vj and vk   4189.50 sec, wall time    298.95 sec
    CPU time for df vj and vk   3256.04 sec, wall time    213.99 sec
new generated guesses: 5
Iteration  4
subspace size:  30
maximum residual norm 0.0022802392730354695
sTDA Preconditioning Done after  12 steps;  2.4316 seconds
subgencost 0.2443 10.05 %
mvcost 1.3641 56.1 %
GScost 0.4252 17.49 %
subcost 0.0111 0.45 %
m,new_m 30 35
    CPU time for df vj and vk   4208.44 sec, wall time    301.20 sec
    CPU time for df vj and vk   3265.78 sec, wall time    213.96 sec
new generated guesses: 5
Iteration  5
subspace size:  35
maximum residual norm 0.0006461079449619049
sTDA Preconditioning Done after  10 steps;  2.6016 seconds
subgencost 0.2117 8.14 %
mvcost 1.5422 59.28 %
GScost 0.4735 18.2 %
subcost 0.0093 0.36 %
m,new_m 35 40
    CPU time for df vj and vk   4195.43 sec, wall time    298.53 sec
    CPU time for df vj and vk   3252.71 sec, wall time    212.25 sec
new generated guesses: 5
Iteration  6
subspace size:  40
maximum residual norm 0.00017028456763672293
sTDA Preconditioning Done after  17 steps;  3.7659 seconds
subgencost 0.4754 12.62 %
mvcost 1.979 52.55 %
GScost 0.7611 20.21 %
subcost 0.0212 0.56 %
m,new_m 40 45
    CPU time for df vj and vk   4209.88 sec, wall time    302.11 sec
    CPU time for df vj and vk   3255.69 sec, wall time    213.20 sec
new generated guesses: 5
Iteration  7
subspace size:  45
maximum residual norm 4.3999039260533386e-05
sTDA Preconditioning Done after  11 steps;  0.9818 seconds
subgencost 0.0781 7.96 %
mvcost 0.5821 59.29 %
GScost 0.1224 12.47 %
subcost 0.0052 0.53 %
m,new_m 45 47
    CPU time for df vj and vk   1671.82 sec, wall time    122.23 sec
    CPU time for df vj and vk   1307.77 sec, wall time     86.02 sec
new generated guesses: 2
Iteration  8
subspace size:  47
maximum residual norm 1.1592314866206598e-05
sTDA Preconditioning Done after  8 steps;  0.3117 seconds
subgencost 0.0216 6.93 %
mvcost 0.1902 61.03 %
GScost 0.0182 5.85 %
subcost 0.0026 0.84 %
m,new_m 47 48
    CPU time for df vj and vk    871.94 sec, wall time     67.44 sec
    CPU time for df vj and vk    664.84 sec, wall time     44.01 sec
new generated guesses: 1
Iteration  9
subspace size:  48
maximum residual norm 7.189969219902218e-06
Davidson procedure aborted
Davidson done after  5621.5194 seconds
Total steps = 10
Final subspace shape =  (48, 48)
Preconditioning time: 20.9653 0.37 %
In-house Davidson time: 5621.5517 seconds
Excited State energies (eV) =
[3.70195585 4.35055233 4.64628011 4.66213651 4.89729768]
|---------------   In-house Developed Davidson Done   -----------|
-------------------------------------------------------------------
|---------------   In-house Developed Davidson Starts   -----------|
Residual conv = 1e-05
Number of excited states = 5
Initial guess:   Adiag
Preconditioner:  Adiag
A matrix size =  100064 * 100064
Intial guess time: 0.0123 seconds
    CPU time for df vj and vk   8391.90 sec, wall time    590.85 sec
    CPU time for df vj and vk   6513.75 sec, wall time    426.19 sec
Iteration  0
subspace size:  10
maximum residual norm 0.12283285466591425
m,new_m 10 15
    CPU time for df vj and vk   4204.99 sec, wall time    297.81 sec
    CPU time for df vj and vk   3249.51 sec, wall time    212.99 sec
new generated guesses: 5
Iteration  1
subspace size:  15
maximum residual norm 0.057006325623440685
m,new_m 15 20
    CPU time for df vj and vk   4199.99 sec, wall time    298.83 sec
    CPU time for df vj and vk   3284.36 sec, wall time    216.34 sec
new generated guesses: 5
Iteration  2
subspace size:  20
maximum residual norm 0.029659300769370157
m,new_m 20 25
    CPU time for df vj and vk   4180.71 sec, wall time    297.06 sec
    CPU time for df vj and vk   3269.14 sec, wall time    214.51 sec
new generated guesses: 5
Iteration  3
subspace size:  25
maximum residual norm 0.02005815983815679
m,new_m 25 30
    CPU time for df vj and vk   4209.35 sec, wall time    299.58 sec
    CPU time for df vj and vk   3262.83 sec, wall time    214.44 sec
new generated guesses: 5
Iteration  4
subspace size:  30
maximum residual norm 0.010191871907093487
m,new_m 30 35
    CPU time for df vj and vk   4185.99 sec, wall time    297.82 sec
    CPU time for df vj and vk   3276.59 sec, wall time    214.65 sec
new generated guesses: 5
Iteration  5
subspace size:  35
maximum residual norm 0.004659709764515343
m,new_m 35 40
    CPU time for df vj and vk   4188.61 sec, wall time    297.64 sec
    CPU time for df vj and vk   3266.24 sec, wall time    213.62 sec
new generated guesses: 5
Iteration  6
subspace size:  40
maximum residual norm 0.002734165173731701
m,new_m 40 45
    CPU time for df vj and vk   4205.46 sec, wall time    299.82 sec
    CPU time for df vj and vk   3283.73 sec, wall time    215.54 sec
new generated guesses: 5
Iteration  7
subspace size:  45
maximum residual norm 0.0015435936876379605
m,new_m 45 50
    CPU time for df vj and vk   4190.49 sec, wall time    298.54 sec
    CPU time for df vj and vk   3267.79 sec, wall time    214.15 sec
new generated guesses: 5
Iteration  8
subspace size:  50
maximum residual norm 0.0009830525471129965
m,new_m 50 55
    CPU time for df vj and vk   4200.03 sec, wall time    298.52 sec
    CPU time for df vj and vk   3269.73 sec, wall time    213.70 sec
new generated guesses: 5
Iteration  9
subspace size:  55
maximum residual norm 0.0009528913813454712
m,new_m 55 60
    CPU time for df vj and vk   4195.19 sec, wall time    299.09 sec
    CPU time for df vj and vk   3267.66 sec, wall time    214.40 sec
new generated guesses: 5
Iteration  10
subspace size:  60
maximum residual norm 0.0009509666648288706
m,new_m 60 65
    CPU time for df vj and vk   4180.57 sec, wall time    297.02 sec
    CPU time for df vj and vk   3252.35 sec, wall time    213.54 sec
new generated guesses: 5
Iteration  11
subspace size:  65
maximum residual norm 0.0008340364859304131
m,new_m 65 70
    CPU time for df vj and vk   4206.29 sec, wall time    299.93 sec
    CPU time for df vj and vk   3282.15 sec, wall time    215.35 sec
new generated guesses: 5
Iteration  12
subspace size:  70
maximum residual norm 0.00047049939625494935
m,new_m 70 73
    CPU time for df vj and vk   2505.44 sec, wall time    179.97 sec
    CPU time for df vj and vk   1952.05 sec, wall time    127.48 sec
new generated guesses: 3
Iteration  13
subspace size:  73
maximum residual norm 0.0003110420336697179
m,new_m 73 76
    CPU time for df vj and vk   2517.40 sec, wall time    182.42 sec
    CPU time for df vj and vk   1964.96 sec, wall time    128.84 sec
new generated guesses: 3
Iteration  14
subspace size:  76
maximum residual norm 0.00017759420530459377
m,new_m 76 78
    CPU time for df vj and vk   1681.27 sec, wall time    122.90 sec
    CPU time for df vj and vk   1308.40 sec, wall time     85.45 sec
new generated guesses: 2
Iteration  15
subspace size:  78
maximum residual norm 8.214365005010805e-05
m,new_m 78 80
    CPU time for df vj and vk   1692.79 sec, wall time    125.38 sec
    CPU time for df vj and vk   1303.85 sec, wall time     86.44 sec
new generated guesses: 2
Iteration  16
subspace size:  80
maximum residual norm 4.6463582866488445e-05
m,new_m 80 81
    CPU time for df vj and vk    858.75 sec, wall time     65.95 sec
    CPU time for df vj and vk    663.38 sec, wall time     43.75 sec
new generated guesses: 1
Iteration  17
subspace size:  81
maximum residual norm 5.3514119528103855e-05
m,new_m 81 82
    CPU time for df vj and vk    857.16 sec, wall time     66.04 sec
    CPU time for df vj and vk    651.31 sec, wall time     42.45 sec
new generated guesses: 1
Iteration  18
subspace size:  82
maximum residual norm 0.00010228175766574307
m,new_m 82 83
    CPU time for df vj and vk    862.67 sec, wall time     66.13 sec
    CPU time for df vj and vk    654.10 sec, wall time     42.74 sec
new generated guesses: 1
Iteration  19
subspace size:  83
maximum residual norm 0.000341086756653863
m,new_m 83 84
    CPU time for df vj and vk    869.22 sec, wall time     67.48 sec
    CPU time for df vj and vk    655.03 sec, wall time     43.06 sec
new generated guesses: 1
Iteration  20
subspace size:  84
maximum residual norm 0.020271182798624027
m,new_m 84 85
    CPU time for df vj and vk    849.16 sec, wall time     63.97 sec
    CPU time for df vj and vk    653.78 sec, wall time     43.33 sec
new generated guesses: 1
Iteration  21
subspace size:  85
maximum residual norm 0.008302157168707023
m,new_m 85 86
    CPU time for df vj and vk    873.48 sec, wall time     66.83 sec
    CPU time for df vj and vk    672.70 sec, wall time     44.72 sec
new generated guesses: 1
Iteration  22
subspace size:  86
maximum residual norm 0.0033876138484318003
m,new_m 86 87
    CPU time for df vj and vk    862.44 sec, wall time     66.15 sec
    CPU time for df vj and vk    651.56 sec, wall time     42.97 sec
new generated guesses: 1
Iteration  23
subspace size:  87
maximum residual norm 0.00141101448745718
m,new_m 87 88
    CPU time for df vj and vk    883.68 sec, wall time     68.61 sec
    CPU time for df vj and vk    651.08 sec, wall time     42.67 sec
new generated guesses: 1
Iteration  24
subspace size:  88
maximum residual norm 0.0007385418927992989
m,new_m 88 89
    CPU time for df vj and vk    869.47 sec, wall time     67.25 sec
    CPU time for df vj and vk    651.26 sec, wall time     42.78 sec
new generated guesses: 1
Iteration  25
subspace size:  89
maximum residual norm 0.00037448878568794675
m,new_m 89 90
    CPU time for df vj and vk    852.80 sec, wall time     64.88 sec
    CPU time for df vj and vk    652.41 sec, wall time     43.01 sec
new generated guesses: 1
Iteration  26
subspace size:  90
maximum residual norm 0.00024798701590926666
m,new_m 90 91
    CPU time for df vj and vk    863.29 sec, wall time     67.43 sec
    CPU time for df vj and vk    658.56 sec, wall time     43.51 sec
new generated guesses: 1
Iteration  27
subspace size:  91
maximum residual norm 0.00016383789822388824
m,new_m 91 92
    CPU time for df vj and vk    871.78 sec, wall time     66.63 sec
    CPU time for df vj and vk    661.77 sec, wall time     43.30 sec
new generated guesses: 1
Iteration  28
subspace size:  92
maximum residual norm 0.00010306471414365307
m,new_m 92 93
    CPU time for df vj and vk    865.76 sec, wall time     65.60 sec
    CPU time for df vj and vk    655.87 sec, wall time     43.51 sec
new generated guesses: 1
Iteration  29
subspace size:  93
maximum residual norm 6.450095300659597e-05
m,new_m 93 94
    CPU time for df vj and vk    874.30 sec, wall time     66.32 sec
    CPU time for df vj and vk    651.62 sec, wall time     42.45 sec
new generated guesses: 1
Iteration  30
subspace size:  94
maximum residual norm 2.8976775751738114e-05
m,new_m 94 95
    CPU time for df vj and vk    855.34 sec, wall time     65.50 sec
    CPU time for df vj and vk    649.01 sec, wall time     42.46 sec
new generated guesses: 1
Iteration  31
subspace size:  95
maximum residual norm 1.0154659402919538e-05
m,new_m 95 96
    CPU time for df vj and vk    852.74 sec, wall time     65.32 sec
    CPU time for df vj and vk    650.94 sec, wall time     42.44 sec
new generated guesses: 1
Iteration  32
subspace size:  96
maximum residual norm 5.843346869491357e-06
Davidson procedure aborted
Davidson done after  11334.1574 seconds
Total steps = 33
Final subspace shape =  (96, 96)
Preconditioning time: 0.3927 0.0 %
In-house Davidson time: 11334.1902 seconds
Excited State energies (eV) =
[3.70195585 4.35055233 4.64628011 4.66213651 4.89729767]
|---------------   In-house Developed Davidson Done   -----------|
xyzfile = 49_Triphenylamino_5.xyz
checkfile = True
method = RKS
functional = wb97x
basis_set = def2-tzvp
density_fit = True
grid_level = 3
nstates = 5
pytd = False
TDA = True
TDDFT = False
dynpol = False
dynpol_omega = []
stapol = False
sTDA = False
sTDDFT = False
Truncate_test = False
truncate_virtual = 40.0
TDA_options = [0, 1]
TDDFT_options = [0]
dynpol_options = [0]
stapol_options = [0]
TDA_tolerance = 1e-05
TDDFT_tolerance = 1e-05
dynpol_tolerance = 1e-05
stapol_tolerance = 1e-05
max = 35
TDA_initialTOL = 0.001
TDDFT_initialTOL = 0.001
dynpol_initprecTOL = 0.01
stapol_initprecTOL = 0.01
TDA_precondTOL = 0.01
TDDFT_precondTOL = 0.01
TDA_extrainitial = 8
TDDFT_extrainitial = 8
TDDFT_extrainitial_3n = False
eigensolver_tol = 1e-05
memory = 50000
verbose = 5
beta = []
alpha = []
